# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_OrglabExt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_OrglabExt')
    _OrglabExt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_OrglabExt', [dirname(__file__)])
        except ImportError:
            import _OrglabExt
            return _OrglabExt
        try:
            _mod = imp.load_module('_OrglabExt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _OrglabExt = swig_import_helper()
    del swig_import_helper
else:
    import _OrglabExt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OrglabExt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _OrglabExt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OrglabExt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OrglabExt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OrglabExt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OrglabExt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OrglabExt.SwigPyIterator_copy(self)

    def next(self):
        return _OrglabExt.SwigPyIterator_next(self)

    def __next__(self):
        return _OrglabExt.SwigPyIterator___next__(self)

    def previous(self):
        return _OrglabExt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OrglabExt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OrglabExt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OrglabExt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OrglabExt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OrglabExt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OrglabExt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OrglabExt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _OrglabExt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OrglabExt.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OrglabExt.IntVector___nonzero__(self)

    def __bool__(self):
        return _OrglabExt.IntVector___bool__(self)

    def __len__(self):
        return _OrglabExt.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _OrglabExt.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OrglabExt.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OrglabExt.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OrglabExt.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OrglabExt.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OrglabExt.IntVector___setitem__(self, *args)

    def pop(self):
        return _OrglabExt.IntVector_pop(self)

    def append(self, x):
        return _OrglabExt.IntVector_append(self, x)

    def empty(self):
        return _OrglabExt.IntVector_empty(self)

    def size(self):
        return _OrglabExt.IntVector_size(self)

    def swap(self, v):
        return _OrglabExt.IntVector_swap(self, v)

    def begin(self):
        return _OrglabExt.IntVector_begin(self)

    def end(self):
        return _OrglabExt.IntVector_end(self)

    def rbegin(self):
        return _OrglabExt.IntVector_rbegin(self)

    def rend(self):
        return _OrglabExt.IntVector_rend(self)

    def clear(self):
        return _OrglabExt.IntVector_clear(self)

    def get_allocator(self):
        return _OrglabExt.IntVector_get_allocator(self)

    def pop_back(self):
        return _OrglabExt.IntVector_pop_back(self)

    def erase(self, *args):
        return _OrglabExt.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _OrglabExt.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OrglabExt.IntVector_push_back(self, x)

    def front(self):
        return _OrglabExt.IntVector_front(self)

    def back(self):
        return _OrglabExt.IntVector_back(self)

    def assign(self, n, x):
        return _OrglabExt.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _OrglabExt.IntVector_resize(self, *args)

    def insert(self, *args):
        return _OrglabExt.IntVector_insert(self, *args)

    def reserve(self, n):
        return _OrglabExt.IntVector_reserve(self, n)

    def capacity(self):
        return _OrglabExt.IntVector_capacity(self)
    __swig_destroy__ = _OrglabExt.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _OrglabExt.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OrglabExt.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OrglabExt.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _OrglabExt.DoubleVector___bool__(self)

    def __len__(self):
        return _OrglabExt.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _OrglabExt.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OrglabExt.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OrglabExt.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OrglabExt.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OrglabExt.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OrglabExt.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _OrglabExt.DoubleVector_pop(self)

    def append(self, x):
        return _OrglabExt.DoubleVector_append(self, x)

    def empty(self):
        return _OrglabExt.DoubleVector_empty(self)

    def size(self):
        return _OrglabExt.DoubleVector_size(self)

    def swap(self, v):
        return _OrglabExt.DoubleVector_swap(self, v)

    def begin(self):
        return _OrglabExt.DoubleVector_begin(self)

    def end(self):
        return _OrglabExt.DoubleVector_end(self)

    def rbegin(self):
        return _OrglabExt.DoubleVector_rbegin(self)

    def rend(self):
        return _OrglabExt.DoubleVector_rend(self)

    def clear(self):
        return _OrglabExt.DoubleVector_clear(self)

    def get_allocator(self):
        return _OrglabExt.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _OrglabExt.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _OrglabExt.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _OrglabExt.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OrglabExt.DoubleVector_push_back(self, x)

    def front(self):
        return _OrglabExt.DoubleVector_front(self)

    def back(self):
        return _OrglabExt.DoubleVector_back(self)

    def assign(self, n, x):
        return _OrglabExt.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _OrglabExt.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _OrglabExt.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _OrglabExt.DoubleVector_reserve(self, n)

    def capacity(self):
        return _OrglabExt.DoubleVector_capacity(self)
    __swig_destroy__ = _OrglabExt.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _OrglabExt.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OrglabExt.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OrglabExt.StringVector___nonzero__(self)

    def __bool__(self):
        return _OrglabExt.StringVector___bool__(self)

    def __len__(self):
        return _OrglabExt.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _OrglabExt.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OrglabExt.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OrglabExt.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OrglabExt.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OrglabExt.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OrglabExt.StringVector___setitem__(self, *args)

    def pop(self):
        return _OrglabExt.StringVector_pop(self)

    def append(self, x):
        return _OrglabExt.StringVector_append(self, x)

    def empty(self):
        return _OrglabExt.StringVector_empty(self)

    def size(self):
        return _OrglabExt.StringVector_size(self)

    def swap(self, v):
        return _OrglabExt.StringVector_swap(self, v)

    def begin(self):
        return _OrglabExt.StringVector_begin(self)

    def end(self):
        return _OrglabExt.StringVector_end(self)

    def rbegin(self):
        return _OrglabExt.StringVector_rbegin(self)

    def rend(self):
        return _OrglabExt.StringVector_rend(self)

    def clear(self):
        return _OrglabExt.StringVector_clear(self)

    def get_allocator(self):
        return _OrglabExt.StringVector_get_allocator(self)

    def pop_back(self):
        return _OrglabExt.StringVector_pop_back(self)

    def erase(self, *args):
        return _OrglabExt.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _OrglabExt.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OrglabExt.StringVector_push_back(self, x)

    def front(self):
        return _OrglabExt.StringVector_front(self)

    def back(self):
        return _OrglabExt.StringVector_back(self)

    def assign(self, n, x):
        return _OrglabExt.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _OrglabExt.StringVector_resize(self, *args)

    def insert(self, *args):
        return _OrglabExt.StringVector_insert(self, *args)

    def reserve(self, n):
        return _OrglabExt.StringVector_reserve(self, n)

    def capacity(self):
        return _OrglabExt.StringVector_capacity(self)
    __swig_destroy__ = _OrglabExt.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _OrglabExt.StringVector_swigregister
StringVector_swigregister(StringVector)

class OriginPyObjBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginPyObjBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OriginPyObjBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginPyObjBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginPyObjBase
    __del__ = lambda self: None
OriginPyObjBase_swigregister = _OrglabExt.OriginPyObjBase_swigregister
OriginPyObjBase_swigregister(OriginPyObjBase)

ARRAY2D_VARIANT = _OrglabExt.ARRAY2D_VARIANT
ARRAY1D_NUMERIC = _OrglabExt.ARRAY1D_NUMERIC
ARRAY2D_NUMERIC = _OrglabExt.ARRAY2D_NUMERIC
ARRAY2D_TEXT = _OrglabExt.ARRAY2D_TEXT
ARRAY2D_TEXT_FULL_PRECISION = _OrglabExt.ARRAY2D_TEXT_FULL_PRECISION
ARRAY1D_VARIANT = _OrglabExt.ARRAY1D_VARIANT
ARRAY1D_TEXT = _OrglabExt.ARRAY1D_TEXT
ARRAY1D_TEXT_FULL_PRECISION = _OrglabExt.ARRAY1D_TEXT_FULL_PRECISION
ARRAY1D_STR = _OrglabExt.ARRAY1D_STR
ARRAY2D_STR = _OrglabExt.ARRAY2D_STR
ARRAY1D_STR_FULL_PRECISION = _OrglabExt.ARRAY1D_STR_FULL_PRECISION
ARRAY2D_STR_FULL_PRECISION = _OrglabExt.ARRAY2D_STR_FULL_PRECISION
ARRAY1D2D_MASK_BITS = _OrglabExt.ARRAY1D2D_MASK_BITS
ARRAY1D_DICTIONARY = _OrglabExt.ARRAY1D_DICTIONARY
DF_NO_CHANGE = _OrglabExt.DF_NO_CHANGE
DF_DOUBLE = _OrglabExt.DF_DOUBLE
DF_TEXT = _OrglabExt.DF_TEXT
DF_TIME = _OrglabExt.DF_TIME
DF_DATE = _OrglabExt.DF_DATE
DF_TEXT_NUMERIC = _OrglabExt.DF_TEXT_NUMERIC
DF_FLOAT = _OrglabExt.DF_FLOAT
DF_SHORT = _OrglabExt.DF_SHORT
DF_LONG = _OrglabExt.DF_LONG
DF_CHAR = _OrglabExt.DF_CHAR
DF_BYTE = _OrglabExt.DF_BYTE
DF_USHORT = _OrglabExt.DF_USHORT
DF_ULONG = _OrglabExt.DF_ULONG
DF_COMPLEX = _OrglabExt.DF_COMPLEX
VERSION = "1.0.8"
class OriginBase(OriginPyObjBase):
    __swig_setmethods__ = {}
    for _s in [OriginPyObjBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginPyObjBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginBase
    __del__ = lambda self: None

    def GetApplication(self):
        return _OrglabExt.OriginBase_GetApplication(self)

    def GetParent(self):
        return _OrglabExt.OriginBase_GetParent(self)
    Application = property(GetApplication)
    Parent = property(GetParent)
OriginBase_swigregister = _OrglabExt.OriginBase_swigregister
OriginBase_swigregister(OriginBase)

class OriginObject(OriginBase):
    __swig_setmethods__ = {}
    for _s in [OriginBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginObject
    __del__ = lambda self: None

    def __str__(self):
        return _OrglabExt.OriginObject___str__(self)

    def __len__(self):
        return _OrglabExt.OriginObject___len__(self)

    def GetName(self):
        return _OrglabExt.OriginObject_GetName(self)

    def PutName(self, str):
        return _OrglabExt.OriginObject_PutName(self, str)
    SetName = PutName

    def GetLongName(self):
        return _OrglabExt.OriginObject_GetLongName(self)

    def PutLongName(self, str):
        return _OrglabExt.OriginObject_PutLongName(self, str)
    SetLongName = PutLongName

    def Destroy(self):
        return _OrglabExt.OriginObject_Destroy(self)

    def GetShow(self):
        return _OrglabExt.OriginObject_GetShow(self)

    def PutShow(self, bShow):
        return _OrglabExt.OriginObject_PutShow(self, bShow)
    SetShow = PutShow

    def GetIndex(self):
        return _OrglabExt.OriginObject_GetIndex(self)

    def PutIndex(self, nIndex):
        return _OrglabExt.OriginObject_PutIndex(self, nIndex)
    SetIndex = PutIndex

    def GetBinaryStorageNames(self):
        return _OrglabExt.OriginObject_GetBinaryStorageNames(self)

    def GetBinaryStorageData(self, Name, format=0):
        return _OrglabExt.OriginObject_GetBinaryStorageData(self, Name, format)

    def SetBinaryStorageData(self, *args):
        return _OrglabExt.OriginObject_SetBinaryStorageData(self, *args)

    def GetTheme(self):
        return _OrglabExt.OriginObject_GetTheme(self)

    def PutTheme(self, pTheme):
        return _OrglabExt.OriginObject_PutTheme(self, pTheme)
    SetTheme = PutTheme

    def GetMetaData(self, Name, bVisibleToUser):
        return _OrglabExt.OriginObject_GetMetaData(self, Name, bVisibleToUser)

    def SetMetaData(self, xml, Name, bVisibleToUser):
        return _OrglabExt.OriginObject_SetMetaData(self, xml, Name, bVisibleToUser)

    def Execute(self, LabTalkStr):
        return _OrglabExt.OriginObject_Execute(self, LabTalkStr)
    LT_execute = Execute

    def Activate(self):
        return _OrglabExt.OriginObject_Activate(self)
    Name = property(GetName, PutName)
    LongName = property(GetLongName, PutLongName)
    Show = property(GetShow, PutShow)
    Index = property(GetIndex, PutIndex)
    BinaryStorageNames = property(GetBinaryStorageNames)
    Theme = property(GetTheme, PutTheme)
OriginObject_swigregister = _OrglabExt.OriginObject_swigregister
OriginObject_swigregister(OriginObject)

class PageBase(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_PageBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_PageBase
    __del__ = lambda self: None

    def GetType(self):
        return _OrglabExt.PageBase_GetType(self)

    def GetParent(self):
        return _OrglabExt.PageBase_GetParent(self)
    Type = property(GetType)
    Parent = property(GetParent)
PageBase_swigregister = _OrglabExt.PageBase_swigregister
PageBase_swigregister(PageBase)

class Page(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Page, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Page, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Page()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Page
    __del__ = lambda self: None

    def __len__(self):
        return _OrglabExt.Page___len__(self)

    def AddLayer(self, *args):
        return _OrglabExt.Page_AddLayer(self, *args)

    def GetLayers(self):
        return _OrglabExt.Page_GetLayers(self)

    def GetLayer(self, *args):
        return _OrglabExt.Page_GetLayer(self, *args)

    def __iter__(self):
        return _OrglabExt.Page___iter__(self)

    def Preview(self, fname):
        return _OrglabExt.Page_Preview(self, fname)
    Layers = property(GetLayers)

    def __getitem__(self, *args):
        return _OrglabExt.Page___getitem__(self, *args)
Page_swigregister = _OrglabExt.Page_swigregister
Page_swigregister(Page)

class PageBaseI(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageBaseI, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageBaseI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_PageBaseI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_PageBaseI
    __del__ = lambda self: None
PageBaseI_swigregister = _OrglabExt.PageBaseI_swigregister
PageBaseI_swigregister(PageBaseI)

class PageI(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageI, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_PageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_PageI
    __del__ = lambda self: None
PageI_swigregister = _OrglabExt.PageI_swigregister
PageI_swigregister(PageI)

class GraphPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_GraphPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_GraphPage
    __del__ = lambda self: None

    def GetBaseColor(self):
        return _OrglabExt.GraphPage_GetBaseColor(self)

    def PutBaseColor(self, color):
        return _OrglabExt.GraphPage_PutBaseColor(self, color)
    SetBaseColor = PutBaseColor

    def GetGradColor(self):
        return _OrglabExt.GraphPage_GetGradColor(self)

    def PutGradColor(self, color):
        return _OrglabExt.GraphPage_PutGradColor(self, color)
    SetGradColor = PutGradColor

    def GetGradCntrl(self):
        return _OrglabExt.GraphPage_GetGradCntrl(self)

    def PutGradCntrl(self, cntrl):
        return _OrglabExt.GraphPage_PutGradCntrl(self, cntrl)
    SetGradCntrl = PutGradCntrl

    def GetUnits(self):
        return _OrglabExt.GraphPage_GetUnits(self)

    def PutUnits(self, units):
        return _OrglabExt.GraphPage_PutUnits(self, units)
    SetUnits = PutUnits

    def GetWidth(self):
        return _OrglabExt.GraphPage_GetWidth(self)

    def PutWidth(self, dWidth):
        return _OrglabExt.GraphPage_PutWidth(self, dWidth)
    SetWidth = PutWidth

    def GetHeight(self):
        return _OrglabExt.GraphPage_GetHeight(self)

    def PutHeight(self, dHeight):
        return _OrglabExt.GraphPage_PutHeight(self, dHeight)
    SetHeight = PutHeight

    def GetShowData(self):
        return _OrglabExt.GraphPage_GetShowData(self)

    def PutShowData(self, val):
        return _OrglabExt.GraphPage_PutShowData(self, val)
    SetShowData = PutShowData

    def GetShowLabels(self):
        return _OrglabExt.GraphPage_GetShowLabels(self)

    def PutShowLabels(self, val):
        return _OrglabExt.GraphPage_PutShowLabels(self, val)
    SetShowLabels = PutShowLabels

    def GetPAGEVIEWMODE(self):
        return _OrglabExt.GraphPage_GetPAGEVIEWMODE(self)

    def PutPAGEVIEWMODE(self, val):
        return _OrglabExt.GraphPage_PutPAGEVIEWMODE(self, val)
    GetPageViewMode = GetPAGEVIEWMODE
    SetPAGEVIEWMODE = PutPAGEVIEWMODE
    SetPageViewMode = PutPAGEVIEWMODE
    PutPageViewMode = PutPAGEVIEWMODE

    def GetPrintingPrinterName(self):
        return _OrglabExt.GraphPage_GetPrintingPrinterName(self)

    def PutPrintingPrinterName(self, val):
        return _OrglabExt.GraphPage_PutPrintingPrinterName(self, val)
    SetPrintingPrinterName = PutPrintingPrinterName

    def GetPrintingDPI(self):
        return _OrglabExt.GraphPage_GetPrintingDPI(self)

    def PutPrintingDPI(self, val):
        return _OrglabExt.GraphPage_PutPrintingDPI(self, val)
    SetPrintingDPI = PutPrintingDPI

    def GetPrintingNumberOfCopies(self):
        return _OrglabExt.GraphPage_GetPrintingNumberOfCopies(self)

    def PutPrintingNumberOfCopies(self, val):
        return _OrglabExt.GraphPage_PutPrintingNumberOfCopies(self, val)
    SetPrintingNumberOfCopies = PutPrintingNumberOfCopies

    def GetPrintingPaperSource(self):
        return _OrglabExt.GraphPage_GetPrintingPaperSource(self)

    def PutPrintingPaperSource(self, val):
        return _OrglabExt.GraphPage_PutPrintingPaperSource(self, val)
    SetPrintingPaperSource = PutPrintingPaperSource

    def GetExportAuto(self):
        return _OrglabExt.GraphPage_GetExportAuto(self)

    def PutExportAuto(self, val):
        return _OrglabExt.GraphPage_PutExportAuto(self, val)
    SetExportAuto = PutExportAuto

    def GetExportRatio(self):
        return _OrglabExt.GraphPage_GetExportRatio(self)

    def PutExportRatio(self, val):
        return _OrglabExt.GraphPage_PutExportRatio(self, val)
    SetExportRatio = PutExportRatio

    def GetExportMargin(self):
        return _OrglabExt.GraphPage_GetExportMargin(self)

    def PutExportMargin(self, val):
        return _OrglabExt.GraphPage_PutExportMargin(self, val)
    SetExportMargin = PutExportMargin

    def GetExportClip(self):
        return _OrglabExt.GraphPage_GetExportClip(self)

    def PutExportClip(self, val):
        return _OrglabExt.GraphPage_PutExportClip(self, val)
    SetExportClip = PutExportClip

    def GetExportAdvanced(self):
        return _OrglabExt.GraphPage_GetExportAdvanced(self)

    def PutExportAdvanced(self, val):
        return _OrglabExt.GraphPage_PutExportAdvanced(self, val)
    SetExportAdvanced = PutExportAdvanced

    def GetExportChangeResolution(self):
        return _OrglabExt.GraphPage_GetExportChangeResolution(self)

    def PutExportChangeResolution(self, val):
        return _OrglabExt.GraphPage_PutExportChangeResolution(self, val)

    def GetExportResolution(self):
        return _OrglabExt.GraphPage_GetExportResolution(self)

    def PutExportResolution(self, val):
        return _OrglabExt.GraphPage_PutExportResolution(self, val)
    SetExportResolution = PutExportResolution

    def GetLegendsFullName(self):
        return _OrglabExt.GraphPage_GetLegendsFullName(self)

    def PutLegendsFullName(self, val):
        return _OrglabExt.GraphPage_PutLegendsFullName(self, val)
    SetLegendsFullName = PutLegendsFullName

    def GetLegendsAutoUpdate(self):
        return _OrglabExt.GraphPage_GetLegendsAutoUpdate(self)

    def PutLegendsAutoUpdate(self, val):
        return _OrglabExt.GraphPage_PutLegendsAutoUpdate(self, val)
    SetLegendsAutoUpdate = PutLegendsAutoUpdate

    def GetLegendsMultiLayer(self):
        return _OrglabExt.GraphPage_GetLegendsMultiLayer(self)

    def PutLegendsMultiLayer(self, val):
        return _OrglabExt.GraphPage_PutLegendsMultiLayer(self, val)
    SetLegendsMultiLayer = PutLegendsMultiLayer

    def GetLegendsIndicateActive(self):
        return _OrglabExt.GraphPage_GetLegendsIndicateActive(self)

    def PutLegendsIndicateActive(self, val):
        return _OrglabExt.GraphPage_PutLegendsIndicateActive(self, val)
    SetLegendsIndicateActive = PutLegendsIndicateActive

    def GetLegendsSymbolWidth(self):
        return _OrglabExt.GraphPage_GetLegendsSymbolWidth(self)

    def PutLegendsSymbolWidth(self, val):
        return _OrglabExt.GraphPage_PutLegendsSymbolWidth(self, val)
    SetLegendsSymbolWidth = PutLegendsSymbolWidth

    def GetLayers(self):
        return _OrglabExt.GraphPage_GetLayers(self)

    def GetLayer(self, *args):
        return _OrglabExt.GraphPage_GetLayer(self, *args)

    def __getitem__(self, *args):
        return _OrglabExt.GraphPage___getitem__(self, *args)

    def __iter__(self):
        return _OrglabExt.GraphPage___iter__(self)
    Layers = property(GetLayers)
    ExportResolution = property(GetExportResolution, PutExportResolution)
    LegendsFullName = property(GetLegendsFullName, PutLegendsFullName)
    LegendsAutoUpdate = property(GetLegendsAutoUpdate, PutLegendsAutoUpdate)
    LegendsMultiLayer = property(GetLegendsMultiLayer, PutLegendsMultiLayer)
    LegendsIndicateActive = property(GetLegendsIndicateActive, PutLegendsIndicateActive)
    LegendsSymbolWidth = property(GetLegendsSymbolWidth, PutLegendsSymbolWidth)
    BaseColor = property(GetBaseColor, PutBaseColor)
    GradColor = property(GetGradColor, PutGradColor)
    GradCntrl = property(GetGradCntrl, PutGradCntrl)
    Units = property(GetUnits, PutUnits)
    PrintingPrinterName = property(GetPrintingPrinterName, PutPrintingPrinterName)
    PrintingDPI = property(GetPrintingDPI, PutPrintingDPI)
    PrintingNumberOfCopies = property(GetPrintingNumberOfCopies, PutPrintingNumberOfCopies)
    PrintingPaperSource = property(GetPrintingPaperSource, PutPrintingPaperSource)
    ExportAuto = property(GetExportAuto, PutExportAuto)
    ExportRatio = property(GetExportRatio, PutExportRatio)
    ExportMargin = property(GetExportMargin, PutExportMargin)
    ExportClip = property(GetExportClip, PutExportClip)
    PAGEVIEWMODE = property(GetPAGEVIEWMODE, PutPAGEVIEWMODE)
    PageViewMode = property(GetPageViewMode, PutPageViewMode)
    Height = property(GetHeight, PutHeight)
    Width = property(GetWidth, PutWidth)
    ShowData = property(GetShowData, PutShowData)
    ShowLabels = property(GetShowLabels, PutShowLabels)
    ExportAdvanced = property(GetExportAdvanced, PutExportAdvanced)
    ExportChangeResolution = property(GetExportChangeResolution, PutExportChangeResolution)
GraphPage_swigregister = _OrglabExt.GraphPage_swigregister
GraphPage_swigregister(GraphPage)

class GraphPageI(GraphPage):
    __swig_setmethods__ = {}
    for _s in [GraphPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_GraphPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_GraphPageI
    __del__ = lambda self: None
GraphPageI_swigregister = _OrglabExt.GraphPageI_swigregister
GraphPageI_swigregister(GraphPageI)

class LayoutPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_LayoutPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_LayoutPage
    __del__ = lambda self: None
LayoutPage_swigregister = _OrglabExt.LayoutPage_swigregister
LayoutPage_swigregister(LayoutPage)

class LayoutPageI(LayoutPage):
    __swig_setmethods__ = {}
    for _s in [LayoutPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [LayoutPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_LayoutPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_LayoutPageI
    __del__ = lambda self: None
LayoutPageI_swigregister = _OrglabExt.LayoutPageI_swigregister
LayoutPageI_swigregister(LayoutPageI)

class WorksheetPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorksheetPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorksheetPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_WorksheetPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_WorksheetPage
    __del__ = lambda self: None

    def GetLayers(self):
        return _OrglabExt.WorksheetPage_GetLayers(self)

    def GetLayer(self, *args):
        return _OrglabExt.WorksheetPage_GetLayer(self, *args)

    def __iter__(self):
        return _OrglabExt.WorksheetPage___iter__(self)

    def __getitem__(self, *args):
        return _OrglabExt.WorksheetPage___getitem__(self, *args)
    Layers = property(GetLayers)
WorksheetPage_swigregister = _OrglabExt.WorksheetPage_swigregister
WorksheetPage_swigregister(WorksheetPage)

class WorksheetPageI(WorksheetPage):
    __swig_setmethods__ = {}
    for _s in [WorksheetPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorksheetPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [WorksheetPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorksheetPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_WorksheetPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_WorksheetPageI
    __del__ = lambda self: None
WorksheetPageI_swigregister = _OrglabExt.WorksheetPageI_swigregister
WorksheetPageI_swigregister(WorksheetPageI)

class MatrixPage(Page):
    __swig_setmethods__ = {}
    for _s in [Page]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPage, name, value)
    __swig_getmethods__ = {}
    for _s in [Page]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_MatrixPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_MatrixPage
    __del__ = lambda self: None

    def GetLayers(self):
        return _OrglabExt.MatrixPage_GetLayers(self)

    def GetLayer(self, *args):
        return _OrglabExt.MatrixPage_GetLayer(self, *args)

    def __iter__(self):
        return _OrglabExt.MatrixPage___iter__(self)

    def __getitem__(self, *args):
        return _OrglabExt.MatrixPage___getitem__(self, *args)
    Layers = property(GetLayers)
MatrixPage_swigregister = _OrglabExt.MatrixPage_swigregister
MatrixPage_swigregister(MatrixPage)

class MatrixPageI(MatrixPage):
    __swig_setmethods__ = {}
    for _s in [MatrixPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_MatrixPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_MatrixPageI
    __del__ = lambda self: None
MatrixPageI_swigregister = _OrglabExt.MatrixPageI_swigregister
MatrixPageI_swigregister(MatrixPageI)

class NotePage(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotePage, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotePage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_NotePage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_NotePage
    __del__ = lambda self: None

    def GetText(self):
        return _OrglabExt.NotePage_GetText(self)

    def PutText(self, strText):
        return _OrglabExt.NotePage_PutText(self, strText)
    SetText = PutText
    Text = property(GetText, PutText)
NotePage_swigregister = _OrglabExt.NotePage_swigregister
NotePage_swigregister(NotePage)

class NotePageI(NotePage):
    __swig_setmethods__ = {}
    for _s in [NotePage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotePageI, name, value)
    __swig_getmethods__ = {}
    for _s in [NotePage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotePageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_NotePageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_NotePageI
    __del__ = lambda self: None
NotePageI_swigregister = _OrglabExt.NotePageI_swigregister
NotePageI_swigregister(NotePageI)

class ExternalDialogPage(PageBase):
    __swig_setmethods__ = {}
    for _s in [PageBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalDialogPage, name, value)
    __swig_getmethods__ = {}
    for _s in [PageBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalDialogPage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_ExternalDialogPage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_ExternalDialogPage
    __del__ = lambda self: None
ExternalDialogPage_swigregister = _OrglabExt.ExternalDialogPage_swigregister
ExternalDialogPage_swigregister(ExternalDialogPage)

class ExternalDialogPageI(ExternalDialogPage):
    __swig_setmethods__ = {}
    for _s in [ExternalDialogPage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalDialogPageI, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalDialogPage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalDialogPageI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_ExternalDialogPageI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_ExternalDialogPageI
    __del__ = lambda self: None
ExternalDialogPageI_swigregister = _OrglabExt.ExternalDialogPageI_swigregister
ExternalDialogPageI_swigregister(ExternalDialogPageI)

class Layer(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Layer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Layer
    __del__ = lambda self: None

    def __len__(self):
        return _OrglabExt.Layer___len__(self)

    def GetPage(self):
        return _OrglabExt.Layer_GetPage(self)
    GetParent = GetPage

    def GetDataObjectBases(self):
        return _OrglabExt.Layer_GetDataObjectBases(self)
    Parent = property(GetParent)
Layer_swigregister = _OrglabExt.Layer_swigregister
Layer_swigregister(Layer)

class LayerI(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerI, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_LayerI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_LayerI
    __del__ = lambda self: None
LayerI_swigregister = _OrglabExt.LayerI_swigregister
LayerI_swigregister(LayerI)

class LayoutLayer(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_LayoutLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_LayoutLayer
    __del__ = lambda self: None

    def GetPage(self):
        return _OrglabExt.LayoutLayer_GetPage(self)
    GetParent = GetPage
LayoutLayer_swigregister = _OrglabExt.LayoutLayer_swigregister
LayoutLayer_swigregister(LayoutLayer)

class NoteLayer(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoteLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoteLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_NoteLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_NoteLayer
    __del__ = lambda self: None

    def GetPage(self):
        return _OrglabExt.NoteLayer_GetPage(self)
    GetParent = GetPage
NoteLayer_swigregister = _OrglabExt.NoteLayer_swigregister
NoteLayer_swigregister(NoteLayer)

class GraphLayer(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_GraphLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_GraphLayer
    __del__ = lambda self: None

    def AddPlot(self, pPyRange, nPlotType):
        return _OrglabExt.GraphLayer_AddPlot(self, pPyRange, nPlotType)

    def GetDataPlots(self):
        return _OrglabExt.GraphLayer_GetDataPlots(self)

    def GetGraphObjects(self):
        return _OrglabExt.GraphLayer_GetGraphObjects(self)

    def __getitem__(self, *args):
        return _OrglabExt.GraphLayer___getitem__(self, *args)

    def __iter__(self):
        return _OrglabExt.GraphLayer___iter__(self)

    def GetPage(self):
        return _OrglabExt.GraphLayer_GetPage(self)
    GetParent = GetPage
    Parent = property(GetParent)
    DataPlots = property(GetDataPlots)
    GraphObjects = property(GetGraphObjects)
GraphLayer_swigregister = _OrglabExt.GraphLayer_swigregister
GraphLayer_swigregister(GraphLayer)

class GraphLayerI(GraphLayer):
    __swig_setmethods__ = {}
    for _s in [GraphLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphLayerI, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphLayerI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_GraphLayerI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_GraphLayerI
    __del__ = lambda self: None
GraphLayerI_swigregister = _OrglabExt.GraphLayerI_swigregister
GraphLayerI_swigregister(GraphLayerI)

class Datasheet(Layer):
    __swig_setmethods__ = {}
    for _s in [Layer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datasheet, name, value)
    __swig_getmethods__ = {}
    for _s in [Layer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Datasheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Datasheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Datasheet
    __del__ = lambda self: None

    def ClearData(self, nC1=0, nC2=-1):
        return _OrglabExt.Datasheet_ClearData(self, nC1, nC2)

    def GetCols(self):
        return _OrglabExt.Datasheet_GetCols(self)

    def PutCols(self, cols):
        return _OrglabExt.Datasheet_PutCols(self, cols)
    SetCols = PutCols

    def GetRows(self):
        return _OrglabExt.Datasheet_GetRows(self)

    def PutRows(self, rows):
        return _OrglabExt.Datasheet_PutRows(self, rows)
    SetRows = PutRows
    Cols = property(GetCols, PutCols)
    Rows = property(GetRows, PutRows)
Datasheet_swigregister = _OrglabExt.Datasheet_swigregister
Datasheet_swigregister(Datasheet)

class Worksheet(Datasheet):
    __swig_setmethods__ = {}
    for _s in [Datasheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Worksheet, name, value)
    __swig_getmethods__ = {}
    for _s in [Datasheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Worksheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Worksheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Worksheet
    __del__ = lambda self: None

    def GetCell(self, nRow, nCol):
        return _OrglabExt.Worksheet_GetCell(self, nRow, nCol)

    def GetColumns(self):
        return _OrglabExt.Worksheet_GetColumns(self)

    def __iter__(self):
        return _OrglabExt.Worksheet___iter__(self)

    def __getitem__(self, *args):
        return _OrglabExt.Worksheet___getitem__(self, *args)

    def DeleteCol(self, nColIndex):
        return _OrglabExt.Worksheet_DeleteCol(self, nColIndex)

    def SetData(self, *args):
        return _OrglabExt.Worksheet_SetData(self, *args)

    def GetData(self, nRowStart=0, nColStart=0, nRowEnd=-1, nColEnd=-1, format=ARRAY2D_VARIANT):
        return _OrglabExt.Worksheet_GetData(self, nRowStart, nColStart, nRowEnd, nColEnd, format)

    def GetRawData(self, nRowStart=0, nColStart=0, nRowEnd=-1, nColEnd=-1, format=ARRAY2D_VARIANT):
        return _OrglabExt.Worksheet_GetRawData(self, nRowStart, nColStart, nRowEnd, nColEnd, format)

    def GetLabelVisible(self, nLabelType):
        return _OrglabExt.Worksheet_GetLabelVisible(self, nLabelType)

    def PutLabelVisible(self, nLabelType, bShow=True):
        return _OrglabExt.Worksheet_PutLabelVisible(self, nLabelType, bShow)
    SetLabelVisible = PutLabelVisible

    def GetUserDefLabel(self, nIndex):
        return _OrglabExt.Worksheet_GetUserDefLabel(self, nIndex)

    def PutUserDefLabel(self, nIndex, strLabel):
        return _OrglabExt.Worksheet_PutUserDefLabel(self, nIndex, strLabel)
    SetUserDefLabel = PutUserDefLabel

    def Copy(self, nR1=0, nC1=0, nR2=-1, nC2=-1, bFullPrecision=False):
        return _OrglabExt.Worksheet_Copy(self, nR1, nC1, nR2, nC2, bFullPrecision)

    def Labels(self, pattern):
        return _OrglabExt.Worksheet_Labels(self, pattern)

    def GetPage(self):
        return _OrglabExt.Worksheet_GetPage(self)
    GetParent = GetPage

    def NewDataRange(self, r1=0, c1=0, r2=-1, c2=0):
        return _OrglabExt.Worksheet_NewDataRange(self, r1, c1, r2, c2)
    Parent = property(GetParent)
    Columns = property(GetColumns)
Worksheet_swigregister = _OrglabExt.Worksheet_swigregister
Worksheet_swigregister(Worksheet)

class WorksheetI(Worksheet):
    __swig_setmethods__ = {}
    for _s in [Worksheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorksheetI, name, value)
    __swig_getmethods__ = {}
    for _s in [Worksheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorksheetI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_WorksheetI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_WorksheetI
    __del__ = lambda self: None
WorksheetI_swigregister = _OrglabExt.WorksheetI_swigregister
WorksheetI_swigregister(WorksheetI)

class Matrixsheet(Datasheet):
    __swig_setmethods__ = {}
    for _s in [Datasheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrixsheet, name, value)
    __swig_getmethods__ = {}
    for _s in [Datasheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrixsheet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Matrixsheet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Matrixsheet
    __del__ = lambda self: None

    def GetMatrixObjects(self):
        return _OrglabExt.Matrixsheet_GetMatrixObjects(self)

    def __iter__(self):
        return _OrglabExt.Matrixsheet___iter__(self)

    def __getitem__(self, *args):
        return _OrglabExt.Matrixsheet___getitem__(self, *args)

    def GetPage(self):
        return _OrglabExt.Matrixsheet_GetPage(self)
    GetParent = GetPage

    def GetMats(self):
        return _OrglabExt.Matrixsheet_GetMats(self)

    def PutMats(self, mats):
        return _OrglabExt.Matrixsheet_PutMats(self, mats)
    SetMats = PutMats

    def NewDataRange(self, Index=0):
        return _OrglabExt.Matrixsheet_NewDataRange(self, Index)
    Parent = property(GetParent)
    MatrixObjects = property(GetMatrixObjects)
    Mats = property(GetMats, PutMats)
Matrixsheet_swigregister = _OrglabExt.Matrixsheet_swigregister
Matrixsheet_swigregister(Matrixsheet)

class MatrixsheetI(Matrixsheet):
    __swig_setmethods__ = {}
    for _s in [Matrixsheet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixsheetI, name, value)
    __swig_getmethods__ = {}
    for _s in [Matrixsheet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixsheetI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_MatrixsheetI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_MatrixsheetI
    __del__ = lambda self: None
MatrixsheetI_swigregister = _OrglabExt.MatrixsheetI_swigregister
MatrixsheetI_swigregister(MatrixsheetI)

class DataRange(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRange, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataRange, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_DataRange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_DataRange
    __del__ = lambda self: None

    def Add(self, strType, pPyWks, nR1, nC1, nR2, nC2):
        return _OrglabExt.DataRange_Add(self, strType, pPyWks, nR1, nC1, nR2, nC2)

    def AddSimple(self, pPyWks, nR1, nC1, nR2, nC2):
        return _OrglabExt.DataRange_AddSimple(self, pPyWks, nR1, nC1, nR2, nC2)

    def AddMatrix(self, pPyMatrix, nIndex=0):
        return _OrglabExt.DataRange_AddMatrix(self, pPyMatrix, nIndex)

    def GetData(self, *args):
        return _OrglabExt.DataRange_GetData(self, *args)

    def GetRawData(self, *args):
        return _OrglabExt.DataRange_GetRawData(self, *args)

    def GetParent(self):
        return _OrglabExt.DataRange_GetParent(self)
    Parent = property(GetParent)

    def SetData(self, *args):
        return _OrglabExt.DataRange_SetData(self, *args)
DataRange_swigregister = _OrglabExt.DataRange_swigregister
DataRange_swigregister(DataRange)

class DataObjectBase(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObjectBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataObjectBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_DataObjectBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_DataObjectBase
    __del__ = lambda self: None

    def GetParent(self):
        return _OrglabExt.DataObjectBase_GetParent(self)
    Parent = property(GetParent)
DataObjectBase_swigregister = _OrglabExt.DataObjectBase_swigregister
DataObjectBase_swigregister(DataObjectBase)

class DataObjectBaseI(DataObjectBase):
    __swig_setmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObjectBaseI, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataObjectBaseI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_DataObjectBaseI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_DataObjectBaseI
    __del__ = lambda self: None
DataObjectBaseI_swigregister = _OrglabExt.DataObjectBaseI_swigregister
DataObjectBaseI_swigregister(DataObjectBaseI)

class DataObject(DataObjectBase):
    __swig_setmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObject, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_DataObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_DataObject
    __del__ = lambda self: None

    def GetDigits(self):
        return _OrglabExt.DataObject_GetDigits(self)

    def PutDigits(self, value):
        return _OrglabExt.DataObject_PutDigits(self, value)
    SetDigits = PutDigits

    def GetDigitMode(self):
        return _OrglabExt.DataObject_GetDigitMode(self)

    def PutDigitMode(self, value):
        return _OrglabExt.DataObject_PutDigitMode(self, value)
    SetDigitMode = PutDigitMode

    def GetDataFormat(self):
        return _OrglabExt.DataObject_GetDataFormat(self)

    def PutDataFormat(self, value):
        return _OrglabExt.DataObject_PutDataFormat(self, value)
    SetDataFormat = PutDataFormat

    def GetDisplayFormat(self):
        return _OrglabExt.DataObject_GetDisplayFormat(self)

    def PutDisplayFormat(self, value):
        return _OrglabExt.DataObject_PutDisplayFormat(self, value)
    SetDisplayFormat = PutDisplayFormat
    Digits = property(GetDigits, PutDigits)
    DigitMode = property(GetDigitMode, PutDigitMode)
    DataFormat = property(GetDataFormat, PutDataFormat)
    DisplayFormat = property(GetDisplayFormat, PutDisplayFormat)
DataObject_swigregister = _OrglabExt.DataObject_swigregister
DataObject_swigregister(DataObject)

class Column(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Column, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Column, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Column()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Column
    __del__ = lambda self: None

    def GetType(self):
        return _OrglabExt.Column_GetType(self)

    def PutType(self, nType):
        return _OrglabExt.Column_PutType(self, nType)
    SetType = PutType

    def GetInfo(self):
        return _OrglabExt.Column_GetInfo(self)

    def GetComments(self):
        return _OrglabExt.Column_GetComments(self)

    def PutComments(self, strNewValue):
        return _OrglabExt.Column_PutComments(self, strNewValue)
    SetComments = PutComments

    def GetUnits(self):
        return _OrglabExt.Column_GetUnits(self)

    def PutUnits(self, strNewValue):
        return _OrglabExt.Column_PutUnits(self, strNewValue)
    SetUnits = PutUnits

    def GetParameter(self, nIndex):
        return _OrglabExt.Column_GetParameter(self, nIndex)

    def PutParameter(self, nIndex, strNewValue):
        return _OrglabExt.Column_PutParameter(self, nIndex, strNewValue)
    SetParameter = PutParameter

    def GetEvenSampling(self):
        return _OrglabExt.Column_GetEvenSampling(self)

    def SetEvenSampling(self, X0, XInc, Units=None, LongName=None, DispFormat=None):
        return _OrglabExt.Column_SetEvenSampling(self, X0, XInc, Units, LongName, DispFormat)

    def GetUserDefLabel(self, nIndex):
        return _OrglabExt.Column_GetUserDefLabel(self, nIndex)

    def PutUserDefLabel(self, nIndex, strLabel):
        return _OrglabExt.Column_PutUserDefLabel(self, nIndex, strLabel)
    SetUserDefLabel = PutUserDefLabel

    def SetData(self, *args):
        return _OrglabExt.Column_SetData(self, *args)

    def GetData(self, format, nStart=0, nEnd=-1, lowbound=1):
        return _OrglabExt.Column_GetData(self, format, nStart, nEnd, lowbound)

    def GetRawData(self, format, nStart=0, nEnd=-1, lowbound=1):
        return _OrglabExt.Column_GetRawData(self, format, nStart, nEnd, lowbound)

    def GetCustomDisplay(self):
        return _OrglabExt.Column_GetCustomDisplay(self)

    def PutCustomDisplay(self, _arg1):
        return _OrglabExt.Column_PutCustomDisplay(self, _arg1)
    SetCustomDisplay = PutCustomDisplay

    def GetTextAndNumericSetAlwaysAsText(self):
        return _OrglabExt.Column_GetTextAndNumericSetAlwaysAsText(self)

    def PutTextAndNumericSetAlwaysAsText(self, _arg1):
        return _OrglabExt.Column_PutTextAndNumericSetAlwaysAsText(self, _arg1)
    SetTextAndNumericSetAlwaysAsText = PutTextAndNumericSetAlwaysAsText

    def GetParent(self):
        return _OrglabExt.Column_GetParent(self)
    CustomDisplay = property(GetCustomDisplay)
    TextAndNumericSetAlwaysAsText = property(GetTextAndNumericSetAlwaysAsText)
    EvenSampling = property(GetEvenSampling)
    Type = property(GetType, PutType)
    Units = property(GetUnits, PutUnits)
    Comments = property(GetComments, PutComments)
    Parent = property(GetParent)
Column_swigregister = _OrglabExt.Column_swigregister
Column_swigregister(Column)

class ColumnI(Column):
    __swig_setmethods__ = {}
    for _s in [Column]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColumnI, name, value)
    __swig_getmethods__ = {}
    for _s in [Column]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColumnI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_ColumnI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_ColumnI
    __del__ = lambda self: None
ColumnI_swigregister = _OrglabExt.ColumnI_swigregister
ColumnI_swigregister(ColumnI)

class MatrixObject(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixObject, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_MatrixObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_MatrixObject
    __del__ = lambda self: None

    def Copy(self, r1=0, c1=0, r2=-2, c2=-2):
        return _OrglabExt.MatrixObject_Copy(self, r1, c1, r2, c2)

    def GetHasBitmap(self, ExcludeLeadBitmap=True):
        return _OrglabExt.MatrixObject_GetHasBitmap(self, ExcludeLeadBitmap)

    def GetData(self, nRowStart=0, nColStart=0, nRowEnd=-1, nColEnd=-1, format=ARRAY2D_NUMERIC, lowbound=-1):
        return _OrglabExt.MatrixObject_GetData(self, nRowStart, nColStart, nRowEnd, nColEnd, format, lowbound)

    def GetRawData(self, nRowStart=0, nColStart=0, nRowEnd=-1, nColEnd=-1, format=ARRAY2D_NUMERIC, lowbound=-1):
        return _OrglabExt.MatrixObject_GetRawData(self, nRowStart, nColStart, nRowEnd, nColEnd, format, lowbound)

    def SetData(self, *args):
        return _OrglabExt.MatrixObject_SetData(self, *args)

    def GetColorMap(self):
        return _OrglabExt.MatrixObject_GetColorMap(self)

    def GetViewImage(self):
        return _OrglabExt.MatrixObject_GetViewImage(self)

    def PutViewImage(self, val):
        return _OrglabExt.MatrixObject_PutViewImage(self, val)
    SetViewImage = PutViewImage

    def GetParent(self):
        return _OrglabExt.MatrixObject_GetParent(self)
    ColorMap = property(GetColorMap)
    ViewImage = property(GetViewImage, PutViewImage)
MatrixObject_swigregister = _OrglabExt.MatrixObject_swigregister
MatrixObject_swigregister(MatrixObject)

class MatrixObjectI(MatrixObject):
    __swig_setmethods__ = {}
    for _s in [MatrixObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixObjectI, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixObjectI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_MatrixObjectI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_MatrixObjectI
    __del__ = lambda self: None
MatrixObjectI_swigregister = _OrglabExt.MatrixObjectI_swigregister
MatrixObjectI_swigregister(MatrixObjectI)

class DataPlot(DataObjectBase):
    __swig_setmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPlot, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObjectBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataPlot, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_DataPlot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_DataPlot
    __del__ = lambda self: None

    def GetColorMap(self):
        return _OrglabExt.DataPlot_GetColorMap(self)

    def GetParent(self):
        return _OrglabExt.DataPlot_GetParent(self)
    Parent = property(GetParent)
DataPlot_swigregister = _OrglabExt.DataPlot_swigregister
DataPlot_swigregister(DataPlot)

class DataPlotI(DataPlot):
    __swig_setmethods__ = {}
    for _s in [DataPlot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataPlotI, name, value)
    __swig_getmethods__ = {}
    for _s in [DataPlot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataPlotI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_DataPlotI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_DataPlotI
    __del__ = lambda self: None
DataPlotI_swigregister = _OrglabExt.DataPlotI_swigregister
DataPlotI_swigregister(DataPlotI)

class GraphObject(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_GraphObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_GraphObject
    __del__ = lambda self: None

    def GetObjectType(self):
        return _OrglabExt.GraphObject_GetObjectType(self)

    def GetText(self):
        return _OrglabExt.GraphObject_GetText(self)

    def PutText(self, strText):
        return _OrglabExt.GraphObject_PutText(self, strText)
    SetText = PutText

    def GetLeft(self):
        return _OrglabExt.GraphObject_GetLeft(self)

    def PutLeft(self, nLeft):
        return _OrglabExt.GraphObject_PutLeft(self, nLeft)
    SetLeft = PutLeft

    def GetTop(self):
        return _OrglabExt.GraphObject_GetTop(self)

    def PutTop(self, nTop):
        return _OrglabExt.GraphObject_PutTop(self, nTop)
    SetTop = PutTop

    def GetWidth(self):
        return _OrglabExt.GraphObject_GetWidth(self)

    def PutWidth(self, nWidth):
        return _OrglabExt.GraphObject_PutWidth(self, nWidth)
    SetWidth = PutWidth

    def GetHeight(self):
        return _OrglabExt.GraphObject_GetHeight(self)

    def PutHeight(self, nHeight):
        return _OrglabExt.GraphObject_PutHeight(self, nHeight)
    SetHeight = PutHeight

    def GetX(self):
        return _OrglabExt.GraphObject_GetX(self)

    def PutX(self, dX):
        return _OrglabExt.GraphObject_PutX(self, dX)
    SetX = PutX

    def GetY(self):
        return _OrglabExt.GraphObject_GetY(self)

    def PutY(self, dY):
        return _OrglabExt.GraphObject_PutY(self, dY)
    SetY = PutY

    def GetDX(self):
        return _OrglabExt.GraphObject_GetDX(self)

    def PutDX(self, dDX):
        return _OrglabExt.GraphObject_PutDX(self, dDX)
    SetDX = PutDX

    def GetDY(self):
        return _OrglabExt.GraphObject_GetDY(self)

    def PutDY(self, dDY):
        return _OrglabExt.GraphObject_PutDY(self, dDY)
    SetDY = PutDY
    Text = property(GetText, PutText)
    Left = property(GetLeft, PutLeft)
    Top = property(GetTop, PutTop)
    Width = property(GetWidth, PutWidth)
    Height = property(GetHeight, PutHeight)
    X = property(GetX, PutX)
    Y = property(GetY, PutY)
    DX = property(GetDX, PutDX)
    DY = property(GetDY, PutDY)
GraphObject_swigregister = _OrglabExt.GraphObject_swigregister
GraphObject_swigregister(GraphObject)

class GraphObjectI(GraphObject):
    __swig_setmethods__ = {}
    for _s in [GraphObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphObjectI, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphObjectI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_GraphObjectI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_GraphObjectI
    __del__ = lambda self: None
GraphObjectI_swigregister = _OrglabExt.GraphObjectI_swigregister
GraphObjectI_swigregister(GraphObjectI)

class ProjectInfo(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_ProjectInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_ProjectInfo
    __del__ = lambda self: None

    def GetVersion(self):
        return _OrglabExt.ProjectInfo_GetVersion(self)

    def GetOrgVersion(self):
        return _OrglabExt.ProjectInfo_GetOrgVersion(self)

    def GetParent(self):
        return _OrglabExt.ProjectInfo_GetParent(self)
    Version = property(GetVersion)
    OrgVersion = property(GetOrgVersion)
    Parent = property(GetParent)
ProjectInfo_swigregister = _OrglabExt.ProjectInfo_swigregister
ProjectInfo_swigregister(ProjectInfo)

class Folder(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Folder, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Folder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Folder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Folder
    __del__ = lambda self: None

    def GetPath(self):
        return _OrglabExt.Folder_GetPath(self)

    def GetIndex(self):
        return _OrglabExt.Folder_GetIndex(self)

    def GetResultText(self, bRecrsive):
        return _OrglabExt.Folder_GetResultText(self, bRecrsive)

    def GetParent(self):
        return _OrglabExt.Folder_GetParent(self)

    def PageBases(self):
        return _OrglabExt.Folder_PageBases(self)

    def __iter__(self):
        return _OrglabExt.Folder___iter__(self)

    def GetFolders(self):
        return _OrglabExt.Folder_GetFolders(self)
    Path = property(GetPath)
    Parent = property(GetParent)
    Folders = property(GetFolders)
Folder_swigregister = _OrglabExt.Folder_swigregister
Folder_swigregister(Folder)

class FolderI(Folder):
    __swig_setmethods__ = {}
    for _s in [Folder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FolderI, name, value)
    __swig_getmethods__ = {}
    for _s in [Folder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FolderI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_FolderI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_FolderI
    __del__ = lambda self: None
FolderI_swigregister = _OrglabExt.FolderI_swigregister
FolderI_swigregister(FolderI)

class TreeNode(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNode, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNode, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_TreeNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_TreeNode
    __del__ = lambda self: None

    def __str__(self):
        return _OrglabExt.TreeNode___str__(self)

    def __getattr__(self, strName):
        return _OrglabExt.TreeNode___getattr__(self, strName)

    def GetStrValue(self, *args):
        return _OrglabExt.TreeNode_GetStrValue(self, *args)

    def SetStrValue(self, *args):
        return _OrglabExt.TreeNode_SetStrValue(self, *args)

    def GetIntValue(self, *args):
        return _OrglabExt.TreeNode_GetIntValue(self, *args)

    def SetIntValue(self, *args):
        return _OrglabExt.TreeNode_SetIntValue(self, *args)

    def GetDoubleValue(self, *args):
        return _OrglabExt.TreeNode_GetDoubleValue(self, *args)

    def SetDoubleValue(self, *args):
        return _OrglabExt.TreeNode_SetDoubleValue(self, *args)

    def GetValue(self, *args):
        return _OrglabExt.TreeNode_GetValue(self, *args)

    def PutValue(self, *args):
        return _OrglabExt.TreeNode_PutValue(self, *args)
    SetValue = PutValue

    def GetChildren(self):
        return _OrglabExt.TreeNode_GetChildren(self)

    def __iter__(self):
        return _OrglabExt.TreeNode___iter__(self)

    def GetfirstChild(self):
        return _OrglabExt.TreeNode_GetfirstChild(self)

    def GetnextSibling(self):
        return _OrglabExt.TreeNode_GetnextSibling(self)

    def GetParent(self):
        return _OrglabExt.TreeNode_GetParent(self)
    Children = property(GetChildren)
    firstChild = property(GetfirstChild)
    nextSibling = property(GetnextSibling)
    Parent = property(GetParent)
TreeNode_swigregister = _OrglabExt.TreeNode_swigregister
TreeNode_swigregister(TreeNode)

class TreeNodeI(TreeNode):
    __swig_setmethods__ = {}
    for _s in [TreeNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNodeI, name, value)
    __swig_getmethods__ = {}
    for _s in [TreeNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNodeI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_TreeNodeI()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_TreeNodeI
    __del__ = lambda self: None
TreeNodeI_swigregister = _OrglabExt.TreeNodeI_swigregister
TreeNodeI_swigregister(TreeNodeI)

class ColorMap(OriginObject):
    __swig_setmethods__ = {}
    for _s in [OriginObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorMap, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_ColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_ColorMap
    __del__ = lambda self: None

    def SetLevels(self, *args):
        return _OrglabExt.ColorMap_SetLevels(self, *args)
ColorMap_swigregister = _OrglabExt.ColorMap_swigregister
ColorMap_swigregister(ColorMap)

class OriginCollectionBase(OriginBase):
    __swig_setmethods__ = {}
    for _s in [OriginBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionBase
    __del__ = lambda self: None

    def __iter__(self):
        return _OrglabExt.OriginCollectionBase___iter__(self)

    def __next__(self):
        return _OrglabExt.OriginCollectionBase___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionBase_next(self)

    def __len__(self):
        return _OrglabExt.OriginCollectionBase___len__(self)

    def GetCount(self):
        return _OrglabExt.OriginCollectionBase_GetCount(self)

    def GetParent(self):
        return _OrglabExt.OriginCollectionBase_GetParent(self)
    Count = property(GetCount)
    Parent = property(GetParent)

    def	__iter__(self):
    	return self

OriginCollectionBase_swigregister = _OrglabExt.OriginCollectionBase_swigregister
OriginCollectionBase_swigregister(OriginCollectionBase)

class OriginCollectionDataObjectBases(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionDataObjectBases, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionDataObjectBases, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionDataObjectBases()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionDataObjectBases
    __del__ = lambda self: None

    def __next__(self):
        return _OrglabExt.OriginCollectionDataObjectBases___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionDataObjectBases_next(self)
OriginCollectionDataObjectBases_swigregister = _OrglabExt.OriginCollectionDataObjectBases_swigregister
OriginCollectionDataObjectBases_swigregister(OriginCollectionDataObjectBases)

class OriginCollectionFolders(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionFolders, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionFolders, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionFolders()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionFolders
    __del__ = lambda self: None

    def __next__(self):
        return _OrglabExt.OriginCollectionFolders___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionFolders_next(self)

    def GetParent(self):
        return _OrglabExt.OriginCollectionFolders_GetParent(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionFolders___getitem__(self, *args)
    GetItem = __getitem__

    def Add(self, *args):
        return _OrglabExt.OriginCollectionFolders_Add(self, *args)

    def FolderFromPath(self, Path):
        return _OrglabExt.OriginCollectionFolders_FolderFromPath(self, Path)
    Parent = property(GetParent)
OriginCollectionFolders_swigregister = _OrglabExt.OriginCollectionFolders_swigregister
OriginCollectionFolders_swigregister(OriginCollectionFolders)

class OriginCollectionPagesBase(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionPagesBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionPagesBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionPagesBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionPagesBase
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionPagesBase___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionPagesBase___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionPagesBase_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionPagesBase___getitem__(self, *args)
    GetItem = __getitem__
OriginCollectionPagesBase_swigregister = _OrglabExt.OriginCollectionPagesBase_swigregister
OriginCollectionPagesBase_swigregister(OriginCollectionPagesBase)

class OriginCollectionPages(OriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionPages
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionPages___call__(self, *args)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionPages___getitem__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionPages___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionPages_next(self)
OriginCollectionPages_swigregister = _OrglabExt.OriginCollectionPages_swigregister
OriginCollectionPages_swigregister(OriginCollectionPages)

class OriginCollectionWorksheetPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionWorksheetPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionWorksheetPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionWorksheetPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionWorksheetPages
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionWorksheetPages___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionWorksheetPages___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionWorksheetPages_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionWorksheetPages___getitem__(self, *args)

    def Add(self, *args):
        return _OrglabExt.OriginCollectionWorksheetPages_Add(self, *args)
OriginCollectionWorksheetPages_swigregister = _OrglabExt.OriginCollectionWorksheetPages_swigregister
OriginCollectionWorksheetPages_swigregister(OriginCollectionWorksheetPages)

class OriginCollectionMatrixPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionMatrixPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionMatrixPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionMatrixPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionMatrixPages
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionMatrixPages___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionMatrixPages___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionMatrixPages_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionMatrixPages___getitem__(self, *args)

    def Add(self, *args):
        return _OrglabExt.OriginCollectionMatrixPages_Add(self, *args)
OriginCollectionMatrixPages_swigregister = _OrglabExt.OriginCollectionMatrixPages_swigregister
OriginCollectionMatrixPages_swigregister(OriginCollectionMatrixPages)

class OriginCollectionGraphPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionGraphPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionGraphPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionGraphPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionGraphPages
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionGraphPages___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionGraphPages___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionGraphPages_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionGraphPages___getitem__(self, *args)

    def Add(self, *args):
        return _OrglabExt.OriginCollectionGraphPages_Add(self, *args)
OriginCollectionGraphPages_swigregister = _OrglabExt.OriginCollectionGraphPages_swigregister
OriginCollectionGraphPages_swigregister(OriginCollectionGraphPages)

class OriginCollectionLayoutPages(OriginCollectionPages):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionLayoutPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPages]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionLayoutPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionLayoutPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionLayoutPages
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionLayoutPages___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionLayoutPages___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionLayoutPages_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionLayoutPages___getitem__(self, *args)

    def Add(self, *args):
        return _OrglabExt.OriginCollectionLayoutPages_Add(self, *args)
OriginCollectionLayoutPages_swigregister = _OrglabExt.OriginCollectionLayoutPages_swigregister
OriginCollectionLayoutPages_swigregister(OriginCollectionLayoutPages)

class OriginCollectionDataPlots(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionDataPlots, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionDataPlots, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionDataPlots()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionDataPlots
    __del__ = lambda self: None

    def __next__(self):
        return _OrglabExt.OriginCollectionDataPlots___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionDataPlots_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionDataPlots___getitem__(self, *args)
    GetItem = __getitem__
OriginCollectionDataPlots_swigregister = _OrglabExt.OriginCollectionDataPlots_swigregister
OriginCollectionDataPlots_swigregister(OriginCollectionDataPlots)

class OriginCollectionGraphObjects(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionGraphObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionGraphObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionGraphObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionGraphObjects
    __del__ = lambda self: None

    def __next__(self):
        return _OrglabExt.OriginCollectionGraphObjects___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionGraphObjects_next(self)
OriginCollectionGraphObjects_swigregister = _OrglabExt.OriginCollectionGraphObjects_swigregister
OriginCollectionGraphObjects_swigregister(OriginCollectionGraphObjects)

class OriginCollectionLayers(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionLayers, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionLayers, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionLayers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionLayers
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionLayers___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionLayers___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionLayers_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionLayers___getitem__(self, *args)

    def Add(self, *args):
        return _OrglabExt.OriginCollectionLayers_Add(self, *args)

    def AddCopy(self, *args):
        return _OrglabExt.OriginCollectionLayers_AddCopy(self, *args)

    def GetParent(self):
        return _OrglabExt.OriginCollectionLayers_GetParent(self)
    Parent = property(GetParent)
OriginCollectionLayers_swigregister = _OrglabExt.OriginCollectionLayers_swigregister
OriginCollectionLayers_swigregister(OriginCollectionLayers)

class OriginCollectionGraphLayer(OriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionGraphLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionGraphLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionGraphLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionGraphLayer
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionGraphLayer___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionGraphLayer___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionGraphLayer_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionGraphLayer___getitem__(self, *args)

    def GetParent(self):
        return _OrglabExt.OriginCollectionGraphLayer_GetParent(self)
    Parent = property(GetParent)
OriginCollectionGraphLayer_swigregister = _OrglabExt.OriginCollectionGraphLayer_swigregister
OriginCollectionGraphLayer_swigregister(OriginCollectionGraphLayer)

class OriginCollectionWorksheets(OriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionWorksheets, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionWorksheets, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionWorksheets()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionWorksheets
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionWorksheets___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionWorksheets___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionWorksheets_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionWorksheets___getitem__(self, *args)

    def GetParent(self):
        return _OrglabExt.OriginCollectionWorksheets_GetParent(self)
    Parent = property(GetParent)
OriginCollectionWorksheets_swigregister = _OrglabExt.OriginCollectionWorksheets_swigregister
OriginCollectionWorksheets_swigregister(OriginCollectionWorksheets)

class OriginCollectionColumns(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionColumns, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionColumns, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionColumns()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionColumns
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionColumns___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionColumns___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionColumns_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionColumns___getitem__(self, *args)

    def GetParent(self):
        return _OrglabExt.OriginCollectionColumns_GetParent(self)
    Parent = property(GetParent)
OriginCollectionColumns_swigregister = _OrglabExt.OriginCollectionColumns_swigregister
OriginCollectionColumns_swigregister(OriginCollectionColumns)

class OriginCollectionMatrixsheets(OriginCollectionLayers):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionMatrixsheets, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionLayers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionMatrixsheets, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionMatrixsheets()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionMatrixsheets
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionMatrixsheets___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionMatrixsheets___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionMatrixsheets_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionMatrixsheets___getitem__(self, *args)

    def GetParent(self):
        return _OrglabExt.OriginCollectionMatrixsheets_GetParent(self)
    Parent = property(GetParent)
OriginCollectionMatrixsheets_swigregister = _OrglabExt.OriginCollectionMatrixsheets_swigregister
OriginCollectionMatrixsheets_swigregister(OriginCollectionMatrixsheets)

class OriginCollectionMatrixObjects(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionMatrixObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionMatrixObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionMatrixObjects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionMatrixObjects
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionMatrixObjects___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionMatrixObjects___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionMatrixObjects_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionMatrixObjects___getitem__(self, *args)

    def GetParent(self):
        return _OrglabExt.OriginCollectionMatrixObjects_GetParent(self)
    Parent = property(GetParent)
OriginCollectionMatrixObjects_swigregister = _OrglabExt.OriginCollectionMatrixObjects_swigregister
OriginCollectionMatrixObjects_swigregister(OriginCollectionMatrixObjects)

class OriginCollectionTreeNodes(OriginCollectionBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionTreeNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionTreeNodes, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionTreeNodes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionTreeNodes
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionTreeNodes___call__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionTreeNodes___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionTreeNodes_next(self)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionTreeNodes___getitem__(self, *args)

    def GetParent(self):
        return _OrglabExt.OriginCollectionTreeNodes_GetParent(self)
    Parent = property(GetParent)
OriginCollectionTreeNodes_swigregister = _OrglabExt.OriginCollectionTreeNodes_swigregister
OriginCollectionTreeNodes_swigregister(OriginCollectionTreeNodes)

GROBJTYPE_UNKNOWN = _OrglabExt.GROBJTYPE_UNKNOWN
GROBJTYPE_GROUP = _OrglabExt.GROBJTYPE_GROUP
GROBJTYPE_TEXT = _OrglabExt.GROBJTYPE_TEXT
GROBJTYPE_LEGEND = _OrglabExt.GROBJTYPE_LEGEND
GROBJTYPE_LINE2 = _OrglabExt.GROBJTYPE_LINE2
GROBJTYPE_LINE4 = _OrglabExt.GROBJTYPE_LINE4
GROBJTYPE_POLYLINE = _OrglabExt.GROBJTYPE_POLYLINE
GROBJTYPE_BEZIER = _OrglabExt.GROBJTYPE_BEZIER
GROBJTYPE_RECT = _OrglabExt.GROBJTYPE_RECT
GROBJTYPE_ELLIPSE = _OrglabExt.GROBJTYPE_ELLIPSE
GROBJTYPE_TRIANGLE = _OrglabExt.GROBJTYPE_TRIANGLE
GROBJTYPE_POLYGON = _OrglabExt.GROBJTYPE_POLYGON
GROBJTYPE_POLYGONBEZIER = _OrglabExt.GROBJTYPE_POLYGONBEZIER
GROBJTYPE_COLORSCALE = _OrglabExt.GROBJTYPE_COLORSCALE
GROBJTYPE_BITMAP = _OrglabExt.GROBJTYPE_BITMAP
GROBJTYPE_METAFILE = _OrglabExt.GROBJTYPE_METAFILE
GROBJTYPE_EMETAFILE = _OrglabExt.GROBJTYPE_EMETAFILE
GROBJTYPE_MEMORY = _OrglabExt.GROBJTYPE_MEMORY
GROBJTYPE_LINK = _OrglabExt.GROBJTYPE_LINK
GROBJTYPE_EMBEDDED = _OrglabExt.GROBJTYPE_EMBEDDED
GROBJTYPE_RAKE = _OrglabExt.GROBJTYPE_RAKE
GROBJTYPE_POLYPOLYGON = _OrglabExt.GROBJTYPE_POLYPOLYGON
GROBJTYPE_POLYPOLYLINE = _OrglabExt.GROBJTYPE_POLYPOLYLINE
GROBJTYPE_DATASELECTOR = _OrglabExt.GROBJTYPE_DATASELECTOR
GROBJTYPE_MARKER = _OrglabExt.GROBJTYPE_MARKER
GROBJTYPE_CURSOR = _OrglabExt.GROBJTYPE_CURSOR
GROBJTYPE_TABLE = _OrglabExt.GROBJTYPE_TABLE
GROBJTYPE_SCALER = _OrglabExt.GROBJTYPE_SCALER
GROBJTYPE_BUBBLE_LEGEND = _OrglabExt.GROBJTYPE_BUBBLE_LEGEND
GROBJTYPE_IMG = _OrglabExt.GROBJTYPE_IMG
GROBJTYPE_GROUP_ROOT = _OrglabExt.GROBJTYPE_GROUP_ROOT
LABEL_LONG_NAME = _OrglabExt.LABEL_LONG_NAME
LABEL_UNITS = _OrglabExt.LABEL_UNITS
LABEL_COMMENTS = _OrglabExt.LABEL_COMMENTS
LABEL_PARAM = _OrglabExt.LABEL_PARAM
LABEL_SAMPLE_RATE = _OrglabExt.LABEL_SAMPLE_RATE
LABEL_SPARKLINE = _OrglabExt.LABEL_SPARKLINE
LABEL_UDL = _OrglabExt.LABEL_UDL
LABEL_REPLICATES = _OrglabExt.LABEL_REPLICATES
LABEL_COL_FILTER = _OrglabExt.LABEL_COL_FILTER
LABEL_FORMULA = _OrglabExt.LABEL_FORMULA
LABEL_CATEGORIES = _OrglabExt.LABEL_CATEGORIES
STORAGETYPE_INI = _OrglabExt.STORAGETYPE_INI
STORAGETYPE_BINARY = _OrglabExt.STORAGETYPE_BINARY
STORAGETYPE_ALL = _OrglabExt.STORAGETYPE_ALL
COLFORMAT_NUMERIC = _OrglabExt.COLFORMAT_NUMERIC
COLFORMAT_TEXT = _OrglabExt.COLFORMAT_TEXT
COLFORMAT_TIME = _OrglabExt.COLFORMAT_TIME
COLFORMAT_DATE = _OrglabExt.COLFORMAT_DATE
COLFORMAT_MONTH = _OrglabExt.COLFORMAT_MONTH
COLFORMAT_WEEKDAY = _OrglabExt.COLFORMAT_WEEKDAY
COLFORMAT_TEXT_NUMERIC = _OrglabExt.COLFORMAT_TEXT_NUMERIC
COLTYPE_DESIGN_INVALID = _OrglabExt.COLTYPE_DESIGN_INVALID
COLTYPE_DESIGN_X = _OrglabExt.COLTYPE_DESIGN_X
COLTYPE_DESIGN_Y = _OrglabExt.COLTYPE_DESIGN_Y
COLTYPE_DESIGN_Z = _OrglabExt.COLTYPE_DESIGN_Z
COLTYPE_DESIGN_L = _OrglabExt.COLTYPE_DESIGN_L
COLTYPE_DESIGN_NONE = _OrglabExt.COLTYPE_DESIGN_NONE
COLTYPE_DESIGN_XERR = _OrglabExt.COLTYPE_DESIGN_XERR
COLTYPE_DESIGN_YERR = _OrglabExt.COLTYPE_DESIGN_YERR
COLTYPE_DESIGN_GROUP = _OrglabExt.COLTYPE_DESIGN_GROUP
COLTYPE_DESIGN_SUBJECT = _OrglabExt.COLTYPE_DESIGN_SUBJECT
COLTYPE_DESIGN_WEIGHT = _OrglabExt.COLTYPE_DESIGN_WEIGHT
class OriginCollectionNotePages(OriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionNotePages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionNotePages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionNotePages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionNotePages
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionNotePages___call__(self, *args)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionNotePages___getitem__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionNotePages___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionNotePages_next(self)

    def Add(self, *args):
        return _OrglabExt.OriginCollectionNotePages_Add(self, *args)
OriginCollectionNotePages_swigregister = _OrglabExt.OriginCollectionNotePages_swigregister
OriginCollectionNotePages_swigregister(OriginCollectionNotePages)
cvar = _OrglabExt.cvar
MISSINGVALUE = cvar.MISSINGVALUE
JULIANDATEOFFSET = cvar.JULIANDATEOFFSET

class OriginCollectionExternalDialogPages(OriginCollectionPagesBase):
    __swig_setmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginCollectionExternalDialogPages, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginCollectionPagesBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginCollectionExternalDialogPages, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_OriginCollectionExternalDialogPages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_OriginCollectionExternalDialogPages
    __del__ = lambda self: None

    def __call__(self, *args):
        return _OrglabExt.OriginCollectionExternalDialogPages___call__(self, *args)

    def __getitem__(self, *args):
        return _OrglabExt.OriginCollectionExternalDialogPages___getitem__(self, *args)

    def __next__(self):
        return _OrglabExt.OriginCollectionExternalDialogPages___next__(self)

    def next(self):
        return _OrglabExt.OriginCollectionExternalDialogPages_next(self)
OriginCollectionExternalDialogPages_swigregister = _OrglabExt.OriginCollectionExternalDialogPages_swigregister
OriginCollectionExternalDialogPages_swigregister(OriginCollectionExternalDialogPages)

class ApplicationBase(OriginPyObjBase):
    __swig_setmethods__ = {}
    for _s in [OriginPyObjBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationBase, name, value)
    __swig_getmethods__ = {}
    for _s in [OriginPyObjBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_ApplicationBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_ApplicationBase
    __del__ = lambda self: None
    MAINWND_HIDE = _OrglabExt.ApplicationBase_MAINWND_HIDE
    MAINWND_SHOW = _OrglabExt.ApplicationBase_MAINWND_SHOW
    MAINWND_SHOWMINIMIZED = _OrglabExt.ApplicationBase_MAINWND_SHOWMINIMIZED
    MAINWND_SHOWMAXIMIZED = _OrglabExt.ApplicationBase_MAINWND_SHOWMAXIMIZED
    MAINWND_SHOW_BRING_TO_FRONT = _OrglabExt.ApplicationBase_MAINWND_SHOW_BRING_TO_FRONT

    def GetVisible(self):
        return _OrglabExt.ApplicationBase_GetVisible(self)

    def PutVisible(self, nVisible):
        return _OrglabExt.ApplicationBase_PutVisible(self, nVisible)
    SetVisible = PutVisible

    def GetIsModified(self):
        return _OrglabExt.ApplicationBase_GetIsModified(self)

    def PutIsModified(self, val):
        return _OrglabExt.ApplicationBase_PutIsModified(self, val)
    SetIsModified = PutIsModified

    def Execute(self, *args):
        return _OrglabExt.ApplicationBase_Execute(self, *args)

    def PutMatrix(self, *args):
        return _OrglabExt.ApplicationBase_PutMatrix(self, *args)
    SetMatrix = PutMatrix

    def GetMatrix(self, Name, format=0):
        return _OrglabExt.ApplicationBase_GetMatrix(self, Name, format)

    def PutWorksheet(self, *args):
        return _OrglabExt.ApplicationBase_PutWorksheet(self, *args)
    SetWorksheet = PutWorksheet

    def GetWorksheet(self, *args):
        return _OrglabExt.ApplicationBase_GetWorksheet(self, *args)

    def BeginSession(self):
        return _OrglabExt.ApplicationBase_BeginSession(self)

    def EndSession(self):
        return _OrglabExt.ApplicationBase_EndSession(self)

    def PageSetValue(self, *args):
        return _OrglabExt.ApplicationBase_PageSetValue(self, *args)

    def PageGetValue(self, *args):
        return _OrglabExt.ApplicationBase_PageGetValue(self, *args)

    def GetLTStr(self, Name):
        return _OrglabExt.ApplicationBase_GetLTStr(self, Name)

    def PutLTStr(self, Name, Value):
        return _OrglabExt.ApplicationBase_PutLTStr(self, Name, Value)
    SetLTStr = PutLTStr

    def GetLTVar(self, Name):
        return _OrglabExt.ApplicationBase_GetLTVar(self, Name)

    def PutLTVar(self, Name, Value):
        return _OrglabExt.ApplicationBase_PutLTVar(self, Name, Value)
    SetLTVar = PutLTVar

    def GetPageString(self, *args):
        return _OrglabExt.ApplicationBase_GetPageString(self, *args)

    def PutPageString(self, Name, LTString, NewValue):
        return _OrglabExt.ApplicationBase_PutPageString(self, Name, LTString, NewValue)
    SetPageString = PutPageString

    def CopyPage(self, *args):
        return _OrglabExt.ApplicationBase_CopyPage(self, *args)
    OPT_NONE = _OrglabExt.ApplicationBase_OPT_NONE
    OPT_MATRIX = _OrglabExt.ApplicationBase_OPT_MATRIX
    OPT_WORKSHEET = _OrglabExt.ApplicationBase_OPT_WORKSHEET
    OPT_GRAPH = _OrglabExt.ApplicationBase_OPT_GRAPH
    OPT_LAYOUT = _OrglabExt.ApplicationBase_OPT_LAYOUT
    OPT_NOTES = _OrglabExt.ApplicationBase_OPT_NOTES
    OPT_EXTERNAL = _OrglabExt.ApplicationBase_OPT_EXTERNAL

    def CreatePage(self, *args):
        return _OrglabExt.ApplicationBase_CreatePage(self, *args)

    def SetRangeName(self, *args):
        return _OrglabExt.ApplicationBase_SetRangeName(self, *args)

    def SetRangeEvent(self, strRangeName, eventtype=-1, bSet=True):
        return _OrglabExt.ApplicationBase_SetRangeEvent(self, strRangeName, eventtype, bSet)

    def NewDataRange(self, *args):
        return _OrglabExt.ApplicationBase_NewDataRange(self, *args)

    def NewProject(self):
        return _OrglabExt.ApplicationBase_NewProject(self)

    def Exit(self):
        return _OrglabExt.ApplicationBase_Exit(self)

    def GetEmptyTree(self):
        return _OrglabExt.ApplicationBase_GetEmptyTree(self)

    def PutTree(self, strName, trNode):
        return _OrglabExt.ApplicationBase_PutTree(self, strName, trNode)
    RM_LET_ORIGIN_DECIDE = _OrglabExt.ApplicationBase_RM_LET_ORIGIN_DECIDE
    RM_HIDE_WITH_NO_FOR_ANSWER = _OrglabExt.ApplicationBase_RM_HIDE_WITH_NO_FOR_ANSWER
    RM_HIDE_WITH_YES_FOR_ANSWER = _OrglabExt.ApplicationBase_RM_HIDE_WITH_YES_FOR_ANSWER

    def GetReminderMsg(self):
        return _OrglabExt.ApplicationBase_GetReminderMsg(self)

    def PutReminderMsg(self, val):
        return _OrglabExt.ApplicationBase_PutReminderMsg(self, val)
    SetReminderMsg = PutReminderMsg

    def ProjectSearch(self, Text):
        return _OrglabExt.ApplicationBase_ProjectSearch(self, Text)

    def GetPageBases(self):
        return _OrglabExt.ApplicationBase_GetPageBases(self)

    def GetPages(self):
        return _OrglabExt.ApplicationBase_GetPages(self)

    def GetWorksheetPages(self):
        return _OrglabExt.ApplicationBase_GetWorksheetPages(self)

    def GetGraphPages(self):
        return _OrglabExt.ApplicationBase_GetGraphPages(self)

    def GetLayoutPages(self):
        return _OrglabExt.ApplicationBase_GetLayoutPages(self)

    def GetMatrixPages(self):
        return _OrglabExt.ApplicationBase_GetMatrixPages(self)

    def GetNotes(self):
        return _OrglabExt.ApplicationBase_GetNotes(self)

    def GetExternalDialogPages(self):
        return _OrglabExt.ApplicationBase_GetExternalDialogPages(self)

    def GetActiveFolder(self):
        return _OrglabExt.ApplicationBase_GetActiveFolder(self)

    def PutActiveFolder(self, pFolder):
        return _OrglabExt.ApplicationBase_PutActiveFolder(self, pFolder)
    SetActiveFolder = PutActiveFolder

    def GetActivePage(self):
        return _OrglabExt.ApplicationBase_GetActivePage(self)

    def GetActiveNote(self):
        return _OrglabExt.ApplicationBase_GetActiveNote(self)

    def GetName(self):
        return _OrglabExt.ApplicationBase_GetName(self)

    def GetCanClose(self):
        return _OrglabExt.ApplicationBase_GetCanClose(self)

    def PutCanClose(self, val):
        return _OrglabExt.ApplicationBase_PutCanClose(self, val)
    SetCanClose = PutCanClose

    def OriginVer(self):
        return _OrglabExt.ApplicationBase_OriginVer(self)

    def GetActiveLayer(self):
        return _OrglabExt.ApplicationBase_GetActiveLayer(self)

    def GetProjectName(self):
        return _OrglabExt.ApplicationBase_GetProjectName(self)
    APPPATH_USER = _OrglabExt.ApplicationBase_APPPATH_USER
    APPPATH_GROUP = _OrglabExt.ApplicationBase_APPPATH_GROUP
    APPPATH_PROGRAM = _OrglabExt.ApplicationBase_APPPATH_PROGRAM

    def Path(self, nPathType):
        return _OrglabExt.ApplicationBase_Path(self, nPathType)

    def GetRootFolder(self):
        return _OrglabExt.ApplicationBase_GetRootFolder(self)

    def FindGraphLayer(self, Name):
        return _OrglabExt.ApplicationBase_FindGraphLayer(self, Name)

    def FindMatrixSheet(self, Name):
        return _OrglabExt.ApplicationBase_FindMatrixSheet(self, Name)

    def FindWorksheet(self, Name):
        return _OrglabExt.ApplicationBase_FindWorksheet(self, Name)

    def ActiveNotePage(self):
        return _OrglabExt.ApplicationBase_ActiveNotePage(self)

    def GetTree(self, strName):
        return _OrglabExt.ApplicationBase_GetTree(self, strName)

    def EmptyTree(self):
        return _OrglabExt.ApplicationBase_EmptyTree(self)

    def GetNotePage(self, strPageName):
        return _OrglabExt.ApplicationBase_GetNotePage(self, strPageName)

    def CreateNotePage(self, *args):
        return _OrglabExt.ApplicationBase_CreateNotePage(self, *args)

    def GetProjectInfo(self):
        return _OrglabExt.ApplicationBase_GetProjectInfo(self)

    def SetModified(self, bNewValue):
        return _OrglabExt.ApplicationBase_SetModified(self, bNewValue)

    def DestroyPage(self, strPageName):
        return _OrglabExt.ApplicationBase_DestroyPage(self, strPageName)

    def Reset(self, bReduceWks=True, bReduceMat=True):
        return _OrglabExt.ApplicationBase_Reset(self, bReduceWks, bReduceMat)

    def Save(self, *args):
        return _OrglabExt.ApplicationBase_Save(self, *args)

    def Load(self, strPath, bReadOnly=False):
        return _OrglabExt.ApplicationBase_Load(self, strPath, bReadOnly)

    def AddTree(self, strName, trNode):
        return _OrglabExt.ApplicationBase_AddTree(self, strName, trNode)

    def Run(self):
        return _OrglabExt.ApplicationBase_Run(self)

    def LT_execute(self, lpcszScript):
        return _OrglabExt.ApplicationBase_LT_execute(self, lpcszScript)

    def LT_get_str(self, lpcszVar):
        return _OrglabExt.ApplicationBase_LT_get_str(self, lpcszVar)

    def LT_set_str(self, lpcszVar, lpcszVal):
        return _OrglabExt.ApplicationBase_LT_set_str(self, lpcszVar, lpcszVal)

    def LT_get_var(self, lpcszVar):
        return _OrglabExt.ApplicationBase_LT_get_var(self, lpcszVar)

    def LT_set_var(self, lpcszVar, dValue):
        return _OrglabExt.ApplicationBase_LT_set_var(self, lpcszVar, dValue)
    Visible = property(GetVisible, SetVisible)
    IsModified = property(GetIsModified, SetIsModified)
    ActiveFolder = property(GetActiveFolder, SetActiveFolder)
    CanClose = property(GetCanClose, SetCanClose)
    PageBases = property(GetPageBases)
    Pages = property(GetPages)
    GraphPages = property(GetGraphPages)
    LayoutPages = property(GetLayoutPages)
    WorksheetPages = property(GetWorksheetPages)
    MatrixPages = property(GetMatrixPages)
    Notes = property(GetNotes)
    ExternalDialogPages = property(GetExternalDialogPages)
    RootFolder = property(GetRootFolder)
    ProjectInfo = property(GetProjectInfo)
    Name = property(GetName)
    ActivePage = property(GetActivePage)
    ActiveNote = property(GetActiveNote)
    ActiveLayer = property(GetActiveLayer)
ApplicationBase_swigregister = _OrglabExt.ApplicationBase_swigregister
ApplicationBase_swigregister(ApplicationBase)

class Application(ApplicationBase):
    __swig_setmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    for _s in [ApplicationBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OrglabExt.new_Application()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OrglabExt.delete_Application
    __del__ = lambda self: None
Application_swigregister = _OrglabExt.Application_swigregister
Application_swigregister(Application)

# This file is compatible with both classic and new-style classes.


