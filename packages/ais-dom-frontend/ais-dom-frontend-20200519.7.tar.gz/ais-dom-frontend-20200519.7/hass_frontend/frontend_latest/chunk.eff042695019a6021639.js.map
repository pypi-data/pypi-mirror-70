{"version":3,"file":"chunk.eff042695019a6021639.js","sources":["webpack:///./src/entrypoints/compatibility.ts"],"sourcesContent":["import objAssign from \"es6-object-assign\";\nimport \"mdn-polyfills/Array.prototype.includes\";\nimport \"regenerator-runtime/runtime\";\nimport \"unfetch/polyfill\";\n// To use comlink under ES5\nimport \"proxy-polyfill\";\n\nobjAssign.polyfill();\n\nif (Object.values === undefined) {\n  Object.values = (target) => {\n    return Object.keys(target).map((key) => target[key]);\n  };\n}\n\n/* eslint-disable */\n// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nif (!String.prototype.padStart) {\n  String.prototype.padStart = function padStart(targetLength, padString) {\n    targetLength >>= 0; // truncate if number, or convert non-number to 0;\n    padString = String(typeof padString !== \"undefined\" ? padString : \" \");\n    if (this.length >= targetLength) {\n      return String(this);\n    }\n    targetLength -= this.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length); // append to original to ensure we are longer than needed\n    }\n    return padString.slice(0, targetLength) + String(this);\n  };\n}\n/* eslint-enable */\n"],"mappings":"AAAA","sourceRoot":""}