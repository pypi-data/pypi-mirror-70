# Python stubs generated by omniidl from /usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

#
# Start of module "AAS_CORBA"
#
__name__ = "AAS_CORBA"
_0_AAS_CORBA = omniORB.openModule("AAS_CORBA", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")
_0_AAS_CORBA__POA = omniORB.openModule("AAS_CORBA__POA", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")


#
# Start of module "AAS_CORBA.MAPDL"
#
__name__ = "AAS_CORBA.MAPDL"
_0_AAS_CORBA.MAPDL = omniORB.openModule("AAS_CORBA.MAPDL", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")
_0_AAS_CORBA__POA.MAPDL = omniORB.openModule("AAS_CORBA__POA.MAPDL", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")


#
# Start of module "AAS_CORBA.MAPDL.Types"
#
__name__ = "AAS_CORBA.MAPDL.Types"
_0_AAS_CORBA.MAPDL.Types = omniORB.openModule("AAS_CORBA.MAPDL.Types", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")
_0_AAS_CORBA__POA.MAPDL.Types = omniORB.openModule("AAS_CORBA__POA.MAPDL.Types", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")


# typedef ... CoOctetBuffer
class CoOctetBuffer:
    _NP_RepositoryId = "IDL:AAS_CORBA/MAPDL/Types/CoOctetBuffer:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_AAS_CORBA.MAPDL.Types.CoOctetBuffer = CoOctetBuffer
_0_AAS_CORBA.MAPDL.Types._d_CoOctetBuffer  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_AAS_CORBA.MAPDL.Types._ad_CoOctetBuffer = (omniORB.tcInternal.tv_alias, CoOctetBuffer._NP_RepositoryId, "CoOctetBuffer", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_AAS_CORBA.MAPDL.Types._tc_CoOctetBuffer = omniORB.tcInternal.createTypeCode(_0_AAS_CORBA.MAPDL.Types._ad_CoOctetBuffer)
omniORB.registerType(CoOctetBuffer._NP_RepositoryId, _0_AAS_CORBA.MAPDL.Types._ad_CoOctetBuffer, _0_AAS_CORBA.MAPDL.Types._tc_CoOctetBuffer)
del CoOctetBuffer

#
# End of module "AAS_CORBA.MAPDL.Types"
#
__name__ = "AAS_CORBA.MAPDL"


#
# Start of module "AAS_CORBA.MAPDL.Exceptions"
#
__name__ = "AAS_CORBA.MAPDL.Exceptions"
_0_AAS_CORBA.MAPDL.Exceptions = omniORB.openModule("AAS_CORBA.MAPDL.Exceptions", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")
_0_AAS_CORBA__POA.MAPDL.Exceptions = omniORB.openModule("AAS_CORBA__POA.MAPDL.Exceptions", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")


# exception EAnsysUnknown
_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown = omniORB.newEmptyClass()
class EAnsysUnknown (CORBA.UserException):
    _NP_RepositoryId = "IDL:AAS_CORBA/MAPDL/Exceptions/EAnsysUnknown:1.0"

    def __init__(self, code, description, scope, interfaceName, operation, moreInfo):
        CORBA.UserException.__init__(self, code, description, scope, interfaceName, operation, moreInfo)
        self.code = code
        self.description = description
        self.scope = scope
        self.interfaceName = interfaceName
        self.operation = operation
        self.moreInfo = moreInfo

_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown = EAnsysUnknown
_0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown  = (omniORB.tcInternal.tv_except, EAnsysUnknown, EAnsysUnknown._NP_RepositoryId, "EAnsysUnknown", "code", omniORB.tcInternal.tv_long, "description", (omniORB.tcInternal.tv_string,0), "scope", (omniORB.tcInternal.tv_string,0), "interfaceName", (omniORB.tcInternal.tv_string,0), "operation", (omniORB.tcInternal.tv_string,0), "moreInfo", (omniORB.tcInternal.tv_string,0))
_0_AAS_CORBA.MAPDL.Exceptions._tc_EAnsysUnknown = omniORB.tcInternal.createTypeCode(_0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown)
omniORB.registerType(EAnsysUnknown._NP_RepositoryId, _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown, _0_AAS_CORBA.MAPDL.Exceptions._tc_EAnsysUnknown)
del EAnsysUnknown

# exception EAnsysInvalidArgument
_0_AAS_CORBA.MAPDL.Exceptions.EAnsysInvalidArgument = omniORB.newEmptyClass()
class EAnsysInvalidArgument (CORBA.UserException):
    _NP_RepositoryId = "IDL:AAS_CORBA/MAPDL/Exceptions/EAnsysInvalidArgument:1.0"

    def __init__(self, code, description, scope, interfaceName, operation, moreInfo, position):
        CORBA.UserException.__init__(self, code, description, scope, interfaceName, operation, moreInfo, position)
        self.code = code
        self.description = description
        self.scope = scope
        self.interfaceName = interfaceName
        self.operation = operation
        self.moreInfo = moreInfo
        self.position = position

_0_AAS_CORBA.MAPDL.Exceptions.EAnsysInvalidArgument = EAnsysInvalidArgument
_0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument  = (omniORB.tcInternal.tv_except, EAnsysInvalidArgument, EAnsysInvalidArgument._NP_RepositoryId, "EAnsysInvalidArgument", "code", omniORB.tcInternal.tv_long, "description", (omniORB.tcInternal.tv_string,0), "scope", (omniORB.tcInternal.tv_string,0), "interfaceName", (omniORB.tcInternal.tv_string,0), "operation", (omniORB.tcInternal.tv_string,0), "moreInfo", (omniORB.tcInternal.tv_string,0), "position", omniORB.tcInternal.tv_short)
_0_AAS_CORBA.MAPDL.Exceptions._tc_EAnsysInvalidArgument = omniORB.tcInternal.createTypeCode(_0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument)
omniORB.registerType(EAnsysInvalidArgument._NP_RepositoryId, _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument, _0_AAS_CORBA.MAPDL.Exceptions._tc_EAnsysInvalidArgument)
del EAnsysInvalidArgument

#
# End of module "AAS_CORBA.MAPDL.Exceptions"
#
__name__ = "AAS_CORBA.MAPDL"


#
# Start of module "AAS_CORBA.MAPDL.Solvers"
#
__name__ = "AAS_CORBA.MAPDL.Solvers"
_0_AAS_CORBA.MAPDL.Solvers = omniORB.openModule("AAS_CORBA.MAPDL.Solvers", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")
_0_AAS_CORBA__POA.MAPDL.Solvers = omniORB.openModule("AAS_CORBA__POA.MAPDL.Solvers", r"/usr/ansys_inc/v182/ansys/customize/user/ICoMapdlUnit.idl")


# forward interface ICoMapdlUnit;
_0_AAS_CORBA.MAPDL.Solvers._d_ICoMapdlUnit = (omniORB.tcInternal.tv_objref, "IDL:AAS_CORBA/MAPDL/Solvers/ICoMapdlUnit:1.0", "ICoMapdlUnit")
omniORB.typeMapping["IDL:AAS_CORBA/MAPDL/Solvers/ICoMapdlUnit:1.0"] = _0_AAS_CORBA.MAPDL.Solvers._d_ICoMapdlUnit

# typedef ... AnsysArrayICoMapdlUnit
class AnsysArrayICoMapdlUnit:
    _NP_RepositoryId = "IDL:AAS_CORBA/MAPDL/Solvers/AnsysArrayICoMapdlUnit:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_AAS_CORBA.MAPDL.Solvers.AnsysArrayICoMapdlUnit = AnsysArrayICoMapdlUnit
_0_AAS_CORBA.MAPDL.Solvers._d_AnsysArrayICoMapdlUnit  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:AAS_CORBA/MAPDL/Solvers/ICoMapdlUnit:1.0"], 0)
_0_AAS_CORBA.MAPDL.Solvers._ad_AnsysArrayICoMapdlUnit = (omniORB.tcInternal.tv_alias, AnsysArrayICoMapdlUnit._NP_RepositoryId, "AnsysArrayICoMapdlUnit", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:AAS_CORBA/MAPDL/Solvers/ICoMapdlUnit:1.0"], 0))
_0_AAS_CORBA.MAPDL.Solvers._tc_AnsysArrayICoMapdlUnit = omniORB.tcInternal.createTypeCode(_0_AAS_CORBA.MAPDL.Solvers._ad_AnsysArrayICoMapdlUnit)
omniORB.registerType(AnsysArrayICoMapdlUnit._NP_RepositoryId, _0_AAS_CORBA.MAPDL.Solvers._ad_AnsysArrayICoMapdlUnit, _0_AAS_CORBA.MAPDL.Solvers._tc_AnsysArrayICoMapdlUnit)
del AnsysArrayICoMapdlUnit

# interface ICoMapdlUnit
_0_AAS_CORBA.MAPDL.Solvers._d_ICoMapdlUnit = (omniORB.tcInternal.tv_objref, "IDL:AAS_CORBA/MAPDL/Solvers/ICoMapdlUnit:1.0", "ICoMapdlUnit")
omniORB.typeMapping["IDL:AAS_CORBA/MAPDL/Solvers/ICoMapdlUnit:1.0"] = _0_AAS_CORBA.MAPDL.Solvers._d_ICoMapdlUnit
_0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit = omniORB.newEmptyClass()
class ICoMapdlUnit :
    _NP_RepositoryId = _0_AAS_CORBA.MAPDL.Solvers._d_ICoMapdlUnit[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit = ICoMapdlUnit
_0_AAS_CORBA.MAPDL.Solvers._tc_ICoMapdlUnit = omniORB.tcInternal.createTypeCode(_0_AAS_CORBA.MAPDL.Solvers._d_ICoMapdlUnit)
omniORB.registerType(ICoMapdlUnit._NP_RepositoryId, _0_AAS_CORBA.MAPDL.Solvers._d_ICoMapdlUnit, _0_AAS_CORBA.MAPDL.Solvers._tc_ICoMapdlUnit)

# ICoMapdlUnit operations and attributes
ICoMapdlUnit._d_getComponentName = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown})
ICoMapdlUnit._d_setComponentName = (((omniORB.tcInternal.tv_string,0), ), (), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown, _0_AAS_CORBA.MAPDL.Exceptions.EAnsysInvalidArgument._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument})
ICoMapdlUnit._d_getComponentDescription = ((), ((omniORB.tcInternal.tv_string,0), ), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown})
ICoMapdlUnit._d_setComponentDescription = (((omniORB.tcInternal.tv_string,0), ), (), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown, _0_AAS_CORBA.MAPDL.Exceptions.EAnsysInvalidArgument._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument})
ICoMapdlUnit._d_uploadFileFromBuffer = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:AAS_CORBA/MAPDL/Types/CoOctetBuffer:1.0"]), (), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown})
ICoMapdlUnit._d_downloadFileToBuffer = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:AAS_CORBA/MAPDL/Types/CoOctetBuffer:1.0"], ), None)
ICoMapdlUnit._d_executeCommand = (((omniORB.tcInternal.tv_string,0), ), (), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown, _0_AAS_CORBA.MAPDL.Exceptions.EAnsysInvalidArgument._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument})
ICoMapdlUnit._d_executeCommandToString = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown, _0_AAS_CORBA.MAPDL.Exceptions.EAnsysInvalidArgument._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument})
ICoMapdlUnit._d_terminate = ((), (), {_0_AAS_CORBA.MAPDL.Exceptions.EAnsysUnknown._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysUnknown, _0_AAS_CORBA.MAPDL.Exceptions.EAnsysInvalidArgument._NP_RepositoryId: _0_AAS_CORBA.MAPDL.Exceptions._d_EAnsysInvalidArgument})

# ICoMapdlUnit object reference
class _objref_ICoMapdlUnit (CORBA.Object):
    _NP_RepositoryId = ICoMapdlUnit._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def getComponentName(self, *args):
        return self._obj.invoke("getComponentName", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_getComponentName, args)

    def setComponentName(self, *args):
        return self._obj.invoke("setComponentName", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_setComponentName, args)

    def getComponentDescription(self, *args):
        return self._obj.invoke("getComponentDescription", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_getComponentDescription, args)

    def setComponentDescription(self, *args):
        return self._obj.invoke("setComponentDescription", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_setComponentDescription, args)

    def uploadFileFromBuffer(self, *args):
        return self._obj.invoke("uploadFileFromBuffer", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_uploadFileFromBuffer, args)

    def downloadFileToBuffer(self, *args):
        return self._obj.invoke("downloadFileToBuffer", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_downloadFileToBuffer, args)

    def executeCommand(self, *args):
        return self._obj.invoke("executeCommand", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_executeCommand, args)

    def executeCommandToString(self, *args):
        return self._obj.invoke("executeCommandToString", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_executeCommandToString, args)

    def terminate(self, *args):
        return self._obj.invoke("terminate", _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_terminate, args)

omniORB.registerObjref(ICoMapdlUnit._NP_RepositoryId, _objref_ICoMapdlUnit)
_0_AAS_CORBA.MAPDL.Solvers._objref_ICoMapdlUnit = _objref_ICoMapdlUnit
del ICoMapdlUnit, _objref_ICoMapdlUnit

# ICoMapdlUnit skeleton
__name__ = "AAS_CORBA__POA.MAPDL.Solvers"
class ICoMapdlUnit (PortableServer.Servant):
    _NP_RepositoryId = _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._NP_RepositoryId


    _omni_op_d = {"getComponentName": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_getComponentName, "setComponentName": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_setComponentName, "getComponentDescription": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_getComponentDescription, "setComponentDescription": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_setComponentDescription, "uploadFileFromBuffer": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_uploadFileFromBuffer, "downloadFileToBuffer": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_downloadFileToBuffer, "executeCommand": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_executeCommand, "executeCommandToString": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_executeCommandToString, "terminate": _0_AAS_CORBA.MAPDL.Solvers.ICoMapdlUnit._d_terminate}

ICoMapdlUnit._omni_skeleton = ICoMapdlUnit
_0_AAS_CORBA__POA.MAPDL.Solvers.ICoMapdlUnit = ICoMapdlUnit
omniORB.registerSkeleton(ICoMapdlUnit._NP_RepositoryId, ICoMapdlUnit)
del ICoMapdlUnit
__name__ = "AAS_CORBA.MAPDL.Solvers"

#
# End of module "AAS_CORBA.MAPDL.Solvers"
#
__name__ = "AAS_CORBA.MAPDL"


#
# End of module "AAS_CORBA.MAPDL"
#
__name__ = "AAS_CORBA"


#
# End of module "AAS_CORBA"
#
__name__ = "ICoMapdlUnit_idl"

_exported_modules = ( "AAS_CORBA", "AAS_CORBA.MAPDL", "AAS_CORBA.MAPDL.Exceptions", "AAS_CORBA.MAPDL.Solvers", "AAS_CORBA.MAPDL.Types")

# The end.
