"""Autogenerated API"""
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("authentication","v1","oauth","authorize"),
    module=argus_cli_module
)
def authorize(
    responseType: str = None,
    clientID: str = None,
    redirectURI: str = None,
    state: str = None,
    nonce: str = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Request authorization to a OAuth client (DEV)
    
    :param str responseType: Type of response requested. The only (and mandatory) type supported is 'code'. 
    :param str clientID: The clientID of the requesting client. 
    :param str redirectURI: The redirectURI requested by the client. 
    :param str state: The state submitted by the client. This state should follow unmodified back to the redirect response after a valid client authorization. 
    :param str nonce: A nonce requested by the client. The nonce should pass through unmodified and follow the token issued for this request. 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412:raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON

    """
    from os import getenv
    from requests import post
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/oauth/authorize".format(settings["api"]["api_url"], )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send responseType if the argument was provided, dont send null values
    if responseType is not None:
        body.update({ "responseType": responseType })
    # Only send clientID if the argument was provided, dont send null values
    if clientID is not None:
        body.update({ "clientID": clientID })
    # Only send redirectURI if the argument was provided, dont send null values
    if redirectURI is not None:
        body.update({ "redirectURI": redirectURI })
    # Only send state if the argument was provided, dont send null values
    if state is not None:
        body.update({ "state": state })
    # Only send nonce if the argument was provided, dont send null values
    if nonce is not None:
        body.update({ "nonce": nonce })

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("authentication","v1","oauth","authorize"),
    module=argus_cli_module
)
def create_o_auth2_client(
    shortName: str = None,
    name: str = None,
    description: str = None,
    domain: str = None,
    customer: str = None,
    mainURI: str = None,
    redirectURI: str = None,
    requiredFunction: str = None,
    permissionScope: str = None,
    authenticationMethod: str = None,
    clientSecret: str = None,
    clientIPRange: str = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Define a new OAuth2 client (DEV)
    
    :param str shortName: [a-zA-Z0-9_\-\.]*
    :param str name: [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param str description: [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param str domain: 
    :param str customer: 
    :param str mainURI: Sanitize by regex https://.*
    :param str redirectURI: Sanitize by regex https://.*
    :param str requiredFunction: 
    :param str permissionScope: 
    :param str authenticationMethod: 
    :param str clientSecret: 
    :param list clientIPRange: format:ip
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412:raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON

    """
    from os import getenv
    from requests import post
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/oauth/client".format(settings["api"]["api_url"], )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({ "shortName": shortName })
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({ "name": name })
    # Only send description if the argument was provided, dont send null values
    if description is not None:
        body.update({ "description": description })
    # Only send domain if the argument was provided, dont send null values
    if domain is not None:
        body.update({ "domain": domain })
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        body.update({ "customer": customer })
    # Only send mainURI if the argument was provided, dont send null values
    if mainURI is not None:
        body.update({ "mainURI": mainURI })
    # Only send redirectURI if the argument was provided, dont send null values
    if redirectURI is not None:
        body.update({ "redirectURI": redirectURI })
    # Only send requiredFunction if the argument was provided, dont send null values
    if requiredFunction is not None:
        body.update({ "requiredFunction": requiredFunction })
    # Only send permissionScope if the argument was provided, dont send null values
    if permissionScope is not None:
        body.update({ "permissionScope": permissionScope })
    # Only send authenticationMethod if the argument was provided, dont send null values
    if authenticationMethod is not None:
        body.update({ "authenticationMethod": authenticationMethod })
    # Only send clientSecret if the argument was provided, dont send null values
    if clientSecret is not None:
        body.update({ "clientSecret": clientSecret })
    # Only send clientIPRange if the argument was provided, dont send null values
    if clientIPRange is not None:
        body.update({ "clientIPRange": clientIPRange })

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("authentication","v1","oauth","authorize"),
    module=argus_cli_module
)
def delete_oauth2_client(
    idOrShortname: str,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Delete a OAuth2 client (DEV)
    
    :param str idOrShortname: ID or shortname of client to delete
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404:raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON

    """
    from os import getenv
    from requests import delete
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/oauth/client/{idOrShortname}".format(settings["api"]["api_url"], idOrShortname=idOrShortname)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = delete(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("authentication","v1","oauth","authorize"),
    module=argus_cli_module
)
def get_oauth2_client(
    idOrShortname: str,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch a OAuth2 client descriptor (DEV)
    
    :param str idOrShortname: ID or shortname of client to fetch
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404:raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON

    """
    from os import getenv
    from requests import get
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/oauth/client/{idOrShortname}".format(settings["api"]["api_url"], idOrShortname=idOrShortname)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("authentication","v1","oauth","authorize"),
    module=argus_cli_module
)
def get_token(
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Exchange a OAuth2 authorization code with an access token (DEV)
    
    :raises ValidationErrorException: on 400:raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON

    """
    from os import getenv
    from requests import post
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/oauth/token".format(settings["api"]["api_url"], )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()


@register_command(
    extending=("authentication","v1","oauth","authorize"),
    module=argus_cli_module
)
def update_o_auth2_client(
    idOrShortname: str,
    shortName: str = None,
    name: str = None,
    description: str = None,
    mainURI: str = None,
    redirectURI: str = None,
    requiredFunction: str = None,
    permissionScope: str = None,
    authenticationMethod: str = None,
    clientSecret: str = None,
    clientIPRange: str = None,
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Update an existing OAuth2 client (DEV)
    
    :param str idOrShortname: ID or shortname of OAuth2 client to update
    :param str shortName: [a-zA-Z0-9_\-\.]*
    :param str name: [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param str description: [\s\w\{\}\$\-\(\)\.\[\]"\'_/\\,\*\+\#:@!?;=]*
    :param str mainURI: Sanitize by regex https://.*
    :param str redirectURI: Sanitize by regex https://.*
    :param str requiredFunction: 
    :param str permissionScope: 
    :param str authenticationMethod: 
    :param str clientSecret: 
    :param list clientIPRange: format:ip
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412:raises ArgusException: on other status codes
    
    :returns dictionary translated from JSON

    """
    from os import getenv
    from requests import put
    from argus_api._validators import validate_http_response
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/oauth/client/{idOrShortname}".format(settings["api"]["api_url"], idOrShortname=idOrShortname)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
        'content': 'application/json'
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({ "shortName": shortName })
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({ "name": name })
    # Only send description if the argument was provided, dont send null values
    if description is not None:
        body.update({ "description": description })
    # Only send mainURI if the argument was provided, dont send null values
    if mainURI is not None:
        body.update({ "mainURI": mainURI })
    # Only send redirectURI if the argument was provided, dont send null values
    if redirectURI is not None:
        body.update({ "redirectURI": redirectURI })
    # Only send requiredFunction if the argument was provided, dont send null values
    if requiredFunction is not None:
        body.update({ "requiredFunction": requiredFunction })
    # Only send permissionScope if the argument was provided, dont send null values
    if permissionScope is not None:
        body.update({ "permissionScope": permissionScope })
    # Only send authenticationMethod if the argument was provided, dont send null values
    if authenticationMethod is not None:
        body.update({ "authenticationMethod": authenticationMethod })
    # Only send clientSecret if the argument was provided, dont send null values
    if clientSecret is not None:
        body.update({ "clientSecret": clientSecret })
    # Only send clientIPRange if the argument was provided, dont send null values
    if clientIPRange is not None:
        body.update({ "clientIPRange": clientIPRange })

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    validate_http_response(response)
    return response.json()

