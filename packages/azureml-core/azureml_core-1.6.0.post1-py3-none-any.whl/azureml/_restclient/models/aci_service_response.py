# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .service_response_base import ServiceResponseBase


class ACIServiceResponse(ServiceResponseBase):
    """The response for an ACI service.

    :param created_time: The time the service was created.
    :type created_time: datetime
    :param deployment_type: The deployment type for the service. Possible
     values include: 'GRPCRealtimeEndpoint', 'HttpRealtimeEndpoint'
    :type deployment_type: str or ~_restclient.models.DeploymentType
    :param description: The service description.
    :type description: str
    :param error: The error details.
    :type error: ~_restclient.models.ModelErrorResponse
    :param id: The service Id.
    :type id: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param name: The service name.
    :type name: str
    :param properties: The service property dictionary. Properties are
     immutable.
    :type properties: dict[str, str]
    :param state: The current state of the service. Possible values include:
     'Transitioning', 'Healthy', 'Unhealthy', 'Failed'
    :type state: str or ~_restclient.models.WebServiceState
    :param tags: The service tag list.
    :type tags: list[str]
    :param updated_time: The time the service was updated.
    :type updated_time: datetime
    :param compute_type: Constant filled by server.
    :type compute_type: str
    :param container_resource_requirements: The container resource
     requirements.
    :type container_resource_requirements:
     ~_restclient.models.ContainerResourceRequirements
    :param image_id: The Id of the Image.
    :type image_id: str
    :param serving_container_inference_configuration: The Image configuration
     details.
    :type serving_container_inference_configuration:
     ~_restclient.models.ServingContainerInferenceConfiguration
    :param image_details: The Image details.
    :type image_details: ~_restclient.models.DockerImageResponse
    :param scoring_uri: The Uri for sending scoring requests.
    :type scoring_uri: str
    :param location: The location of the service.
    :type location: str
    :param auth_enabled: Whether or not authentication is enabled on the
     service.
    :type auth_enabled: bool
    :param ssl_enabled: Whether or not SSL is enabled.
    :type ssl_enabled: bool
    :param app_insights_enabled: Whether or not Application Insights is
     enabled.
    :type app_insights_enabled: bool
    :param data_collection: Details of the data collection options specified.
    :type data_collection: ~_restclient.models.ModelDataCollection
    :param ssl_certificate: The SSL certificate to use if SSL is enabled.
    :type ssl_certificate: str
    :param ssl_key: The SSL key for the certificate.
    :type ssl_key: str
    :param cname: The CName for the service.
    :type cname: str
    :param public_ip: The public IP address for the service.
    :type public_ip: str
    :param swagger_uri: The Uri for sending swagger requests.
    :type swagger_uri: str
    :param model_config_map: Details on the models and configurations.
    :type model_config_map: dict[str, object]
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'id': {'key': 'id', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'state': {'key': 'state', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'serving_container_inference_configuration': {'key': 'servingContainerInferenceConfiguration', 'type': 'ServingContainerInferenceConfiguration'},
        'image_details': {'key': 'imageDetails', 'type': 'DockerImageResponse'},
        'scoring_uri': {'key': 'scoringUri', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'auth_enabled': {'key': 'authEnabled', 'type': 'bool'},
        'ssl_enabled': {'key': 'sslEnabled', 'type': 'bool'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'data_collection': {'key': 'dataCollection', 'type': 'ModelDataCollection'},
        'ssl_certificate': {'key': 'sslCertificate', 'type': 'str'},
        'ssl_key': {'key': 'sslKey', 'type': 'str'},
        'cname': {'key': 'cname', 'type': 'str'},
        'public_ip': {'key': 'publicIp', 'type': 'str'},
        'swagger_uri': {'key': 'swaggerUri', 'type': 'str'},
        'model_config_map': {'key': 'modelConfigMap', 'type': '{object}'},
    }

    def __init__(self, created_time=None, deployment_type=None, description=None, error=None, id=None, kv_tags=None, name=None, properties=None, state=None, tags=None, updated_time=None, container_resource_requirements=None, image_id=None, serving_container_inference_configuration=None, image_details=None, scoring_uri=None, location=None, auth_enabled=None, ssl_enabled=None, app_insights_enabled=None, data_collection=None, ssl_certificate=None, ssl_key=None, cname=None, public_ip=None, swagger_uri=None, model_config_map=None):
        super(ACIServiceResponse, self).__init__(created_time=created_time, deployment_type=deployment_type, description=description, error=error, id=id, kv_tags=kv_tags, name=name, properties=properties, state=state, tags=tags, updated_time=updated_time)
        self.container_resource_requirements = container_resource_requirements
        self.image_id = image_id
        self.serving_container_inference_configuration = serving_container_inference_configuration
        self.image_details = image_details
        self.scoring_uri = scoring_uri
        self.location = location
        self.auth_enabled = auth_enabled
        self.ssl_enabled = ssl_enabled
        self.app_insights_enabled = app_insights_enabled
        self.data_collection = data_collection
        self.ssl_certificate = ssl_certificate
        self.ssl_key = ssl_key
        self.cname = cname
        self.public_ip = public_ip
        self.swagger_uri = swagger_uri
        self.model_config_map = model_config_map
        self.compute_type = 'ACI'
