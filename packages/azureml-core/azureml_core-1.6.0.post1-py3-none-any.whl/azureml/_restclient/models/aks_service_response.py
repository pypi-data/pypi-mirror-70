# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .service_response_base import ServiceResponseBase


class AKSServiceResponse(ServiceResponseBase):
    """Response for an AKS service.

    :param created_time: The time the service was created.
    :type created_time: datetime
    :param deployment_type: The deployment type for the service. Possible
     values include: 'GRPCRealtimeEndpoint', 'HttpRealtimeEndpoint'
    :type deployment_type: str or ~_restclient.models.DeploymentType
    :param description: The service description.
    :type description: str
    :param error: The error details.
    :type error: ~_restclient.models.ModelErrorResponse
    :param id: The service Id.
    :type id: str
    :param kv_tags: The service tag dictionary. Tags are mutable.
    :type kv_tags: dict[str, str]
    :param name: The service name.
    :type name: str
    :param properties: The service property dictionary. Properties are
     immutable.
    :type properties: dict[str, str]
    :param state: The current state of the service. Possible values include:
     'Transitioning', 'Healthy', 'Unhealthy', 'Failed'
    :type state: str or ~_restclient.models.WebServiceState
    :param tags: The service tag list.
    :type tags: list[str]
    :param updated_time: The time the service was updated.
    :type updated_time: datetime
    :param compute_type: Constant filled by server.
    :type compute_type: str
    :param image_details:
    :type image_details: ~_restclient.models.DockerImageResponse
    :param image_id: The id of the image.
    :type image_id: str
    :param models_property: Enumerable of models
    :type models_property: list[~_restclient.models.Model]
    :param container_resource_requirements:
    :type container_resource_requirements:
     ~_restclient.models.ContainerResourceRequirements
    :param liveness_probe_requirements:
    :type liveness_probe_requirements:
     ~_restclient.models.LivenessProbeRequirements
    :param max_concurrent_requests_per_container: Maximum number of concurrent
     requests per container.
    :type max_concurrent_requests_per_container: int
    :param max_queue_wait_ms: Maximum time a request will wait in the queue
     (in milliseconds). After this time, the service will return 503 (Service
     Unavailable)
    :type max_queue_wait_ms: int
    :param compute_name: Id of the compute resource.
    :type compute_name: str
    :param num_replicas: Number of replicas on the cluster.
    :type num_replicas: int
    :param data_collection:
    :type data_collection: ~_restclient.models.ModelDataCollection
    :param app_insights_enabled: Enable or disable app insights.
    :type app_insights_enabled: bool
    :param auto_scaler:
    :type auto_scaler: ~_restclient.models.AutoScaler
    :param scoring_uri: Uri for sending scoring requests.
    :type scoring_uri: str
    :param deployment_status:
    :type deployment_status: ~_restclient.models.AKSReplicaStatus
    :param scoring_timeout_ms: Scoring timeout in milliseconds.
    :type scoring_timeout_ms: int
    """

    _validation = {
        'compute_type': {'required': True},
    }

    _attribute_map = {
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'id': {'key': 'id', 'type': 'str'},
        'kv_tags': {'key': 'kvTags', 'type': '{str}'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'state': {'key': 'state', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'image_details': {'key': 'imageDetails', 'type': 'DockerImageResponse'},
        'image_id': {'key': 'imageId', 'type': 'str'},
        'models_property': {'key': 'models', 'type': '[Model]'},
        'container_resource_requirements': {'key': 'containerResourceRequirements', 'type': 'ContainerResourceRequirements'},
        'liveness_probe_requirements': {'key': 'livenessProbeRequirements', 'type': 'LivenessProbeRequirements'},
        'max_concurrent_requests_per_container': {'key': 'maxConcurrentRequestsPerContainer', 'type': 'int'},
        'max_queue_wait_ms': {'key': 'maxQueueWaitMs', 'type': 'int'},
        'compute_name': {'key': 'computeName', 'type': 'str'},
        'num_replicas': {'key': 'numReplicas', 'type': 'int'},
        'data_collection': {'key': 'dataCollection', 'type': 'ModelDataCollection'},
        'app_insights_enabled': {'key': 'appInsightsEnabled', 'type': 'bool'},
        'auto_scaler': {'key': 'autoScaler', 'type': 'AutoScaler'},
        'scoring_uri': {'key': 'scoringUri', 'type': 'str'},
        'deployment_status': {'key': 'deploymentStatus', 'type': 'AKSReplicaStatus'},
        'scoring_timeout_ms': {'key': 'scoringTimeoutMs', 'type': 'int'},
    }

    def __init__(self, created_time=None, deployment_type=None, description=None, error=None, id=None, kv_tags=None, name=None, properties=None, state=None, tags=None, updated_time=None, image_details=None, image_id=None, models_property=None, container_resource_requirements=None, liveness_probe_requirements=None, max_concurrent_requests_per_container=None, max_queue_wait_ms=None, compute_name=None, num_replicas=None, data_collection=None, app_insights_enabled=None, auto_scaler=None, scoring_uri=None, deployment_status=None, scoring_timeout_ms=None):
        super(AKSServiceResponse, self).__init__(created_time=created_time, deployment_type=deployment_type, description=description, error=error, id=id, kv_tags=kv_tags, name=name, properties=properties, state=state, tags=tags, updated_time=updated_time)
        self.image_details = image_details
        self.image_id = image_id
        self.models_property = models_property
        self.container_resource_requirements = container_resource_requirements
        self.liveness_probe_requirements = liveness_probe_requirements
        self.max_concurrent_requests_per_container = max_concurrent_requests_per_container
        self.max_queue_wait_ms = max_queue_wait_ms
        self.compute_name = compute_name
        self.num_replicas = num_replicas
        self.data_collection = data_collection
        self.app_insights_enabled = app_insights_enabled
        self.auto_scaler = auto_scaler
        self.scoring_uri = scoring_uri
        self.deployment_status = deployment_status
        self.scoring_timeout_ms = scoring_timeout_ms
        self.compute_type = 'AKS'
