# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AsyncOperationStatus(Model):
    """The operation status.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param id: The async operation id
    :type id: str
    :param operation_type: The async operation type. Possible values include:
     'Image', 'Service'
    :type operation_type: str or ~_restclient.models.enum
    :param state: Possible values include: 'NotStarted', 'Running',
     'Cancelled', 'Succeeded', 'Failed'
    :type state: str or ~_restclient.models.enum
    :ivar created_time: The async operation creation time (UTC)
    :vartype created_time: datetime
    :ivar end_time: The async operation end time (UTC)
    :vartype end_time: datetime
    :param error:
    :type error: ~_restclient.models.ModelErrorResponse
    :param resource_location: The resource created/updated by the async
     operation
    :type resource_location: str
    """

    _validation = {
        'created_time': {'readonly': True},
        'end_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'ModelErrorResponse'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
    }

    def __init__(self, id=None, operation_type=None, state=None, error=None, resource_location=None):
        super(AsyncOperationStatus, self).__init__()
        self.id = id
        self.operation_type = operation_type
        self.state = state
        self.created_time = None
        self.end_time = None
        self.error = error
        self.resource_location = resource_location
