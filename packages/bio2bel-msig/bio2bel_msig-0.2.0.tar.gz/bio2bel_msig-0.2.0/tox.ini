[tox]
envlist = coverage-clean, docs, py, coverage-report, rst-lint, manifest

[testenv]
commands = coverage run -p -m pytest --durations=20 tests {posargs}
deps =
    coverage
    pytest
whitelist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir

[testenv:rst-lint]
commands = rst-lint README.rst
skip_install = true
deps =
    restructuredtext_lint
    pygments

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:docs]
changedir = docs
deps =
    sphinx
    sphinx_rtd_theme
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    sphinx-build -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

[testenv:flake8]
basepython = python3
skip_install = true
deps =
    flake8
    flake8-bandit
    flake8-builtins
    flake8-bugbear
    flake8-colors
    flake8-commas
    flake8-comprehensions
    flake8-docstrings
    flake8-import-order
    flake8-print
    flake8-use-fstring
    pep8-naming
    pydocstyle
commands =
    flake8 src/bio2bel_msig/ tests/ setup.py
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

[testenv:doc8]
basepython = python3
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
deps =
    bumpversion

[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:finish]
basepython = python3
skip_install = true
whitelist_externals =
    /bin/git
    /usr/local/bin/git
deps =
    {[testenv:build]deps}
    {[testenv:release]deps}
    bumpversion
commands =
    bumpversion release
    {[testenv:release]commands}
    git push
    bumpversion --message "Patch version [skip ci]" patch
