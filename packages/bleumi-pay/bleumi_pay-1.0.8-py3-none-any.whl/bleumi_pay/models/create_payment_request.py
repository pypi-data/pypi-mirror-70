# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreatePaymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'token': 'str',
        'buyer_address': 'str',
        'transfer_address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'token': 'token',
        'buyer_address': 'buyerAddress',
        'transfer_address': 'transferAddress'
    }

    def __init__(self, id=None, token=None, buyer_address=None, transfer_address=None):  # noqa: E501
        """CreatePaymentRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._token = None
        self._buyer_address = None
        self._transfer_address = None
        self.discriminator = None
        self.id = id
        if token is not None:
            self.token = token
        self.buyer_address = buyer_address
        self.transfer_address = transfer_address

    @property
    def id(self):
        """Gets the id of this CreatePaymentRequest.  # noqa: E501

        Unique ID identifying the payment  # noqa: E501

        :return: The id of this CreatePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreatePaymentRequest.

        Unique ID identifying the payment  # noqa: E501

        :param id: The id of this CreatePaymentRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def token(self):
        """Gets the token of this CreatePaymentRequest.  # noqa: E501

        (Only for Algorand Standard Asset) Asset id which will be used for payment.  # noqa: E501

        :return: The token of this CreatePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreatePaymentRequest.

        (Only for Algorand Standard Asset) Asset id which will be used for payment.  # noqa: E501

        :param token: The token of this CreatePaymentRequest.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def buyer_address(self):
        """Gets the buyer_address of this CreatePaymentRequest.  # noqa: E501

        Address of buyer. Refund operations on this payment will use this address. You can set this to your address to manually handle refunds (outside of Bleumi Pay) to your buyer. This address must be able to receive payments from smart contracts.  # noqa: E501

        :return: The buyer_address of this CreatePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._buyer_address

    @buyer_address.setter
    def buyer_address(self, buyer_address):
        """Sets the buyer_address of this CreatePaymentRequest.

        Address of buyer. Refund operations on this payment will use this address. You can set this to your address to manually handle refunds (outside of Bleumi Pay) to your buyer. This address must be able to receive payments from smart contracts.  # noqa: E501

        :param buyer_address: The buyer_address of this CreatePaymentRequest.  # noqa: E501
        :type: str
        """
        if buyer_address is None:
            raise ValueError("Invalid value for `buyer_address`, must not be `None`")  # noqa: E501

        self._buyer_address = buyer_address

    @property
    def transfer_address(self):
        """Gets the transfer_address of this CreatePaymentRequest.  # noqa: E501

        Your deposit address. Settle operations on this payment will use this address. This address must be able to receive payments from smart contracts.  # noqa: E501

        :return: The transfer_address of this CreatePaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._transfer_address

    @transfer_address.setter
    def transfer_address(self, transfer_address):
        """Sets the transfer_address of this CreatePaymentRequest.

        Your deposit address. Settle operations on this payment will use this address. This address must be able to receive payments from smart contracts.  # noqa: E501

        :param transfer_address: The transfer_address of this CreatePaymentRequest.  # noqa: E501
        :type: str
        """
        if transfer_address is None:
            raise ValueError("Invalid value for `transfer_address`, must not be `None`")  # noqa: E501

        self._transfer_address = transfer_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
