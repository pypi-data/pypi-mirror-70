#!/usr/bin/python3 -u
# BOTD - IRC channel daemon serving 24/7 in the background
#
# bin/bot (irc bot)

__version__ = 83
__txt__ = """.

 > bot                	- starts a shell
 > bot <args>         	- executes a command
 > bot cmds		- shows list of commands
 > bot -m <mod1,mod2> 	- load modules
 > bot mods		- shows loadable modules
 > bot -w <dir>       	- use directory as workdir, default is ~/.mybot
 > bot cfg		- show configuration
 > bot -o <op1,op2>   	- set options
 > bot -l <level>     	- set loglevel

example:

 > bot -m bot.irc -s localhost -c \#dunkbots -n mybot --owner root@shell

"""

import sys, os

sys.path.insert(0, os.getcwd())

def scan_dir(dname):
    if not os.path.isdir(dname):
        return
    for ename in os.listdir(dname):
        if ename.endswith(".egg"):
           sys.path.insert(0, os.path.join(dname, ename))

import logging
import os
import sys
import time

scan_dir("eggs")

import lo
import bot
import bot.mods

from lo.krn import Kernel
from lo.csl import Console
from lo.shl import daemon, enable_history, execute, level, parse_cli, set_completer

opts = [
    ('-c', '--channel', 'store', str, "", "channel to join", 'channel'),
    ('-l', '--loglevel', 'store', str, "error", 'set loglevel.', 'level'),
    ('-m', '--modules', 'store', str, "", 'modules to load.', 'modules'),
    ('-n', '--nick', 'store', str, "", 'nickname to use.', 'nick'),
    ('-o', '--options', 'store', str, "", "options to use", 'options'),
    ('-r', '--root', 'store_true', False, 'use root', 'root'),
    ('-s', '--server', 'store', str, "", "server to connect to", 'server'),
    ('-w', '--workdir', 'store', str, "", "directory to work on", 'workdir'),
    ('-x', '--owner', 'store', str, "", "owner's userhost", 'owner')
]

def main():
    parse_cli("botd", opts, __version__, __txt__)
    if lo.cfg.root:
        lo.cfg.workdir = lo.workdir = "/var/lib/botd"
        lo.cfg.logfile = "/var/log/botd/botd.log"
    level(lo.cfg.level, lo.cfg.logfile)
    k = Kernel()
    if lo.cfg.txt:
        k.walk(lo.cfg.modules or "bot.mods")
        k.cmd(lo.cfg.txt)
        return
    if not lo.cfg.modules:
        lo.cfg.modules = "bot.mods.shw"
    k.start(True)
    set_completer(k.cmds)
    enable_history()
    k.wait()
    
execute(main)
os._exit(0)
