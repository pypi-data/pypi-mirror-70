# coding: utf-8

"""
    Cartotool

    Cartotool api project for using the cartotool.com application with Python scripts  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: info@cartotool.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cartotool.configuration import Configuration


class DataCollectionForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'project': 'str',
        'size': 'int',
        'head': 'list[str]',
        'geometry_srid': 'int',
        'geometry_type': 'str',
        'geometry_cols': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'project': 'project',
        'size': 'size',
        'head': 'head',
        'geometry_srid': 'geometrySrid',
        'geometry_type': 'geometryType',
        'geometry_cols': 'geometryCols'
    }

    def __init__(self, name=None, description=None, project=None, size=None, head=None, geometry_srid=None, geometry_type=None, geometry_cols=None, local_vars_configuration=None):  # noqa: E501
        """DataCollectionForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._project = None
        self._size = None
        self._head = None
        self._geometry_srid = None
        self._geometry_type = None
        self._geometry_cols = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if project is not None:
            self.project = project
        if size is not None:
            self.size = size
        if head is not None:
            self.head = head
        if geometry_srid is not None:
            self.geometry_srid = geometry_srid
        if geometry_type is not None:
            self.geometry_type = geometry_type
        if geometry_cols is not None:
            self.geometry_cols = geometry_cols

    @property
    def name(self):
        """Gets the name of this DataCollectionForm.  # noqa: E501


        :return: The name of this DataCollectionForm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataCollectionForm.


        :param name: The name of this DataCollectionForm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DataCollectionForm.  # noqa: E501


        :return: The description of this DataCollectionForm.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataCollectionForm.


        :param description: The description of this DataCollectionForm.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def project(self):
        """Gets the project of this DataCollectionForm.  # noqa: E501


        :return: The project of this DataCollectionForm.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this DataCollectionForm.


        :param project: The project of this DataCollectionForm.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def size(self):
        """Gets the size of this DataCollectionForm.  # noqa: E501


        :return: The size of this DataCollectionForm.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DataCollectionForm.


        :param size: The size of this DataCollectionForm.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def head(self):
        """Gets the head of this DataCollectionForm.  # noqa: E501


        :return: The head of this DataCollectionForm.  # noqa: E501
        :rtype: list[str]
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this DataCollectionForm.


        :param head: The head of this DataCollectionForm.  # noqa: E501
        :type: list[str]
        """

        self._head = head

    @property
    def geometry_srid(self):
        """Gets the geometry_srid of this DataCollectionForm.  # noqa: E501


        :return: The geometry_srid of this DataCollectionForm.  # noqa: E501
        :rtype: int
        """
        return self._geometry_srid

    @geometry_srid.setter
    def geometry_srid(self, geometry_srid):
        """Sets the geometry_srid of this DataCollectionForm.


        :param geometry_srid: The geometry_srid of this DataCollectionForm.  # noqa: E501
        :type: int
        """

        self._geometry_srid = geometry_srid

    @property
    def geometry_type(self):
        """Gets the geometry_type of this DataCollectionForm.  # noqa: E501


        :return: The geometry_type of this DataCollectionForm.  # noqa: E501
        :rtype: str
        """
        return self._geometry_type

    @geometry_type.setter
    def geometry_type(self, geometry_type):
        """Sets the geometry_type of this DataCollectionForm.


        :param geometry_type: The geometry_type of this DataCollectionForm.  # noqa: E501
        :type: str
        """

        self._geometry_type = geometry_type

    @property
    def geometry_cols(self):
        """Gets the geometry_cols of this DataCollectionForm.  # noqa: E501


        :return: The geometry_cols of this DataCollectionForm.  # noqa: E501
        :rtype: str
        """
        return self._geometry_cols

    @geometry_cols.setter
    def geometry_cols(self, geometry_cols):
        """Sets the geometry_cols of this DataCollectionForm.


        :param geometry_cols: The geometry_cols of this DataCollectionForm.  # noqa: E501
        :type: str
        """

        self._geometry_cols = geometry_cols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCollectionForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataCollectionForm):
            return True

        return self.to_dict() != other.to_dict()
