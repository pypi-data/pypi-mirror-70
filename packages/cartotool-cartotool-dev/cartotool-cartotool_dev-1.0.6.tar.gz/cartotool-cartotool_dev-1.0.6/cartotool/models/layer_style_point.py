# coding: utf-8

"""
    Cartotool

    Cartotool api project for using the cartotool.com application with Python scripts  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: info@cartotool.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cartotool.configuration import Configuration


class LayerStylePoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'value': 'str',
        'label': 'str',
        'position': 'int',
        'fill_color': 'str',
        'stroke_color': 'str',
        'stroke_width': 'float',
        'size': 'float',
        'icon': 'str'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'label': 'label',
        'position': 'position',
        'fill_color': 'fillColor',
        'stroke_color': 'strokeColor',
        'stroke_width': 'strokeWidth',
        'size': 'size',
        'icon': 'icon'
    }

    def __init__(self, id=None, value=None, label=None, position=None, fill_color=None, stroke_color=None, stroke_width=None, size=None, icon=None, local_vars_configuration=None):  # noqa: E501
        """LayerStylePoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._value = None
        self._label = None
        self._position = None
        self._fill_color = None
        self._stroke_color = None
        self._stroke_width = None
        self._size = None
        self._icon = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if label is not None:
            self.label = label
        if position is not None:
            self.position = position
        if fill_color is not None:
            self.fill_color = fill_color
        if stroke_color is not None:
            self.stroke_color = stroke_color
        if stroke_width is not None:
            self.stroke_width = stroke_width
        if size is not None:
            self.size = size
        if icon is not None:
            self.icon = icon

    @property
    def id(self):
        """Gets the id of this LayerStylePoint.  # noqa: E501


        :return: The id of this LayerStylePoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LayerStylePoint.


        :param id: The id of this LayerStylePoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this LayerStylePoint.  # noqa: E501


        :return: The value of this LayerStylePoint.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LayerStylePoint.


        :param value: The value of this LayerStylePoint.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def label(self):
        """Gets the label of this LayerStylePoint.  # noqa: E501


        :return: The label of this LayerStylePoint.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LayerStylePoint.


        :param label: The label of this LayerStylePoint.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def position(self):
        """Gets the position of this LayerStylePoint.  # noqa: E501


        :return: The position of this LayerStylePoint.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this LayerStylePoint.


        :param position: The position of this LayerStylePoint.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def fill_color(self):
        """Gets the fill_color of this LayerStylePoint.  # noqa: E501


        :return: The fill_color of this LayerStylePoint.  # noqa: E501
        :rtype: str
        """
        return self._fill_color

    @fill_color.setter
    def fill_color(self, fill_color):
        """Sets the fill_color of this LayerStylePoint.


        :param fill_color: The fill_color of this LayerStylePoint.  # noqa: E501
        :type: str
        """

        self._fill_color = fill_color

    @property
    def stroke_color(self):
        """Gets the stroke_color of this LayerStylePoint.  # noqa: E501


        :return: The stroke_color of this LayerStylePoint.  # noqa: E501
        :rtype: str
        """
        return self._stroke_color

    @stroke_color.setter
    def stroke_color(self, stroke_color):
        """Sets the stroke_color of this LayerStylePoint.


        :param stroke_color: The stroke_color of this LayerStylePoint.  # noqa: E501
        :type: str
        """

        self._stroke_color = stroke_color

    @property
    def stroke_width(self):
        """Gets the stroke_width of this LayerStylePoint.  # noqa: E501


        :return: The stroke_width of this LayerStylePoint.  # noqa: E501
        :rtype: float
        """
        return self._stroke_width

    @stroke_width.setter
    def stroke_width(self, stroke_width):
        """Sets the stroke_width of this LayerStylePoint.


        :param stroke_width: The stroke_width of this LayerStylePoint.  # noqa: E501
        :type: float
        """

        self._stroke_width = stroke_width

    @property
    def size(self):
        """Gets the size of this LayerStylePoint.  # noqa: E501


        :return: The size of this LayerStylePoint.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LayerStylePoint.


        :param size: The size of this LayerStylePoint.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def icon(self):
        """Gets the icon of this LayerStylePoint.  # noqa: E501


        :return: The icon of this LayerStylePoint.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this LayerStylePoint.


        :param icon: The icon of this LayerStylePoint.  # noqa: E501
        :type: str
        """

        self._icon = icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerStylePoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LayerStylePoint):
            return True

        return self.to_dict() != other.to_dict()
