# coding: utf-8

"""
    Cartotool

    Cartotool api project for using the cartotool.com application with Python scripts  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: info@cartotool.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cartotool.configuration import Configuration


class ProjectForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'workspace_code': 'str',
        'name': 'str',
        'description': 'str',
        'watermark': 'str',
        'image': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'zoom': 'int',
        'base_url': 'str',
        'public': 'bool'
    }

    attribute_map = {
        'workspace_code': 'workspaceCode',
        'name': 'name',
        'description': 'description',
        'watermark': 'watermark',
        'image': 'image',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'zoom': 'zoom',
        'base_url': 'baseUrl',
        'public': 'public'
    }

    def __init__(self, workspace_code=None, name=None, description=None, watermark=None, image=None, longitude=None, latitude=None, zoom=None, base_url=None, public=None, local_vars_configuration=None):  # noqa: E501
        """ProjectForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._workspace_code = None
        self._name = None
        self._description = None
        self._watermark = None
        self._image = None
        self._longitude = None
        self._latitude = None
        self._zoom = None
        self._base_url = None
        self._public = None
        self.discriminator = None

        if workspace_code is not None:
            self.workspace_code = workspace_code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if watermark is not None:
            self.watermark = watermark
        if image is not None:
            self.image = image
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if zoom is not None:
            self.zoom = zoom
        if base_url is not None:
            self.base_url = base_url
        if public is not None:
            self.public = public

    @property
    def workspace_code(self):
        """Gets the workspace_code of this ProjectForm.  # noqa: E501


        :return: The workspace_code of this ProjectForm.  # noqa: E501
        :rtype: str
        """
        return self._workspace_code

    @workspace_code.setter
    def workspace_code(self, workspace_code):
        """Sets the workspace_code of this ProjectForm.


        :param workspace_code: The workspace_code of this ProjectForm.  # noqa: E501
        :type: str
        """

        self._workspace_code = workspace_code

    @property
    def name(self):
        """Gets the name of this ProjectForm.  # noqa: E501


        :return: The name of this ProjectForm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectForm.


        :param name: The name of this ProjectForm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProjectForm.  # noqa: E501


        :return: The description of this ProjectForm.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectForm.


        :param description: The description of this ProjectForm.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def watermark(self):
        """Gets the watermark of this ProjectForm.  # noqa: E501


        :return: The watermark of this ProjectForm.  # noqa: E501
        :rtype: str
        """
        return self._watermark

    @watermark.setter
    def watermark(self, watermark):
        """Sets the watermark of this ProjectForm.


        :param watermark: The watermark of this ProjectForm.  # noqa: E501
        :type: str
        """

        self._watermark = watermark

    @property
    def image(self):
        """Gets the image of this ProjectForm.  # noqa: E501


        :return: The image of this ProjectForm.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ProjectForm.


        :param image: The image of this ProjectForm.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def longitude(self):
        """Gets the longitude of this ProjectForm.  # noqa: E501


        :return: The longitude of this ProjectForm.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ProjectForm.


        :param longitude: The longitude of this ProjectForm.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this ProjectForm.  # noqa: E501


        :return: The latitude of this ProjectForm.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ProjectForm.


        :param latitude: The latitude of this ProjectForm.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def zoom(self):
        """Gets the zoom of this ProjectForm.  # noqa: E501


        :return: The zoom of this ProjectForm.  # noqa: E501
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this ProjectForm.


        :param zoom: The zoom of this ProjectForm.  # noqa: E501
        :type: int
        """

        self._zoom = zoom

    @property
    def base_url(self):
        """Gets the base_url of this ProjectForm.  # noqa: E501


        :return: The base_url of this ProjectForm.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ProjectForm.


        :param base_url: The base_url of this ProjectForm.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def public(self):
        """Gets the public of this ProjectForm.  # noqa: E501


        :return: The public of this ProjectForm.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ProjectForm.


        :param public: The public of this ProjectForm.  # noqa: E501
        :type: bool
        """

        self._public = public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectForm):
            return True

        return self.to_dict() != other.to_dict()
