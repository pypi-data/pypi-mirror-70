# coding: utf-8

"""
    Cartotool

    Cartotool api project for using the cartotool.com application with Python scripts  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: info@cartotool.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cartotool.configuration import Configuration


class Story(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_code': 'str',
        'id': 'int',
        'code': 'str',
        'name': 'str',
        'markdown': 'str',
        'image': 'str',
        'creation_date': 'datetime',
        'project': 'Project'
    }

    attribute_map = {
        'project_code': 'projectCode',
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'markdown': 'markdown',
        'image': 'image',
        'creation_date': 'creationDate',
        'project': 'project'
    }

    def __init__(self, project_code=None, id=None, code=None, name=None, markdown=None, image=None, creation_date=None, project=None, local_vars_configuration=None):  # noqa: E501
        """Story - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_code = None
        self._id = None
        self._code = None
        self._name = None
        self._markdown = None
        self._image = None
        self._creation_date = None
        self._project = None
        self.discriminator = None

        if project_code is not None:
            self.project_code = project_code
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if markdown is not None:
            self.markdown = markdown
        if image is not None:
            self.image = image
        if creation_date is not None:
            self.creation_date = creation_date
        if project is not None:
            self.project = project

    @property
    def project_code(self):
        """Gets the project_code of this Story.  # noqa: E501


        :return: The project_code of this Story.  # noqa: E501
        :rtype: str
        """
        return self._project_code

    @project_code.setter
    def project_code(self, project_code):
        """Sets the project_code of this Story.


        :param project_code: The project_code of this Story.  # noqa: E501
        :type: str
        """

        self._project_code = project_code

    @property
    def id(self):
        """Gets the id of this Story.  # noqa: E501


        :return: The id of this Story.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Story.


        :param id: The id of this Story.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this Story.  # noqa: E501


        :return: The code of this Story.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Story.


        :param code: The code of this Story.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this Story.  # noqa: E501


        :return: The name of this Story.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Story.


        :param name: The name of this Story.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def markdown(self):
        """Gets the markdown of this Story.  # noqa: E501


        :return: The markdown of this Story.  # noqa: E501
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """Sets the markdown of this Story.


        :param markdown: The markdown of this Story.  # noqa: E501
        :type: str
        """

        self._markdown = markdown

    @property
    def image(self):
        """Gets the image of this Story.  # noqa: E501


        :return: The image of this Story.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Story.


        :param image: The image of this Story.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def creation_date(self):
        """Gets the creation_date of this Story.  # noqa: E501


        :return: The creation_date of this Story.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Story.


        :param creation_date: The creation_date of this Story.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def project(self):
        """Gets the project of this Story.  # noqa: E501


        :return: The project of this Story.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Story.


        :param project: The project of this Story.  # noqa: E501
        :type: Project
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Story):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Story):
            return True

        return self.to_dict() != other.to_dict()
