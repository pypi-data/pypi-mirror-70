# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.layer_wrapper import LayerWrapper  # noqa: E501
from openapi_client.rest import ApiException

class TestLayerWrapper(unittest.TestCase):
    """LayerWrapper unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test LayerWrapper
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.layer_wrapper.LayerWrapper()  # noqa: E501
        if include_optional :
            return LayerWrapper(
                layer = openapi_client.models.layer.Layer(
                    id = 56, 
                    code = '0', 
                    name = '0', 
                    description = '0', 
                    footnote = '0', 
                    type = 'VECTOR', 
                    position = 56, 
                    visible = True, 
                    opacity = 1.337, 
                    hidden_layer = True, 
                    legend_enabled = True, 
                    base_layer = True, 
                    group = openapi_client.models.layer_group.LayerGroup(
                        id = 56, 
                        name = '0', 
                        parent = openapi_client.models.layer_group.LayerGroup(
                            id = 56, 
                            name = '0', 
                            position = 56, 
                            project = openapi_client.models.project.Project(
                                id = 56, 
                                code = '0', 
                                name = '0', 
                                description = '0', 
                                watermark = '0', 
                                workspace = openapi_client.models.workspace.Workspace(
                                    id = 56, 
                                    code = '0', 
                                    name = '0', 
                                    users = [
                                        openapi_client.models.workspace_user.WorkspaceUser(
                                            user_code = '0', 
                                            id = 56, 
                                            user = openapi_client.models.user.User(
                                                id = 56, 
                                                code = '0', 
                                                name = '0', 
                                                email = '0', 
                                                enabled = True, 
                                                authorities = [
                                                    '0'
                                                    ], 
                                                accounts = [
                                                    openapi_client.models.user_account.UserAccount(
                                                        id = 56, 
                                                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                                    ], 
                                                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                            role = 'VIEWER', )
                                        ], ), 
                                image = openapi_client.models.project_image.ProjectImage(
                                    id = 56, 
                                    name = '0', 
                                    file = [
                                        'YQ=='
                                        ], ), 
                                creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                longitude = 1.337, 
                                latitude = 1.337, 
                                zoom = 56, 
                                base_url = '0', 
                                public = True, ), ), 
                        position = 56, 
                        project = openapi_client.models.project.Project(
                            id = 56, 
                            code = '0', 
                            name = '0', 
                            description = '0', 
                            watermark = '0', 
                            creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            longitude = 1.337, 
                            latitude = 1.337, 
                            zoom = 56, 
                            base_url = '0', 
                            public = True, ), ), 
                    project = openapi_client.models.project.Project(
                        id = 56, 
                        code = '0', 
                        name = '0', 
                        description = '0', 
                        watermark = '0', 
                        creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        longitude = 1.337, 
                        latitude = 1.337, 
                        zoom = 56, 
                        base_url = '0', 
                        public = True, ), 
                    z_index = 56, ), 
                linked = True
            )
        else :
            return LayerWrapper(
        )

    def testLayerWrapper(self):
        """Test LayerWrapper"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
