# coding: utf-8

"""
    Cartotool

    Cartotool api project for using the cartotool.com application with Python scripts  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: info@cartotool.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cartotool.configuration import Configuration


class Layer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'code': 'str',
        'name': 'str',
        'description': 'str',
        'footnote': 'str',
        'type': 'str',
        'position': 'int',
        'visible': 'bool',
        'opacity': 'float',
        'hidden_layer': 'bool',
        'legend_enabled': 'bool',
        'base_layer': 'bool',
        'group': 'LayerGroup',
        'project': 'Project',
        'z_index': 'int'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'description': 'description',
        'footnote': 'footnote',
        'type': 'type',
        'position': 'position',
        'visible': 'visible',
        'opacity': 'opacity',
        'hidden_layer': 'hiddenLayer',
        'legend_enabled': 'legendEnabled',
        'base_layer': 'baseLayer',
        'group': 'group',
        'project': 'project',
        'z_index': 'zIndex'
    }

    def __init__(self, id=None, code=None, name=None, description=None, footnote=None, type=None, position=None, visible=None, opacity=None, hidden_layer=None, legend_enabled=None, base_layer=None, group=None, project=None, z_index=None, local_vars_configuration=None):  # noqa: E501
        """Layer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._code = None
        self._name = None
        self._description = None
        self._footnote = None
        self._type = None
        self._position = None
        self._visible = None
        self._opacity = None
        self._hidden_layer = None
        self._legend_enabled = None
        self._base_layer = None
        self._group = None
        self._project = None
        self._z_index = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if footnote is not None:
            self.footnote = footnote
        if type is not None:
            self.type = type
        if position is not None:
            self.position = position
        if visible is not None:
            self.visible = visible
        if opacity is not None:
            self.opacity = opacity
        if hidden_layer is not None:
            self.hidden_layer = hidden_layer
        if legend_enabled is not None:
            self.legend_enabled = legend_enabled
        if base_layer is not None:
            self.base_layer = base_layer
        if group is not None:
            self.group = group
        if project is not None:
            self.project = project
        if z_index is not None:
            self.z_index = z_index

    @property
    def id(self):
        """Gets the id of this Layer.  # noqa: E501


        :return: The id of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Layer.


        :param id: The id of this Layer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this Layer.  # noqa: E501


        :return: The code of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Layer.


        :param code: The code of this Layer.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this Layer.  # noqa: E501


        :return: The name of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Layer.


        :param name: The name of this Layer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Layer.  # noqa: E501


        :return: The description of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Layer.


        :param description: The description of this Layer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def footnote(self):
        """Gets the footnote of this Layer.  # noqa: E501


        :return: The footnote of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._footnote

    @footnote.setter
    def footnote(self, footnote):
        """Sets the footnote of this Layer.


        :param footnote: The footnote of this Layer.  # noqa: E501
        :type: str
        """

        self._footnote = footnote

    @property
    def type(self):
        """Gets the type of this Layer.  # noqa: E501


        :return: The type of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Layer.


        :param type: The type of this Layer.  # noqa: E501
        :type: str
        """
        allowed_values = ["VECTOR", "BITMAP", "WMS", "TMS", "LINKED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def position(self):
        """Gets the position of this Layer.  # noqa: E501


        :return: The position of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Layer.


        :param position: The position of this Layer.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def visible(self):
        """Gets the visible of this Layer.  # noqa: E501


        :return: The visible of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Layer.


        :param visible: The visible of this Layer.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def opacity(self):
        """Gets the opacity of this Layer.  # noqa: E501


        :return: The opacity of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this Layer.


        :param opacity: The opacity of this Layer.  # noqa: E501
        :type: float
        """

        self._opacity = opacity

    @property
    def hidden_layer(self):
        """Gets the hidden_layer of this Layer.  # noqa: E501


        :return: The hidden_layer of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_layer

    @hidden_layer.setter
    def hidden_layer(self, hidden_layer):
        """Sets the hidden_layer of this Layer.


        :param hidden_layer: The hidden_layer of this Layer.  # noqa: E501
        :type: bool
        """

        self._hidden_layer = hidden_layer

    @property
    def legend_enabled(self):
        """Gets the legend_enabled of this Layer.  # noqa: E501


        :return: The legend_enabled of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._legend_enabled

    @legend_enabled.setter
    def legend_enabled(self, legend_enabled):
        """Sets the legend_enabled of this Layer.


        :param legend_enabled: The legend_enabled of this Layer.  # noqa: E501
        :type: bool
        """

        self._legend_enabled = legend_enabled

    @property
    def base_layer(self):
        """Gets the base_layer of this Layer.  # noqa: E501


        :return: The base_layer of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._base_layer

    @base_layer.setter
    def base_layer(self, base_layer):
        """Sets the base_layer of this Layer.


        :param base_layer: The base_layer of this Layer.  # noqa: E501
        :type: bool
        """

        self._base_layer = base_layer

    @property
    def group(self):
        """Gets the group of this Layer.  # noqa: E501


        :return: The group of this Layer.  # noqa: E501
        :rtype: LayerGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Layer.


        :param group: The group of this Layer.  # noqa: E501
        :type: LayerGroup
        """

        self._group = group

    @property
    def project(self):
        """Gets the project of this Layer.  # noqa: E501


        :return: The project of this Layer.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Layer.


        :param project: The project of this Layer.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def z_index(self):
        """Gets the z_index of this Layer.  # noqa: E501


        :return: The z_index of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this Layer.


        :param z_index: The z_index of this Layer.  # noqa: E501
        :type: int
        """

        self._z_index = z_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Layer):
            return True

        return self.to_dict() != other.to_dict()
