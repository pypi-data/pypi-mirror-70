# coding: utf-8

"""
    Cartotool

    Cartotool api project for using the cartotool.com application with Python scripts  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: info@cartotool.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cartotool.configuration import Configuration


class LayerLinkedForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project': 'str',
        'layer': 'str',
        'group': 'int',
        'hidden_layer': 'bool',
        'base_layer': 'bool',
        'visible': 'bool'
    }

    attribute_map = {
        'project': 'project',
        'layer': 'layer',
        'group': 'group',
        'hidden_layer': 'hiddenLayer',
        'base_layer': 'baseLayer',
        'visible': 'visible'
    }

    def __init__(self, project=None, layer=None, group=None, hidden_layer=None, base_layer=None, visible=None, local_vars_configuration=None):  # noqa: E501
        """LayerLinkedForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project = None
        self._layer = None
        self._group = None
        self._hidden_layer = None
        self._base_layer = None
        self._visible = None
        self.discriminator = None

        if project is not None:
            self.project = project
        if layer is not None:
            self.layer = layer
        if group is not None:
            self.group = group
        if hidden_layer is not None:
            self.hidden_layer = hidden_layer
        if base_layer is not None:
            self.base_layer = base_layer
        if visible is not None:
            self.visible = visible

    @property
    def project(self):
        """Gets the project of this LayerLinkedForm.  # noqa: E501


        :return: The project of this LayerLinkedForm.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this LayerLinkedForm.


        :param project: The project of this LayerLinkedForm.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def layer(self):
        """Gets the layer of this LayerLinkedForm.  # noqa: E501


        :return: The layer of this LayerLinkedForm.  # noqa: E501
        :rtype: str
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this LayerLinkedForm.


        :param layer: The layer of this LayerLinkedForm.  # noqa: E501
        :type: str
        """

        self._layer = layer

    @property
    def group(self):
        """Gets the group of this LayerLinkedForm.  # noqa: E501


        :return: The group of this LayerLinkedForm.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this LayerLinkedForm.


        :param group: The group of this LayerLinkedForm.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def hidden_layer(self):
        """Gets the hidden_layer of this LayerLinkedForm.  # noqa: E501


        :return: The hidden_layer of this LayerLinkedForm.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_layer

    @hidden_layer.setter
    def hidden_layer(self, hidden_layer):
        """Sets the hidden_layer of this LayerLinkedForm.


        :param hidden_layer: The hidden_layer of this LayerLinkedForm.  # noqa: E501
        :type: bool
        """

        self._hidden_layer = hidden_layer

    @property
    def base_layer(self):
        """Gets the base_layer of this LayerLinkedForm.  # noqa: E501


        :return: The base_layer of this LayerLinkedForm.  # noqa: E501
        :rtype: bool
        """
        return self._base_layer

    @base_layer.setter
    def base_layer(self, base_layer):
        """Sets the base_layer of this LayerLinkedForm.


        :param base_layer: The base_layer of this LayerLinkedForm.  # noqa: E501
        :type: bool
        """

        self._base_layer = base_layer

    @property
    def visible(self):
        """Gets the visible of this LayerLinkedForm.  # noqa: E501


        :return: The visible of this LayerLinkedForm.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this LayerLinkedForm.


        :param visible: The visible of this LayerLinkedForm.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerLinkedForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LayerLinkedForm):
            return True

        return self.to_dict() != other.to_dict()
