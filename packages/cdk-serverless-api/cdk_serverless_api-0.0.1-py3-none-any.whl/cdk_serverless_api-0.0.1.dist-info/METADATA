Metadata-Version: 2.1
Name: cdk-serverless-api
Version: 0.0.1
Summary: A sample JSII construct lib for AWS CDK
Home-page: https://github.com/pahud/awscdk-jsii-template.git
Author: Pahud Hsieh<hunhsieh@amazon.com>
License: Apache-2.0
Project-URL: Source, https://github.com/pahud/awscdk-jsii-template.git
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: JavaScript
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Typing :: Typed
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: jsii (<2.0.0,>=1.6.0)
Requires-Dist: publication (>=0.0.3)
Requires-Dist: aws-cdk.aws-apigatewayv2 (<2.0.0,>=1.44.0)
Requires-Dist: aws-cdk.aws-lambda (<2.0.0,>=1.44.0)
Requires-Dist: aws-cdk.core (<2.0.0,>=1.44.0)
Requires-Dist: constructs (<4.0.0,>=3.0.3)

# Welcome to `awscdk-jsii-template`

This repository template helps you generate JSII construct library for AWS CDK.

## Confiuguration

1. customize your `.projenrc.js`
2. run `npx projen` to generate the `package.json` and `.github/workflows` from `.projenrc.js`
3. `yarn install` to install all required npm packages

## Integration tests

1. run `yarn watch` in a seperate terminal
2. edit `test/integ.api.ts`
3. `cdk diff` and `cdk deploy`

```bash
cdk --app 'test/integ.api.js' diff
cdk --app 'test/integ.api.js' deploy
```

1. validate the stack

## Unit tests

1. edit `test/*.test.ts`
2. run `yarn test`

## Usage

| Command          | Description                                       |
|------------------|---------------------------------------------------|
|`yarn install`    |Install dependencies                               |
|`yarn compile`    |Compile to JavaScript                              |
|`yarn watch`      |Watch for changes and compile                      |
|`yarn test`       |Run tests                                          |
|`yarn run package`|Create `dist` with bundles for all languages       |
|`yarn build`      |Compile + test + package                           |
|`yarn bump`       |Bump a new version (based on conventional commits) |
|`yarn compat`     |Run API compatibility check against latest         |

## GitHub Workflows

* [Build](./.github/workflows/build.yml): when a PR is created/updated, runs `yarn build`
* [Release](./.github/workflows/release.yml): `yarn build` and publish to all package managers for every commit to `master` (ignore if current version is already released).


