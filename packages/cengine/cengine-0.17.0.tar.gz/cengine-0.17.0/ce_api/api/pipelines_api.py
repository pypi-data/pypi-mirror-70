# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ce_api.api_client import ApiClient


class PipelinesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_pipeline_api_v1_pipelines_post(self, body, **kwargs):  # noqa: E501
        """Create Pipeline  # noqa: E501

        Creates a ML pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_api_v1_pipelines_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PipelineCreate body: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_pipeline_api_v1_pipelines_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_pipeline_api_v1_pipelines_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_pipeline_api_v1_pipelines_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Pipeline  # noqa: E501

        Creates a ML pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pipeline_api_v1_pipelines_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PipelineCreate body: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline_api_v1_pipelines_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_pipeline_api_v1_pipelines_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pipeline',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Hyperparameters Pipeline  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
            return data

    def get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Hyperparameters Pipeline  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_hyperparameters_pipeline_api_v1_pipelines_pipeline_id_hyperparameters_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}/hyperparameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loggedin_pipelines_api_v1_pipelines_get(self, **kwargs):  # noqa: E501
        """Get Loggedin Pipelines  # noqa: E501

        Gets the logged in users pipelines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loggedin_pipelines_api_v1_pipelines_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loggedin_pipelines_api_v1_pipelines_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loggedin_pipelines_api_v1_pipelines_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loggedin_pipelines_api_v1_pipelines_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Loggedin Pipelines  # noqa: E501

        Gets the logged in users pipelines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loggedin_pipelines_api_v1_pipelines_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loggedin_pipelines_api_v1_pipelines_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Pipeline]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_api_v1_pipelines_pipeline_id_get(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline  # noqa: E501

        Gets the pipeline specified by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_api_v1_pipelines_pipeline_id_get(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_api_v1_pipelines_pipeline_id_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_api_v1_pipelines_pipeline_id_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
            return data

    def get_pipeline_api_v1_pipelines_pipeline_id_get_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline  # noqa: E501

        Gets the pipeline specified by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_api_v1_pipelines_pipeline_id_get_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_api_v1_pipelines_pipeline_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_api_v1_pipelines_pipeline_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pipeline',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get(self, pipeline_id, component_type, **kwargs):  # noqa: E501
        """Get Pipeline Artifacts  # noqa: E501

        Gets the artifact of any component within a pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get(pipeline_id, component_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :param str component_type: (required)
        :return: list[Artifact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get_with_http_info(pipeline_id, component_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get_with_http_info(pipeline_id, component_type, **kwargs)  # noqa: E501
            return data

    def get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get_with_http_info(self, pipeline_id, component_type, **kwargs):  # noqa: E501
        """Get Pipeline Artifacts  # noqa: E501

        Gets the artifact of any component within a pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get_with_http_info(pipeline_id, component_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :param str component_type: (required)
        :return: list[Artifact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id', 'component_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get`")  # noqa: E501
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `get_pipeline_artifacts_api_v1_pipelines_pipeline_id_artifacts_component_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501
        if 'component_type' in params:
            path_params['component_type'] = params['component_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}/artifacts/{component_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline Logs  # noqa: E501

        Creates and returns a log file of a pipeline as a signed URL  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
            return data

    def get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline Logs  # noqa: E501

        Creates and returns a log file of a pipeline as a signed URL  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_logs_api_v1_pipelines_pipeline_id_logs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_run_api_v1_pipelines_pipeline_id_run_get(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline Run  # noqa: E501

        Gets a response from kubeflow regarding status of latest pipeline run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_api_v1_pipelines_pipeline_id_run_get(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: PipelineRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_run_api_v1_pipelines_pipeline_id_run_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_run_api_v1_pipelines_pipeline_id_run_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
            return data

    def get_pipeline_run_api_v1_pipelines_pipeline_id_run_get_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline Run  # noqa: E501

        Gets a response from kubeflow regarding status of latest pipeline run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_api_v1_pipelines_pipeline_id_run_get_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: PipelineRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_api_v1_pipelines_pipeline_id_run_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_run_api_v1_pipelines_pipeline_id_run_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}/run', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_user_api_v1_pipelines_pipeline_id_user_get(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline User  # noqa: E501

        Gets the pipelines author  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_user_api_v1_pipelines_pipeline_id_user_get(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: UserBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_user_api_v1_pipelines_pipeline_id_user_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_user_api_v1_pipelines_pipeline_id_user_get_with_http_info(pipeline_id, **kwargs)  # noqa: E501
            return data

    def get_pipeline_user_api_v1_pipelines_pipeline_id_user_get_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Get Pipeline User  # noqa: E501

        Gets the pipelines author  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_user_api_v1_pipelines_pipeline_id_user_get_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: UserBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_user_api_v1_pipelines_pipeline_id_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_user_api_v1_pipelines_pipeline_id_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_pipeline_api_v1_pipelines_pipeline_id_run_post(self, pipeline_id, **kwargs):  # noqa: E501
        """Run Pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_pipeline_api_v1_pipelines_pipeline_id_run_post(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_pipeline_api_v1_pipelines_pipeline_id_run_post_with_http_info(pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.run_pipeline_api_v1_pipelines_pipeline_id_run_post_with_http_info(pipeline_id, **kwargs)  # noqa: E501
            return data

    def run_pipeline_api_v1_pipelines_pipeline_id_run_post_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Run Pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_pipeline_api_v1_pipelines_pipeline_id_run_post_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_pipeline_api_v1_pipelines_pipeline_id_run_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `run_pipeline_api_v1_pipelines_pipeline_id_run_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}/run', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pipeline',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pipeline_api_v1_pipelines_pipeline_id_put(self, body, pipeline_id, **kwargs):  # noqa: E501
        """Update Pipeline  # noqa: E501

        Update a pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline_api_v1_pipelines_pipeline_id_put(body, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PipelineUpdate body: (required)
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pipeline_api_v1_pipelines_pipeline_id_put_with_http_info(body, pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pipeline_api_v1_pipelines_pipeline_id_put_with_http_info(body, pipeline_id, **kwargs)  # noqa: E501
            return data

    def update_pipeline_api_v1_pipelines_pipeline_id_put_with_http_info(self, body, pipeline_id, **kwargs):  # noqa: E501
        """Update Pipeline  # noqa: E501

        Update a pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline_api_v1_pipelines_pipeline_id_put_with_http_info(body, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PipelineUpdate body: (required)
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pipeline_api_v1_pipelines_pipeline_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_pipeline_api_v1_pipelines_pipeline_id_put`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `update_pipeline_api_v1_pipelines_pipeline_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipelines/{pipeline_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pipeline',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
