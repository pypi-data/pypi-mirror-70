# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Billing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute_cost': 'float',
        'training_cost': 'float',
        'saved_cost': 'float',
        'mins_billed_training': 'float',
        'mins_billed_compute': 'float',
        'billed_at': 'datetime',
        'user_id': 'str',
        'pipeline_run_id': 'str',
        'id': 'str'
    }

    attribute_map = {
        'compute_cost': 'compute_cost',
        'training_cost': 'training_cost',
        'saved_cost': 'saved_cost',
        'mins_billed_training': 'mins_billed_training',
        'mins_billed_compute': 'mins_billed_compute',
        'billed_at': 'billed_at',
        'user_id': 'user_id',
        'pipeline_run_id': 'pipeline_run_id',
        'id': 'id'
    }

    def __init__(self, compute_cost=0, training_cost=0, saved_cost=0, mins_billed_training=0, mins_billed_compute=0, billed_at=None, user_id=None, pipeline_run_id=None, id=None):  # noqa: E501
        """Billing - a model defined in Swagger"""  # noqa: E501
        self._compute_cost = None
        self._training_cost = None
        self._saved_cost = None
        self._mins_billed_training = None
        self._mins_billed_compute = None
        self._billed_at = None
        self._user_id = None
        self._pipeline_run_id = None
        self._id = None
        self.discriminator = None
        if compute_cost is not None:
            self.compute_cost = compute_cost
        if training_cost is not None:
            self.training_cost = training_cost
        if saved_cost is not None:
            self.saved_cost = saved_cost
        if mins_billed_training is not None:
            self.mins_billed_training = mins_billed_training
        if mins_billed_compute is not None:
            self.mins_billed_compute = mins_billed_compute
        if billed_at is not None:
            self.billed_at = billed_at
        if user_id is not None:
            self.user_id = user_id
        if pipeline_run_id is not None:
            self.pipeline_run_id = pipeline_run_id
        if id is not None:
            self.id = id

    @property
    def compute_cost(self):
        """Gets the compute_cost of this Billing.  # noqa: E501


        :return: The compute_cost of this Billing.  # noqa: E501
        :rtype: float
        """
        return self._compute_cost

    @compute_cost.setter
    def compute_cost(self, compute_cost):
        """Sets the compute_cost of this Billing.


        :param compute_cost: The compute_cost of this Billing.  # noqa: E501
        :type: float
        """

        self._compute_cost = compute_cost

    @property
    def training_cost(self):
        """Gets the training_cost of this Billing.  # noqa: E501


        :return: The training_cost of this Billing.  # noqa: E501
        :rtype: float
        """
        return self._training_cost

    @training_cost.setter
    def training_cost(self, training_cost):
        """Sets the training_cost of this Billing.


        :param training_cost: The training_cost of this Billing.  # noqa: E501
        :type: float
        """

        self._training_cost = training_cost

    @property
    def saved_cost(self):
        """Gets the saved_cost of this Billing.  # noqa: E501


        :return: The saved_cost of this Billing.  # noqa: E501
        :rtype: float
        """
        return self._saved_cost

    @saved_cost.setter
    def saved_cost(self, saved_cost):
        """Sets the saved_cost of this Billing.


        :param saved_cost: The saved_cost of this Billing.  # noqa: E501
        :type: float
        """

        self._saved_cost = saved_cost

    @property
    def mins_billed_training(self):
        """Gets the mins_billed_training of this Billing.  # noqa: E501


        :return: The mins_billed_training of this Billing.  # noqa: E501
        :rtype: float
        """
        return self._mins_billed_training

    @mins_billed_training.setter
    def mins_billed_training(self, mins_billed_training):
        """Sets the mins_billed_training of this Billing.


        :param mins_billed_training: The mins_billed_training of this Billing.  # noqa: E501
        :type: float
        """

        self._mins_billed_training = mins_billed_training

    @property
    def mins_billed_compute(self):
        """Gets the mins_billed_compute of this Billing.  # noqa: E501


        :return: The mins_billed_compute of this Billing.  # noqa: E501
        :rtype: float
        """
        return self._mins_billed_compute

    @mins_billed_compute.setter
    def mins_billed_compute(self, mins_billed_compute):
        """Sets the mins_billed_compute of this Billing.


        :param mins_billed_compute: The mins_billed_compute of this Billing.  # noqa: E501
        :type: float
        """

        self._mins_billed_compute = mins_billed_compute

    @property
    def billed_at(self):
        """Gets the billed_at of this Billing.  # noqa: E501


        :return: The billed_at of this Billing.  # noqa: E501
        :rtype: datetime
        """
        return self._billed_at

    @billed_at.setter
    def billed_at(self, billed_at):
        """Sets the billed_at of this Billing.


        :param billed_at: The billed_at of this Billing.  # noqa: E501
        :type: datetime
        """

        self._billed_at = billed_at

    @property
    def user_id(self):
        """Gets the user_id of this Billing.  # noqa: E501


        :return: The user_id of this Billing.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Billing.


        :param user_id: The user_id of this Billing.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def pipeline_run_id(self):
        """Gets the pipeline_run_id of this Billing.  # noqa: E501


        :return: The pipeline_run_id of this Billing.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_id

    @pipeline_run_id.setter
    def pipeline_run_id(self, pipeline_run_id):
        """Sets the pipeline_run_id of this Billing.


        :param pipeline_run_id: The pipeline_run_id of this Billing.  # noqa: E501
        :type: str
        """

        self._pipeline_run_id = pipeline_run_id

    @property
    def id(self):
        """Gets the id of this Billing.  # noqa: E501


        :return: The id of this Billing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Billing.


        :param id: The id of this Billing.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Billing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Billing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
