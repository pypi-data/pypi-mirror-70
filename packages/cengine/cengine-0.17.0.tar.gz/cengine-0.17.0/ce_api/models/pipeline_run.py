# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PipelineRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ml_metadata_context': 'str',
        'kubeflow_run_id': 'str',
        'kubeflow_run_name': 'str',
        'pipeline_id': 'str',
        'run_time': 'datetime',
        'cloud_job_prefix': 'str',
        'status': 'str',
        'kubeflow_start_time': 'datetime',
        'kubeflow_end_time': 'datetime',
        'components_status': 'list[object]',
        'id': 'str'
    }

    attribute_map = {
        'ml_metadata_context': 'ml_metadata_context',
        'kubeflow_run_id': 'kubeflow_run_id',
        'kubeflow_run_name': 'kubeflow_run_name',
        'pipeline_id': 'pipeline_id',
        'run_time': 'run_time',
        'cloud_job_prefix': 'cloud_job_prefix',
        'status': 'status',
        'kubeflow_start_time': 'kubeflow_start_time',
        'kubeflow_end_time': 'kubeflow_end_time',
        'components_status': 'components_status',
        'id': 'id'
    }

    def __init__(self, ml_metadata_context=None, kubeflow_run_id=None, kubeflow_run_name=None, pipeline_id=None, run_time=None, cloud_job_prefix=None, status=None, kubeflow_start_time=None, kubeflow_end_time=None, components_status=None, id=None):  # noqa: E501
        """PipelineRun - a model defined in Swagger"""  # noqa: E501
        self._ml_metadata_context = None
        self._kubeflow_run_id = None
        self._kubeflow_run_name = None
        self._pipeline_id = None
        self._run_time = None
        self._cloud_job_prefix = None
        self._status = None
        self._kubeflow_start_time = None
        self._kubeflow_end_time = None
        self._components_status = None
        self._id = None
        self.discriminator = None
        if ml_metadata_context is not None:
            self.ml_metadata_context = ml_metadata_context
        if kubeflow_run_id is not None:
            self.kubeflow_run_id = kubeflow_run_id
        if kubeflow_run_name is not None:
            self.kubeflow_run_name = kubeflow_run_name
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if run_time is not None:
            self.run_time = run_time
        if cloud_job_prefix is not None:
            self.cloud_job_prefix = cloud_job_prefix
        if status is not None:
            self.status = status
        if kubeflow_start_time is not None:
            self.kubeflow_start_time = kubeflow_start_time
        if kubeflow_end_time is not None:
            self.kubeflow_end_time = kubeflow_end_time
        if components_status is not None:
            self.components_status = components_status
        if id is not None:
            self.id = id

    @property
    def ml_metadata_context(self):
        """Gets the ml_metadata_context of this PipelineRun.  # noqa: E501


        :return: The ml_metadata_context of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._ml_metadata_context

    @ml_metadata_context.setter
    def ml_metadata_context(self, ml_metadata_context):
        """Sets the ml_metadata_context of this PipelineRun.


        :param ml_metadata_context: The ml_metadata_context of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._ml_metadata_context = ml_metadata_context

    @property
    def kubeflow_run_id(self):
        """Gets the kubeflow_run_id of this PipelineRun.  # noqa: E501


        :return: The kubeflow_run_id of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._kubeflow_run_id

    @kubeflow_run_id.setter
    def kubeflow_run_id(self, kubeflow_run_id):
        """Sets the kubeflow_run_id of this PipelineRun.


        :param kubeflow_run_id: The kubeflow_run_id of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._kubeflow_run_id = kubeflow_run_id

    @property
    def kubeflow_run_name(self):
        """Gets the kubeflow_run_name of this PipelineRun.  # noqa: E501


        :return: The kubeflow_run_name of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._kubeflow_run_name

    @kubeflow_run_name.setter
    def kubeflow_run_name(self, kubeflow_run_name):
        """Sets the kubeflow_run_name of this PipelineRun.


        :param kubeflow_run_name: The kubeflow_run_name of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._kubeflow_run_name = kubeflow_run_name

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PipelineRun.  # noqa: E501


        :return: The pipeline_id of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PipelineRun.


        :param pipeline_id: The pipeline_id of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def run_time(self):
        """Gets the run_time of this PipelineRun.  # noqa: E501


        :return: The run_time of this PipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this PipelineRun.


        :param run_time: The run_time of this PipelineRun.  # noqa: E501
        :type: datetime
        """

        self._run_time = run_time

    @property
    def cloud_job_prefix(self):
        """Gets the cloud_job_prefix of this PipelineRun.  # noqa: E501


        :return: The cloud_job_prefix of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._cloud_job_prefix

    @cloud_job_prefix.setter
    def cloud_job_prefix(self, cloud_job_prefix):
        """Sets the cloud_job_prefix of this PipelineRun.


        :param cloud_job_prefix: The cloud_job_prefix of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._cloud_job_prefix = cloud_job_prefix

    @property
    def status(self):
        """Gets the status of this PipelineRun.  # noqa: E501


        :return: The status of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineRun.


        :param status: The status of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def kubeflow_start_time(self):
        """Gets the kubeflow_start_time of this PipelineRun.  # noqa: E501


        :return: The kubeflow_start_time of this PipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._kubeflow_start_time

    @kubeflow_start_time.setter
    def kubeflow_start_time(self, kubeflow_start_time):
        """Sets the kubeflow_start_time of this PipelineRun.


        :param kubeflow_start_time: The kubeflow_start_time of this PipelineRun.  # noqa: E501
        :type: datetime
        """

        self._kubeflow_start_time = kubeflow_start_time

    @property
    def kubeflow_end_time(self):
        """Gets the kubeflow_end_time of this PipelineRun.  # noqa: E501


        :return: The kubeflow_end_time of this PipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._kubeflow_end_time

    @kubeflow_end_time.setter
    def kubeflow_end_time(self, kubeflow_end_time):
        """Sets the kubeflow_end_time of this PipelineRun.


        :param kubeflow_end_time: The kubeflow_end_time of this PipelineRun.  # noqa: E501
        :type: datetime
        """

        self._kubeflow_end_time = kubeflow_end_time

    @property
    def components_status(self):
        """Gets the components_status of this PipelineRun.  # noqa: E501


        :return: The components_status of this PipelineRun.  # noqa: E501
        :rtype: list[object]
        """
        return self._components_status

    @components_status.setter
    def components_status(self, components_status):
        """Sets the components_status of this PipelineRun.


        :param components_status: The components_status of this PipelineRun.  # noqa: E501
        :type: list[object]
        """

        self._components_status = components_status

    @property
    def id(self):
        """Gets the id of this PipelineRun.  # noqa: E501


        :return: The id of this PipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineRun.


        :param id: The id of this PipelineRun.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
