# coding: utf-8

"""
    CloudEndure API documentation

    Â© 2017 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    OpenAPI spec version: 5
    Contact: https://bit.ly/2T54hSc
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CloudEndureUserReport:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "n_protected_machines": "int",
        "project_name": "str",
        "is_activated": "bool",
        "n_license_usages": "int",
        "gcp_machines_finance_data": "object",
        "total_tested_or_cutover": "int",
        "owner_name": "str",
        "n_lagging_machines": "int",
        "n_active_target_machines": "int",
        "n_test_machines": "int",
    }

    attribute_map = {
        "n_protected_machines": "n_protected_machines",
        "project_name": "project_name",
        "is_activated": "is_activated",
        "n_license_usages": "n_license_usages",
        "gcp_machines_finance_data": "gcp_machines_finance_data",
        "total_tested_or_cutover": "total_tested_or_cutover",
        "owner_name": "owner_name",
        "n_lagging_machines": "n_lagging_machines",
        "n_active_target_machines": "n_active_target_machines",
        "n_test_machines": "n_test_machines",
    }

    def __init__(
        self,
        n_protected_machines=None,
        project_name=None,
        is_activated=None,
        n_license_usages=None,
        gcp_machines_finance_data=None,
        total_tested_or_cutover=None,
        owner_name=None,
        n_lagging_machines=None,
        n_active_target_machines=None,
        n_test_machines=None,
    ):  # noqa: E501
        """CloudEndureUserReport - a model defined in Swagger"""  # noqa: E501
        self._n_protected_machines = None
        self._project_name = None
        self._is_activated = None
        self._n_license_usages = None
        self._gcp_machines_finance_data = None
        self._total_tested_or_cutover = None
        self._owner_name = None
        self._n_lagging_machines = None
        self._n_active_target_machines = None
        self._n_test_machines = None
        self.discriminator = None
        if n_protected_machines is not None:
            self.n_protected_machines = n_protected_machines
        if project_name is not None:
            self.project_name = project_name
        if is_activated is not None:
            self.is_activated = is_activated
        if n_license_usages is not None:
            self.n_license_usages = n_license_usages
        if gcp_machines_finance_data is not None:
            self.gcp_machines_finance_data = gcp_machines_finance_data
        if total_tested_or_cutover is not None:
            self.total_tested_or_cutover = total_tested_or_cutover
        if owner_name is not None:
            self.owner_name = owner_name
        if n_lagging_machines is not None:
            self.n_lagging_machines = n_lagging_machines
        if n_active_target_machines is not None:
            self.n_active_target_machines = n_active_target_machines
        if n_test_machines is not None:
            self.n_test_machines = n_test_machines

    @property
    def n_protected_machines(self):
        """Gets the n_protected_machines of this CloudEndureUserReport.  # noqa: E501


        :return: The n_protected_machines of this CloudEndureUserReport.  # noqa: E501
        :rtype: int
        """
        return self._n_protected_machines

    @n_protected_machines.setter
    def n_protected_machines(self, n_protected_machines):
        """Sets the n_protected_machines of this CloudEndureUserReport.


        :param n_protected_machines: The n_protected_machines of this CloudEndureUserReport.  # noqa: E501
        :type: int
        """

        self._n_protected_machines = n_protected_machines

    @property
    def project_name(self):
        """Gets the project_name of this CloudEndureUserReport.  # noqa: E501


        :return: The project_name of this CloudEndureUserReport.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CloudEndureUserReport.


        :param project_name: The project_name of this CloudEndureUserReport.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def is_activated(self):
        """Gets the is_activated of this CloudEndureUserReport.  # noqa: E501


        :return: The is_activated of this CloudEndureUserReport.  # noqa: E501
        :rtype: bool
        """
        return self._is_activated

    @is_activated.setter
    def is_activated(self, is_activated):
        """Sets the is_activated of this CloudEndureUserReport.


        :param is_activated: The is_activated of this CloudEndureUserReport.  # noqa: E501
        :type: bool
        """

        self._is_activated = is_activated

    @property
    def n_license_usages(self):
        """Gets the n_license_usages of this CloudEndureUserReport.  # noqa: E501


        :return: The n_license_usages of this CloudEndureUserReport.  # noqa: E501
        :rtype: int
        """
        return self._n_license_usages

    @n_license_usages.setter
    def n_license_usages(self, n_license_usages):
        """Sets the n_license_usages of this CloudEndureUserReport.


        :param n_license_usages: The n_license_usages of this CloudEndureUserReport.  # noqa: E501
        :type: int
        """

        self._n_license_usages = n_license_usages

    @property
    def gcp_machines_finance_data(self):
        """Gets the gcp_machines_finance_data of this CloudEndureUserReport.  # noqa: E501


        :return: The gcp_machines_finance_data of this CloudEndureUserReport.  # noqa: E501
        :rtype: object
        """
        return self._gcp_machines_finance_data

    @gcp_machines_finance_data.setter
    def gcp_machines_finance_data(self, gcp_machines_finance_data):
        """Sets the gcp_machines_finance_data of this CloudEndureUserReport.


        :param gcp_machines_finance_data: The gcp_machines_finance_data of this CloudEndureUserReport.  # noqa: E501
        :type: object
        """

        self._gcp_machines_finance_data = gcp_machines_finance_data

    @property
    def total_tested_or_cutover(self):
        """Gets the total_tested_or_cutover of this CloudEndureUserReport.  # noqa: E501


        :return: The total_tested_or_cutover of this CloudEndureUserReport.  # noqa: E501
        :rtype: int
        """
        return self._total_tested_or_cutover

    @total_tested_or_cutover.setter
    def total_tested_or_cutover(self, total_tested_or_cutover):
        """Sets the total_tested_or_cutover of this CloudEndureUserReport.


        :param total_tested_or_cutover: The total_tested_or_cutover of this CloudEndureUserReport.  # noqa: E501
        :type: int
        """

        self._total_tested_or_cutover = total_tested_or_cutover

    @property
    def owner_name(self):
        """Gets the owner_name of this CloudEndureUserReport.  # noqa: E501


        :return: The owner_name of this CloudEndureUserReport.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this CloudEndureUserReport.


        :param owner_name: The owner_name of this CloudEndureUserReport.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def n_lagging_machines(self):
        """Gets the n_lagging_machines of this CloudEndureUserReport.  # noqa: E501


        :return: The n_lagging_machines of this CloudEndureUserReport.  # noqa: E501
        :rtype: int
        """
        return self._n_lagging_machines

    @n_lagging_machines.setter
    def n_lagging_machines(self, n_lagging_machines):
        """Sets the n_lagging_machines of this CloudEndureUserReport.


        :param n_lagging_machines: The n_lagging_machines of this CloudEndureUserReport.  # noqa: E501
        :type: int
        """

        self._n_lagging_machines = n_lagging_machines

    @property
    def n_active_target_machines(self):
        """Gets the n_active_target_machines of this CloudEndureUserReport.  # noqa: E501


        :return: The n_active_target_machines of this CloudEndureUserReport.  # noqa: E501
        :rtype: int
        """
        return self._n_active_target_machines

    @n_active_target_machines.setter
    def n_active_target_machines(self, n_active_target_machines):
        """Sets the n_active_target_machines of this CloudEndureUserReport.


        :param n_active_target_machines: The n_active_target_machines of this CloudEndureUserReport.  # noqa: E501
        :type: int
        """

        self._n_active_target_machines = n_active_target_machines

    @property
    def n_test_machines(self):
        """Gets the n_test_machines of this CloudEndureUserReport.  # noqa: E501


        :return: The n_test_machines of this CloudEndureUserReport.  # noqa: E501
        :rtype: int
        """
        return self._n_test_machines

    @n_test_machines.setter
    def n_test_machines(self, n_test_machines):
        """Sets the n_test_machines of this CloudEndureUserReport.


        :param n_test_machines: The n_test_machines of this CloudEndureUserReport.  # noqa: E501
        :type: int
        """

        self._n_test_machines = n_test_machines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CloudEndureUserReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudEndureUserReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
