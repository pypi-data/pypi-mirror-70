# coding: utf-8

"""
    CloudEndure API documentation

    Â© 2017 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    OpenAPI spec version: 5
    Contact: https://bit.ly/2T54hSc
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cloudendure.cloudendure_api.api_client import ApiClient


class MachinesApi:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def projects_project_id_machines_delete(
        self, body, project_id, **kwargs
    ):  # noqa: E501
        """Uninstall agent  # noqa: E501

        Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_delete(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: The list of machine IDs to remove from the CloudEndure service. (required)
        :param str project_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.projects_project_id_machines_delete_with_http_info(
                body, project_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.projects_project_id_machines_delete_with_http_info(
                body, project_id, **kwargs
            )  # noqa: E501
            return data

    def projects_project_id_machines_delete_with_http_info(
        self, body, project_id, **kwargs
    ):  # noqa: E501
        """Uninstall agent  # noqa: E501

        Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_delete_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: The list of machine IDs to remove from the CloudEndure service. (required)
        :param str project_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "project_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_machines_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `projects_project_id_machines_delete`"
            )  # noqa: E501
        # verify the required parameter 'project_id' is set
        if "project_id" not in params or params["project_id"] is None:
            raise ValueError(
                "Missing the required parameter `project_id` when calling `projects_project_id_machines_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_id" in params:
            path_params["projectId"] = params["project_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/projects/{projectId}/machines",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def projects_project_id_machines_get(self, project_id, **kwargs):  # noqa: E501
        """List Machines  # noqa: E501

        Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param int offset: With which item to start (0 based).
        :param int limit: A number specifying how many entries to return.
        :param bool all: When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.
        :param str types: Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\"types\\\" query param, you will only get source machines
        :return: CloudEndureMachinesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.projects_project_id_machines_get_with_http_info(
                project_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.projects_project_id_machines_get_with_http_info(
                project_id, **kwargs
            )  # noqa: E501
            return data

    def projects_project_id_machines_get_with_http_info(
        self, project_id, **kwargs
    ):  # noqa: E501
        """List Machines  # noqa: E501

        Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param int offset: With which item to start (0 based).
        :param int limit: A number specifying how many entries to return.
        :param bool all: When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.
        :param str types: Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\"types\\\" query param, you will only get source machines
        :return: CloudEndureMachinesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_id", "offset", "limit", "all", "types"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_machines_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_id' is set
        if "project_id" not in params or params["project_id"] is None:
            raise ValueError(
                "Missing the required parameter `project_id` when calling `projects_project_id_machines_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_id" in params:
            path_params["projectId"] = params["project_id"]  # noqa: E501

        query_params = []
        if "offset" in params:
            query_params.append(("offset", params["offset"]))  # noqa: E501
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "all" in params:
            query_params.append(("all", params["all"]))  # noqa: E501
        if "types" in params:
            query_params.append(("types", params["types"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/projects/{projectId}/machines",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CloudEndureMachinesList",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def projects_project_id_machines_machine_id_get(
        self, project_id, machine_id, **kwargs
    ):  # noqa: E501
        """Get a specific machine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_machine_id_get(project_id, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str machine_id: (required)
        :return: CloudEndureMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.projects_project_id_machines_machine_id_get_with_http_info(
                project_id, machine_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.projects_project_id_machines_machine_id_get_with_http_info(
                project_id, machine_id, **kwargs
            )  # noqa: E501
            return data

    def projects_project_id_machines_machine_id_get_with_http_info(
        self, project_id, machine_id, **kwargs
    ):  # noqa: E501
        """Get a specific machine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_machine_id_get_with_http_info(project_id, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str machine_id: (required)
        :return: CloudEndureMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_id", "machine_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_machines_machine_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_id' is set
        if "project_id" not in params or params["project_id"] is None:
            raise ValueError(
                "Missing the required parameter `project_id` when calling `projects_project_id_machines_machine_id_get`"
            )  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if "machine_id" not in params or params["machine_id"] is None:
            raise ValueError(
                "Missing the required parameter `machine_id` when calling `projects_project_id_machines_machine_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_id" in params:
            path_params["projectId"] = params["project_id"]  # noqa: E501
        if "machine_id" in params:
            path_params["machineId"] = params["machine_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/projects/{projectId}/machines/{machineId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CloudEndureMachine",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def projects_project_id_machines_machine_id_patch(
        self, body, project_id, machine_id, **kwargs
    ):  # noqa: E501
        """Update a machine. Accepts only Launch time updates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_machine_id_patch(body, project_id, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudEndureMachine body: (required)
        :param str project_id: (required)
        :param str machine_id: (required)
        :return: CloudEndureMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.projects_project_id_machines_machine_id_patch_with_http_info(
                body, project_id, machine_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.projects_project_id_machines_machine_id_patch_with_http_info(
                body, project_id, machine_id, **kwargs
            )  # noqa: E501
            return data

    def projects_project_id_machines_machine_id_patch_with_http_info(
        self, body, project_id, machine_id, **kwargs
    ):  # noqa: E501
        """Update a machine. Accepts only Launch time updates.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_machine_id_patch_with_http_info(body, project_id, machine_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudEndureMachine body: (required)
        :param str project_id: (required)
        :param str machine_id: (required)
        :return: CloudEndureMachine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "project_id", "machine_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_machines_machine_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `projects_project_id_machines_machine_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'project_id' is set
        if "project_id" not in params or params["project_id"] is None:
            raise ValueError(
                "Missing the required parameter `project_id` when calling `projects_project_id_machines_machine_id_patch`"
            )  # noqa: E501
        # verify the required parameter 'machine_id' is set
        if "machine_id" not in params or params["machine_id"] is None:
            raise ValueError(
                "Missing the required parameter `machine_id` when calling `projects_project_id_machines_machine_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_id" in params:
            path_params["projectId"] = params["project_id"]  # noqa: E501
        if "machine_id" in params:
            path_params["machineId"] = params["machine_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/projects/{projectId}/machines/{machineId}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CloudEndureMachine",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def projects_project_id_machines_patch(
        self, body, project_id, **kwargs
    ):  # noqa: E501
        """Batch-update multiple machines  # noqa: E501

        todo must allow update of tags, update of replicationConfiguration; may allow update of launch times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_patch(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudEndureMachinesList body: (required)
        :param str project_id: (required)
        :return: CloudEndureMachinesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.projects_project_id_machines_patch_with_http_info(
                body, project_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.projects_project_id_machines_patch_with_http_info(
                body, project_id, **kwargs
            )  # noqa: E501
            return data

    def projects_project_id_machines_patch_with_http_info(
        self, body, project_id, **kwargs
    ):  # noqa: E501
        """Batch-update multiple machines  # noqa: E501

        todo must allow update of tags, update of replicationConfiguration; may allow update of launch times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_machines_patch_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudEndureMachinesList body: (required)
        :param str project_id: (required)
        :return: CloudEndureMachinesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "project_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_machines_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `projects_project_id_machines_patch`"
            )  # noqa: E501
        # verify the required parameter 'project_id' is set
        if "project_id" not in params or params["project_id"] is None:
            raise ValueError(
                "Missing the required parameter `project_id` when calling `projects_project_id_machines_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_id" in params:
            path_params["projectId"] = params["project_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/projects/{projectId}/machines",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CloudEndureMachinesList",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def projects_project_id_replicas_replica_id_get(
        self, project_id, replica_id, **kwargs
    ):  # noqa: E501
        """Get Target Machine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_replicas_replica_id_get(project_id, replica_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str replica_id: (required)
        :return: CloudEndureReplica
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.projects_project_id_replicas_replica_id_get_with_http_info(
                project_id, replica_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.projects_project_id_replicas_replica_id_get_with_http_info(
                project_id, replica_id, **kwargs
            )  # noqa: E501
            return data

    def projects_project_id_replicas_replica_id_get_with_http_info(
        self, project_id, replica_id, **kwargs
    ):  # noqa: E501
        """Get Target Machine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_replicas_replica_id_get_with_http_info(project_id, replica_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str replica_id: (required)
        :return: CloudEndureReplica
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["project_id", "replica_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_replicas_replica_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'project_id' is set
        if "project_id" not in params or params["project_id"] is None:
            raise ValueError(
                "Missing the required parameter `project_id` when calling `projects_project_id_replicas_replica_id_get`"
            )  # noqa: E501
        # verify the required parameter 'replica_id' is set
        if "replica_id" not in params or params["replica_id"] is None:
            raise ValueError(
                "Missing the required parameter `replica_id` when calling `projects_project_id_replicas_replica_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "project_id" in params:
            path_params["projectId"] = params["project_id"]  # noqa: E501
        if "replica_id" in params:
            path_params["replicaId"] = params["replica_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/projects/{projectId}/replicas/{replicaId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="CloudEndureReplica",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
