# coding: utf-8

"""
    CloudEndure API documentation

    Â© 2017 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    OpenAPI spec version: 5
    Contact: https://bit.ly/2T54hSc
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CloudEndureListUsersResult:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "username": "str",
        "is_account_owner": "bool",
        "state": "str",
        "version": "str",
        "account_uuid": "str",
    }

    attribute_map = {
        "username": "username",
        "is_account_owner": "is_account_owner",
        "state": "state",
        "version": "version",
        "account_uuid": "account_uuid",
    }

    def __init__(
        self,
        username=None,
        is_account_owner=None,
        state=None,
        version=None,
        account_uuid=None,
    ):  # noqa: E501
        """CloudEndureListUsersResult - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._is_account_owner = None
        self._state = None
        self._version = None
        self._account_uuid = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if is_account_owner is not None:
            self.is_account_owner = is_account_owner
        if state is not None:
            self.state = state
        if version is not None:
            self.version = version
        if account_uuid is not None:
            self.account_uuid = account_uuid

    @property
    def username(self):
        """Gets the username of this CloudEndureListUsersResult.  # noqa: E501


        :return: The username of this CloudEndureListUsersResult.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CloudEndureListUsersResult.


        :param username: The username of this CloudEndureListUsersResult.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def is_account_owner(self):
        """Gets the is_account_owner of this CloudEndureListUsersResult.  # noqa: E501


        :return: The is_account_owner of this CloudEndureListUsersResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_account_owner

    @is_account_owner.setter
    def is_account_owner(self, is_account_owner):
        """Sets the is_account_owner of this CloudEndureListUsersResult.


        :param is_account_owner: The is_account_owner of this CloudEndureListUsersResult.  # noqa: E501
        :type: bool
        """

        self._is_account_owner = is_account_owner

    @property
    def state(self):
        """Gets the state of this CloudEndureListUsersResult.  # noqa: E501


        :return: The state of this CloudEndureListUsersResult.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudEndureListUsersResult.


        :param state: The state of this CloudEndureListUsersResult.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def version(self):
        """Gets the version of this CloudEndureListUsersResult.  # noqa: E501


        :return: The version of this CloudEndureListUsersResult.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CloudEndureListUsersResult.


        :param version: The version of this CloudEndureListUsersResult.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def account_uuid(self):
        """Gets the account_uuid of this CloudEndureListUsersResult.  # noqa: E501


        :return: The account_uuid of this CloudEndureListUsersResult.  # noqa: E501
        :rtype: str
        """
        return self._account_uuid

    @account_uuid.setter
    def account_uuid(self, account_uuid):
        """Sets the account_uuid of this CloudEndureListUsersResult.


        :param account_uuid: The account_uuid of this CloudEndureListUsersResult.  # noqa: E501
        :type: str
        """

        self._account_uuid = account_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CloudEndureListUsersResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudEndureListUsersResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
