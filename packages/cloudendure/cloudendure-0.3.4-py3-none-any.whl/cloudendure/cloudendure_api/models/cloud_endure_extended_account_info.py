# coding: utf-8

"""
    CloudEndure API documentation

    Â© 2017 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    OpenAPI spec version: 5
    Contact: https://bit.ly/2T54hSc
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from cloudendure.cloudendure_api.models.cloud_endure_account import (
    CloudEndureAccount,
)  # noqa: F401,E501
from cloudendure.cloudendure_api.models.cloud_endure_clouds_list import (
    CloudEndureCloudsList,
)  # noqa: F401,E501
from cloudendure.cloudendure_api.models.cloud_endure_projects_list import (
    CloudEndureProjectsList,
)  # noqa: F401,E501
from cloudendure.cloudendure_api.models.cloud_endure_region import (
    CloudEndureRegion,
)  # noqa: F401,E501
from cloudendure.cloudendure_api.models.cloud_endure_replication_configuration_list import (  # noqa: F401,E501
    CloudEndureReplicationConfigurationList,
)
from cloudendure.cloudendure_api.models.cloud_endure_time import (
    CloudEndureTime,
)  # noqa: F401,E501
from cloudendure.cloudendure_api.models.cloud_endure_user import (
    CloudEndureUser,
)  # noqa: F401,E501


class CloudEndureExtendedAccountInfo:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "account": "CloudEndureAccount",
        "clouds": "CloudEndureCloudsList",
        "generic_region": "CloudEndureRegion",
        "date_time": "CloudEndureTime",
        "user": "CloudEndureUser",
        "projects": "CloudEndureProjectsList",
        "is_newly_registered": "bool",
        "replication_configurations": "CloudEndureReplicationConfigurationList",
    }

    attribute_map = {
        "account": "account",
        "clouds": "clouds",
        "generic_region": "genericRegion",
        "date_time": "dateTime",
        "user": "user",
        "projects": "projects",
        "is_newly_registered": "isNewlyRegistered",
        "replication_configurations": "replicationConfigurations",
    }

    def __init__(
        self,
        account=None,
        clouds=None,
        generic_region=None,
        date_time=None,
        user=None,
        projects=None,
        is_newly_registered=None,
        replication_configurations=None,
    ):  # noqa: E501
        """CloudEndureExtendedAccountInfo - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._clouds = None
        self._generic_region = None
        self._date_time = None
        self._user = None
        self._projects = None
        self._is_newly_registered = None
        self._replication_configurations = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if clouds is not None:
            self.clouds = clouds
        if generic_region is not None:
            self.generic_region = generic_region
        if date_time is not None:
            self.date_time = date_time
        if user is not None:
            self.user = user
        if projects is not None:
            self.projects = projects
        if is_newly_registered is not None:
            self.is_newly_registered = is_newly_registered
        if replication_configurations is not None:
            self.replication_configurations = replication_configurations

    @property
    def account(self):
        """Gets the account of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The account of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: CloudEndureAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CloudEndureExtendedAccountInfo.


        :param account: The account of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: CloudEndureAccount
        """

        self._account = account

    @property
    def clouds(self):
        """Gets the clouds of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The clouds of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: CloudEndureCloudsList
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this CloudEndureExtendedAccountInfo.


        :param clouds: The clouds of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: CloudEndureCloudsList
        """

        self._clouds = clouds

    @property
    def generic_region(self):
        """Gets the generic_region of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The generic_region of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: CloudEndureRegion
        """
        return self._generic_region

    @generic_region.setter
    def generic_region(self, generic_region):
        """Sets the generic_region of this CloudEndureExtendedAccountInfo.


        :param generic_region: The generic_region of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: CloudEndureRegion
        """

        self._generic_region = generic_region

    @property
    def date_time(self):
        """Gets the date_time of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The date_time of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: CloudEndureTime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this CloudEndureExtendedAccountInfo.


        :param date_time: The date_time of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: CloudEndureTime
        """

        self._date_time = date_time

    @property
    def user(self):
        """Gets the user of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The user of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: CloudEndureUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CloudEndureExtendedAccountInfo.


        :param user: The user of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: CloudEndureUser
        """

        self._user = user

    @property
    def projects(self):
        """Gets the projects of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The projects of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: CloudEndureProjectsList
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this CloudEndureExtendedAccountInfo.


        :param projects: The projects of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: CloudEndureProjectsList
        """

        self._projects = projects

    @property
    def is_newly_registered(self):
        """Gets the is_newly_registered of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The is_newly_registered of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_newly_registered

    @is_newly_registered.setter
    def is_newly_registered(self, is_newly_registered):
        """Sets the is_newly_registered of this CloudEndureExtendedAccountInfo.


        :param is_newly_registered: The is_newly_registered of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: bool
        """

        self._is_newly_registered = is_newly_registered

    @property
    def replication_configurations(self):
        """Gets the replication_configurations of this CloudEndureExtendedAccountInfo.  # noqa: E501


        :return: The replication_configurations of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :rtype: CloudEndureReplicationConfigurationList
        """
        return self._replication_configurations

    @replication_configurations.setter
    def replication_configurations(self, replication_configurations):
        """Sets the replication_configurations of this CloudEndureExtendedAccountInfo.


        :param replication_configurations: The replication_configurations of this CloudEndureExtendedAccountInfo.  # noqa: E501
        :type: CloudEndureReplicationConfigurationList
        """

        self._replication_configurations = replication_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CloudEndureExtendedAccountInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudEndureExtendedAccountInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
