# coding: utf-8

"""
    CloudEndure API documentation

    Â© 2017 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    OpenAPI spec version: 5
    Contact: https://bit.ly/2T54hSc
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CloudEndureReplica:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "machine": "str",
        "cloud_endure_creation_date_time": "datetime",
        "name": "str",
        "point_in_time": "str",
        "machine_cloud_state": "str",
        "public_ips": "list[str]",
        "region_id": "str",
        "id": "str",
        "machine_cloud_id": "str",
    }

    attribute_map = {
        "machine": "machine",
        "cloud_endure_creation_date_time": "cloudEndureCreationDateTime",
        "name": "name",
        "point_in_time": "pointInTime",
        "machine_cloud_state": "machineCloudState",
        "public_ips": "publicIps",
        "region_id": "regionId",
        "id": "id",
        "machine_cloud_id": "machineCloudId",
    }

    def __init__(
        self,
        machine=None,
        cloud_endure_creation_date_time=None,
        name=None,
        point_in_time=None,
        machine_cloud_state=None,
        public_ips=None,
        region_id=None,
        id=None,
        machine_cloud_id=None,
    ):  # noqa: E501
        """CloudEndureReplica - a model defined in Swagger"""  # noqa: E501
        self._machine = None
        self._cloud_endure_creation_date_time = None
        self._name = None
        self._point_in_time = None
        self._machine_cloud_state = None
        self._public_ips = None
        self._region_id = None
        self._id = None
        self._machine_cloud_id = None
        self.discriminator = None
        if machine is not None:
            self.machine = machine
        if cloud_endure_creation_date_time is not None:
            self.cloud_endure_creation_date_time = cloud_endure_creation_date_time
        if name is not None:
            self.name = name
        if point_in_time is not None:
            self.point_in_time = point_in_time
        if machine_cloud_state is not None:
            self.machine_cloud_state = machine_cloud_state
        if public_ips is not None:
            self.public_ips = public_ips
        if region_id is not None:
            self.region_id = region_id
        if id is not None:
            self.id = id
        if machine_cloud_id is not None:
            self.machine_cloud_id = machine_cloud_id

    @property
    def machine(self):
        """Gets the machine of this CloudEndureReplica.  # noqa: E501

        The ID of the source machine for this target machine.  # noqa: E501

        :return: The machine of this CloudEndureReplica.  # noqa: E501
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this CloudEndureReplica.

        The ID of the source machine for this target machine.  # noqa: E501

        :param machine: The machine of this CloudEndureReplica.  # noqa: E501
        :type: str
        """

        self._machine = machine

    @property
    def cloud_endure_creation_date_time(self):
        """Gets the cloud_endure_creation_date_time of this CloudEndureReplica.  # noqa: E501

        Timestamp for launching this target machine.  # noqa: E501

        :return: The cloud_endure_creation_date_time of this CloudEndureReplica.  # noqa: E501
        :rtype: datetime
        """
        return self._cloud_endure_creation_date_time

    @cloud_endure_creation_date_time.setter
    def cloud_endure_creation_date_time(self, cloud_endure_creation_date_time):
        """Sets the cloud_endure_creation_date_time of this CloudEndureReplica.

        Timestamp for launching this target machine.  # noqa: E501

        :param cloud_endure_creation_date_time: The cloud_endure_creation_date_time of this CloudEndureReplica.  # noqa: E501
        :type: datetime
        """

        self._cloud_endure_creation_date_time = cloud_endure_creation_date_time

    @property
    def name(self):
        """Gets the name of this CloudEndureReplica.  # noqa: E501

        Target machine name in the target environment.  # noqa: E501

        :return: The name of this CloudEndureReplica.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudEndureReplica.

        Target machine name in the target environment.  # noqa: E501

        :param name: The name of this CloudEndureReplica.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def point_in_time(self):
        """Gets the point_in_time of this CloudEndureReplica.  # noqa: E501

        The ID of the pointInTime object from which this target machine was created.  # noqa: E501

        :return: The point_in_time of this CloudEndureReplica.  # noqa: E501
        :rtype: str
        """
        return self._point_in_time

    @point_in_time.setter
    def point_in_time(self, point_in_time):
        """Sets the point_in_time of this CloudEndureReplica.

        The ID of the pointInTime object from which this target machine was created.  # noqa: E501

        :param point_in_time: The point_in_time of this CloudEndureReplica.  # noqa: E501
        :type: str
        """

        self._point_in_time = point_in_time

    @property
    def machine_cloud_state(self):
        """Gets the machine_cloud_state of this CloudEndureReplica.  # noqa: E501

        Target machine state in the target environment.  # noqa: E501

        :return: The machine_cloud_state of this CloudEndureReplica.  # noqa: E501
        :rtype: str
        """
        return self._machine_cloud_state

    @machine_cloud_state.setter
    def machine_cloud_state(self, machine_cloud_state):
        """Sets the machine_cloud_state of this CloudEndureReplica.

        Target machine state in the target environment.  # noqa: E501

        :param machine_cloud_state: The machine_cloud_state of this CloudEndureReplica.  # noqa: E501
        :type: str
        """

        self._machine_cloud_state = machine_cloud_state

    @property
    def public_ips(self):
        """Gets the public_ips of this CloudEndureReplica.  # noqa: E501

        Static (non-ephemral) public IPs. On some clouds this also includes ephemeral IPs.  # noqa: E501

        :return: The public_ips of this CloudEndureReplica.  # noqa: E501
        :rtype: list[str]
        """
        return self._public_ips

    @public_ips.setter
    def public_ips(self, public_ips):
        """Sets the public_ips of this CloudEndureReplica.

        Static (non-ephemral) public IPs. On some clouds this also includes ephemeral IPs.  # noqa: E501

        :param public_ips: The public_ips of this CloudEndureReplica.  # noqa: E501
        :type: list[str]
        """

        self._public_ips = public_ips

    @property
    def region_id(self):
        """Gets the region_id of this CloudEndureReplica.  # noqa: E501

        The ID of the region where this target machine has been launched.  # noqa: E501

        :return: The region_id of this CloudEndureReplica.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this CloudEndureReplica.

        The ID of the region where this target machine has been launched.  # noqa: E501

        :param region_id: The region_id of this CloudEndureReplica.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def id(self):
        """Gets the id of this CloudEndureReplica.  # noqa: E501


        :return: The id of this CloudEndureReplica.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudEndureReplica.


        :param id: The id of this CloudEndureReplica.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def machine_cloud_id(self):
        """Gets the machine_cloud_id of this CloudEndureReplica.  # noqa: E501

        Target machine ID in the target environment.  # noqa: E501

        :return: The machine_cloud_id of this CloudEndureReplica.  # noqa: E501
        :rtype: str
        """
        return self._machine_cloud_id

    @machine_cloud_id.setter
    def machine_cloud_id(self, machine_cloud_id):
        """Sets the machine_cloud_id of this CloudEndureReplica.

        Target machine ID in the target environment.  # noqa: E501

        :param machine_cloud_id: The machine_cloud_id of this CloudEndureReplica.  # noqa: E501
        :type: str
        """

        self._machine_cloud_id = machine_cloud_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CloudEndureReplica, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudEndureReplica):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
