# coding: utf-8

"""
    CloudEndure API documentation

    Â© 2017 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    OpenAPI spec version: 5
    Contact: https://bit.ly/2T54hSc
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CloudEndureAccountRequest:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "request_type": "str",
        "email": "str",
        "request_link": "str",
        "registration_token": "str",
    }

    attribute_map = {
        "id": "id",
        "request_type": "request_type",
        "email": "email",
        "request_link": "request_link",
        "registration_token": "registration_token",
    }

    def __init__(
        self,
        id=None,
        request_type=None,
        email=None,
        request_link=None,
        registration_token=None,
    ):  # noqa: E501
        """CloudEndureAccountRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._request_type = None
        self._email = None
        self._request_link = None
        self._registration_token = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if request_type is not None:
            self.request_type = request_type
        if email is not None:
            self.email = email
        if request_link is not None:
            self.request_link = request_link
        if registration_token is not None:
            self.registration_token = registration_token

    @property
    def id(self):
        """Gets the id of this CloudEndureAccountRequest.  # noqa: E501


        :return: The id of this CloudEndureAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudEndureAccountRequest.


        :param id: The id of this CloudEndureAccountRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def request_type(self):
        """Gets the request_type of this CloudEndureAccountRequest.  # noqa: E501


        :return: The request_type of this CloudEndureAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this CloudEndureAccountRequest.


        :param request_type: The request_type of this CloudEndureAccountRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGISTER", "RESET_PASSWORD"]  # noqa: E501
        if request_type not in allowed_values:
            raise ValueError(
                "Invalid value for `request_type` ({0}), must be one of {1}".format(  # noqa: E501
                    request_type, allowed_values
                )
            )

        self._request_type = request_type

    @property
    def email(self):
        """Gets the email of this CloudEndureAccountRequest.  # noqa: E501


        :return: The email of this CloudEndureAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CloudEndureAccountRequest.


        :param email: The email of this CloudEndureAccountRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def request_link(self):
        """Gets the request_link of this CloudEndureAccountRequest.  # noqa: E501


        :return: The request_link of this CloudEndureAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_link

    @request_link.setter
    def request_link(self, request_link):
        """Sets the request_link of this CloudEndureAccountRequest.


        :param request_link: The request_link of this CloudEndureAccountRequest.  # noqa: E501
        :type: str
        """

        self._request_link = request_link

    @property
    def registration_token(self):
        """Gets the registration_token of this CloudEndureAccountRequest.  # noqa: E501


        :return: The registration_token of this CloudEndureAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._registration_token

    @registration_token.setter
    def registration_token(self, registration_token):
        """Sets the registration_token of this CloudEndureAccountRequest.


        :param registration_token: The registration_token of this CloudEndureAccountRequest.  # noqa: E501
        :type: str
        """

        self._registration_token = registration_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CloudEndureAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudEndureAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
