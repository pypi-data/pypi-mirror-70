
# AUTO-GENERATED file from IFMapApiGenerator. Do Not Edit!

"""
This module defines the classes for every configuration element managed by the system
"""

from builtins import range
from builtins import object
try:
    from cfgm_common.exceptions import AmbiguousParentError
except ImportError:
    try:
        from vnc_api.exceptions import AmbiguousParentError
    except ImportError:
        pass

class ServiceEndpoint(object):
    """


    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.ServiceConnectionModule` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Link the service endpoint to service connection node

        * list of :class:`.PhysicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to Router for a given service.

        * list of :class:`.ServiceObject` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Links the service-endpoints to a service object.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
    """

    resource_type = 'service-endpoint'
    object_type = 'service_endpoint'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_connection_module_refs', 'physical_router_refs', u'service_object_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_connection_module_refs'] = ('service-connection-module', 'None', False, ['Link the service endpoint to service connection node'])
    ref_field_types['physical_router_refs'] = ('physical-router', 'None', False, ['Reference to Router for a given service.'])
    ref_field_types['service_object_refs'] = ('service-object', 'None', False, ['Links the service-endpoints to a service object.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_connection_module_refs'] = 'service-endpoint-service-connection-module'
    ref_field_metas['physical_router_refs'] = 'service-endpoint-physical-router'
    ref_field_metas['service_object_refs'] = 'service-endpoint-service-object'
    ref_field_metas['tag_refs'] = 'service-endpoint-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-endpoint'
        if not name:
            name = u'default-service-endpoint'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-endpoint)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-endpoint in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-endpoint as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for service-endpoint.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-endpoint.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-endpoint.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-endpoint.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-endpoint.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-endpoint.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-endpoint.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-endpoint.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_connection_module_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_connection_module_refs')
        if hasattr(self, 'physical_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_refs')
        if hasattr(self, 'service_object_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_object_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_connection_module(self, ref_obj):
        """Set service-connection-module for service-endpoint.
        
        :param ref_obj: ServiceConnectionModule object
        
        """
        self.service_connection_module_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_connection_module_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_connection_module

    def add_service_connection_module(self, ref_obj):
        """Add service-connection-module to service-endpoint.
        
        :param ref_obj: ServiceConnectionModule object
        
        """
        refs = getattr(self, 'service_connection_module_refs', [])
        if not refs:
            self.service_connection_module_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_connection_module_refs.append(ref_info)
    # end add_service_connection_module

    def del_service_connection_module(self, ref_obj):
        refs = self.get_service_connection_module_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_connection_module_refs.remove(ref)
                return
    # end del_service_connection_module

    def set_service_connection_module_list(self, ref_obj_list):
        """Set service-connection-module list for service-endpoint.
        
        :param ref_obj_list: list of ServiceConnectionModule object
        
        """
        self.service_connection_module_refs = ref_obj_list
    # end set_service_connection_module_list

    def get_service_connection_module_refs(self):
        """Return service-connection-module list for service-endpoint.
        
        :returns: list of <ServiceConnectionModule>
        
        """
        return getattr(self, 'service_connection_module_refs', None)
    # end get_service_connection_module_refs

    def set_physical_router(self, ref_obj):
        """Set physical-router for service-endpoint.
        
        :param ref_obj: PhysicalRouter object
        
        """
        self.physical_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_router

    def add_physical_router(self, ref_obj):
        """Add physical-router to service-endpoint.
        
        :param ref_obj: PhysicalRouter object
        
        """
        refs = getattr(self, 'physical_router_refs', [])
        if not refs:
            self.physical_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_router_refs.append(ref_info)
    # end add_physical_router

    def del_physical_router(self, ref_obj):
        refs = self.get_physical_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_router_refs.remove(ref)
                return
    # end del_physical_router

    def set_physical_router_list(self, ref_obj_list):
        """Set physical-router list for service-endpoint.
        
        :param ref_obj_list: list of PhysicalRouter object
        
        """
        self.physical_router_refs = ref_obj_list
    # end set_physical_router_list

    def get_physical_router_refs(self):
        """Return physical-router list for service-endpoint.
        
        :returns: list of <PhysicalRouter>
        
        """
        return getattr(self, 'physical_router_refs', None)
    # end get_physical_router_refs

    def set_service_object(self, ref_obj):
        """Set service-object for service-endpoint.
        
        :param ref_obj: ServiceObject object
        
        """
        self.service_object_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_object_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_object

    def add_service_object(self, ref_obj):
        """Add service-object to service-endpoint.
        
        :param ref_obj: ServiceObject object
        
        """
        refs = getattr(self, 'service_object_refs', [])
        if not refs:
            self.service_object_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_object_refs.append(ref_info)
    # end add_service_object

    def del_service_object(self, ref_obj):
        refs = self.get_service_object_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_object_refs.remove(ref)
                return
    # end del_service_object

    def set_service_object_list(self, ref_obj_list):
        """Set service-object list for service-endpoint.
        
        :param ref_obj_list: list of ServiceObject object
        
        """
        self.service_object_refs = ref_obj_list
    # end set_service_object_list

    def get_service_object_refs(self):
        """Return service-object list for service-endpoint.
        
        :returns: list of <ServiceObject>
        
        """
        return getattr(self, 'service_object_refs', None)
    # end get_service_object_refs

    def set_tag(self, ref_obj):
        """Set tag for service-endpoint.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-endpoint.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-endpoint.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-endpoint.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this service-endpoint"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def dump(self):
        """Display service-endpoint object in compact form."""
        print('------------ service-endpoint ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_connection_module = ', self.get_service_connection_module_refs())
        print('REF physical_router = ', self.get_physical_router_refs())
        print('REF service_object = ', self.get_service_object_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
    # end dump

# end class ServiceEndpoint

class InstanceIp(object):
    """


    Created By:

    Properties:
        * instance_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CR

            Description:

              Ip address value for instance ip.

        * instance_ip_family
            Type: str, *one-of* [u'v4', u'v6']

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              Ip address family for instance ip, IPv4(v4) or IPv6(v6).

        * instance_ip_mode
            Type: str, *one-of* [u'active-active', u'active-standby']

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              Ip address HA mode in case this instance ip is used in more than one interface, active-Active or

              active-Standby.

        * secondary_ip_tracking_ip
            Type: :class:`.SubnetType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              When this instance ip is secondary ip, it can track activeness of another ip.

        * subnet_uuid
            Type: str

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              This instance ip was allocated from this Subnet(UUID).

        * instance_ip_subscriber_tag
            Type: str

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              This instance ip belongs to one of the subscribers in the subscriber-tag.

        * instance_ip_secondary
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This instance ip is secondary ip of the interface.

        * instance_ip_local_ip
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This instance ip is local to compute and will not be exported to other nodes.

        * service_instance_ip
            Type: bool

            Created By: System

            Operations Allowed: CRUD

            Description:

              This instance ip is used as service chain next hop

        * service_health_check_ip
            Type: bool

            Created By: System

            Operations Allowed: CRUD

            Description:

              This instance ip is used as service health check source ip

        * instance_ip_subnet
            Type: :class:`.SubnetType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Ip prefix/length of the subnet where instance-ip belongs.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.FloatingIp` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              floating-ip can be child of instance-ip. By doing so instance-ip can be used as floating-ip.


    References to:
        * list of :class:`.VirtualNetwork` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to virtual network of this instance ip.

        * list of :class:`.NetworkIpam` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to network ipam of this instance ip.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to virtual machine interface to which this instance ip is attached.

        * list of :class:`.PhysicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This instance ip is used as IRB address on the referenced physical router (e.g.MX), In case of OVSDB

              TOR usecase this address will be used as default gateway for Host behind the TOR.

        * list of :class:`.VirtualRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to virtual router of this instance ip.

        * list of :class:`.LogicalInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the logical interface that this instance ip is assigned to.

        * list of :class:`.FlowNode` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the flow node that this instance ip is assigned to.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ServiceInstance` objects
    """

    resource_type = 'instance-ip'
    object_type = 'instance_ip'

    prop_fields = set([u'instance_ip_address', u'instance_ip_family', u'instance_ip_mode', u'secondary_ip_tracking_ip', u'subnet_uuid', u'instance_ip_subscriber_tag', u'instance_ip_secondary', u'instance_ip_local_ip', u'service_instance_ip', u'service_health_check_ip', u'instance_ip_subnet', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_network_refs', u'network_ipam_refs', 'virtual_machine_interface_refs', 'physical_router_refs', 'virtual_router_refs', 'logical_interface_refs', 'flow_node_refs', u'tag_refs'])
    backref_fields = set([u'service_instance_back_refs'])
    children_fields = set([u'floating_ips'])

    prop_field_types = {
        'instance_ip_address': {'operations': 'CR', 'restrictions': [], 'default': None, 'description': ['Ip address value for instance ip.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'instance_ip_family': {'operations': 'CR', 'restrictions': [u'v4', u'v6'], 'default': None, 'description': ['Ip address family for instance ip, IPv4(v4) or IPv6(v6).'], 'simple_type': u'IpAddressFamilyType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'instance_ip_mode': {'operations': 'CR', 'restrictions': [u'active-active', u'active-standby'], 'default': None, 'description': ['Ip address HA mode in case this instance ip is used in more than one interface, active-Active or', 'active-Standby.'], 'simple_type': u'AddressMode', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'secondary_ip_tracking_ip': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['When this instance ip is secondary ip, it can track activeness of another ip.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SubnetType', 'restriction_type': None, 'required': 'optional'},
        'subnet_uuid': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['This instance ip was allocated from this Subnet(UUID).'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'instance_ip_subscriber_tag': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['This instance ip belongs to one of the subscribers in the subscriber-tag.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'instance_ip_secondary': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['This instance ip is secondary ip of the interface.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'instance_ip_local_ip': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['This instance ip is local to compute and will not be exported to other nodes.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'service_instance_ip': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['This instance ip is used as service chain next hop'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'system-only'},
        'service_health_check_ip': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['This instance ip is used as service health check source ip'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'system-only'},
        'instance_ip_subnet': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Ip prefix/length of the subnet where instance-ip belongs.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SubnetType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['Reference to virtual network of this instance ip.'])
    ref_field_types['network_ipam_refs'] = ('network-ipam', 'None', False, ['Reference to network ipam of this instance ip.'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to virtual machine interface to which this instance ip is attached.'])
    ref_field_types['physical_router_refs'] = ('physical-router', 'None', False, ['This instance ip is used as IRB address on the referenced physical router (e.g.MX), In case of OVSDB', 'TOR usecase this address will be used as default gateway for Host behind the TOR.'])
    ref_field_types['virtual_router_refs'] = ('virtual-router', 'None', False, ['Reference to virtual router of this instance ip.'])
    ref_field_types['logical_interface_refs'] = ('logical-interface', 'None', False, ['Reference to the logical interface that this instance ip is assigned to.'])
    ref_field_types['flow_node_refs'] = ('flow-node', 'None', False, ['Reference to the flow node that this instance ip is assigned to.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['service_instance_back_refs'] = ('service-instance', 'ServiceInterfaceTag', False)

    children_field_types = {}
    children_field_types['floating_ips'] = ('floating-ip', False)

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['instance_ip_address'] = 'instance-ip-address'
    prop_field_metas['instance_ip_family'] = 'instance-ip-family'
    prop_field_metas['instance_ip_mode'] = 'instance-ip-mode'
    prop_field_metas['secondary_ip_tracking_ip'] = 'secondary-ip-tracking-ip'
    prop_field_metas['subnet_uuid'] = 'subnet-uuid'
    prop_field_metas['instance_ip_subscriber_tag'] = 'instance-ip-subscriber-tag'
    prop_field_metas['instance_ip_secondary'] = 'instance-ip-secondary'
    prop_field_metas['instance_ip_local_ip'] = 'instance-ip-local-ip'
    prop_field_metas['service_instance_ip'] = 'service-instance-ip'
    prop_field_metas['service_health_check_ip'] = 'service-health-check-ip'
    prop_field_metas['instance_ip_subnet'] = 'instance-ip-subnet'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_network_refs'] = 'instance-ip-virtual-network'
    ref_field_metas['network_ipam_refs'] = 'instance-ip-network-ipam'
    ref_field_metas['virtual_machine_interface_refs'] = 'instance-ip-virtual-machine-interface'
    ref_field_metas['physical_router_refs'] = 'instance-ip-physical-router'
    ref_field_metas['virtual_router_refs'] = 'instance-ip-virtual-router'
    ref_field_metas['logical_interface_refs'] = 'instance-ip-logical-interface'
    ref_field_metas['flow_node_refs'] = 'instance-ip-flow-node'
    ref_field_metas['tag_refs'] = 'instance-ip-tag'

    children_field_metas = {}
    children_field_metas['floating_ips'] = 'instance-ip-floating-ip'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, instance_ip_address=None, instance_ip_family=None, instance_ip_mode=None, secondary_ip_tracking_ip=None, subnet_uuid=None, instance_ip_subscriber_tag=None, instance_ip_secondary=False, instance_ip_local_ip=False, service_instance_ip=False, service_health_check_ip=False, instance_ip_subnet=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'instance-ip'
        if not name:
            name = u'default-instance-ip'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if instance_ip_address is not None:
            self._instance_ip_address = instance_ip_address
        if instance_ip_family is not None:
            self._instance_ip_family = instance_ip_family
        if instance_ip_mode is not None:
            self._instance_ip_mode = instance_ip_mode
        if secondary_ip_tracking_ip is not None:
            self._secondary_ip_tracking_ip = secondary_ip_tracking_ip
        if subnet_uuid is not None:
            self._subnet_uuid = subnet_uuid
        if instance_ip_subscriber_tag is not None:
            self._instance_ip_subscriber_tag = instance_ip_subscriber_tag
        if instance_ip_secondary is not None:
            self._instance_ip_secondary = instance_ip_secondary
        if instance_ip_local_ip is not None:
            self._instance_ip_local_ip = instance_ip_local_ip
        if service_instance_ip is not None:
            self._service_instance_ip = service_instance_ip
        if service_health_check_ip is not None:
            self._service_health_check_ip = service_health_check_ip
        if instance_ip_subnet is not None:
            self._instance_ip_subnet = instance_ip_subnet
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (instance-ip)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of instance-ip in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of instance-ip as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def instance_ip_address(self):
        """Get instance-ip-address for instance-ip.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_instance_ip_address', None)
    # end instance_ip_address

    @instance_ip_address.setter
    def instance_ip_address(self, instance_ip_address):
        """Set instance-ip-address for instance-ip.
        
        :param instance_ip_address: IpAddressType object
        
        """
        self._instance_ip_address = instance_ip_address
    # end instance_ip_address

    def set_instance_ip_address(self, value):
        self.instance_ip_address = value
    # end set_instance_ip_address

    def get_instance_ip_address(self):
        return self.instance_ip_address
    # end get_instance_ip_address

    @property
    def instance_ip_family(self):
        """Get instance-ip-family for instance-ip.
        
        :returns: IpAddressFamilyType object
        
        """
        return getattr(self, '_instance_ip_family', None)
    # end instance_ip_family

    @instance_ip_family.setter
    def instance_ip_family(self, instance_ip_family):
        """Set instance-ip-family for instance-ip.
        
        :param instance_ip_family: IpAddressFamilyType object
        
        """
        self._instance_ip_family = instance_ip_family
    # end instance_ip_family

    def set_instance_ip_family(self, value):
        self.instance_ip_family = value
    # end set_instance_ip_family

    def get_instance_ip_family(self):
        return self.instance_ip_family
    # end get_instance_ip_family

    @property
    def instance_ip_mode(self):
        """Get instance-ip-mode for instance-ip.
        
        :returns: AddressMode object
        
        """
        return getattr(self, '_instance_ip_mode', None)
    # end instance_ip_mode

    @instance_ip_mode.setter
    def instance_ip_mode(self, instance_ip_mode):
        """Set instance-ip-mode for instance-ip.
        
        :param instance_ip_mode: AddressMode object
        
        """
        self._instance_ip_mode = instance_ip_mode
    # end instance_ip_mode

    def set_instance_ip_mode(self, value):
        self.instance_ip_mode = value
    # end set_instance_ip_mode

    def get_instance_ip_mode(self):
        return self.instance_ip_mode
    # end get_instance_ip_mode

    @property
    def secondary_ip_tracking_ip(self):
        """Get secondary-ip-tracking-ip for instance-ip.
        
        :returns: SubnetType object
        
        """
        return getattr(self, '_secondary_ip_tracking_ip', None)
    # end secondary_ip_tracking_ip

    @secondary_ip_tracking_ip.setter
    def secondary_ip_tracking_ip(self, secondary_ip_tracking_ip):
        """Set secondary-ip-tracking-ip for instance-ip.
        
        :param secondary_ip_tracking_ip: SubnetType object
        
        """
        self._secondary_ip_tracking_ip = secondary_ip_tracking_ip
    # end secondary_ip_tracking_ip

    def set_secondary_ip_tracking_ip(self, value):
        self.secondary_ip_tracking_ip = value
    # end set_secondary_ip_tracking_ip

    def get_secondary_ip_tracking_ip(self):
        return self.secondary_ip_tracking_ip
    # end get_secondary_ip_tracking_ip

    @property
    def subnet_uuid(self):
        """Get subnet-uuid for instance-ip.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_subnet_uuid', None)
    # end subnet_uuid

    @subnet_uuid.setter
    def subnet_uuid(self, subnet_uuid):
        """Set subnet-uuid for instance-ip.
        
        :param subnet_uuid: xsd:string object
        
        """
        self._subnet_uuid = subnet_uuid
    # end subnet_uuid

    def set_subnet_uuid(self, value):
        self.subnet_uuid = value
    # end set_subnet_uuid

    def get_subnet_uuid(self):
        return self.subnet_uuid
    # end get_subnet_uuid

    @property
    def instance_ip_subscriber_tag(self):
        """Get instance-ip-subscriber-tag for instance-ip.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_instance_ip_subscriber_tag', None)
    # end instance_ip_subscriber_tag

    @instance_ip_subscriber_tag.setter
    def instance_ip_subscriber_tag(self, instance_ip_subscriber_tag):
        """Set instance-ip-subscriber-tag for instance-ip.
        
        :param instance_ip_subscriber_tag: xsd:string object
        
        """
        self._instance_ip_subscriber_tag = instance_ip_subscriber_tag
    # end instance_ip_subscriber_tag

    def set_instance_ip_subscriber_tag(self, value):
        self.instance_ip_subscriber_tag = value
    # end set_instance_ip_subscriber_tag

    def get_instance_ip_subscriber_tag(self):
        return self.instance_ip_subscriber_tag
    # end get_instance_ip_subscriber_tag

    @property
    def instance_ip_secondary(self):
        """Get instance-ip-secondary for instance-ip.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_instance_ip_secondary', None)
    # end instance_ip_secondary

    @instance_ip_secondary.setter
    def instance_ip_secondary(self, instance_ip_secondary):
        """Set instance-ip-secondary for instance-ip.
        
        :param instance_ip_secondary: xsd:boolean object
        
        """
        self._instance_ip_secondary = instance_ip_secondary
    # end instance_ip_secondary

    def set_instance_ip_secondary(self, value):
        self.instance_ip_secondary = value
    # end set_instance_ip_secondary

    def get_instance_ip_secondary(self):
        return self.instance_ip_secondary
    # end get_instance_ip_secondary

    @property
    def instance_ip_local_ip(self):
        """Get instance-ip-local-ip for instance-ip.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_instance_ip_local_ip', None)
    # end instance_ip_local_ip

    @instance_ip_local_ip.setter
    def instance_ip_local_ip(self, instance_ip_local_ip):
        """Set instance-ip-local-ip for instance-ip.
        
        :param instance_ip_local_ip: xsd:boolean object
        
        """
        self._instance_ip_local_ip = instance_ip_local_ip
    # end instance_ip_local_ip

    def set_instance_ip_local_ip(self, value):
        self.instance_ip_local_ip = value
    # end set_instance_ip_local_ip

    def get_instance_ip_local_ip(self):
        return self.instance_ip_local_ip
    # end get_instance_ip_local_ip

    @property
    def service_instance_ip(self):
        """Get service-instance-ip for instance-ip.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_service_instance_ip', None)
    # end service_instance_ip

    @service_instance_ip.setter
    def service_instance_ip(self, service_instance_ip):
        """Set service-instance-ip for instance-ip.
        
        :param service_instance_ip: xsd:boolean object
        
        """
        self._service_instance_ip = service_instance_ip
    # end service_instance_ip

    def set_service_instance_ip(self, value):
        self.service_instance_ip = value
    # end set_service_instance_ip

    def get_service_instance_ip(self):
        return self.service_instance_ip
    # end get_service_instance_ip

    @property
    def service_health_check_ip(self):
        """Get service-health-check-ip for instance-ip.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_service_health_check_ip', None)
    # end service_health_check_ip

    @service_health_check_ip.setter
    def service_health_check_ip(self, service_health_check_ip):
        """Set service-health-check-ip for instance-ip.
        
        :param service_health_check_ip: xsd:boolean object
        
        """
        self._service_health_check_ip = service_health_check_ip
    # end service_health_check_ip

    def set_service_health_check_ip(self, value):
        self.service_health_check_ip = value
    # end set_service_health_check_ip

    def get_service_health_check_ip(self):
        return self.service_health_check_ip
    # end get_service_health_check_ip

    @property
    def instance_ip_subnet(self):
        """Get instance-ip-subnet for instance-ip.
        
        :returns: SubnetType object
        
        """
        return getattr(self, '_instance_ip_subnet', None)
    # end instance_ip_subnet

    @instance_ip_subnet.setter
    def instance_ip_subnet(self, instance_ip_subnet):
        """Set instance-ip-subnet for instance-ip.
        
        :param instance_ip_subnet: SubnetType object
        
        """
        self._instance_ip_subnet = instance_ip_subnet
    # end instance_ip_subnet

    def set_instance_ip_subnet(self, value):
        self.instance_ip_subnet = value
    # end set_instance_ip_subnet

    def get_instance_ip_subnet(self):
        return self.instance_ip_subnet
    # end get_instance_ip_subnet

    @property
    def id_perms(self):
        """Get id-perms for instance-ip.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for instance-ip.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for instance-ip.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for instance-ip.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for instance-ip.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for instance-ip.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for instance-ip.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for instance-ip.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_instance_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_address')
        if hasattr(self, '_instance_ip_family'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_family')
        if hasattr(self, '_instance_ip_mode'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_mode')
        if hasattr(self, '_secondary_ip_tracking_ip'):
            self._serialize_field_to_json(serialized, field_names, 'secondary_ip_tracking_ip')
        if hasattr(self, '_subnet_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'subnet_uuid')
        if hasattr(self, '_instance_ip_subscriber_tag'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_subscriber_tag')
        if hasattr(self, '_instance_ip_secondary'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_secondary')
        if hasattr(self, '_instance_ip_local_ip'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_local_ip')
        if hasattr(self, '_service_instance_ip'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_ip')
        if hasattr(self, '_service_health_check_ip'):
            self._serialize_field_to_json(serialized, field_names, 'service_health_check_ip')
        if hasattr(self, '_instance_ip_subnet'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_subnet')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'network_ipam_refs'):
            self._serialize_field_to_json(serialized, field_names, 'network_ipam_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'physical_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_refs')
        if hasattr(self, 'virtual_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_router_refs')
        if hasattr(self, 'logical_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'logical_interface_refs')
        if hasattr(self, 'flow_node_refs'):
            self._serialize_field_to_json(serialized, field_names, 'flow_node_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_floating_ips(self):
        return getattr(self, 'floating_ips', None)
    # end get_floating_ips

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for instance-ip.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to instance-ip.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for instance-ip.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for instance-ip.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_network_ipam(self, ref_obj):
        """Set network-ipam for instance-ip.
        
        :param ref_obj: NetworkIpam object
        
        """
        self.network_ipam_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.network_ipam_refs[0]['uuid'] = ref_obj.uuid

    # end set_network_ipam

    def add_network_ipam(self, ref_obj):
        """Add network-ipam to instance-ip.
        
        :param ref_obj: NetworkIpam object
        
        """
        refs = getattr(self, 'network_ipam_refs', [])
        if not refs:
            self.network_ipam_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.network_ipam_refs.append(ref_info)
    # end add_network_ipam

    def del_network_ipam(self, ref_obj):
        refs = self.get_network_ipam_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.network_ipam_refs.remove(ref)
                return
    # end del_network_ipam

    def set_network_ipam_list(self, ref_obj_list):
        """Set network-ipam list for instance-ip.
        
        :param ref_obj_list: list of NetworkIpam object
        
        """
        self.network_ipam_refs = ref_obj_list
    # end set_network_ipam_list

    def get_network_ipam_refs(self):
        """Return network-ipam list for instance-ip.
        
        :returns: list of <NetworkIpam>
        
        """
        return getattr(self, 'network_ipam_refs', None)
    # end get_network_ipam_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for instance-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to instance-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for instance-ip.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for instance-ip.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_physical_router(self, ref_obj):
        """Set physical-router for instance-ip.
        
        :param ref_obj: PhysicalRouter object
        
        """
        self.physical_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_router

    def add_physical_router(self, ref_obj):
        """Add physical-router to instance-ip.
        
        :param ref_obj: PhysicalRouter object
        
        """
        refs = getattr(self, 'physical_router_refs', [])
        if not refs:
            self.physical_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_router_refs.append(ref_info)
    # end add_physical_router

    def del_physical_router(self, ref_obj):
        refs = self.get_physical_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_router_refs.remove(ref)
                return
    # end del_physical_router

    def set_physical_router_list(self, ref_obj_list):
        """Set physical-router list for instance-ip.
        
        :param ref_obj_list: list of PhysicalRouter object
        
        """
        self.physical_router_refs = ref_obj_list
    # end set_physical_router_list

    def get_physical_router_refs(self):
        """Return physical-router list for instance-ip.
        
        :returns: list of <PhysicalRouter>
        
        """
        return getattr(self, 'physical_router_refs', None)
    # end get_physical_router_refs

    def set_virtual_router(self, ref_obj):
        """Set virtual-router for instance-ip.
        
        :param ref_obj: VirtualRouter object
        
        """
        self.virtual_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_router

    def add_virtual_router(self, ref_obj):
        """Add virtual-router to instance-ip.
        
        :param ref_obj: VirtualRouter object
        
        """
        refs = getattr(self, 'virtual_router_refs', [])
        if not refs:
            self.virtual_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_router_refs.append(ref_info)
    # end add_virtual_router

    def del_virtual_router(self, ref_obj):
        refs = self.get_virtual_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_router_refs.remove(ref)
                return
    # end del_virtual_router

    def set_virtual_router_list(self, ref_obj_list):
        """Set virtual-router list for instance-ip.
        
        :param ref_obj_list: list of VirtualRouter object
        
        """
        self.virtual_router_refs = ref_obj_list
    # end set_virtual_router_list

    def get_virtual_router_refs(self):
        """Return virtual-router list for instance-ip.
        
        :returns: list of <VirtualRouter>
        
        """
        return getattr(self, 'virtual_router_refs', None)
    # end get_virtual_router_refs

    def set_logical_interface(self, ref_obj):
        """Set logical-interface for instance-ip.
        
        :param ref_obj: LogicalInterface object
        
        """
        self.logical_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.logical_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_logical_interface

    def add_logical_interface(self, ref_obj):
        """Add logical-interface to instance-ip.
        
        :param ref_obj: LogicalInterface object
        
        """
        refs = getattr(self, 'logical_interface_refs', [])
        if not refs:
            self.logical_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.logical_interface_refs.append(ref_info)
    # end add_logical_interface

    def del_logical_interface(self, ref_obj):
        refs = self.get_logical_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.logical_interface_refs.remove(ref)
                return
    # end del_logical_interface

    def set_logical_interface_list(self, ref_obj_list):
        """Set logical-interface list for instance-ip.
        
        :param ref_obj_list: list of LogicalInterface object
        
        """
        self.logical_interface_refs = ref_obj_list
    # end set_logical_interface_list

    def get_logical_interface_refs(self):
        """Return logical-interface list for instance-ip.
        
        :returns: list of <LogicalInterface>
        
        """
        return getattr(self, 'logical_interface_refs', None)
    # end get_logical_interface_refs

    def set_flow_node(self, ref_obj):
        """Set flow-node for instance-ip.
        
        :param ref_obj: FlowNode object
        
        """
        self.flow_node_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.flow_node_refs[0]['uuid'] = ref_obj.uuid

    # end set_flow_node

    def add_flow_node(self, ref_obj):
        """Add flow-node to instance-ip.
        
        :param ref_obj: FlowNode object
        
        """
        refs = getattr(self, 'flow_node_refs', [])
        if not refs:
            self.flow_node_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.flow_node_refs.append(ref_info)
    # end add_flow_node

    def del_flow_node(self, ref_obj):
        refs = self.get_flow_node_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.flow_node_refs.remove(ref)
                return
    # end del_flow_node

    def set_flow_node_list(self, ref_obj_list):
        """Set flow-node list for instance-ip.
        
        :param ref_obj_list: list of FlowNode object
        
        """
        self.flow_node_refs = ref_obj_list
    # end set_flow_node_list

    def get_flow_node_refs(self):
        """Return flow-node list for instance-ip.
        
        :returns: list of <FlowNode>
        
        """
        return getattr(self, 'flow_node_refs', None)
    # end get_flow_node_refs

    def set_tag(self, ref_obj):
        """Set tag for instance-ip.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to instance-ip.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for instance-ip.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for instance-ip.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_service_instance_back_refs(self):
        """Return list of all service-instances using this instance-ip"""
        return getattr(self, 'service_instance_back_refs', None)
    # end get_service_instance_back_refs

    def dump(self):
        """Display instance-ip object in compact form."""
        print('------------ instance-ip ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P instance_ip_address = ', self.get_instance_ip_address())
        print('P instance_ip_family = ', self.get_instance_ip_family())
        print('P instance_ip_mode = ', self.get_instance_ip_mode())
        print('P secondary_ip_tracking_ip = ', self.get_secondary_ip_tracking_ip())
        print('P subnet_uuid = ', self.get_subnet_uuid())
        print('P instance_ip_subscriber_tag = ', self.get_instance_ip_subscriber_tag())
        print('P instance_ip_secondary = ', self.get_instance_ip_secondary())
        print('P instance_ip_local_ip = ', self.get_instance_ip_local_ip())
        print('P service_instance_ip = ', self.get_service_instance_ip())
        print('P service_health_check_ip = ', self.get_service_health_check_ip())
        print('P instance_ip_subnet = ', self.get_instance_ip_subnet())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF network_ipam = ', self.get_network_ipam_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF physical_router = ', self.get_physical_router_refs())
        print('REF virtual_router = ', self.get_virtual_router_refs())
        print('REF logical_interface = ', self.get_logical_interface_refs())
        print('REF flow_node = ', self.get_flow_node_refs())
        print('HAS floating_ip = ', self.get_floating_ips())
        print('REF tag = ', self.get_tag_refs())
        print('BCK service_instance = ', self.get_service_instance_back_refs())
    # end dump

# end class InstanceIp

class ServiceApplianceSet(object):
    """
    Service appliance set is the collection of service appliances.
    This collection is used as a provider in loadbalancer pool config.
    Algorithm to distribute/choose one appliance over other can be built while creating loadbalancer
    pool.
    By default, system will create service-appliance-set with name "opencontrail".
    This is the default loadbalancer provider for pools in Contrail.
    This provider is based on "ha-proxy".Service appliance set has following attribute -
         Driver to load for provisioning the appliance
         Service appliance properties - HA mode.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * service_appliance_set_virtualization_type
            Type: str, *one-of* [u'virtual-machine', u'network-namespace', u'vrouter-instance', u'physical-device']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service virtualization type decides how individual service instances are instantiated

        * service_appliance_set_properties
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of Key:Value pairs that are used by the provider driver and opaque to system.

        * service_appliance_driver
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Name of the provider driver for this service appliance set.

        * service_appliance_ha_mode
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              High availability mode for the service appliance set, active-active or active-backup.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.ServiceAppliance` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service appliance is a member in service appliance set (e.g. Loadbalancer, Firewall provider).By

              default system will create "ha-proxy" based service appliance.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ServiceTemplate` objects
        * list of :class:`.LoadbalancerPool` objects
        * list of :class:`.Loadbalancer` objects
    """

    resource_type = 'service-appliance-set'
    object_type = 'service_appliance_set'

    prop_fields = set([u'service_appliance_set_virtualization_type', u'service_appliance_set_properties', u'service_appliance_driver', u'service_appliance_ha_mode', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['service_template_back_refs', u'loadbalancer_pool_back_refs', 'loadbalancer_back_refs'])
    children_fields = set([u'service_appliances'])

    prop_field_types = {
        'service_appliance_set_virtualization_type': {'operations': 'CRUD', 'restrictions': [u'virtual-machine', u'network-namespace', u'vrouter-instance', u'physical-device'], 'default': None, 'description': ['Service virtualization type decides how individual service instances are instantiated'], 'simple_type': u'ServiceVirtualizationType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'service_appliance_set_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of Key:Value pairs that are used by the provider driver and opaque to system.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'service_appliance_driver': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Name of the provider driver for this service appliance set.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'service_appliance_ha_mode': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['High availability mode for the service appliance set, active-active or active-backup.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['service_template_back_refs'] = ('service-template', 'None', False)
    backref_field_types['loadbalancer_pool_back_refs'] = ('loadbalancer-pool', 'None', False)
    backref_field_types['loadbalancer_back_refs'] = ('loadbalancer', 'None', False)

    children_field_types = {}
    children_field_types['service_appliances'] = ('service-appliance', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['service_appliance_set_virtualization_type'] = 'service-appliance-set-virtualization-type'
    prop_field_metas['service_appliance_set_properties'] = 'service-appliance-set-properties'
    prop_field_metas['service_appliance_driver'] = 'service-appliance-driver'
    prop_field_metas['service_appliance_ha_mode'] = 'service-appliance-ha-mode'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'service-appliance-set-tag'

    children_field_metas = {}
    children_field_metas['service_appliances'] = 'service-appliance-set-service-appliance'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, service_appliance_set_virtualization_type=None, service_appliance_set_properties=None, service_appliance_driver=None, service_appliance_ha_mode=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-appliance-set'
        if not name:
            name = u'default-service-appliance-set'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if service_appliance_set_virtualization_type is not None:
            self._service_appliance_set_virtualization_type = service_appliance_set_virtualization_type
        if service_appliance_set_properties is not None:
            self._service_appliance_set_properties = service_appliance_set_properties
        if service_appliance_driver is not None:
            self._service_appliance_driver = service_appliance_driver
        if service_appliance_ha_mode is not None:
            self._service_appliance_ha_mode = service_appliance_ha_mode
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-appliance-set)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-appliance-set in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-appliance-set as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of service-appliance-set's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of service-appliance-set's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def service_appliance_set_virtualization_type(self):
        """Get service-appliance-set-virtualization-type for service-appliance-set.
        
        :returns: ServiceVirtualizationType object
        
        """
        return getattr(self, '_service_appliance_set_virtualization_type', None)
    # end service_appliance_set_virtualization_type

    @service_appliance_set_virtualization_type.setter
    def service_appliance_set_virtualization_type(self, service_appliance_set_virtualization_type):
        """Set service-appliance-set-virtualization-type for service-appliance-set.
        
        :param service_appliance_set_virtualization_type: ServiceVirtualizationType object
        
        """
        self._service_appliance_set_virtualization_type = service_appliance_set_virtualization_type
    # end service_appliance_set_virtualization_type

    def set_service_appliance_set_virtualization_type(self, value):
        self.service_appliance_set_virtualization_type = value
    # end set_service_appliance_set_virtualization_type

    def get_service_appliance_set_virtualization_type(self):
        return self.service_appliance_set_virtualization_type
    # end get_service_appliance_set_virtualization_type

    @property
    def service_appliance_set_properties(self):
        """Get service-appliance-set-properties for service-appliance-set.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_service_appliance_set_properties', None)
    # end service_appliance_set_properties

    @service_appliance_set_properties.setter
    def service_appliance_set_properties(self, service_appliance_set_properties):
        """Set service-appliance-set-properties for service-appliance-set.
        
        :param service_appliance_set_properties: KeyValuePairs object
        
        """
        self._service_appliance_set_properties = service_appliance_set_properties
    # end service_appliance_set_properties

    def set_service_appliance_set_properties(self, value):
        self.service_appliance_set_properties = value
    # end set_service_appliance_set_properties

    def get_service_appliance_set_properties(self):
        return self.service_appliance_set_properties
    # end get_service_appliance_set_properties

    @property
    def service_appliance_driver(self):
        """Get service-appliance-driver for service-appliance-set.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_service_appliance_driver', None)
    # end service_appliance_driver

    @service_appliance_driver.setter
    def service_appliance_driver(self, service_appliance_driver):
        """Set service-appliance-driver for service-appliance-set.
        
        :param service_appliance_driver: xsd:string object
        
        """
        self._service_appliance_driver = service_appliance_driver
    # end service_appliance_driver

    def set_service_appliance_driver(self, value):
        self.service_appliance_driver = value
    # end set_service_appliance_driver

    def get_service_appliance_driver(self):
        return self.service_appliance_driver
    # end get_service_appliance_driver

    @property
    def service_appliance_ha_mode(self):
        """Get service-appliance-ha-mode for service-appliance-set.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_service_appliance_ha_mode', None)
    # end service_appliance_ha_mode

    @service_appliance_ha_mode.setter
    def service_appliance_ha_mode(self, service_appliance_ha_mode):
        """Set service-appliance-ha-mode for service-appliance-set.
        
        :param service_appliance_ha_mode: xsd:string object
        
        """
        self._service_appliance_ha_mode = service_appliance_ha_mode
    # end service_appliance_ha_mode

    def set_service_appliance_ha_mode(self, value):
        self.service_appliance_ha_mode = value
    # end set_service_appliance_ha_mode

    def get_service_appliance_ha_mode(self):
        return self.service_appliance_ha_mode
    # end get_service_appliance_ha_mode

    @property
    def id_perms(self):
        """Get id-perms for service-appliance-set.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-appliance-set.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-appliance-set.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-appliance-set.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-appliance-set.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-appliance-set.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-appliance-set.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-appliance-set.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_service_appliance_set_virtualization_type'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_set_virtualization_type')
        if hasattr(self, '_service_appliance_set_properties'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_set_properties')
        if hasattr(self, '_service_appliance_driver'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_driver')
        if hasattr(self, '_service_appliance_ha_mode'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_ha_mode')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_service_appliances(self):
        return getattr(self, 'service_appliances', None)
    # end get_service_appliances

    def set_tag(self, ref_obj):
        """Set tag for service-appliance-set.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-appliance-set.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-appliance-set.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-appliance-set.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_service_template_back_refs(self):
        """Return list of all service-templates using this service-appliance-set"""
        return getattr(self, 'service_template_back_refs', None)
    # end get_service_template_back_refs

    def get_loadbalancer_pool_back_refs(self):
        """Return list of all loadbalancer-pools using this service-appliance-set"""
        return getattr(self, 'loadbalancer_pool_back_refs', None)
    # end get_loadbalancer_pool_back_refs

    def get_loadbalancer_back_refs(self):
        """Return list of all loadbalancers using this service-appliance-set"""
        return getattr(self, 'loadbalancer_back_refs', None)
    # end get_loadbalancer_back_refs

    def dump(self):
        """Display service-appliance-set object in compact form."""
        print('------------ service-appliance-set ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P service_appliance_set_virtualization_type = ', self.get_service_appliance_set_virtualization_type())
        print('P service_appliance_set_properties = ', self.get_service_appliance_set_properties())
        print('P service_appliance_driver = ', self.get_service_appliance_driver())
        print('P service_appliance_ha_mode = ', self.get_service_appliance_ha_mode())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS service_appliance = ', self.get_service_appliances())
        print('REF tag = ', self.get_tag_refs())
        print('BCK service_template = ', self.get_service_template_back_refs())
        print('BCK loadbalancer_pool = ', self.get_loadbalancer_pool_back_refs())
        print('BCK loadbalancer = ', self.get_loadbalancer_back_refs())
    # end dump

# end class ServiceApplianceSet

class RouteTarget(object):
    """


    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.LogicalRouter` objects
        * list of :class:`.RoutingInstance` objects
    """

    resource_type = 'route-target'
    object_type = 'route_target'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['logical_router_back_refs', 'routing_instance_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'None', False)
    backref_field_types['routing_instance_back_refs'] = ('routing-instance', 'InstanceTargetType', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'route-target-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'route-target'
        if not name:
            name = u'default-route-target'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (route-target)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of route-target in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of route-target as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for route-target.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for route-target.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for route-target.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for route-target.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for route-target.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for route-target.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for route-target.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for route-target.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for route-target.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to route-target.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for route-target.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for route-target.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this route-target"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def get_routing_instance_back_refs(self):
        """Return list of all routing-instances using this route-target"""
        return getattr(self, 'routing_instance_back_refs', None)
    # end get_routing_instance_back_refs

    def dump(self):
        """Display route-target object in compact form."""
        print('------------ route-target ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
        print('BCK routing_instance = ', self.get_routing_instance_back_refs())
    # end dump

# end class RouteTarget

class LoadbalancerListener(object):
    """
    Listener represents the application(protocol, port) to be load balanced.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * loadbalancer_listener_properties
            Type: :class:`.LoadbalancerListenerType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Loadbalancer` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.LoadbalancerPool` objects
    """

    resource_type = 'loadbalancer-listener'
    object_type = 'loadbalancer_listener'

    prop_fields = set([u'loadbalancer_listener_properties', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['loadbalancer_refs', u'tag_refs'])
    backref_fields = set([u'loadbalancer_pool_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'loadbalancer_listener_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': [], 'simple_type': None, 'is_complex': True, 'xsd_type': u'LoadbalancerListenerType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['loadbalancer_refs'] = ('loadbalancer', 'None', False, [])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['loadbalancer_pool_back_refs'] = ('loadbalancer-pool', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['loadbalancer_listener_properties'] = 'loadbalancer-listener-properties'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['loadbalancer_refs'] = 'loadbalancer-listener-loadbalancer'
    ref_field_metas['tag_refs'] = 'loadbalancer-listener-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, loadbalancer_listener_properties=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'loadbalancer-listener'
        if not name:
            name = u'default-loadbalancer-listener'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if loadbalancer_listener_properties is not None:
            self._loadbalancer_listener_properties = loadbalancer_listener_properties
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (loadbalancer-listener)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of loadbalancer-listener in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of loadbalancer-listener as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of loadbalancer-listener's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of loadbalancer-listener's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def loadbalancer_listener_properties(self):
        """Get loadbalancer-listener-properties for loadbalancer-listener.
        
        :returns: LoadbalancerListenerType object
        
        """
        return getattr(self, '_loadbalancer_listener_properties', None)
    # end loadbalancer_listener_properties

    @loadbalancer_listener_properties.setter
    def loadbalancer_listener_properties(self, loadbalancer_listener_properties):
        """Set loadbalancer-listener-properties for loadbalancer-listener.
        
        :param loadbalancer_listener_properties: LoadbalancerListenerType object
        
        """
        self._loadbalancer_listener_properties = loadbalancer_listener_properties
    # end loadbalancer_listener_properties

    def set_loadbalancer_listener_properties(self, value):
        self.loadbalancer_listener_properties = value
    # end set_loadbalancer_listener_properties

    def get_loadbalancer_listener_properties(self):
        return self.loadbalancer_listener_properties
    # end get_loadbalancer_listener_properties

    @property
    def id_perms(self):
        """Get id-perms for loadbalancer-listener.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for loadbalancer-listener.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for loadbalancer-listener.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for loadbalancer-listener.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for loadbalancer-listener.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for loadbalancer-listener.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for loadbalancer-listener.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for loadbalancer-listener.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_loadbalancer_listener_properties'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_listener_properties')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'loadbalancer_refs'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_loadbalancer(self, ref_obj):
        """Set loadbalancer for loadbalancer-listener.
        
        :param ref_obj: Loadbalancer object
        
        """
        self.loadbalancer_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.loadbalancer_refs[0]['uuid'] = ref_obj.uuid

    # end set_loadbalancer

    def add_loadbalancer(self, ref_obj):
        """Add loadbalancer to loadbalancer-listener.
        
        :param ref_obj: Loadbalancer object
        
        """
        refs = getattr(self, 'loadbalancer_refs', [])
        if not refs:
            self.loadbalancer_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.loadbalancer_refs.append(ref_info)
    # end add_loadbalancer

    def del_loadbalancer(self, ref_obj):
        refs = self.get_loadbalancer_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.loadbalancer_refs.remove(ref)
                return
    # end del_loadbalancer

    def set_loadbalancer_list(self, ref_obj_list):
        """Set loadbalancer list for loadbalancer-listener.
        
        :param ref_obj_list: list of Loadbalancer object
        
        """
        self.loadbalancer_refs = ref_obj_list
    # end set_loadbalancer_list

    def get_loadbalancer_refs(self):
        """Return loadbalancer list for loadbalancer-listener.
        
        :returns: list of <Loadbalancer>
        
        """
        return getattr(self, 'loadbalancer_refs', None)
    # end get_loadbalancer_refs

    def set_tag(self, ref_obj):
        """Set tag for loadbalancer-listener.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to loadbalancer-listener.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for loadbalancer-listener.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for loadbalancer-listener.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_loadbalancer_pool_back_refs(self):
        """Return list of all loadbalancer-pools using this loadbalancer-listener"""
        return getattr(self, 'loadbalancer_pool_back_refs', None)
    # end get_loadbalancer_pool_back_refs

    def dump(self):
        """Display loadbalancer-listener object in compact form."""
        print('------------ loadbalancer-listener ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P loadbalancer_listener_properties = ', self.get_loadbalancer_listener_properties())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF loadbalancer = ', self.get_loadbalancer_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK loadbalancer_pool = ', self.get_loadbalancer_pool_back_refs())
    # end dump

# end class LoadbalancerListener

class FloatingIpPool(object):
    """
    Floating ip pool is set of ip address that are carved out of a given network. Ip(s) from this set
    can be assigned to (virtual machine interface, ip) so that they become members of this network using
    one:one NAT.

    Created By:
        User

    Child of:
        :class:`.VirtualNetwork` object

    Properties:
        * floating_ip_pool_subnets
            Type: :class:`.FloatingIpPoolSubnetType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Subnets that restrict floating ip allocation from the corresponding virtual network.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.FloatingIp` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Floating ip is a ip that can be assigned to (virtual machine interface(VMI), ip), By doing so VMI

              can no be part of the floating ip network and floating ip is used as one:one to NAT for doing so.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Project` objects
    """

    resource_type = 'floating-ip-pool'
    object_type = 'floating_ip_pool'

    prop_fields = set([u'floating_ip_pool_subnets', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['project_back_refs'])
    children_fields = set([u'floating_ips'])

    prop_field_types = {
        'floating_ip_pool_subnets': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Subnets that restrict floating ip allocation from the corresponding virtual network.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FloatingIpPoolSubnetType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['project_back_refs'] = ('project', 'None', False)

    children_field_types = {}
    children_field_types['floating_ips'] = ('floating-ip', False)

    parent_types = ['virtual-network']

    prop_field_metas = {}
    prop_field_metas['floating_ip_pool_subnets'] = 'floating-ip-pool-subnets'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'floating-ip-pool-tag'

    children_field_metas = {}
    children_field_metas['floating_ips'] = 'floating-ip-pool-floating-ip'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, floating_ip_pool_subnets=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'floating-ip-pool'
        if not name:
            name = u'default-floating-ip-pool'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'virtual-network'
            self.fq_name = [u'default-domain', 'default-project', 'default-virtual-network']
            self.fq_name.append(name)


        # property fields
        if floating_ip_pool_subnets is not None:
            self._floating_ip_pool_subnets = floating_ip_pool_subnets
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (floating-ip-pool)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of floating-ip-pool in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of floating-ip-pool as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of floating-ip-pool's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of floating-ip-pool's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def floating_ip_pool_subnets(self):
        """Get floating-ip-pool-subnets for floating-ip-pool.
        
        :returns: FloatingIpPoolSubnetType object
        
        """
        return getattr(self, '_floating_ip_pool_subnets', None)
    # end floating_ip_pool_subnets

    @floating_ip_pool_subnets.setter
    def floating_ip_pool_subnets(self, floating_ip_pool_subnets):
        """Set floating-ip-pool-subnets for floating-ip-pool.
        
        :param floating_ip_pool_subnets: FloatingIpPoolSubnetType object
        
        """
        self._floating_ip_pool_subnets = floating_ip_pool_subnets
    # end floating_ip_pool_subnets

    def set_floating_ip_pool_subnets(self, value):
        self.floating_ip_pool_subnets = value
    # end set_floating_ip_pool_subnets

    def get_floating_ip_pool_subnets(self):
        return self.floating_ip_pool_subnets
    # end get_floating_ip_pool_subnets

    @property
    def id_perms(self):
        """Get id-perms for floating-ip-pool.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for floating-ip-pool.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for floating-ip-pool.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for floating-ip-pool.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for floating-ip-pool.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for floating-ip-pool.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for floating-ip-pool.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for floating-ip-pool.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_floating_ip_pool_subnets'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_pool_subnets')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_floating_ips(self):
        return getattr(self, 'floating_ips', None)
    # end get_floating_ips

    def set_tag(self, ref_obj):
        """Set tag for floating-ip-pool.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to floating-ip-pool.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for floating-ip-pool.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for floating-ip-pool.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_project_back_refs(self):
        """Return list of all projects using this floating-ip-pool"""
        return getattr(self, 'project_back_refs', None)
    # end get_project_back_refs

    def dump(self):
        """Display floating-ip-pool object in compact form."""
        print('------------ floating-ip-pool ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P floating_ip_pool_subnets = ', self.get_floating_ip_pool_subnets())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS floating_ip = ', self.get_floating_ips())
        print('REF tag = ', self.get_tag_refs())
        print('BCK project = ', self.get_project_back_refs())
    # end dump

# end class FloatingIpPool

class PhysicalRouter(object):
    """
    Physical router object represent any physical device that participates in virtual networking, like
    routers, switches, servers, firewalls etc.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * physical_router_junos_service_ports
            Type: :class:`.JunosServicePorts`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Juniper JUNOS specific service interfaces name  to perform services like NAT.

        * telemetry_info
            Type: :class:`.TelemetryStateInfo`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Telemetry info of router. Check TelemetryStateInfo

        * physical_router_device_family
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Device family that this physical router is part of. It is used by the device manager to choose the

              device family specific Ansible playbooks for device management

        * physical_router_os_version
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              os version for this physical router. It is updated when device is imported or device image is

              successfully upgraded

        * physical_router_hostname
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Device host name that can be either discovered during via fabric on-boarding workflow or manually

              set by the user

        * physical_router_management_ip
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Management ip for this physical router. It is used by the device manager to perform netconf and by

              SNMP collector if enabled.

        * physical_router_management_mac
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Management mac for this physical router.

        * physical_router_dataplane_ip
            Type: str, *one-of* xsd:string

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This is ip address in the ip-fabric(underlay) network that can be used in data plane by physical

              router. Usually it is the VTEP address in VxLAN for the TOR switch.

        * physical_router_loopback_ip
            Type: str, *one-of* xsd:string

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This is ip address of loopback interface of physical router. Used by the device manager to configure

              physical router loopback interface.

        * physical_router_replicator_loopback_ip
            Type: str, *one-of* xsd:string

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This is the loopback ip address for assisted replication. Used by the device manager to configure

              physical router replicator ip.

        * physical_router_vendor_name
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Vendor name of the physical router (e.g juniper). Used by the device manager to select driver.

        * physical_router_product_name
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Model name of the physical router (e.g juniper). Used by the device manager to select driver.

        * physical_router_serial_number
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Serial number for the physical device that is used by device manager to identify the device during

              device discovery.

        * physical_router_vnc_managed
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This physical router is enabled to be configured by device manager.

        * physical_router_underlay_managed
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Set to true if underlay is configured by device manager. The greenfield ZTP workflow sets this

              attribute to true. The brownfield on-boarding sets this attribute to false.

        * physical_router_role
            Type: str, *one-of* [u'spine', u'leaf', u'e2-access', u'e2-provider', u'e2-internet', u'e2-vrr', u'pnf']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Physical router role (e.g spine or leaf), used by the device manager to provision physical router,

              for e.g device manager may choose to configure physical router based on its role.

        * routing_bridging_roles
            Type: :class:`.RoutingBridgingRolesType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Routing-bridging role (e.g. CRB, ERB, etc.), used by the device manager to provision physical

              router, for e.g device manager may choose to configure physical router based on its role.

        * physical_router_snmp
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              SNMP support on this router

        * physical_router_lldp
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              LLDP support on this router

        * physical_router_user_credentials
            Type: :class:`.UserCredentials`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Username and password for netconf to the physical router by device manager.

        * physical_router_encryption_type
            Type: str, *one-of* [u'none', u'local']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Type of encryption used for physical-router-user-credentials.

        * physical_router_snmp_credentials
            Type: :class:`.SNMPCredentials`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              SNMP credentials for the physical router used by SNMP collector.

        * physical_router_dhcp_parameters
            Type: :class:`.DnsmasqLeaseParameters`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dnsmasq lease parameters for the physical router.

        * physical_router_cli_commit_state
            Type: str, *one-of* [u'in_sync', u'out_of_sync']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              CLI commit state for the physical router. Used to check if device is in sync with Contrail managed

              configs

        * physical_router_managed_state
            Type: str, *one-of* [u'dhcp', u'rma', u'activating', u'active', u'maintenance', u'error']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Managed state for the physical router. Used to RMA devices

        * physical_router_underlay_config
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Brownfield device underlay configuration stored during underlay onboarding. Only valid if physical-

              router-underlay-managed is false

        * physical_router_supplemental_config
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Supplemental configuration stored during ZTP onboarding.

        * physical_router_autonomous_system
            Type: :class:`.AutonomousSystemsType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Autonomous system configured on the device represented by the physical router.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.LinkAggregationGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of link aggregation groups on this PRouter.

        * list of :class:`.HardwareInventory` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Hardware Inventory on a physical router.

        * list of :class:`.CliConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              CLI commits done on a physical router.

        * list of :class:`.PhysicalInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Physical interfaces on physical routers.

        * list of :class:`.LogicalInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Logical interfaces on physical routers.


    References to:
        * list of :class:`.VirtualRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to vrouter responsible for this physical router. Currently only applicable for vrouters

              that are TOR agents.

        * list of :class:`.BgpRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to BGP peer representing this physical router.

        * list of :class:`.VirtualNetwork` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to virtual network, whose VRF is present on this physical router, Applicable when only VRF

              is present with no physical interfaces from this physical vrouter. Generally used when using device

              manager and option A+B for this virtual network in L3VPN use case.

        * list of :class:`.IntentMap` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              The Physical Routers on which the config needs to be pushed

        * list of :class:`.Fabric` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Fabric that this physical-router belongs to.

        * list of :class:`.NodeProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Node profile assigned to the physical router during device discovery/onboarding.

        * list of :class:`.DeviceFunctionalGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Device functional group that this physical-router belongs to.

        * list of :class:`.DeviceChassis` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Device Chassis info assigned to the physical router during device discovery/onboarding.

        * list of :class:`.DeviceImage` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Intended device image for this PRouter. Each PRouter can have one and only one device image

              assigned. If this image is successfully installed on the PRouter, the PRouterUVE.os_version should

              match the os-version property of the image

        * list of :class:`.PhysicalRole` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Physical role assigned to this physical router

        * list of :class:`.OverlayRole` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Overlay roles assigned to this physical router

        * list of :class:`.TelemetryProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Telemetry profile assigned to the physical router by user. Each physical router is associated with

              only one telemetry profile.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.InstanceIp` objects
        * list of :class:`.LogicalRouter` objects
        * list of :class:`.ServiceEndpoint` objects
        * list of :class:`.NetworkDeviceConfig` objects
        * list of :class:`.E2ServiceProvider` objects
    """

    resource_type = 'physical-router'
    object_type = 'physical_router'

    prop_fields = set([u'physical_router_junos_service_ports', u'telemetry_info', u'physical_router_device_family', u'physical_router_os_version', u'physical_router_hostname', u'physical_router_management_ip', u'physical_router_management_mac', u'physical_router_dataplane_ip', u'physical_router_loopback_ip', u'physical_router_replicator_loopback_ip', u'physical_router_vendor_name', u'physical_router_product_name', u'physical_router_serial_number', u'physical_router_vnc_managed', u'physical_router_underlay_managed', u'physical_router_role', u'routing_bridging_roles', u'physical_router_snmp', u'physical_router_lldp', u'physical_router_user_credentials', u'physical_router_encryption_type', u'physical_router_snmp_credentials', u'physical_router_dhcp_parameters', u'physical_router_cli_commit_state', u'physical_router_managed_state', u'physical_router_underlay_config', u'physical_router_supplemental_config', u'physical_router_autonomous_system', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_router_refs', 'bgp_router_refs', 'virtual_network_refs', u'intent_map_refs', 'fabric_refs', u'node_profile_refs', 'device_functional_group_refs', u'device_chassis_refs', 'device_image_refs', 'physical_role_refs', 'overlay_role_refs', u'telemetry_profile_refs', u'tag_refs'])
    backref_fields = set([u'instance_ip_back_refs', 'logical_router_back_refs', u'service_endpoint_back_refs', u'network_device_config_back_refs', u'e2_service_provider_back_refs'])
    children_fields = set(['link_aggregation_groups', u'hardware_inventorys', u'cli_configs', 'physical_interfaces', 'logical_interfaces'])

    prop_field_types = {
        'physical_router_junos_service_ports': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Juniper JUNOS specific service interfaces name  to perform services like NAT.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'JunosServicePorts', 'restriction_type': None, 'required': 'optional'},
        'telemetry_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Telemetry info of router. Check TelemetryStateInfo'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'TelemetryStateInfo', 'restriction_type': None, 'required': 'optional'},
        'physical_router_device_family': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Device family that this physical router is part of. It is used by the device manager to choose the', 'device family specific Ansible playbooks for device management'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'physical_router_os_version': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['os version for this physical router. It is updated when device is imported or device image is', 'successfully upgraded'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'physical_router_hostname': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Device host name that can be either discovered during via fabric on-boarding workflow or manually', 'set by the user'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'physical_router_management_ip': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Management ip for this physical router. It is used by the device manager to perform netconf and by', 'SNMP collector if enabled.'], 'simple_type': u'IpAddress', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'physical_router_management_mac': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Management mac for this physical router.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'physical_router_dataplane_ip': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['This is ip address in the ip-fabric(underlay) network that can be used in data plane by physical', 'router. Usually it is the VTEP address in VxLAN for the TOR switch.'], 'simple_type': u'IpAddress', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'physical_router_loopback_ip': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['This is ip address of loopback interface of physical router. Used by the device manager to configure', 'physical router loopback interface.'], 'simple_type': u'IpAddress', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'physical_router_replicator_loopback_ip': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['This is the loopback ip address for assisted replication. Used by the device manager to configure', 'physical router replicator ip.'], 'simple_type': u'IpAddress', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'physical_router_vendor_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Vendor name of the physical router (e.g juniper). Used by the device manager to select driver.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'physical_router_product_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Model name of the physical router (e.g juniper). Used by the device manager to select driver.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'physical_router_serial_number': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Serial number for the physical device that is used by device manager to identify the device during', 'device discovery.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'physical_router_vnc_managed': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['This physical router is enabled to be configured by device manager.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'physical_router_underlay_managed': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Set to true if underlay is configured by device manager. The greenfield ZTP workflow sets this', 'attribute to true. The brownfield on-boarding sets this attribute to false.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'physical_router_role': {'operations': 'CRUD', 'restrictions': [u'spine', u'leaf', u'e2-access', u'e2-provider', u'e2-internet', u'e2-vrr', u'pnf'], 'default': None, 'description': ['Physical router role (e.g spine or leaf), used by the device manager to provision physical router,', 'for e.g device manager may choose to configure physical router based on its role.'], 'simple_type': u'PhysicalRouterRole', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'routing_bridging_roles': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Routing-bridging role (e.g. CRB, ERB, etc.), used by the device manager to provision physical', 'router, for e.g device manager may choose to configure physical router based on its role.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RoutingBridgingRolesType', 'restriction_type': None, 'required': 'optional'},
        'physical_router_snmp': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['SNMP support on this router'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'physical_router_lldp': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['LLDP support on this router'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'physical_router_user_credentials': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Username and password for netconf to the physical router by device manager.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'UserCredentials', 'restriction_type': None, 'required': 'optional'},
        'physical_router_encryption_type': {'operations': 'CRUD', 'restrictions': [u'none', u'local'], 'default': None, 'description': ['Type of encryption used for physical-router-user-credentials.'], 'simple_type': u'CredentialEncryptionType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'physical_router_snmp_credentials': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['SNMP credentials for the physical router used by SNMP collector.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SNMPCredentials', 'restriction_type': None, 'required': 'optional'},
        'physical_router_dhcp_parameters': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dnsmasq lease parameters for the physical router.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DnsmasqLeaseParameters', 'restriction_type': None, 'required': 'optional'},
        'physical_router_cli_commit_state': {'operations': 'CRUD', 'restrictions': [u'in_sync', u'out_of_sync'], 'default': 'in_sync', 'description': ['CLI commit state for the physical router. Used to check if device is in sync with Contrail managed', 'configs'], 'simple_type': u'CommitStateType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'physical_router_managed_state': {'operations': 'CRUD', 'restrictions': [u'dhcp', u'rma', u'activating', u'active', u'maintenance', u'error'], 'default': 'active', 'description': ['Managed state for the physical router. Used to RMA devices'], 'simple_type': u'ManagedStateType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'physical_router_underlay_config': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Brownfield device underlay configuration stored during underlay onboarding. Only valid if physical-', 'router-underlay-managed is false'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'physical_router_supplemental_config': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Supplemental configuration stored during ZTP onboarding.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'physical_router_autonomous_system': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Autonomous system configured on the device represented by the physical router.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'AutonomousSystemsType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_router_refs'] = ('virtual-router', 'None', False, ['Reference to vrouter responsible for this physical router. Currently only applicable for vrouters', 'that are TOR agents.'])
    ref_field_types['bgp_router_refs'] = ('bgp-router', 'None', False, ['Reference to BGP peer representing this physical router.'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['Reference to virtual network, whose VRF is present on this physical router, Applicable when only VRF', 'is present with no physical interfaces from this physical vrouter. Generally used when using device', 'manager and option A+B for this virtual network in L3VPN use case.'])
    ref_field_types['intent_map_refs'] = ('intent-map', 'None', False, ['The Physical Routers on which the config needs to be pushed'])
    ref_field_types['fabric_refs'] = ('fabric', 'None', False, ['Fabric that this physical-router belongs to.'])
    ref_field_types['node_profile_refs'] = ('node-profile', 'None', False, ['Node profile assigned to the physical router during device discovery/onboarding.'])
    ref_field_types['device_functional_group_refs'] = ('device-functional-group', 'None', False, ['Device functional group that this physical-router belongs to.'])
    ref_field_types['device_chassis_refs'] = ('device-chassis', 'None', False, ['Device Chassis info assigned to the physical router during device discovery/onboarding.'])
    ref_field_types['device_image_refs'] = ('device-image', 'None', False, ['Intended device image for this PRouter. Each PRouter can have one and only one device image', 'assigned. If this image is successfully installed on the PRouter, the PRouterUVE.os_version should', 'match the os-version property of the image'])
    ref_field_types['physical_role_refs'] = ('physical-role', 'None', False, ['Physical role assigned to this physical router'])
    ref_field_types['overlay_role_refs'] = ('overlay-role', 'None', False, ['Overlay roles assigned to this physical router'])
    ref_field_types['telemetry_profile_refs'] = ('telemetry-profile', 'None', False, ['Telemetry profile assigned to the physical router by user. Each physical router is associated with', 'only one telemetry profile.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'None', False)
    backref_field_types['service_endpoint_back_refs'] = ('service-endpoint', 'None', False)
    backref_field_types['network_device_config_back_refs'] = ('network-device-config', 'None', False)
    backref_field_types['e2_service_provider_back_refs'] = ('e2-service-provider', 'None', False)

    children_field_types = {}
    children_field_types['link_aggregation_groups'] = ('link-aggregation-group', False)
    children_field_types['hardware_inventorys'] = ('hardware-inventory', False)
    children_field_types['cli_configs'] = ('cli-config', False)
    children_field_types['physical_interfaces'] = ('physical-interface', False)
    children_field_types['logical_interfaces'] = ('logical-interface', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['physical_router_junos_service_ports'] = 'physical-router-junos-service-ports'
    prop_field_metas['telemetry_info'] = 'telemetry-info'
    prop_field_metas['physical_router_device_family'] = 'physical-router-device-family'
    prop_field_metas['physical_router_os_version'] = 'physical-router-os-version'
    prop_field_metas['physical_router_hostname'] = 'physical-router-hostname'
    prop_field_metas['physical_router_management_ip'] = 'physical-router-management-ip'
    prop_field_metas['physical_router_management_mac'] = 'physical-router-management-mac'
    prop_field_metas['physical_router_dataplane_ip'] = 'physical-router-dataplane-ip'
    prop_field_metas['physical_router_loopback_ip'] = 'physical-router-loopback-ip'
    prop_field_metas['physical_router_replicator_loopback_ip'] = 'physical-router-replicator-loopback-ip'
    prop_field_metas['physical_router_vendor_name'] = 'physical-router-vendor-name'
    prop_field_metas['physical_router_product_name'] = 'physical-router-product-name'
    prop_field_metas['physical_router_serial_number'] = 'physical-router-serial-number'
    prop_field_metas['physical_router_vnc_managed'] = 'physical-router-vnc-managed'
    prop_field_metas['physical_router_underlay_managed'] = 'physical-router-underlay-managed'
    prop_field_metas['physical_router_role'] = 'physical-router-role'
    prop_field_metas['routing_bridging_roles'] = 'routing-bridging-roles'
    prop_field_metas['physical_router_snmp'] = 'physical-router-snmp'
    prop_field_metas['physical_router_lldp'] = 'physical-router-lldp'
    prop_field_metas['physical_router_user_credentials'] = 'physical-router-user-credentials'
    prop_field_metas['physical_router_encryption_type'] = 'physical-router-encryption-type'
    prop_field_metas['physical_router_snmp_credentials'] = 'physical-router-snmp-credentials'
    prop_field_metas['physical_router_dhcp_parameters'] = 'physical-router-dhcp-parameters'
    prop_field_metas['physical_router_cli_commit_state'] = 'physical-router-cli-commit-state'
    prop_field_metas['physical_router_managed_state'] = 'physical-router-managed-state'
    prop_field_metas['physical_router_underlay_config'] = 'physical-router-underlay-config'
    prop_field_metas['physical_router_supplemental_config'] = 'physical-router-supplemental-config'
    prop_field_metas['physical_router_autonomous_system'] = 'physical-router-autonomous-system'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_router_refs'] = 'physical-router-virtual-router'
    ref_field_metas['bgp_router_refs'] = 'physical-router-bgp-router'
    ref_field_metas['virtual_network_refs'] = 'physical-router-virtual-network'
    ref_field_metas['intent_map_refs'] = 'physical-router-intent-map'
    ref_field_metas['fabric_refs'] = 'physical-router-fabric'
    ref_field_metas['node_profile_refs'] = 'physical-router-node-profile'
    ref_field_metas['device_functional_group_refs'] = 'physical-router-device-functional-group'
    ref_field_metas['device_chassis_refs'] = 'physical-router-device-chassis'
    ref_field_metas['device_image_refs'] = 'physical-router-device-image'
    ref_field_metas['physical_role_refs'] = 'physical-router-physical-role'
    ref_field_metas['overlay_role_refs'] = 'physical-router-overlay-role'
    ref_field_metas['telemetry_profile_refs'] = 'physical-router-telemetry-profile'
    ref_field_metas['tag_refs'] = 'physical-router-tag'

    children_field_metas = {}
    children_field_metas['link_aggregation_groups'] = 'physical-router-link-aggregation-group'
    children_field_metas['hardware_inventorys'] = 'physical-router-hardware-inventory'
    children_field_metas['cli_configs'] = 'physical-router-cli-config'
    children_field_metas['physical_interfaces'] = 'physical-router-physical-interface'
    children_field_metas['logical_interfaces'] = 'physical-router-logical-interface'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, physical_router_junos_service_ports=None, telemetry_info=None, physical_router_device_family=None, physical_router_os_version=None, physical_router_hostname=None, physical_router_management_ip=None, physical_router_management_mac=None, physical_router_dataplane_ip=None, physical_router_loopback_ip=None, physical_router_replicator_loopback_ip=None, physical_router_vendor_name=None, physical_router_product_name=None, physical_router_serial_number=None, physical_router_vnc_managed=None, physical_router_underlay_managed=False, physical_router_role=None, routing_bridging_roles=None, physical_router_snmp=None, physical_router_lldp=None, physical_router_user_credentials=None, physical_router_encryption_type=None, physical_router_snmp_credentials=None, physical_router_dhcp_parameters=None, physical_router_cli_commit_state='in_sync', physical_router_managed_state='active', physical_router_underlay_config=None, physical_router_supplemental_config=None, physical_router_autonomous_system=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'physical-router'
        if not name:
            name = u'default-physical-router'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if physical_router_junos_service_ports is not None:
            self._physical_router_junos_service_ports = physical_router_junos_service_ports
        if telemetry_info is not None:
            self._telemetry_info = telemetry_info
        if physical_router_device_family is not None:
            self._physical_router_device_family = physical_router_device_family
        if physical_router_os_version is not None:
            self._physical_router_os_version = physical_router_os_version
        if physical_router_hostname is not None:
            self._physical_router_hostname = physical_router_hostname
        if physical_router_management_ip is not None:
            self._physical_router_management_ip = physical_router_management_ip
        if physical_router_management_mac is not None:
            self._physical_router_management_mac = physical_router_management_mac
        if physical_router_dataplane_ip is not None:
            self._physical_router_dataplane_ip = physical_router_dataplane_ip
        if physical_router_loopback_ip is not None:
            self._physical_router_loopback_ip = physical_router_loopback_ip
        if physical_router_replicator_loopback_ip is not None:
            self._physical_router_replicator_loopback_ip = physical_router_replicator_loopback_ip
        if physical_router_vendor_name is not None:
            self._physical_router_vendor_name = physical_router_vendor_name
        if physical_router_product_name is not None:
            self._physical_router_product_name = physical_router_product_name
        if physical_router_serial_number is not None:
            self._physical_router_serial_number = physical_router_serial_number
        if physical_router_vnc_managed is not None:
            self._physical_router_vnc_managed = physical_router_vnc_managed
        if physical_router_underlay_managed is not None:
            self._physical_router_underlay_managed = physical_router_underlay_managed
        if physical_router_role is not None:
            self._physical_router_role = physical_router_role
        if routing_bridging_roles is not None:
            self._routing_bridging_roles = routing_bridging_roles
        if physical_router_snmp is not None:
            self._physical_router_snmp = physical_router_snmp
        if physical_router_lldp is not None:
            self._physical_router_lldp = physical_router_lldp
        if physical_router_user_credentials is not None:
            self._physical_router_user_credentials = physical_router_user_credentials
        if physical_router_encryption_type is not None:
            self._physical_router_encryption_type = physical_router_encryption_type
        if physical_router_snmp_credentials is not None:
            self._physical_router_snmp_credentials = physical_router_snmp_credentials
        if physical_router_dhcp_parameters is not None:
            self._physical_router_dhcp_parameters = physical_router_dhcp_parameters
        if physical_router_cli_commit_state is not None:
            self._physical_router_cli_commit_state = physical_router_cli_commit_state
        if physical_router_managed_state is not None:
            self._physical_router_managed_state = physical_router_managed_state
        if physical_router_underlay_config is not None:
            self._physical_router_underlay_config = physical_router_underlay_config
        if physical_router_supplemental_config is not None:
            self._physical_router_supplemental_config = physical_router_supplemental_config
        if physical_router_autonomous_system is not None:
            self._physical_router_autonomous_system = physical_router_autonomous_system
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (physical-router)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of physical-router in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of physical-router as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of physical-router's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of physical-router's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def physical_router_junos_service_ports(self):
        """Get physical-router-junos-service-ports for physical-router.
        
        :returns: JunosServicePorts object
        
        """
        return getattr(self, '_physical_router_junos_service_ports', None)
    # end physical_router_junos_service_ports

    @physical_router_junos_service_ports.setter
    def physical_router_junos_service_ports(self, physical_router_junos_service_ports):
        """Set physical-router-junos-service-ports for physical-router.
        
        :param physical_router_junos_service_ports: JunosServicePorts object
        
        """
        self._physical_router_junos_service_ports = physical_router_junos_service_ports
    # end physical_router_junos_service_ports

    def set_physical_router_junos_service_ports(self, value):
        self.physical_router_junos_service_ports = value
    # end set_physical_router_junos_service_ports

    def get_physical_router_junos_service_ports(self):
        return self.physical_router_junos_service_ports
    # end get_physical_router_junos_service_ports

    @property
    def telemetry_info(self):
        """Get telemetry-info for physical-router.
        
        :returns: TelemetryStateInfo object
        
        """
        return getattr(self, '_telemetry_info', None)
    # end telemetry_info

    @telemetry_info.setter
    def telemetry_info(self, telemetry_info):
        """Set telemetry-info for physical-router.
        
        :param telemetry_info: TelemetryStateInfo object
        
        """
        self._telemetry_info = telemetry_info
    # end telemetry_info

    def set_telemetry_info(self, value):
        self.telemetry_info = value
    # end set_telemetry_info

    def get_telemetry_info(self):
        return self.telemetry_info
    # end get_telemetry_info

    @property
    def physical_router_device_family(self):
        """Get physical-router-device-family for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_device_family', None)
    # end physical_router_device_family

    @physical_router_device_family.setter
    def physical_router_device_family(self, physical_router_device_family):
        """Set physical-router-device-family for physical-router.
        
        :param physical_router_device_family: xsd:string object
        
        """
        self._physical_router_device_family = physical_router_device_family
    # end physical_router_device_family

    def set_physical_router_device_family(self, value):
        self.physical_router_device_family = value
    # end set_physical_router_device_family

    def get_physical_router_device_family(self):
        return self.physical_router_device_family
    # end get_physical_router_device_family

    @property
    def physical_router_os_version(self):
        """Get physical-router-os-version for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_os_version', None)
    # end physical_router_os_version

    @physical_router_os_version.setter
    def physical_router_os_version(self, physical_router_os_version):
        """Set physical-router-os-version for physical-router.
        
        :param physical_router_os_version: xsd:string object
        
        """
        self._physical_router_os_version = physical_router_os_version
    # end physical_router_os_version

    def set_physical_router_os_version(self, value):
        self.physical_router_os_version = value
    # end set_physical_router_os_version

    def get_physical_router_os_version(self):
        return self.physical_router_os_version
    # end get_physical_router_os_version

    @property
    def physical_router_hostname(self):
        """Get physical-router-hostname for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_hostname', None)
    # end physical_router_hostname

    @physical_router_hostname.setter
    def physical_router_hostname(self, physical_router_hostname):
        """Set physical-router-hostname for physical-router.
        
        :param physical_router_hostname: xsd:string object
        
        """
        self._physical_router_hostname = physical_router_hostname
    # end physical_router_hostname

    def set_physical_router_hostname(self, value):
        self.physical_router_hostname = value
    # end set_physical_router_hostname

    def get_physical_router_hostname(self):
        return self.physical_router_hostname
    # end get_physical_router_hostname

    @property
    def physical_router_management_ip(self):
        """Get physical-router-management-ip for physical-router.
        
        :returns: IpAddress object
        
        """
        return getattr(self, '_physical_router_management_ip', None)
    # end physical_router_management_ip

    @physical_router_management_ip.setter
    def physical_router_management_ip(self, physical_router_management_ip):
        """Set physical-router-management-ip for physical-router.
        
        :param physical_router_management_ip: IpAddress object
        
        """
        self._physical_router_management_ip = physical_router_management_ip
    # end physical_router_management_ip

    def set_physical_router_management_ip(self, value):
        self.physical_router_management_ip = value
    # end set_physical_router_management_ip

    def get_physical_router_management_ip(self):
        return self.physical_router_management_ip
    # end get_physical_router_management_ip

    @property
    def physical_router_management_mac(self):
        """Get physical-router-management-mac for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_management_mac', None)
    # end physical_router_management_mac

    @physical_router_management_mac.setter
    def physical_router_management_mac(self, physical_router_management_mac):
        """Set physical-router-management-mac for physical-router.
        
        :param physical_router_management_mac: xsd:string object
        
        """
        self._physical_router_management_mac = physical_router_management_mac
    # end physical_router_management_mac

    def set_physical_router_management_mac(self, value):
        self.physical_router_management_mac = value
    # end set_physical_router_management_mac

    def get_physical_router_management_mac(self):
        return self.physical_router_management_mac
    # end get_physical_router_management_mac

    @property
    def physical_router_dataplane_ip(self):
        """Get physical-router-dataplane-ip for physical-router.
        
        :returns: IpAddress object
        
        """
        return getattr(self, '_physical_router_dataplane_ip', None)
    # end physical_router_dataplane_ip

    @physical_router_dataplane_ip.setter
    def physical_router_dataplane_ip(self, physical_router_dataplane_ip):
        """Set physical-router-dataplane-ip for physical-router.
        
        :param physical_router_dataplane_ip: IpAddress object
        
        """
        self._physical_router_dataplane_ip = physical_router_dataplane_ip
    # end physical_router_dataplane_ip

    def set_physical_router_dataplane_ip(self, value):
        self.physical_router_dataplane_ip = value
    # end set_physical_router_dataplane_ip

    def get_physical_router_dataplane_ip(self):
        return self.physical_router_dataplane_ip
    # end get_physical_router_dataplane_ip

    @property
    def physical_router_loopback_ip(self):
        """Get physical-router-loopback-ip for physical-router.
        
        :returns: IpAddress object
        
        """
        return getattr(self, '_physical_router_loopback_ip', None)
    # end physical_router_loopback_ip

    @physical_router_loopback_ip.setter
    def physical_router_loopback_ip(self, physical_router_loopback_ip):
        """Set physical-router-loopback-ip for physical-router.
        
        :param physical_router_loopback_ip: IpAddress object
        
        """
        self._physical_router_loopback_ip = physical_router_loopback_ip
    # end physical_router_loopback_ip

    def set_physical_router_loopback_ip(self, value):
        self.physical_router_loopback_ip = value
    # end set_physical_router_loopback_ip

    def get_physical_router_loopback_ip(self):
        return self.physical_router_loopback_ip
    # end get_physical_router_loopback_ip

    @property
    def physical_router_replicator_loopback_ip(self):
        """Get physical-router-replicator-loopback-ip for physical-router.
        
        :returns: IpAddress object
        
        """
        return getattr(self, '_physical_router_replicator_loopback_ip', None)
    # end physical_router_replicator_loopback_ip

    @physical_router_replicator_loopback_ip.setter
    def physical_router_replicator_loopback_ip(self, physical_router_replicator_loopback_ip):
        """Set physical-router-replicator-loopback-ip for physical-router.
        
        :param physical_router_replicator_loopback_ip: IpAddress object
        
        """
        self._physical_router_replicator_loopback_ip = physical_router_replicator_loopback_ip
    # end physical_router_replicator_loopback_ip

    def set_physical_router_replicator_loopback_ip(self, value):
        self.physical_router_replicator_loopback_ip = value
    # end set_physical_router_replicator_loopback_ip

    def get_physical_router_replicator_loopback_ip(self):
        return self.physical_router_replicator_loopback_ip
    # end get_physical_router_replicator_loopback_ip

    @property
    def physical_router_vendor_name(self):
        """Get physical-router-vendor-name for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_vendor_name', None)
    # end physical_router_vendor_name

    @physical_router_vendor_name.setter
    def physical_router_vendor_name(self, physical_router_vendor_name):
        """Set physical-router-vendor-name for physical-router.
        
        :param physical_router_vendor_name: xsd:string object
        
        """
        self._physical_router_vendor_name = physical_router_vendor_name
    # end physical_router_vendor_name

    def set_physical_router_vendor_name(self, value):
        self.physical_router_vendor_name = value
    # end set_physical_router_vendor_name

    def get_physical_router_vendor_name(self):
        return self.physical_router_vendor_name
    # end get_physical_router_vendor_name

    @property
    def physical_router_product_name(self):
        """Get physical-router-product-name for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_product_name', None)
    # end physical_router_product_name

    @physical_router_product_name.setter
    def physical_router_product_name(self, physical_router_product_name):
        """Set physical-router-product-name for physical-router.
        
        :param physical_router_product_name: xsd:string object
        
        """
        self._physical_router_product_name = physical_router_product_name
    # end physical_router_product_name

    def set_physical_router_product_name(self, value):
        self.physical_router_product_name = value
    # end set_physical_router_product_name

    def get_physical_router_product_name(self):
        return self.physical_router_product_name
    # end get_physical_router_product_name

    @property
    def physical_router_serial_number(self):
        """Get physical-router-serial-number for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_serial_number', None)
    # end physical_router_serial_number

    @physical_router_serial_number.setter
    def physical_router_serial_number(self, physical_router_serial_number):
        """Set physical-router-serial-number for physical-router.
        
        :param physical_router_serial_number: xsd:string object
        
        """
        self._physical_router_serial_number = physical_router_serial_number
    # end physical_router_serial_number

    def set_physical_router_serial_number(self, value):
        self.physical_router_serial_number = value
    # end set_physical_router_serial_number

    def get_physical_router_serial_number(self):
        return self.physical_router_serial_number
    # end get_physical_router_serial_number

    @property
    def physical_router_vnc_managed(self):
        """Get physical-router-vnc-managed for physical-router.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_physical_router_vnc_managed', None)
    # end physical_router_vnc_managed

    @physical_router_vnc_managed.setter
    def physical_router_vnc_managed(self, physical_router_vnc_managed):
        """Set physical-router-vnc-managed for physical-router.
        
        :param physical_router_vnc_managed: xsd:boolean object
        
        """
        self._physical_router_vnc_managed = physical_router_vnc_managed
    # end physical_router_vnc_managed

    def set_physical_router_vnc_managed(self, value):
        self.physical_router_vnc_managed = value
    # end set_physical_router_vnc_managed

    def get_physical_router_vnc_managed(self):
        return self.physical_router_vnc_managed
    # end get_physical_router_vnc_managed

    @property
    def physical_router_underlay_managed(self):
        """Get physical-router-underlay-managed for physical-router.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_physical_router_underlay_managed', None)
    # end physical_router_underlay_managed

    @physical_router_underlay_managed.setter
    def physical_router_underlay_managed(self, physical_router_underlay_managed):
        """Set physical-router-underlay-managed for physical-router.
        
        :param physical_router_underlay_managed: xsd:boolean object
        
        """
        self._physical_router_underlay_managed = physical_router_underlay_managed
    # end physical_router_underlay_managed

    def set_physical_router_underlay_managed(self, value):
        self.physical_router_underlay_managed = value
    # end set_physical_router_underlay_managed

    def get_physical_router_underlay_managed(self):
        return self.physical_router_underlay_managed
    # end get_physical_router_underlay_managed

    @property
    def physical_router_role(self):
        """Get physical-router-role for physical-router.
        
        :returns: PhysicalRouterRole object
        
        """
        return getattr(self, '_physical_router_role', None)
    # end physical_router_role

    @physical_router_role.setter
    def physical_router_role(self, physical_router_role):
        """Set physical-router-role for physical-router.
        
        :param physical_router_role: PhysicalRouterRole object
        
        """
        self._physical_router_role = physical_router_role
    # end physical_router_role

    def set_physical_router_role(self, value):
        self.physical_router_role = value
    # end set_physical_router_role

    def get_physical_router_role(self):
        return self.physical_router_role
    # end get_physical_router_role

    @property
    def routing_bridging_roles(self):
        """Get routing-bridging-roles for physical-router.
        
        :returns: RoutingBridgingRolesType object
        
        """
        return getattr(self, '_routing_bridging_roles', None)
    # end routing_bridging_roles

    @routing_bridging_roles.setter
    def routing_bridging_roles(self, routing_bridging_roles):
        """Set routing-bridging-roles for physical-router.
        
        :param routing_bridging_roles: RoutingBridgingRolesType object
        
        """
        self._routing_bridging_roles = routing_bridging_roles
    # end routing_bridging_roles

    def set_routing_bridging_roles(self, value):
        self.routing_bridging_roles = value
    # end set_routing_bridging_roles

    def get_routing_bridging_roles(self):
        return self.routing_bridging_roles
    # end get_routing_bridging_roles

    @property
    def physical_router_snmp(self):
        """Get physical-router-snmp for physical-router.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_physical_router_snmp', None)
    # end physical_router_snmp

    @physical_router_snmp.setter
    def physical_router_snmp(self, physical_router_snmp):
        """Set physical-router-snmp for physical-router.
        
        :param physical_router_snmp: xsd:boolean object
        
        """
        self._physical_router_snmp = physical_router_snmp
    # end physical_router_snmp

    def set_physical_router_snmp(self, value):
        self.physical_router_snmp = value
    # end set_physical_router_snmp

    def get_physical_router_snmp(self):
        return self.physical_router_snmp
    # end get_physical_router_snmp

    @property
    def physical_router_lldp(self):
        """Get physical-router-lldp for physical-router.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_physical_router_lldp', None)
    # end physical_router_lldp

    @physical_router_lldp.setter
    def physical_router_lldp(self, physical_router_lldp):
        """Set physical-router-lldp for physical-router.
        
        :param physical_router_lldp: xsd:boolean object
        
        """
        self._physical_router_lldp = physical_router_lldp
    # end physical_router_lldp

    def set_physical_router_lldp(self, value):
        self.physical_router_lldp = value
    # end set_physical_router_lldp

    def get_physical_router_lldp(self):
        return self.physical_router_lldp
    # end get_physical_router_lldp

    @property
    def physical_router_user_credentials(self):
        """Get physical-router-user-credentials for physical-router.
        
        :returns: UserCredentials object
        
        """
        return getattr(self, '_physical_router_user_credentials', None)
    # end physical_router_user_credentials

    @physical_router_user_credentials.setter
    def physical_router_user_credentials(self, physical_router_user_credentials):
        """Set physical-router-user-credentials for physical-router.
        
        :param physical_router_user_credentials: UserCredentials object
        
        """
        self._physical_router_user_credentials = physical_router_user_credentials
    # end physical_router_user_credentials

    def set_physical_router_user_credentials(self, value):
        self.physical_router_user_credentials = value
    # end set_physical_router_user_credentials

    def get_physical_router_user_credentials(self):
        return self.physical_router_user_credentials
    # end get_physical_router_user_credentials

    @property
    def physical_router_encryption_type(self):
        """Get physical-router-encryption-type for physical-router.
        
        :returns: CredentialEncryptionType object
        
        """
        return getattr(self, '_physical_router_encryption_type', None)
    # end physical_router_encryption_type

    @physical_router_encryption_type.setter
    def physical_router_encryption_type(self, physical_router_encryption_type):
        """Set physical-router-encryption-type for physical-router.
        
        :param physical_router_encryption_type: CredentialEncryptionType object
        
        """
        self._physical_router_encryption_type = physical_router_encryption_type
    # end physical_router_encryption_type

    def set_physical_router_encryption_type(self, value):
        self.physical_router_encryption_type = value
    # end set_physical_router_encryption_type

    def get_physical_router_encryption_type(self):
        return self.physical_router_encryption_type
    # end get_physical_router_encryption_type

    @property
    def physical_router_snmp_credentials(self):
        """Get physical-router-snmp-credentials for physical-router.
        
        :returns: SNMPCredentials object
        
        """
        return getattr(self, '_physical_router_snmp_credentials', None)
    # end physical_router_snmp_credentials

    @physical_router_snmp_credentials.setter
    def physical_router_snmp_credentials(self, physical_router_snmp_credentials):
        """Set physical-router-snmp-credentials for physical-router.
        
        :param physical_router_snmp_credentials: SNMPCredentials object
        
        """
        self._physical_router_snmp_credentials = physical_router_snmp_credentials
    # end physical_router_snmp_credentials

    def set_physical_router_snmp_credentials(self, value):
        self.physical_router_snmp_credentials = value
    # end set_physical_router_snmp_credentials

    def get_physical_router_snmp_credentials(self):
        return self.physical_router_snmp_credentials
    # end get_physical_router_snmp_credentials

    @property
    def physical_router_dhcp_parameters(self):
        """Get physical-router-dhcp-parameters for physical-router.
        
        :returns: DnsmasqLeaseParameters object
        
        """
        return getattr(self, '_physical_router_dhcp_parameters', None)
    # end physical_router_dhcp_parameters

    @physical_router_dhcp_parameters.setter
    def physical_router_dhcp_parameters(self, physical_router_dhcp_parameters):
        """Set physical-router-dhcp-parameters for physical-router.
        
        :param physical_router_dhcp_parameters: DnsmasqLeaseParameters object
        
        """
        self._physical_router_dhcp_parameters = physical_router_dhcp_parameters
    # end physical_router_dhcp_parameters

    def set_physical_router_dhcp_parameters(self, value):
        self.physical_router_dhcp_parameters = value
    # end set_physical_router_dhcp_parameters

    def get_physical_router_dhcp_parameters(self):
        return self.physical_router_dhcp_parameters
    # end get_physical_router_dhcp_parameters

    @property
    def physical_router_cli_commit_state(self):
        """Get physical-router-cli-commit-state for physical-router.
        
        :returns: CommitStateType object
        
        """
        return getattr(self, '_physical_router_cli_commit_state', None)
    # end physical_router_cli_commit_state

    @physical_router_cli_commit_state.setter
    def physical_router_cli_commit_state(self, physical_router_cli_commit_state):
        """Set physical-router-cli-commit-state for physical-router.
        
        :param physical_router_cli_commit_state: CommitStateType object
        
        """
        self._physical_router_cli_commit_state = physical_router_cli_commit_state
    # end physical_router_cli_commit_state

    def set_physical_router_cli_commit_state(self, value):
        self.physical_router_cli_commit_state = value
    # end set_physical_router_cli_commit_state

    def get_physical_router_cli_commit_state(self):
        return self.physical_router_cli_commit_state
    # end get_physical_router_cli_commit_state

    @property
    def physical_router_managed_state(self):
        """Get physical-router-managed-state for physical-router.
        
        :returns: ManagedStateType object
        
        """
        return getattr(self, '_physical_router_managed_state', None)
    # end physical_router_managed_state

    @physical_router_managed_state.setter
    def physical_router_managed_state(self, physical_router_managed_state):
        """Set physical-router-managed-state for physical-router.
        
        :param physical_router_managed_state: ManagedStateType object
        
        """
        self._physical_router_managed_state = physical_router_managed_state
    # end physical_router_managed_state

    def set_physical_router_managed_state(self, value):
        self.physical_router_managed_state = value
    # end set_physical_router_managed_state

    def get_physical_router_managed_state(self):
        return self.physical_router_managed_state
    # end get_physical_router_managed_state

    @property
    def physical_router_underlay_config(self):
        """Get physical-router-underlay-config for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_underlay_config', None)
    # end physical_router_underlay_config

    @physical_router_underlay_config.setter
    def physical_router_underlay_config(self, physical_router_underlay_config):
        """Set physical-router-underlay-config for physical-router.
        
        :param physical_router_underlay_config: xsd:string object
        
        """
        self._physical_router_underlay_config = physical_router_underlay_config
    # end physical_router_underlay_config

    def set_physical_router_underlay_config(self, value):
        self.physical_router_underlay_config = value
    # end set_physical_router_underlay_config

    def get_physical_router_underlay_config(self):
        return self.physical_router_underlay_config
    # end get_physical_router_underlay_config

    @property
    def physical_router_supplemental_config(self):
        """Get physical-router-supplemental-config for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_router_supplemental_config', None)
    # end physical_router_supplemental_config

    @physical_router_supplemental_config.setter
    def physical_router_supplemental_config(self, physical_router_supplemental_config):
        """Set physical-router-supplemental-config for physical-router.
        
        :param physical_router_supplemental_config: xsd:string object
        
        """
        self._physical_router_supplemental_config = physical_router_supplemental_config
    # end physical_router_supplemental_config

    def set_physical_router_supplemental_config(self, value):
        self.physical_router_supplemental_config = value
    # end set_physical_router_supplemental_config

    def get_physical_router_supplemental_config(self):
        return self.physical_router_supplemental_config
    # end get_physical_router_supplemental_config

    @property
    def physical_router_autonomous_system(self):
        """Get physical-router-autonomous-system for physical-router.
        
        :returns: AutonomousSystemsType object
        
        """
        return getattr(self, '_physical_router_autonomous_system', None)
    # end physical_router_autonomous_system

    @physical_router_autonomous_system.setter
    def physical_router_autonomous_system(self, physical_router_autonomous_system):
        """Set physical-router-autonomous-system for physical-router.
        
        :param physical_router_autonomous_system: AutonomousSystemsType object
        
        """
        self._physical_router_autonomous_system = physical_router_autonomous_system
    # end physical_router_autonomous_system

    def set_physical_router_autonomous_system(self, value):
        self.physical_router_autonomous_system = value
    # end set_physical_router_autonomous_system

    def get_physical_router_autonomous_system(self):
        return self.physical_router_autonomous_system
    # end get_physical_router_autonomous_system

    @property
    def id_perms(self):
        """Get id-perms for physical-router.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for physical-router.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for physical-router.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for physical-router.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for physical-router.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for physical-router.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for physical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for physical-router.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_physical_router_junos_service_ports'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_junos_service_ports')
        if hasattr(self, '_telemetry_info'):
            self._serialize_field_to_json(serialized, field_names, 'telemetry_info')
        if hasattr(self, '_physical_router_device_family'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_device_family')
        if hasattr(self, '_physical_router_os_version'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_os_version')
        if hasattr(self, '_physical_router_hostname'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_hostname')
        if hasattr(self, '_physical_router_management_ip'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_management_ip')
        if hasattr(self, '_physical_router_management_mac'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_management_mac')
        if hasattr(self, '_physical_router_dataplane_ip'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_dataplane_ip')
        if hasattr(self, '_physical_router_loopback_ip'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_loopback_ip')
        if hasattr(self, '_physical_router_replicator_loopback_ip'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_replicator_loopback_ip')
        if hasattr(self, '_physical_router_vendor_name'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_vendor_name')
        if hasattr(self, '_physical_router_product_name'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_product_name')
        if hasattr(self, '_physical_router_serial_number'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_serial_number')
        if hasattr(self, '_physical_router_vnc_managed'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_vnc_managed')
        if hasattr(self, '_physical_router_underlay_managed'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_underlay_managed')
        if hasattr(self, '_physical_router_role'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_role')
        if hasattr(self, '_routing_bridging_roles'):
            self._serialize_field_to_json(serialized, field_names, 'routing_bridging_roles')
        if hasattr(self, '_physical_router_snmp'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_snmp')
        if hasattr(self, '_physical_router_lldp'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_lldp')
        if hasattr(self, '_physical_router_user_credentials'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_user_credentials')
        if hasattr(self, '_physical_router_encryption_type'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_encryption_type')
        if hasattr(self, '_physical_router_snmp_credentials'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_snmp_credentials')
        if hasattr(self, '_physical_router_dhcp_parameters'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_dhcp_parameters')
        if hasattr(self, '_physical_router_cli_commit_state'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_cli_commit_state')
        if hasattr(self, '_physical_router_managed_state'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_managed_state')
        if hasattr(self, '_physical_router_underlay_config'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_underlay_config')
        if hasattr(self, '_physical_router_supplemental_config'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_supplemental_config')
        if hasattr(self, '_physical_router_autonomous_system'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_autonomous_system')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_router_refs')
        if hasattr(self, 'bgp_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bgp_router_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'intent_map_refs'):
            self._serialize_field_to_json(serialized, field_names, 'intent_map_refs')
        if hasattr(self, 'fabric_refs'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_refs')
        if hasattr(self, 'node_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_refs')
        if hasattr(self, 'device_functional_group_refs'):
            self._serialize_field_to_json(serialized, field_names, 'device_functional_group_refs')
        if hasattr(self, 'device_chassis_refs'):
            self._serialize_field_to_json(serialized, field_names, 'device_chassis_refs')
        if hasattr(self, 'device_image_refs'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_refs')
        if hasattr(self, 'physical_role_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_role_refs')
        if hasattr(self, 'overlay_role_refs'):
            self._serialize_field_to_json(serialized, field_names, 'overlay_role_refs')
        if hasattr(self, 'telemetry_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'telemetry_profile_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_link_aggregation_groups(self):
        return getattr(self, 'link_aggregation_groups', None)
    # end get_link_aggregation_groups

    def get_hardware_inventorys(self):
        return getattr(self, 'hardware_inventorys', None)
    # end get_hardware_inventorys

    def get_cli_configs(self):
        return getattr(self, 'cli_configs', None)
    # end get_cli_configs

    def get_physical_interfaces(self):
        return getattr(self, 'physical_interfaces', None)
    # end get_physical_interfaces

    def get_logical_interfaces(self):
        return getattr(self, 'logical_interfaces', None)
    # end get_logical_interfaces

    def set_virtual_router(self, ref_obj):
        """Set virtual-router for physical-router.
        
        :param ref_obj: VirtualRouter object
        
        """
        self.virtual_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_router

    def add_virtual_router(self, ref_obj):
        """Add virtual-router to physical-router.
        
        :param ref_obj: VirtualRouter object
        
        """
        refs = getattr(self, 'virtual_router_refs', [])
        if not refs:
            self.virtual_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_router_refs.append(ref_info)
    # end add_virtual_router

    def del_virtual_router(self, ref_obj):
        refs = self.get_virtual_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_router_refs.remove(ref)
                return
    # end del_virtual_router

    def set_virtual_router_list(self, ref_obj_list):
        """Set virtual-router list for physical-router.
        
        :param ref_obj_list: list of VirtualRouter object
        
        """
        self.virtual_router_refs = ref_obj_list
    # end set_virtual_router_list

    def get_virtual_router_refs(self):
        """Return virtual-router list for physical-router.
        
        :returns: list of <VirtualRouter>
        
        """
        return getattr(self, 'virtual_router_refs', None)
    # end get_virtual_router_refs

    def set_bgp_router(self, ref_obj):
        """Set bgp-router for physical-router.
        
        :param ref_obj: BgpRouter object
        
        """
        self.bgp_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.bgp_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_bgp_router

    def add_bgp_router(self, ref_obj):
        """Add bgp-router to physical-router.
        
        :param ref_obj: BgpRouter object
        
        """
        refs = getattr(self, 'bgp_router_refs', [])
        if not refs:
            self.bgp_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bgp_router_refs.append(ref_info)
    # end add_bgp_router

    def del_bgp_router(self, ref_obj):
        refs = self.get_bgp_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bgp_router_refs.remove(ref)
                return
    # end del_bgp_router

    def set_bgp_router_list(self, ref_obj_list):
        """Set bgp-router list for physical-router.
        
        :param ref_obj_list: list of BgpRouter object
        
        """
        self.bgp_router_refs = ref_obj_list
    # end set_bgp_router_list

    def get_bgp_router_refs(self):
        """Return bgp-router list for physical-router.
        
        :returns: list of <BgpRouter>
        
        """
        return getattr(self, 'bgp_router_refs', None)
    # end get_bgp_router_refs

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for physical-router.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to physical-router.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for physical-router.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for physical-router.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_intent_map(self, ref_obj):
        """Set intent-map for physical-router.
        
        :param ref_obj: IntentMap object
        
        """
        self.intent_map_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.intent_map_refs[0]['uuid'] = ref_obj.uuid

    # end set_intent_map

    def add_intent_map(self, ref_obj):
        """Add intent-map to physical-router.
        
        :param ref_obj: IntentMap object
        
        """
        refs = getattr(self, 'intent_map_refs', [])
        if not refs:
            self.intent_map_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.intent_map_refs.append(ref_info)
    # end add_intent_map

    def del_intent_map(self, ref_obj):
        refs = self.get_intent_map_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.intent_map_refs.remove(ref)
                return
    # end del_intent_map

    def set_intent_map_list(self, ref_obj_list):
        """Set intent-map list for physical-router.
        
        :param ref_obj_list: list of IntentMap object
        
        """
        self.intent_map_refs = ref_obj_list
    # end set_intent_map_list

    def get_intent_map_refs(self):
        """Return intent-map list for physical-router.
        
        :returns: list of <IntentMap>
        
        """
        return getattr(self, 'intent_map_refs', None)
    # end get_intent_map_refs

    def set_fabric(self, ref_obj):
        """Set fabric for physical-router.
        
        :param ref_obj: Fabric object
        
        """
        self.fabric_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.fabric_refs[0]['uuid'] = ref_obj.uuid

    # end set_fabric

    def add_fabric(self, ref_obj):
        """Add fabric to physical-router.
        
        :param ref_obj: Fabric object
        
        """
        refs = getattr(self, 'fabric_refs', [])
        if not refs:
            self.fabric_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.fabric_refs.append(ref_info)
    # end add_fabric

    def del_fabric(self, ref_obj):
        refs = self.get_fabric_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.fabric_refs.remove(ref)
                return
    # end del_fabric

    def set_fabric_list(self, ref_obj_list):
        """Set fabric list for physical-router.
        
        :param ref_obj_list: list of Fabric object
        
        """
        self.fabric_refs = ref_obj_list
    # end set_fabric_list

    def get_fabric_refs(self):
        """Return fabric list for physical-router.
        
        :returns: list of <Fabric>
        
        """
        return getattr(self, 'fabric_refs', None)
    # end get_fabric_refs

    def set_node_profile(self, ref_obj):
        """Set node-profile for physical-router.
        
        :param ref_obj: NodeProfile object
        
        """
        self.node_profile_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.node_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_node_profile

    def add_node_profile(self, ref_obj):
        """Add node-profile to physical-router.
        
        :param ref_obj: NodeProfile object
        
        """
        refs = getattr(self, 'node_profile_refs', [])
        if not refs:
            self.node_profile_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.node_profile_refs.append(ref_info)
    # end add_node_profile

    def del_node_profile(self, ref_obj):
        refs = self.get_node_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.node_profile_refs.remove(ref)
                return
    # end del_node_profile

    def set_node_profile_list(self, ref_obj_list):
        """Set node-profile list for physical-router.
        
        :param ref_obj_list: list of NodeProfile object
        
        """
        self.node_profile_refs = ref_obj_list
    # end set_node_profile_list

    def get_node_profile_refs(self):
        """Return node-profile list for physical-router.
        
        :returns: list of <NodeProfile>
        
        """
        return getattr(self, 'node_profile_refs', None)
    # end get_node_profile_refs

    def set_device_functional_group(self, ref_obj):
        """Set device-functional-group for physical-router.
        
        :param ref_obj: DeviceFunctionalGroup object
        
        """
        self.device_functional_group_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.device_functional_group_refs[0]['uuid'] = ref_obj.uuid

    # end set_device_functional_group

    def add_device_functional_group(self, ref_obj):
        """Add device-functional-group to physical-router.
        
        :param ref_obj: DeviceFunctionalGroup object
        
        """
        refs = getattr(self, 'device_functional_group_refs', [])
        if not refs:
            self.device_functional_group_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.device_functional_group_refs.append(ref_info)
    # end add_device_functional_group

    def del_device_functional_group(self, ref_obj):
        refs = self.get_device_functional_group_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.device_functional_group_refs.remove(ref)
                return
    # end del_device_functional_group

    def set_device_functional_group_list(self, ref_obj_list):
        """Set device-functional-group list for physical-router.
        
        :param ref_obj_list: list of DeviceFunctionalGroup object
        
        """
        self.device_functional_group_refs = ref_obj_list
    # end set_device_functional_group_list

    def get_device_functional_group_refs(self):
        """Return device-functional-group list for physical-router.
        
        :returns: list of <DeviceFunctionalGroup>
        
        """
        return getattr(self, 'device_functional_group_refs', None)
    # end get_device_functional_group_refs

    def set_device_chassis(self, ref_obj):
        """Set device-chassis for physical-router.
        
        :param ref_obj: DeviceChassis object
        
        """
        self.device_chassis_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.device_chassis_refs[0]['uuid'] = ref_obj.uuid

    # end set_device_chassis

    def add_device_chassis(self, ref_obj):
        """Add device-chassis to physical-router.
        
        :param ref_obj: DeviceChassis object
        
        """
        refs = getattr(self, 'device_chassis_refs', [])
        if not refs:
            self.device_chassis_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.device_chassis_refs.append(ref_info)
    # end add_device_chassis

    def del_device_chassis(self, ref_obj):
        refs = self.get_device_chassis_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.device_chassis_refs.remove(ref)
                return
    # end del_device_chassis

    def set_device_chassis_list(self, ref_obj_list):
        """Set device-chassis list for physical-router.
        
        :param ref_obj_list: list of DeviceChassis object
        
        """
        self.device_chassis_refs = ref_obj_list
    # end set_device_chassis_list

    def get_device_chassis_refs(self):
        """Return device-chassis list for physical-router.
        
        :returns: list of <DeviceChassis>
        
        """
        return getattr(self, 'device_chassis_refs', None)
    # end get_device_chassis_refs

    def set_device_image(self, ref_obj):
        """Set device-image for physical-router.
        
        :param ref_obj: DeviceImage object
        
        """
        self.device_image_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.device_image_refs[0]['uuid'] = ref_obj.uuid

    # end set_device_image

    def add_device_image(self, ref_obj):
        """Add device-image to physical-router.
        
        :param ref_obj: DeviceImage object
        
        """
        refs = getattr(self, 'device_image_refs', [])
        if not refs:
            self.device_image_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.device_image_refs.append(ref_info)
    # end add_device_image

    def del_device_image(self, ref_obj):
        refs = self.get_device_image_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.device_image_refs.remove(ref)
                return
    # end del_device_image

    def set_device_image_list(self, ref_obj_list):
        """Set device-image list for physical-router.
        
        :param ref_obj_list: list of DeviceImage object
        
        """
        self.device_image_refs = ref_obj_list
    # end set_device_image_list

    def get_device_image_refs(self):
        """Return device-image list for physical-router.
        
        :returns: list of <DeviceImage>
        
        """
        return getattr(self, 'device_image_refs', None)
    # end get_device_image_refs

    def set_physical_role(self, ref_obj):
        """Set physical-role for physical-router.
        
        :param ref_obj: PhysicalRole object
        
        """
        self.physical_role_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_role_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_role

    def add_physical_role(self, ref_obj):
        """Add physical-role to physical-router.
        
        :param ref_obj: PhysicalRole object
        
        """
        refs = getattr(self, 'physical_role_refs', [])
        if not refs:
            self.physical_role_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_role_refs.append(ref_info)
    # end add_physical_role

    def del_physical_role(self, ref_obj):
        refs = self.get_physical_role_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_role_refs.remove(ref)
                return
    # end del_physical_role

    def set_physical_role_list(self, ref_obj_list):
        """Set physical-role list for physical-router.
        
        :param ref_obj_list: list of PhysicalRole object
        
        """
        self.physical_role_refs = ref_obj_list
    # end set_physical_role_list

    def get_physical_role_refs(self):
        """Return physical-role list for physical-router.
        
        :returns: list of <PhysicalRole>
        
        """
        return getattr(self, 'physical_role_refs', None)
    # end get_physical_role_refs

    def set_overlay_role(self, ref_obj):
        """Set overlay-role for physical-router.
        
        :param ref_obj: OverlayRole object
        
        """
        self.overlay_role_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.overlay_role_refs[0]['uuid'] = ref_obj.uuid

    # end set_overlay_role

    def add_overlay_role(self, ref_obj):
        """Add overlay-role to physical-router.
        
        :param ref_obj: OverlayRole object
        
        """
        refs = getattr(self, 'overlay_role_refs', [])
        if not refs:
            self.overlay_role_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.overlay_role_refs.append(ref_info)
    # end add_overlay_role

    def del_overlay_role(self, ref_obj):
        refs = self.get_overlay_role_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.overlay_role_refs.remove(ref)
                return
    # end del_overlay_role

    def set_overlay_role_list(self, ref_obj_list):
        """Set overlay-role list for physical-router.
        
        :param ref_obj_list: list of OverlayRole object
        
        """
        self.overlay_role_refs = ref_obj_list
    # end set_overlay_role_list

    def get_overlay_role_refs(self):
        """Return overlay-role list for physical-router.
        
        :returns: list of <OverlayRole>
        
        """
        return getattr(self, 'overlay_role_refs', None)
    # end get_overlay_role_refs

    def set_telemetry_profile(self, ref_obj):
        """Set telemetry-profile for physical-router.
        
        :param ref_obj: TelemetryProfile object
        
        """
        self.telemetry_profile_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.telemetry_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_telemetry_profile

    def add_telemetry_profile(self, ref_obj):
        """Add telemetry-profile to physical-router.
        
        :param ref_obj: TelemetryProfile object
        
        """
        refs = getattr(self, 'telemetry_profile_refs', [])
        if not refs:
            self.telemetry_profile_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.telemetry_profile_refs.append(ref_info)
    # end add_telemetry_profile

    def del_telemetry_profile(self, ref_obj):
        refs = self.get_telemetry_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.telemetry_profile_refs.remove(ref)
                return
    # end del_telemetry_profile

    def set_telemetry_profile_list(self, ref_obj_list):
        """Set telemetry-profile list for physical-router.
        
        :param ref_obj_list: list of TelemetryProfile object
        
        """
        self.telemetry_profile_refs = ref_obj_list
    # end set_telemetry_profile_list

    def get_telemetry_profile_refs(self):
        """Return telemetry-profile list for physical-router.
        
        :returns: list of <TelemetryProfile>
        
        """
        return getattr(self, 'telemetry_profile_refs', None)
    # end get_telemetry_profile_refs

    def set_tag(self, ref_obj):
        """Set tag for physical-router.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to physical-router.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for physical-router.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for physical-router.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this physical-router"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this physical-router"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def get_service_endpoint_back_refs(self):
        """Return list of all service-endpoints using this physical-router"""
        return getattr(self, 'service_endpoint_back_refs', None)
    # end get_service_endpoint_back_refs

    def get_network_device_config_back_refs(self):
        """Return list of all network-device-configs using this physical-router"""
        return getattr(self, 'network_device_config_back_refs', None)
    # end get_network_device_config_back_refs

    def get_e2_service_provider_back_refs(self):
        """Return list of all e2-service-providers using this physical-router"""
        return getattr(self, 'e2_service_provider_back_refs', None)
    # end get_e2_service_provider_back_refs

    def dump(self):
        """Display physical-router object in compact form."""
        print('------------ physical-router ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P physical_router_junos_service_ports = ', self.get_physical_router_junos_service_ports())
        print('P telemetry_info = ', self.get_telemetry_info())
        print('P physical_router_device_family = ', self.get_physical_router_device_family())
        print('P physical_router_os_version = ', self.get_physical_router_os_version())
        print('P physical_router_hostname = ', self.get_physical_router_hostname())
        print('P physical_router_management_ip = ', self.get_physical_router_management_ip())
        print('P physical_router_management_mac = ', self.get_physical_router_management_mac())
        print('P physical_router_dataplane_ip = ', self.get_physical_router_dataplane_ip())
        print('P physical_router_loopback_ip = ', self.get_physical_router_loopback_ip())
        print('P physical_router_replicator_loopback_ip = ', self.get_physical_router_replicator_loopback_ip())
        print('P physical_router_vendor_name = ', self.get_physical_router_vendor_name())
        print('P physical_router_product_name = ', self.get_physical_router_product_name())
        print('P physical_router_serial_number = ', self.get_physical_router_serial_number())
        print('P physical_router_vnc_managed = ', self.get_physical_router_vnc_managed())
        print('P physical_router_underlay_managed = ', self.get_physical_router_underlay_managed())
        print('P physical_router_role = ', self.get_physical_router_role())
        print('P routing_bridging_roles = ', self.get_routing_bridging_roles())
        print('P physical_router_snmp = ', self.get_physical_router_snmp())
        print('P physical_router_lldp = ', self.get_physical_router_lldp())
        print('P physical_router_user_credentials = ', self.get_physical_router_user_credentials())
        print('P physical_router_encryption_type = ', self.get_physical_router_encryption_type())
        print('P physical_router_snmp_credentials = ', self.get_physical_router_snmp_credentials())
        print('P physical_router_dhcp_parameters = ', self.get_physical_router_dhcp_parameters())
        print('P physical_router_cli_commit_state = ', self.get_physical_router_cli_commit_state())
        print('P physical_router_managed_state = ', self.get_physical_router_managed_state())
        print('P physical_router_underlay_config = ', self.get_physical_router_underlay_config())
        print('P physical_router_supplemental_config = ', self.get_physical_router_supplemental_config())
        print('P physical_router_autonomous_system = ', self.get_physical_router_autonomous_system())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_router = ', self.get_virtual_router_refs())
        print('REF bgp_router = ', self.get_bgp_router_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF intent_map = ', self.get_intent_map_refs())
        print('REF fabric = ', self.get_fabric_refs())
        print('REF node_profile = ', self.get_node_profile_refs())
        print('REF device_functional_group = ', self.get_device_functional_group_refs())
        print('REF device_chassis = ', self.get_device_chassis_refs())
        print('REF device_image = ', self.get_device_image_refs())
        print('HAS link_aggregation_group = ', self.get_link_aggregation_groups())
        print('REF physical_role = ', self.get_physical_role_refs())
        print('REF overlay_role = ', self.get_overlay_role_refs())
        print('HAS hardware_inventory = ', self.get_hardware_inventorys())
        print('HAS cli_config = ', self.get_cli_configs())
        print('HAS physical_interface = ', self.get_physical_interfaces())
        print('HAS logical_interface = ', self.get_logical_interfaces())
        print('REF telemetry_profile = ', self.get_telemetry_profile_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
        print('BCK service_endpoint = ', self.get_service_endpoint_back_refs())
        print('BCK network_device_config = ', self.get_network_device_config_back_refs())
        print('BCK e2_service_provider = ', self.get_e2_service_provider_back_refs())
    # end dump

# end class PhysicalRouter

class ConfigRoot(object):
    """


    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.GlobalSystemConfig` objects
            Created By: User (required)

            Operations Allowed: R

            Description:

              Global system config is object where all global system configuration is present.

        * list of :class:`.Domain` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Domain is authentication namespace, a collection of projects.

        * list of :class:`.PolicyManagement` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Global level policy-management object re-grouping global policy resources.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Attribute attached to objects - has a type and value


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Attribute attached to objects - has a type and value


    Referred by:
    """

    resource_type = 'config-root'
    object_type = 'config_root'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set(['global_system_configs', u'domains', u'policy_managements', u'tags'])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Attribute attached to objects - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['global_system_configs'] = ('global-system-config', False)
    children_field_types['domains'] = ('domain', False)
    children_field_types['policy_managements'] = ('policy-management', False)
    children_field_types['tags'] = ('tag', False)

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'config-root-tag'

    children_field_metas = {}
    children_field_metas['global_system_configs'] = 'config-root-global-system-config'
    children_field_metas['domains'] = 'config-root-domain'
    children_field_metas['policy_managements'] = 'config-root-policy-management'
    children_field_metas['tags'] = 'config-root-tag'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'config-root'
        if not name:
            name = u'default-config-root'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (config-root)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of config-root in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of config-root as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for config-root.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for config-root.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for config-root.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for config-root.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for config-root.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for config-root.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for config-root.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for config-root.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_global_system_configs(self):
        return getattr(self, 'global_system_configs', None)
    # end get_global_system_configs

    def get_domains(self):
        return getattr(self, 'domains', None)
    # end get_domains

    def get_policy_managements(self):
        return getattr(self, 'policy_managements', None)
    # end get_policy_managements

    def get_tags(self):
        return getattr(self, 'tags', None)
    # end get_tags

    def set_tag(self, ref_obj):
        """Set tag for config-root.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to config-root.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for config-root.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for config-root.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display config-root object in compact form."""
        print('------------ config-root ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS global_system_config = ', self.get_global_system_configs())
        print('HAS domain = ', self.get_domains())
        print('HAS policy_management = ', self.get_policy_managements())
        print('HAS tag = ', self.get_tags())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class ConfigRoot

class ServiceTemplate(object):
    """
    Service template defines how a service may be deployed in the network. Service instance is
    instantiated from config in service template.

    Created By:
        User

    Child of:
        :class:`.Domain` object

    Properties:
        * service_template_properties
            Type: :class:`.ServiceTemplateType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Service template configuration parameters.

        * service_config_managed
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable whether service config for PNFs needs to be managed by Contrail

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.ServiceApplianceSet` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the service appliance set represented by this service template.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ServiceInstance` objects
    """

    resource_type = 'service-template'
    object_type = 'service_template'

    prop_fields = set([u'service_template_properties', u'service_config_managed', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_appliance_set_refs', u'tag_refs'])
    backref_fields = set([u'service_instance_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'service_template_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Service template configuration parameters.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ServiceTemplateType', 'restriction_type': None, 'required': 'required'},
        'service_config_managed': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Enable whether service config for PNFs needs to be managed by Contrail'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_appliance_set_refs'] = ('service-appliance-set', 'None', False, ['Reference to the service appliance set represented by this service template.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['service_instance_back_refs'] = ('service-instance', 'None', False)

    children_field_types = {}

    parent_types = [u'domain']

    prop_field_metas = {}
    prop_field_metas['service_template_properties'] = 'service-template-properties'
    prop_field_metas['service_config_managed'] = 'service-config-managed'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_appliance_set_refs'] = 'service-template-service-appliance-set'
    ref_field_metas['tag_refs'] = 'service-template-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, service_template_properties=None, service_config_managed=False, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-template'
        if not name:
            name = u'default-service-template'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'domain'
            self.fq_name = [u'default-domain']
            self.fq_name.append(name)


        # property fields
        if service_template_properties is not None:
            self._service_template_properties = service_template_properties
        if service_config_managed is not None:
            self._service_config_managed = service_config_managed
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-template)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-template in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-template as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of service-template's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of service-template's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def service_template_properties(self):
        """Get service-template-properties for service-template.
        
        :returns: ServiceTemplateType object
        
        """
        return getattr(self, '_service_template_properties', None)
    # end service_template_properties

    @service_template_properties.setter
    def service_template_properties(self, service_template_properties):
        """Set service-template-properties for service-template.
        
        :param service_template_properties: ServiceTemplateType object
        
        """
        self._service_template_properties = service_template_properties
    # end service_template_properties

    def set_service_template_properties(self, value):
        self.service_template_properties = value
    # end set_service_template_properties

    def get_service_template_properties(self):
        return self.service_template_properties
    # end get_service_template_properties

    @property
    def service_config_managed(self):
        """Get service-config-managed for service-template.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_service_config_managed', None)
    # end service_config_managed

    @service_config_managed.setter
    def service_config_managed(self, service_config_managed):
        """Set service-config-managed for service-template.
        
        :param service_config_managed: xsd:boolean object
        
        """
        self._service_config_managed = service_config_managed
    # end service_config_managed

    def set_service_config_managed(self, value):
        self.service_config_managed = value
    # end set_service_config_managed

    def get_service_config_managed(self):
        return self.service_config_managed
    # end get_service_config_managed

    @property
    def id_perms(self):
        """Get id-perms for service-template.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-template.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-template.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-template.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-template.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-template.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-template.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-template.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_service_template_properties'):
            self._serialize_field_to_json(serialized, field_names, 'service_template_properties')
        if hasattr(self, '_service_config_managed'):
            self._serialize_field_to_json(serialized, field_names, 'service_config_managed')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_appliance_set_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_set_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_appliance_set(self, ref_obj):
        """Set service-appliance-set for service-template.
        
        :param ref_obj: ServiceApplianceSet object
        
        """
        self.service_appliance_set_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_appliance_set_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_appliance_set

    def add_service_appliance_set(self, ref_obj):
        """Add service-appliance-set to service-template.
        
        :param ref_obj: ServiceApplianceSet object
        
        """
        refs = getattr(self, 'service_appliance_set_refs', [])
        if not refs:
            self.service_appliance_set_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_appliance_set_refs.append(ref_info)
    # end add_service_appliance_set

    def del_service_appliance_set(self, ref_obj):
        refs = self.get_service_appliance_set_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_appliance_set_refs.remove(ref)
                return
    # end del_service_appliance_set

    def set_service_appliance_set_list(self, ref_obj_list):
        """Set service-appliance-set list for service-template.
        
        :param ref_obj_list: list of ServiceApplianceSet object
        
        """
        self.service_appliance_set_refs = ref_obj_list
    # end set_service_appliance_set_list

    def get_service_appliance_set_refs(self):
        """Return service-appliance-set list for service-template.
        
        :returns: list of <ServiceApplianceSet>
        
        """
        return getattr(self, 'service_appliance_set_refs', None)
    # end get_service_appliance_set_refs

    def set_tag(self, ref_obj):
        """Set tag for service-template.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-template.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-template.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-template.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_service_instance_back_refs(self):
        """Return list of all service-instances using this service-template"""
        return getattr(self, 'service_instance_back_refs', None)
    # end get_service_instance_back_refs

    def dump(self):
        """Display service-template object in compact form."""
        print('------------ service-template ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P service_template_properties = ', self.get_service_template_properties())
        print('P service_config_managed = ', self.get_service_config_managed())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_appliance_set = ', self.get_service_appliance_set_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK service_instance = ', self.get_service_instance_back_refs())
    # end dump

# end class ServiceTemplate

class HardwareInventory(object):
    """
    Hardware Inventory on a physical router.

    Created By:
        User

    Child of:
        :class:`.PhysicalRouter` object

    Properties:
        * hardware_inventory_inventory_info
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              chassis inventory info of the physical router. Stored as json string. Will be used to render chassis

              hardware details in UI

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'hardware-inventory'
    object_type = 'hardware_inventory'

    prop_fields = set([u'hardware_inventory_inventory_info', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'hardware_inventory_inventory_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['chassis inventory info of the physical router. Stored as json string. Will be used to render chassis', 'hardware details in UI'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['physical-router']

    prop_field_metas = {}
    prop_field_metas['hardware_inventory_inventory_info'] = 'hardware-inventory-inventory-info'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'hardware-inventory-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, hardware_inventory_inventory_info=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'hardware-inventory'
        if not name:
            name = u'default-hardware-inventory'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'physical-router'
            self.fq_name = ['default-global-system-config', 'default-physical-router']
            self.fq_name.append(name)


        # property fields
        if hardware_inventory_inventory_info is not None:
            self._hardware_inventory_inventory_info = hardware_inventory_inventory_info
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (hardware-inventory)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of hardware-inventory in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of hardware-inventory as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of hardware-inventory's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of hardware-inventory's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def hardware_inventory_inventory_info(self):
        """Get hardware-inventory-inventory-info for hardware-inventory.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_hardware_inventory_inventory_info', None)
    # end hardware_inventory_inventory_info

    @hardware_inventory_inventory_info.setter
    def hardware_inventory_inventory_info(self, hardware_inventory_inventory_info):
        """Set hardware-inventory-inventory-info for hardware-inventory.
        
        :param hardware_inventory_inventory_info: xsd:string object
        
        """
        self._hardware_inventory_inventory_info = hardware_inventory_inventory_info
    # end hardware_inventory_inventory_info

    def set_hardware_inventory_inventory_info(self, value):
        self.hardware_inventory_inventory_info = value
    # end set_hardware_inventory_inventory_info

    def get_hardware_inventory_inventory_info(self):
        return self.hardware_inventory_inventory_info
    # end get_hardware_inventory_inventory_info

    @property
    def id_perms(self):
        """Get id-perms for hardware-inventory.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for hardware-inventory.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for hardware-inventory.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for hardware-inventory.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for hardware-inventory.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for hardware-inventory.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for hardware-inventory.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for hardware-inventory.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_hardware_inventory_inventory_info'):
            self._serialize_field_to_json(serialized, field_names, 'hardware_inventory_inventory_info')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for hardware-inventory.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to hardware-inventory.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for hardware-inventory.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for hardware-inventory.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display hardware-inventory object in compact form."""
        print('------------ hardware-inventory ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P hardware_inventory_inventory_info = ', self.get_hardware_inventory_inventory_info())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class HardwareInventory

class FirewallPolicy(object):
    """
    When parent is policy-management:
        firewall-policy object consisting of one or more firewall rules
    When parent is project:
        Project level firewall-policy object consisting of one or more firewall rules


    Created By:
        User when parent is :class:`.PolicyManagement`
        User when parent is :class:`.Project`

    Child of:
        :class:`.PolicyManagement` object OR
        :class:`.Project` object

    Properties:
        * draft_mode_state
            Type: str, *one-of* [u'created', u'updated', u'deleted']

            Created By: User (optional)

            Operations Allowed: R

            Description:

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.FirewallRule` object, :class:`.FirewallSequence` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to firewall-rule attached to this firewall-policy

        * list of (:class:`.SecurityLoggingObject` object, :class:`.SloRateType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to security-logging-object attached to this firewall-policy

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ApplicationPolicySet` objects
    """

    resource_type = 'firewall-policy'
    object_type = 'firewall_policy'

    prop_fields = set([u'draft_mode_state', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['firewall_rule_refs', u'security_logging_object_refs', u'tag_refs'])
    backref_fields = set(['application_policy_set_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'draft_mode_state': {'operations': 'R', 'restrictions': [u'created', u'updated', u'deleted'], 'default': None, 'description': [], 'simple_type': u'DraftModeState', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['firewall_rule_refs'] = ('firewall-rule', 'FirewallSequence', False, ['Reference to firewall-rule attached to this firewall-policy'])
    ref_field_types['security_logging_object_refs'] = ('security-logging-object', 'SloRateType', False, ['Reference to security-logging-object attached to this firewall-policy'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['application_policy_set_back_refs'] = ('application-policy-set', 'FirewallSequence', False)

    children_field_types = {}

    parent_types = [u'policy-management', 'project']

    prop_field_metas = {}
    prop_field_metas['draft_mode_state'] = 'draft-mode-state'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['firewall_rule_refs'] = 'firewall-policy-firewall-rule'
    ref_field_metas['security_logging_object_refs'] = 'firewall-policy-security-logging-object'
    ref_field_metas['tag_refs'] = 'firewall-policy-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, draft_mode_state=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'firewall-policy'
        if not name:
            name = u'default-firewall-policy'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'policy-management', 'project']")

        # property fields
        if draft_mode_state is not None:
            self._draft_mode_state = draft_mode_state
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (firewall-policy)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of firewall-policy in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of firewall-policy as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of firewall-policy's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of firewall-policy's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def draft_mode_state(self):
        """Get draft-mode-state for firewall-policy.
        
        :returns: DraftModeState object
        
        """
        return getattr(self, '_draft_mode_state', None)
    # end draft_mode_state

    @draft_mode_state.setter
    def draft_mode_state(self, draft_mode_state):
        """Set draft-mode-state for firewall-policy.
        
        :param draft_mode_state: DraftModeState object
        
        """
        self._draft_mode_state = draft_mode_state
    # end draft_mode_state

    def set_draft_mode_state(self, value):
        self.draft_mode_state = value
    # end set_draft_mode_state

    def get_draft_mode_state(self):
        return self.draft_mode_state
    # end get_draft_mode_state

    @property
    def id_perms(self):
        """Get id-perms for firewall-policy.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for firewall-policy.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for firewall-policy.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for firewall-policy.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for firewall-policy.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for firewall-policy.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for firewall-policy.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for firewall-policy.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_draft_mode_state'):
            self._serialize_field_to_json(serialized, field_names, 'draft_mode_state')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'firewall_rule_refs'):
            self._serialize_field_to_json(serialized, field_names, 'firewall_rule_refs')
        if hasattr(self, 'security_logging_object_refs'):
            self._serialize_field_to_json(serialized, field_names, 'security_logging_object_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_firewall_rule(self, ref_obj, ref_data=None):
        """Set firewall-rule for firewall-policy.
        
        :param ref_obj: FirewallRule object
        :param ref_data: FirewallSequence object
        
        """
        self.firewall_rule_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.firewall_rule_refs[0]['uuid'] = ref_obj.uuid

    # end set_firewall_rule

    def add_firewall_rule(self, ref_obj, ref_data=None):
        """Add firewall-rule to firewall-policy.
        
        :param ref_obj: FirewallRule object
        :param ref_data: FirewallSequence object
        
        """
        refs = getattr(self, 'firewall_rule_refs', [])
        if not refs:
            self.firewall_rule_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.firewall_rule_refs.append(ref_info)
    # end add_firewall_rule

    def del_firewall_rule(self, ref_obj):
        refs = self.get_firewall_rule_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.firewall_rule_refs.remove(ref)
                return
    # end del_firewall_rule

    def set_firewall_rule_list(self, ref_obj_list, ref_data_list=None):
        """Set firewall-rule list for firewall-policy.
        
        :param ref_obj_list: list of FirewallRule object
        :param ref_data_list: list of FirewallSequence object
        
        """
        self.firewall_rule_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_firewall_rule_list

    def get_firewall_rule_refs(self):
        """Return firewall-rule list for firewall-policy.
        
        :returns: list of tuple <FirewallRule, FirewallSequence>
        
        """
        return getattr(self, 'firewall_rule_refs', None)
    # end get_firewall_rule_refs

    def set_security_logging_object(self, ref_obj, ref_data=None):
        """Set security-logging-object for firewall-policy.
        
        :param ref_obj: SecurityLoggingObject object
        :param ref_data: SloRateType object
        
        """
        self.security_logging_object_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.security_logging_object_refs[0]['uuid'] = ref_obj.uuid

    # end set_security_logging_object

    def add_security_logging_object(self, ref_obj, ref_data=None):
        """Add security-logging-object to firewall-policy.
        
        :param ref_obj: SecurityLoggingObject object
        :param ref_data: SloRateType object
        
        """
        refs = getattr(self, 'security_logging_object_refs', [])
        if not refs:
            self.security_logging_object_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.security_logging_object_refs.append(ref_info)
    # end add_security_logging_object

    def del_security_logging_object(self, ref_obj):
        refs = self.get_security_logging_object_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.security_logging_object_refs.remove(ref)
                return
    # end del_security_logging_object

    def set_security_logging_object_list(self, ref_obj_list, ref_data_list=None):
        """Set security-logging-object list for firewall-policy.
        
        :param ref_obj_list: list of SecurityLoggingObject object
        :param ref_data_list: list of SloRateType object
        
        """
        self.security_logging_object_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_security_logging_object_list

    def get_security_logging_object_refs(self):
        """Return security-logging-object list for firewall-policy.
        
        :returns: list of tuple <SecurityLoggingObject, SloRateType>
        
        """
        return getattr(self, 'security_logging_object_refs', None)
    # end get_security_logging_object_refs

    def set_tag(self, ref_obj):
        """Set tag for firewall-policy.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to firewall-policy.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for firewall-policy.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for firewall-policy.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_application_policy_set_back_refs(self):
        """Return list of all application-policy-sets using this firewall-policy"""
        return getattr(self, 'application_policy_set_back_refs', None)
    # end get_application_policy_set_back_refs

    def dump(self):
        """Display firewall-policy object in compact form."""
        print('------------ firewall-policy ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P draft_mode_state = ', self.get_draft_mode_state())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF firewall_rule = ', self.get_firewall_rule_refs())
        print('REF security_logging_object = ', self.get_security_logging_object_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK application_policy_set = ', self.get_application_policy_set_back_refs())
    # end dump

# end class FirewallPolicy

class RouteTable(object):
    """
    Network route table is mechanism of adding static routes in the virtual network

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * routes
            Type: :class:`.RouteTableType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Routes in the route table are configured in following way.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.LogicalRouter` objects
    """

    resource_type = 'route-table'
    object_type = 'route_table'

    prop_fields = set([u'routes', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['virtual_network_back_refs', 'logical_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'routes': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Routes in the route table are configured in following way.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTableType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['routes'] = 'routes'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'route-table-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, routes=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'route-table'
        if not name:
            name = u'default-route-table'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if routes is not None:
            self._routes = routes
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (route-table)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of route-table in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of route-table as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of route-table's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of route-table's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def routes(self):
        """Get routes for route-table.
        
        :returns: RouteTableType object
        
        """
        return getattr(self, '_routes', None)
    # end routes

    @routes.setter
    def routes(self, routes):
        """Set routes for route-table.
        
        :param routes: RouteTableType object
        
        """
        self._routes = routes
    # end routes

    def set_routes(self, value):
        self.routes = value
    # end set_routes

    def get_routes(self):
        return self.routes
    # end get_routes

    @property
    def id_perms(self):
        """Get id-perms for route-table.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for route-table.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for route-table.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for route-table.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for route-table.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for route-table.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for route-table.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for route-table.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_routes'):
            self._serialize_field_to_json(serialized, field_names, 'routes')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for route-table.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to route-table.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for route-table.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for route-table.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this route-table"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this route-table"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def dump(self):
        """Display route-table object in compact form."""
        print('------------ route-table ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P routes = ', self.get_routes())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
    # end dump

# end class RouteTable

class ProviderAttachment(object):
    """


    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.VirtualRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Not in Use.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'provider-attachment'
    object_type = 'provider_attachment'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_router_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_router_refs'] = ('virtual-router', 'None', False, ['Not in Use.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_router_refs'] = 'provider-attachment-virtual-router'
    ref_field_metas['tag_refs'] = 'provider-attachment-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'provider-attachment'
        if not name:
            name = u'default-provider-attachment'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (provider-attachment)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of provider-attachment in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of provider-attachment as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for provider-attachment.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for provider-attachment.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for provider-attachment.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for provider-attachment.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for provider-attachment.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for provider-attachment.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for provider-attachment.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for provider-attachment.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_router_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_router(self, ref_obj):
        """Set virtual-router for provider-attachment.
        
        :param ref_obj: VirtualRouter object
        
        """
        self.virtual_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_router

    def add_virtual_router(self, ref_obj):
        """Add virtual-router to provider-attachment.
        
        :param ref_obj: VirtualRouter object
        
        """
        refs = getattr(self, 'virtual_router_refs', [])
        if not refs:
            self.virtual_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_router_refs.append(ref_info)
    # end add_virtual_router

    def del_virtual_router(self, ref_obj):
        refs = self.get_virtual_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_router_refs.remove(ref)
                return
    # end del_virtual_router

    def set_virtual_router_list(self, ref_obj_list):
        """Set virtual-router list for provider-attachment.
        
        :param ref_obj_list: list of VirtualRouter object
        
        """
        self.virtual_router_refs = ref_obj_list
    # end set_virtual_router_list

    def get_virtual_router_refs(self):
        """Return virtual-router list for provider-attachment.
        
        :returns: list of <VirtualRouter>
        
        """
        return getattr(self, 'virtual_router_refs', None)
    # end get_virtual_router_refs

    def set_tag(self, ref_obj):
        """Set tag for provider-attachment.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to provider-attachment.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for provider-attachment.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for provider-attachment.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display provider-attachment object in compact form."""
        print('------------ provider-attachment ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_router = ', self.get_virtual_router_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class ProviderAttachment

class OverlayRole(object):
    """
Defines an overlay role

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.RoleDefinition` objects
    """

    resource_type = 'overlay-role'
    object_type = 'overlay_role'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['physical_router_back_refs', 'role_definition_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['role_definition_back_refs'] = ('role-definition', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'overlay-role-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'overlay-role'
        if not name:
            name = u'default-overlay-role'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (overlay-role)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of overlay-role in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of overlay-role as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of overlay-role's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of overlay-role's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for overlay-role.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for overlay-role.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for overlay-role.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for overlay-role.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for overlay-role.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for overlay-role.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for overlay-role.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for overlay-role.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for overlay-role.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to overlay-role.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for overlay-role.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for overlay-role.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this overlay-role"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_role_definition_back_refs(self):
        """Return list of all role-definitions using this overlay-role"""
        return getattr(self, 'role_definition_back_refs', None)
    # end get_role_definition_back_refs

    def dump(self):
        """Display overlay-role object in compact form."""
        print('------------ overlay-role ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK role_definition = ', self.get_role_definition_back_refs())
    # end dump

# end class OverlayRole

class MulticastPolicy(object):
    """
    List of references of child multicast policy objects. automatically maintained by system.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * multicast_source_groups
            Type: :class:`.MulticastSourceGroups`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of Multicast (S,G) Addresses.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualNetwork` objects
    """

    resource_type = 'multicast-policy'
    object_type = 'multicast_policy'

    prop_fields = set([u'multicast_source_groups', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['virtual_network_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'multicast_source_groups': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of Multicast (S,G) Addresses.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MulticastSourceGroups', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['multicast_source_groups'] = 'multicast-source-groups'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'multicast-policy-tag'

    children_field_metas = {}

    prop_list_fields = set([u'multicast_source_groups'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['multicast_source_groups'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, multicast_source_groups=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'multicast-policy'
        if not name:
            name = u'default-multicast-policy'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if multicast_source_groups is not None:
            self._multicast_source_groups = multicast_source_groups
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (multicast-policy)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of multicast-policy in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of multicast-policy as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of multicast-policy's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of multicast-policy's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def multicast_source_groups(self):
        """Get multicast-source-groups for multicast-policy.
        
        :returns: MulticastSourceGroups object
        
        """
        return getattr(self, '_multicast_source_groups', None)
    # end multicast_source_groups

    @multicast_source_groups.setter
    def multicast_source_groups(self, multicast_source_groups):
        """Set multicast-source-groups for multicast-policy.
        
        :param multicast_source_groups: MulticastSourceGroups object
        
        """
        self._multicast_source_groups = multicast_source_groups
    # end multicast_source_groups

    def set_multicast_source_groups(self, value):
        self.multicast_source_groups = value
    # end set_multicast_source_groups

    def get_multicast_source_groups(self):
        return self.multicast_source_groups
    # end get_multicast_source_groups

    @property
    def id_perms(self):
        """Get id-perms for multicast-policy.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for multicast-policy.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for multicast-policy.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for multicast-policy.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for multicast-policy.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for multicast-policy.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for multicast-policy.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for multicast-policy.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_multicast_source_groups'):
            self._serialize_field_to_json(serialized, field_names, 'multicast_source_groups')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for multicast-policy.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to multicast-policy.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for multicast-policy.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for multicast-policy.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this multicast-policy"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def dump(self):
        """Display multicast-policy object in compact form."""
        print('------------ multicast-policy ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P multicast_source_groups = ', self.get_multicast_source_groups())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
    # end dump

# end class MulticastPolicy

class NetworkDeviceConfig(object):
    """


    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.PhysicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Network device config of a physical router.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'network-device-config'
    object_type = 'network_device_config'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['physical_router_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['physical_router_refs'] = ('physical-router', 'None', False, ['Network device config of a physical router.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['physical_router_refs'] = 'network-device-config-physical-router'
    ref_field_metas['tag_refs'] = 'network-device-config-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'network-device-config'
        if not name:
            name = u'default-network-device-config'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (network-device-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of network-device-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of network-device-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for network-device-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for network-device-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for network-device-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for network-device-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for network-device-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for network-device-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for network-device-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for network-device-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'physical_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_physical_router(self, ref_obj):
        """Set physical-router for network-device-config.
        
        :param ref_obj: PhysicalRouter object
        
        """
        self.physical_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_router

    def add_physical_router(self, ref_obj):
        """Add physical-router to network-device-config.
        
        :param ref_obj: PhysicalRouter object
        
        """
        refs = getattr(self, 'physical_router_refs', [])
        if not refs:
            self.physical_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_router_refs.append(ref_info)
    # end add_physical_router

    def del_physical_router(self, ref_obj):
        refs = self.get_physical_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_router_refs.remove(ref)
                return
    # end del_physical_router

    def set_physical_router_list(self, ref_obj_list):
        """Set physical-router list for network-device-config.
        
        :param ref_obj_list: list of PhysicalRouter object
        
        """
        self.physical_router_refs = ref_obj_list
    # end set_physical_router_list

    def get_physical_router_refs(self):
        """Return physical-router list for network-device-config.
        
        :returns: list of <PhysicalRouter>
        
        """
        return getattr(self, 'physical_router_refs', None)
    # end get_physical_router_refs

    def set_tag(self, ref_obj):
        """Set tag for network-device-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to network-device-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for network-device-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for network-device-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display network-device-config object in compact form."""
        print('------------ network-device-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF physical_router = ', self.get_physical_router_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class NetworkDeviceConfig

class VirtualDnsRecord(object):
    """
    Static DNS records in virtual DNS server.

    Created By:
        User

    Child of:
        :class:`.VirtualDns` object

    Properties:
        * virtual_DNS_record_data
            Type: :class:`.VirtualDnsRecordType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              DNS record data has configuration like type, name, ip address, loadbalancing etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'virtual-DNS-record'
    object_type = 'virtual_DNS_record'

    prop_fields = set([u'virtual_DNS_record_data', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'virtual_DNS_record_data': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['DNS record data has configuration like type, name, ip address, loadbalancing etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VirtualDnsRecordType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'virtual-DNS']

    prop_field_metas = {}
    prop_field_metas['virtual_DNS_record_data'] = 'virtual-DNS-record-data'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'virtual-DNS-record-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, virtual_DNS_record_data=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-DNS-record'
        if not name:
            name = u'default-virtual-DNS-record'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'virtual-DNS'
            self.fq_name = [u'default-domain', u'default-virtual-DNS']
            self.fq_name.append(name)


        # property fields
        if virtual_DNS_record_data is not None:
            self._virtual_DNS_record_data = virtual_DNS_record_data
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-DNS-record)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-DNS-record in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-DNS-record as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of virtual-DNS-record's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of virtual-DNS-record's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def virtual_DNS_record_data(self):
        """Get virtual-DNS-record-data for virtual-DNS-record.
        
        :returns: VirtualDnsRecordType object
        
        """
        return getattr(self, '_virtual_DNS_record_data', None)
    # end virtual_DNS_record_data

    @virtual_DNS_record_data.setter
    def virtual_DNS_record_data(self, virtual_DNS_record_data):
        """Set virtual-DNS-record-data for virtual-DNS-record.
        
        :param virtual_DNS_record_data: VirtualDnsRecordType object
        
        """
        self._virtual_DNS_record_data = virtual_DNS_record_data
    # end virtual_DNS_record_data

    def set_virtual_DNS_record_data(self, value):
        self.virtual_DNS_record_data = value
    # end set_virtual_DNS_record_data

    def get_virtual_DNS_record_data(self):
        return self.virtual_DNS_record_data
    # end get_virtual_DNS_record_data

    @property
    def id_perms(self):
        """Get id-perms for virtual-DNS-record.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-DNS-record.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-DNS-record.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-DNS-record.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-DNS-record.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-DNS-record.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-DNS-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-DNS-record.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_virtual_DNS_record_data'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_DNS_record_data')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for virtual-DNS-record.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-DNS-record.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-DNS-record.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-DNS-record.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display virtual-DNS-record object in compact form."""
        print('------------ virtual-DNS-record ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P virtual_DNS_record_data = ', self.get_virtual_DNS_record_data())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class VirtualDnsRecord

class ControlNodeZone(object):
    """
    List of references to all control-node-zones in systems.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.BgpAsAService` objects
        * list of :class:`.BgpRouter` objects
    """

    resource_type = 'control-node-zone'
    object_type = 'control_node_zone'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['bgp_as_a_service_back_refs', 'bgp_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['bgp_as_a_service_back_refs'] = ('bgp-as-a-service', 'BGPaaSControlNodeZoneAttributes', False)
    backref_field_types['bgp_router_back_refs'] = ('bgp-router', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'control-node-zone-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'control-node-zone'
        if not name:
            name = u'default-control-node-zone'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (control-node-zone)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of control-node-zone in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of control-node-zone as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of control-node-zone's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of control-node-zone's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for control-node-zone.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for control-node-zone.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for control-node-zone.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for control-node-zone.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for control-node-zone.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for control-node-zone.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for control-node-zone.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for control-node-zone.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for control-node-zone.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to control-node-zone.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for control-node-zone.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for control-node-zone.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_bgp_as_a_service_back_refs(self):
        """Return list of all bgp-as-a-services using this control-node-zone"""
        return getattr(self, 'bgp_as_a_service_back_refs', None)
    # end get_bgp_as_a_service_back_refs

    def get_bgp_router_back_refs(self):
        """Return list of all bgp-routers using this control-node-zone"""
        return getattr(self, 'bgp_router_back_refs', None)
    # end get_bgp_router_back_refs

    def dump(self):
        """Display control-node-zone object in compact form."""
        print('------------ control-node-zone ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK bgp_as_a_service = ', self.get_bgp_as_a_service_back_refs())
        print('BCK bgp_router = ', self.get_bgp_router_back_refs())
    # end dump

# end class ControlNodeZone

class DsaRule(object):
    """
    Discovery service rule for assigning subscriber to publisher. (set of subscriber) can be assigned to
    (set of publisher).

    Created By:
        User

    Child of:
        :class:`.DiscoveryServiceAssignment` object

    Properties:
        * dsa_rule_entry
            Type: :class:`.DiscoveryServiceAssignmentType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              rule entry defining publisher set and subscriber set.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'dsa-rule'
    object_type = 'dsa_rule'

    prop_fields = set([u'dsa_rule_entry', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'dsa_rule_entry': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['rule entry defining publisher set and subscriber set.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DiscoveryServiceAssignmentType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'discovery-service-assignment']

    prop_field_metas = {}
    prop_field_metas['dsa_rule_entry'] = 'dsa-rule-entry'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'dsa-rule-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, dsa_rule_entry=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'dsa-rule'
        if not name:
            name = u'default-dsa-rule'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'discovery-service-assignment'
            self.fq_name = [u'default-discovery-service-assignment']
            self.fq_name.append(name)


        # property fields
        if dsa_rule_entry is not None:
            self._dsa_rule_entry = dsa_rule_entry
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (dsa-rule)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of dsa-rule in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of dsa-rule as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of dsa-rule's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of dsa-rule's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def dsa_rule_entry(self):
        """Get dsa-rule-entry for dsa-rule.
        
        :returns: DiscoveryServiceAssignmentType object
        
        """
        return getattr(self, '_dsa_rule_entry', None)
    # end dsa_rule_entry

    @dsa_rule_entry.setter
    def dsa_rule_entry(self, dsa_rule_entry):
        """Set dsa-rule-entry for dsa-rule.
        
        :param dsa_rule_entry: DiscoveryServiceAssignmentType object
        
        """
        self._dsa_rule_entry = dsa_rule_entry
    # end dsa_rule_entry

    def set_dsa_rule_entry(self, value):
        self.dsa_rule_entry = value
    # end set_dsa_rule_entry

    def get_dsa_rule_entry(self):
        return self.dsa_rule_entry
    # end get_dsa_rule_entry

    @property
    def id_perms(self):
        """Get id-perms for dsa-rule.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for dsa-rule.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for dsa-rule.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for dsa-rule.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for dsa-rule.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for dsa-rule.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for dsa-rule.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for dsa-rule.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_dsa_rule_entry'):
            self._serialize_field_to_json(serialized, field_names, 'dsa_rule_entry')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for dsa-rule.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to dsa-rule.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for dsa-rule.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for dsa-rule.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display dsa-rule object in compact form."""
        print('------------ dsa-rule ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P dsa_rule_entry = ', self.get_dsa_rule_entry())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class DsaRule

class StructuredSyslogConfig(object):
    """
structured syslog config related data

    Created By:
        User when parent is :class:`.GlobalAnalyticsConfig`
        User when parent is :class:`.Project`

    Child of:
        :class:`.GlobalAnalyticsConfig` object OR
        :class:`.Project` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.StructuredSyslogMessage` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of          structured-syslog-message that are applicable to objects          anchored under

              structured-syslog-config.

        * list of :class:`.StructuredSyslogHostnameRecord` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of          structured-syslog-hostname-record that are applicable to objects          anchored

              under structured-syslog-config.

        * list of :class:`.StructuredSyslogApplicationRecord` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of         structured-syslog-application-record that are applicable to objects         anchored

              under structured-syslog-config.

        * list of :class:`.StructuredSyslogSlaProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of         structured-syslog-sla-profile that are applicable to objects         anchored under

              structured-syslog-config.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'structured-syslog-config'
    object_type = 'structured_syslog_config'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([u'structured_syslog_messages', u'structured_syslog_hostname_records', u'structured_syslog_application_records', u'structured_syslog_sla_profiles'])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['structured_syslog_messages'] = ('structured-syslog-message', False)
    children_field_types['structured_syslog_hostname_records'] = ('structured-syslog-hostname-record', False)
    children_field_types['structured_syslog_application_records'] = ('structured-syslog-application-record', False)
    children_field_types['structured_syslog_sla_profiles'] = ('structured-syslog-sla-profile', False)

    parent_types = [u'global-analytics-config', 'project']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'structured-syslog-config-tag'

    children_field_metas = {}
    children_field_metas['structured_syslog_messages'] = 'structured-syslog-config-structured-syslog-message'
    children_field_metas['structured_syslog_hostname_records'] = 'structured-syslog-config-structured-syslog-hostname-record'
    children_field_metas['structured_syslog_application_records'] = 'structured-syslog-config-structured-syslog-application-record'
    children_field_metas['structured_syslog_sla_profiles'] = 'structured-syslog-config-structured-syslog-sla-profile'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'structured-syslog-config'
        if not name:
            name = u'default-structured-syslog-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'global-analytics-config', 'project']")

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (structured-syslog-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of structured-syslog-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of structured-syslog-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of structured-syslog-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of structured-syslog-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for structured-syslog-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for structured-syslog-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for structured-syslog-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for structured-syslog-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for structured-syslog-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for structured-syslog-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for structured-syslog-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for structured-syslog-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_structured_syslog_messages(self):
        return getattr(self, 'structured_syslog_messages', None)
    # end get_structured_syslog_messages

    def get_structured_syslog_hostname_records(self):
        return getattr(self, 'structured_syslog_hostname_records', None)
    # end get_structured_syslog_hostname_records

    def get_structured_syslog_application_records(self):
        return getattr(self, 'structured_syslog_application_records', None)
    # end get_structured_syslog_application_records

    def get_structured_syslog_sla_profiles(self):
        return getattr(self, 'structured_syslog_sla_profiles', None)
    # end get_structured_syslog_sla_profiles

    def set_tag(self, ref_obj):
        """Set tag for structured-syslog-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to structured-syslog-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for structured-syslog-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for structured-syslog-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display structured-syslog-config object in compact form."""
        print('------------ structured-syslog-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS structured_syslog_message = ', self.get_structured_syslog_messages())
        print('HAS structured_syslog_hostname_record = ', self.get_structured_syslog_hostname_records())
        print('HAS structured_syslog_application_record = ', self.get_structured_syslog_application_records())
        print('HAS structured_syslog_sla_profile = ', self.get_structured_syslog_sla_profiles())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class StructuredSyslogConfig

class DiscoveryServiceAssignment(object):
    """


    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.DsaRule` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Discovery service rule for assigning subscriber to publisher. (set of subscriber) can be assigned to

              (set of publisher).


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'discovery-service-assignment'
    object_type = 'discovery_service_assignment'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set(['dsa_rules'])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['dsa_rules'] = ('dsa-rule', False)

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'discovery-service-assignment-tag'

    children_field_metas = {}
    children_field_metas['dsa_rules'] = 'discovery-service-assignment-dsa-rule'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'discovery-service-assignment'
        if not name:
            name = u'default-discovery-service-assignment'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (discovery-service-assignment)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of discovery-service-assignment in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of discovery-service-assignment as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for discovery-service-assignment.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for discovery-service-assignment.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for discovery-service-assignment.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for discovery-service-assignment.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for discovery-service-assignment.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for discovery-service-assignment.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for discovery-service-assignment.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for discovery-service-assignment.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_dsa_rules(self):
        return getattr(self, 'dsa_rules', None)
    # end get_dsa_rules

    def set_tag(self, ref_obj):
        """Set tag for discovery-service-assignment.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to discovery-service-assignment.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for discovery-service-assignment.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for discovery-service-assignment.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display discovery-service-assignment object in compact form."""
        print('------------ discovery-service-assignment ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS dsa_rule = ', self.get_dsa_rules())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class DiscoveryServiceAssignment

class LogicalInterface(object):
    """
    When parent is physical-router:
        Logical interfaces on physical routers.
    When parent is physical-interface:
        Logical interfaces on physical interface on physical routers.


    Created By:
        User when parent is :class:`.PhysicalRouter`
        User when parent is :class:`.PhysicalInterface`

    Child of:
        :class:`.PhysicalRouter` object OR
        :class:`.PhysicalInterface` object

    Properties:
        * logical_interface_vlan_tag
            Type: int

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              VLAN tag (.1Q) classifier for this logical interface.

        * logical_interface_type
            Type: str, *one-of* [u'l2', u'l3']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Logical interface type can be L2 or L3.

               L2 - only L2 service is provided, MAC learning is supported.

               L3 - only L3 service is supported and MAC learning is not supported.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              References to virtual machine interfaces that represent end points that are reachable by this

              logical interface.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.InstanceIp` objects
    """

    resource_type = 'logical-interface'
    object_type = 'logical_interface'

    prop_fields = set([u'logical_interface_vlan_tag', u'logical_interface_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_machine_interface_refs', u'tag_refs'])
    backref_fields = set([u'instance_ip_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'logical_interface_vlan_tag': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['VLAN tag (.1Q) classifier for this logical interface.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'optional'},
        'logical_interface_type': {'operations': 'CRUD', 'restrictions': [u'l2', u'l3'], 'default': None, 'description': ['Logical interface type can be L2 or L3.', ' L2 - only L2 service is provided, MAC learning is supported.', ' L3 - only L3 service is supported and MAC learning is not supported.'], 'simple_type': u'LogicalInterfaceType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['References to virtual machine interfaces that represent end points that are reachable by this', 'logical interface.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)

    children_field_types = {}

    parent_types = ['physical-router', 'physical-interface']

    prop_field_metas = {}
    prop_field_metas['logical_interface_vlan_tag'] = 'logical-interface-vlan-tag'
    prop_field_metas['logical_interface_type'] = 'logical-interface-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_machine_interface_refs'] = 'logical-interface-virtual-machine-interface'
    ref_field_metas['tag_refs'] = 'logical-interface-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, logical_interface_vlan_tag=None, logical_interface_type=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'logical-interface'
        if not name:
            name = u'default-logical-interface'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("['physical-router', 'physical-interface']")

        # property fields
        if logical_interface_vlan_tag is not None:
            self._logical_interface_vlan_tag = logical_interface_vlan_tag
        if logical_interface_type is not None:
            self._logical_interface_type = logical_interface_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (logical-interface)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of logical-interface in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of logical-interface as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of logical-interface's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of logical-interface's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def logical_interface_vlan_tag(self):
        """Get logical-interface-vlan-tag for logical-interface.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_logical_interface_vlan_tag', None)
    # end logical_interface_vlan_tag

    @logical_interface_vlan_tag.setter
    def logical_interface_vlan_tag(self, logical_interface_vlan_tag):
        """Set logical-interface-vlan-tag for logical-interface.
        
        :param logical_interface_vlan_tag: xsd:integer object
        
        """
        self._logical_interface_vlan_tag = logical_interface_vlan_tag
    # end logical_interface_vlan_tag

    def set_logical_interface_vlan_tag(self, value):
        self.logical_interface_vlan_tag = value
    # end set_logical_interface_vlan_tag

    def get_logical_interface_vlan_tag(self):
        return self.logical_interface_vlan_tag
    # end get_logical_interface_vlan_tag

    @property
    def logical_interface_type(self):
        """Get logical-interface-type for logical-interface.
        
        :returns: LogicalInterfaceType object
        
        """
        return getattr(self, '_logical_interface_type', None)
    # end logical_interface_type

    @logical_interface_type.setter
    def logical_interface_type(self, logical_interface_type):
        """Set logical-interface-type for logical-interface.
        
        :param logical_interface_type: LogicalInterfaceType object
        
        """
        self._logical_interface_type = logical_interface_type
    # end logical_interface_type

    def set_logical_interface_type(self, value):
        self.logical_interface_type = value
    # end set_logical_interface_type

    def get_logical_interface_type(self):
        return self.logical_interface_type
    # end get_logical_interface_type

    @property
    def id_perms(self):
        """Get id-perms for logical-interface.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for logical-interface.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for logical-interface.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for logical-interface.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for logical-interface.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for logical-interface.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for logical-interface.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for logical-interface.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_logical_interface_vlan_tag'):
            self._serialize_field_to_json(serialized, field_names, 'logical_interface_vlan_tag')
        if hasattr(self, '_logical_interface_type'):
            self._serialize_field_to_json(serialized, field_names, 'logical_interface_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for logical-interface.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to logical-interface.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for logical-interface.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for logical-interface.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for logical-interface.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to logical-interface.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for logical-interface.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for logical-interface.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this logical-interface"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def dump(self):
        """Display logical-interface object in compact form."""
        print('------------ logical-interface ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P logical_interface_vlan_tag = ', self.get_logical_interface_vlan_tag())
        print('P logical_interface_type = ', self.get_logical_interface_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
    # end dump

# end class LogicalInterface

class FlowNode(object):
    """
    Appformix flows node is object representing a logical node in system which serves xflow collectors.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * flow_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Ip address of the appformix flow node, set while provisioning.

        * flow_node_load_balancer_ip
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              IP address of the load balancer node for xflow collectors, set while provisioning.

        * flow_node_inband_interface
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              In-Band interface name used for this flow node.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.VirtualNetwork` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Similar to using virtual-machine to model the bare metal server, we are using virtual-network to

              model telemetry underlay infra network. This would allow us to re-use the same IPAM data model and

              code base to manage the IP auto-assignments for the underlay telemetry networks.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.InstanceIp` objects
    """

    resource_type = 'flow-node'
    object_type = 'flow_node'

    prop_fields = set([u'flow_node_ip_address', u'flow_node_load_balancer_ip', u'flow_node_inband_interface', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_network_refs', u'tag_refs'])
    backref_fields = set([u'instance_ip_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'flow_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the appformix flow node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'admin-only'},
        'flow_node_load_balancer_ip': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['IP address of the load balancer node for xflow collectors, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'flow_node_inband_interface': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['In-Band interface name used for this flow node.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['Similar to using virtual-machine to model the bare metal server, we are using virtual-network to', 'model telemetry underlay infra network. This would allow us to re-use the same IPAM data model and', 'code base to manage the IP auto-assignments for the underlay telemetry networks.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['flow_node_ip_address'] = 'flow-node-ip-address'
    prop_field_metas['flow_node_load_balancer_ip'] = 'flow-node-load-balancer-ip'
    prop_field_metas['flow_node_inband_interface'] = 'flow-node-inband-interface'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_network_refs'] = 'flow-node-virtual-network'
    ref_field_metas['tag_refs'] = 'flow-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, flow_node_ip_address=None, flow_node_load_balancer_ip=None, flow_node_inband_interface=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'flow-node'
        if not name:
            name = u'default-flow-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if flow_node_ip_address is not None:
            self._flow_node_ip_address = flow_node_ip_address
        if flow_node_load_balancer_ip is not None:
            self._flow_node_load_balancer_ip = flow_node_load_balancer_ip
        if flow_node_inband_interface is not None:
            self._flow_node_inband_interface = flow_node_inband_interface
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (flow-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of flow-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of flow-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of flow-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of flow-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def flow_node_ip_address(self):
        """Get flow-node-ip-address for flow-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_flow_node_ip_address', None)
    # end flow_node_ip_address

    @flow_node_ip_address.setter
    def flow_node_ip_address(self, flow_node_ip_address):
        """Set flow-node-ip-address for flow-node.
        
        :param flow_node_ip_address: IpAddressType object
        
        """
        self._flow_node_ip_address = flow_node_ip_address
    # end flow_node_ip_address

    def set_flow_node_ip_address(self, value):
        self.flow_node_ip_address = value
    # end set_flow_node_ip_address

    def get_flow_node_ip_address(self):
        return self.flow_node_ip_address
    # end get_flow_node_ip_address

    @property
    def flow_node_load_balancer_ip(self):
        """Get flow-node-load-balancer-ip for flow-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_flow_node_load_balancer_ip', None)
    # end flow_node_load_balancer_ip

    @flow_node_load_balancer_ip.setter
    def flow_node_load_balancer_ip(self, flow_node_load_balancer_ip):
        """Set flow-node-load-balancer-ip for flow-node.
        
        :param flow_node_load_balancer_ip: IpAddressType object
        
        """
        self._flow_node_load_balancer_ip = flow_node_load_balancer_ip
    # end flow_node_load_balancer_ip

    def set_flow_node_load_balancer_ip(self, value):
        self.flow_node_load_balancer_ip = value
    # end set_flow_node_load_balancer_ip

    def get_flow_node_load_balancer_ip(self):
        return self.flow_node_load_balancer_ip
    # end get_flow_node_load_balancer_ip

    @property
    def flow_node_inband_interface(self):
        """Get flow-node-inband-interface for flow-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_flow_node_inband_interface', None)
    # end flow_node_inband_interface

    @flow_node_inband_interface.setter
    def flow_node_inband_interface(self, flow_node_inband_interface):
        """Set flow-node-inband-interface for flow-node.
        
        :param flow_node_inband_interface: xsd:string object
        
        """
        self._flow_node_inband_interface = flow_node_inband_interface
    # end flow_node_inband_interface

    def set_flow_node_inband_interface(self, value):
        self.flow_node_inband_interface = value
    # end set_flow_node_inband_interface

    def get_flow_node_inband_interface(self):
        return self.flow_node_inband_interface
    # end get_flow_node_inband_interface

    @property
    def id_perms(self):
        """Get id-perms for flow-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for flow-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for flow-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for flow-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for flow-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for flow-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for flow-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for flow-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_flow_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'flow_node_ip_address')
        if hasattr(self, '_flow_node_load_balancer_ip'):
            self._serialize_field_to_json(serialized, field_names, 'flow_node_load_balancer_ip')
        if hasattr(self, '_flow_node_inband_interface'):
            self._serialize_field_to_json(serialized, field_names, 'flow_node_inband_interface')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for flow-node.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to flow-node.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for flow-node.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for flow-node.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_tag(self, ref_obj):
        """Set tag for flow-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to flow-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for flow-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for flow-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this flow-node"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def dump(self):
        """Display flow-node object in compact form."""
        print('------------ flow-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P flow_node_ip_address = ', self.get_flow_node_ip_address())
        print('P flow_node_load_balancer_ip = ', self.get_flow_node_load_balancer_ip())
        print('P flow_node_inband_interface = ', self.get_flow_node_inband_interface())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
    # end dump

# end class FlowNode

class PortGroup(object):
    """
    Parent of this port group.

    Created By:
        User

    Child of:
        :class:`.Node` object

    Properties:
        * bms_port_group_info
            Type: :class:`.BaremetalPortGroupInfo`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Details of the baremetal server port group

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Port` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to port object which are part of this port group.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'port-group'
    object_type = 'port_group'

    prop_fields = set([u'bms_port_group_info', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'port_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'bms_port_group_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Details of the baremetal server port group'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'BaremetalPortGroupInfo', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['port_refs'] = ('port', 'None', False, ['Reference to port object which are part of this port group.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'node']

    prop_field_metas = {}
    prop_field_metas['bms_port_group_info'] = 'bms-port-group-info'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['port_refs'] = 'port-group-port'
    ref_field_metas['tag_refs'] = 'port-group-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, bms_port_group_info=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'port-group'
        if not name:
            name = u'default-port-group'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'node'
            self.fq_name = ['default-global-system-config', u'default-node']
            self.fq_name.append(name)


        # property fields
        if bms_port_group_info is not None:
            self._bms_port_group_info = bms_port_group_info
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (port-group)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of port-group in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of port-group as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of port-group's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of port-group's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def bms_port_group_info(self):
        """Get bms-port-group-info for port-group.
        
        :returns: BaremetalPortGroupInfo object
        
        """
        return getattr(self, '_bms_port_group_info', None)
    # end bms_port_group_info

    @bms_port_group_info.setter
    def bms_port_group_info(self, bms_port_group_info):
        """Set bms-port-group-info for port-group.
        
        :param bms_port_group_info: BaremetalPortGroupInfo object
        
        """
        self._bms_port_group_info = bms_port_group_info
    # end bms_port_group_info

    def set_bms_port_group_info(self, value):
        self.bms_port_group_info = value
    # end set_bms_port_group_info

    def get_bms_port_group_info(self):
        return self.bms_port_group_info
    # end get_bms_port_group_info

    @property
    def id_perms(self):
        """Get id-perms for port-group.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for port-group.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for port-group.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for port-group.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for port-group.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for port-group.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for port-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for port-group.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_bms_port_group_info'):
            self._serialize_field_to_json(serialized, field_names, 'bms_port_group_info')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'port_refs'):
            self._serialize_field_to_json(serialized, field_names, 'port_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_port(self, ref_obj):
        """Set port for port-group.
        
        :param ref_obj: Port object
        
        """
        self.port_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.port_refs[0]['uuid'] = ref_obj.uuid

    # end set_port

    def add_port(self, ref_obj):
        """Add port to port-group.
        
        :param ref_obj: Port object
        
        """
        refs = getattr(self, 'port_refs', [])
        if not refs:
            self.port_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.port_refs.append(ref_info)
    # end add_port

    def del_port(self, ref_obj):
        refs = self.get_port_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.port_refs.remove(ref)
                return
    # end del_port

    def set_port_list(self, ref_obj_list):
        """Set port list for port-group.
        
        :param ref_obj_list: list of Port object
        
        """
        self.port_refs = ref_obj_list
    # end set_port_list

    def get_port_refs(self):
        """Return port list for port-group.
        
        :returns: list of <Port>
        
        """
        return getattr(self, 'port_refs', None)
    # end get_port_refs

    def set_tag(self, ref_obj):
        """Set tag for port-group.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to port-group.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for port-group.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for port-group.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display port-group object in compact form."""
        print('------------ port-group ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P bms_port_group_info = ', self.get_bms_port_group_info())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF port = ', self.get_port_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class PortGroup

class RouteAggregate(object):
    """
    List of references of child routing route aggregate objects. automatically maintained by system.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * aggregate_route_entries
            Type: :class:`.RouteListType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              List of ip prefix (aggregate route prefix) for which aggregate route will be advertised. This

              aggregate route is advertised if a matching(longest prefix match) prefix is found.

        * aggregate_route_nexthop
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Next for aggregate route that will be advertised.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.ServiceInstance` object, :class:`.ServiceInterfaceTag` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to route-aggregate policy attached to (service instance, interface).

        * list of :class:`.RoutingInstance` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to internal routing instance object automatically generated by system.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'route-aggregate'
    object_type = 'route_aggregate'

    prop_fields = set([u'aggregate_route_entries', u'aggregate_route_nexthop', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_instance_refs', 'routing_instance_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'aggregate_route_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of ip prefix (aggregate route prefix) for which aggregate route will be advertised. This', 'aggregate route is advertised if a matching(longest prefix match) prefix is found.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteListType', 'restriction_type': None, 'required': 'required'},
        'aggregate_route_nexthop': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Next for aggregate route that will be advertised.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_instance_refs'] = ('service-instance', 'ServiceInterfaceTag', False, ['Reference to route-aggregate policy attached to (service instance, interface).'])
    ref_field_types['routing_instance_refs'] = ('routing-instance', 'None', False, ['Reference to internal routing instance object automatically generated by system.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['aggregate_route_entries'] = 'aggregate-route-entries'
    prop_field_metas['aggregate_route_nexthop'] = 'aggregate-route-nexthop'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_instance_refs'] = 'route-aggregate-service-instance'
    ref_field_metas['routing_instance_refs'] = 'route-aggregate-routing-instance'
    ref_field_metas['tag_refs'] = 'route-aggregate-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, aggregate_route_entries=None, aggregate_route_nexthop=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'route-aggregate'
        if not name:
            name = u'default-route-aggregate'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if aggregate_route_entries is not None:
            self._aggregate_route_entries = aggregate_route_entries
        if aggregate_route_nexthop is not None:
            self._aggregate_route_nexthop = aggregate_route_nexthop
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (route-aggregate)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of route-aggregate in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of route-aggregate as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of route-aggregate's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of route-aggregate's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def aggregate_route_entries(self):
        """Get aggregate-route-entries for route-aggregate.
        
        :returns: RouteListType object
        
        """
        return getattr(self, '_aggregate_route_entries', None)
    # end aggregate_route_entries

    @aggregate_route_entries.setter
    def aggregate_route_entries(self, aggregate_route_entries):
        """Set aggregate-route-entries for route-aggregate.
        
        :param aggregate_route_entries: RouteListType object
        
        """
        self._aggregate_route_entries = aggregate_route_entries
    # end aggregate_route_entries

    def set_aggregate_route_entries(self, value):
        self.aggregate_route_entries = value
    # end set_aggregate_route_entries

    def get_aggregate_route_entries(self):
        return self.aggregate_route_entries
    # end get_aggregate_route_entries

    @property
    def aggregate_route_nexthop(self):
        """Get aggregate-route-nexthop for route-aggregate.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_aggregate_route_nexthop', None)
    # end aggregate_route_nexthop

    @aggregate_route_nexthop.setter
    def aggregate_route_nexthop(self, aggregate_route_nexthop):
        """Set aggregate-route-nexthop for route-aggregate.
        
        :param aggregate_route_nexthop: xsd:string object
        
        """
        self._aggregate_route_nexthop = aggregate_route_nexthop
    # end aggregate_route_nexthop

    def set_aggregate_route_nexthop(self, value):
        self.aggregate_route_nexthop = value
    # end set_aggregate_route_nexthop

    def get_aggregate_route_nexthop(self):
        return self.aggregate_route_nexthop
    # end get_aggregate_route_nexthop

    @property
    def id_perms(self):
        """Get id-perms for route-aggregate.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for route-aggregate.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for route-aggregate.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for route-aggregate.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for route-aggregate.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for route-aggregate.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for route-aggregate.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for route-aggregate.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_aggregate_route_entries'):
            self._serialize_field_to_json(serialized, field_names, 'aggregate_route_entries')
        if hasattr(self, '_aggregate_route_nexthop'):
            self._serialize_field_to_json(serialized, field_names, 'aggregate_route_nexthop')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'routing_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'routing_instance_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_instance(self, ref_obj, ref_data=None):
        """Set service-instance for route-aggregate.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: ServiceInterfaceTag object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj, ref_data=None):
        """Add service-instance to route-aggregate.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: ServiceInterfaceTag object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list, ref_data_list=None):
        """Set service-instance list for route-aggregate.
        
        :param ref_obj_list: list of ServiceInstance object
        :param ref_data_list: list of ServiceInterfaceTag object
        
        """
        self.service_instance_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for route-aggregate.
        
        :returns: list of tuple <ServiceInstance, ServiceInterfaceTag>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_routing_instance(self, ref_obj):
        """Set routing-instance for route-aggregate.
        
        :param ref_obj: RoutingInstance object
        
        """
        self.routing_instance_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.routing_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_routing_instance

    def add_routing_instance(self, ref_obj):
        """Add routing-instance to route-aggregate.
        
        :param ref_obj: RoutingInstance object
        
        """
        refs = getattr(self, 'routing_instance_refs', [])
        if not refs:
            self.routing_instance_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.routing_instance_refs.append(ref_info)
    # end add_routing_instance

    def del_routing_instance(self, ref_obj):
        refs = self.get_routing_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.routing_instance_refs.remove(ref)
                return
    # end del_routing_instance

    def set_routing_instance_list(self, ref_obj_list):
        """Set routing-instance list for route-aggregate.
        
        :param ref_obj_list: list of RoutingInstance object
        
        """
        self.routing_instance_refs = ref_obj_list
    # end set_routing_instance_list

    def get_routing_instance_refs(self):
        """Return routing-instance list for route-aggregate.
        
        :returns: list of <RoutingInstance>
        
        """
        return getattr(self, 'routing_instance_refs', None)
    # end get_routing_instance_refs

    def set_tag(self, ref_obj):
        """Set tag for route-aggregate.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to route-aggregate.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for route-aggregate.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for route-aggregate.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display route-aggregate object in compact form."""
        print('------------ route-aggregate ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P aggregate_route_entries = ', self.get_aggregate_route_entries())
        print('P aggregate_route_nexthop = ', self.get_aggregate_route_nexthop())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF routing_instance = ', self.get_routing_instance_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class RouteAggregate

class LogicalRouter(object):
    """
    Logical router is a mechanism to connect multiple virtual network as they have been connected by a
    router.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * configured_route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that represent this logical router, all virtual networks connected to this

              logical router will have this as their route target list.

        * vxlan_network_identifier
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              The VNI that needs to be associated with the internal VN if vxlan_routing mode is enabled.

        * logical_router_dhcp_relay_server
            Type: :class:`.IpAddressesType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              DHCP server IP(s) to serve managed BMS(s).

        * logical_router_gateway_external
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              this logical router is used for external connectivity or not.

        * logical_router_type
            Type: str, *one-of* [u'snat-routing', u'vxlan-routing']

            Created By: User (optional)

            Operations Allowed: CRD

            Description:

              Type of logical-router, used to signify the purpose of the logical-router.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the interface attached to this logical router. By attaching a interface to logical

              network all subnets in the virtual network of the interface has this router.

        * list of :class:`.RouteTarget` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Route target that represent this logical router.

        * list of :class:`.RouteTable` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the route table attached to this logical router. By attaching route table, system will

              create static routes with the route target only of route targets linked to this logical router

        * list of (:class:`.VirtualNetwork` object, :class:`.LogicalRouterVirtualNetworkType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to a virtual network. Please refer to link attribute for additional details

        * list of :class:`.ServiceInstance` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to service instance doing SNAT functionality for external gateway.

        * list of :class:`.PhysicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to physical router, when this link is present device manager configures logical router

              associated route targets/interfaces on the Physical Router.

        * list of :class:`.Bgpvpn` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Back reference to logical router associated to the BGP VPN resource

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PortTuple` objects
        * list of :class:`.DataCenterInterconnect` objects
    """

    resource_type = 'logical-router'
    object_type = 'logical_router'

    prop_fields = set([u'configured_route_target_list', u'vxlan_network_identifier', u'logical_router_dhcp_relay_server', u'logical_router_gateway_external', u'logical_router_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_machine_interface_refs', 'route_target_refs', u'route_table_refs', 'virtual_network_refs', u'service_instance_refs', 'physical_router_refs', 'bgpvpn_refs', u'tag_refs'])
    backref_fields = set([u'port_tuple_back_refs', u'data_center_interconnect_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'configured_route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that represent this logical router, all virtual networks connected to this', 'logical router will have this as their route target list.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'vxlan_network_identifier': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['The VNI that needs to be associated with the internal VN if vxlan_routing mode is enabled.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'logical_router_dhcp_relay_server': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['DHCP server IP(s) to serve managed BMS(s).'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IpAddressesType', 'restriction_type': None, 'required': 'optional'},
        'logical_router_gateway_external': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['this logical router is used for external connectivity or not.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'logical_router_type': {'operations': 'CRD', 'restrictions': [u'snat-routing', u'vxlan-routing'], 'default': 'snat-routing', 'description': ['Type of logical-router, used to signify the purpose of the logical-router.'], 'simple_type': u'LogicalRouterType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to the interface attached to this logical router. By attaching a interface to logical', 'network all subnets in the virtual network of the interface has this router.'])
    ref_field_types['route_target_refs'] = ('route-target', 'None', False, ['Route target that represent this logical router.'])
    ref_field_types['route_table_refs'] = ('route-table', 'None', False, ['Reference to the route table attached to this logical router. By attaching route table, system will', 'create static routes with the route target only of route targets linked to this logical router'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'LogicalRouterVirtualNetworkType', False, ['Reference to a virtual network. Please refer to link attribute for additional details'])
    ref_field_types['service_instance_refs'] = ('service-instance', 'None', False, ['Reference to service instance doing SNAT functionality for external gateway.'])
    ref_field_types['physical_router_refs'] = ('physical-router', 'None', False, ['Reference to physical router, when this link is present device manager configures logical router', 'associated route targets/interfaces on the Physical Router.'])
    ref_field_types['bgpvpn_refs'] = ('bgpvpn', 'None', False, ['Back reference to logical router associated to the BGP VPN resource'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['port_tuple_back_refs'] = ('port-tuple', 'None', False)
    backref_field_types['data_center_interconnect_back_refs'] = ('data-center-interconnect', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['configured_route_target_list'] = 'configured-route-target-list'
    prop_field_metas['vxlan_network_identifier'] = 'vxlan-network-identifier'
    prop_field_metas['logical_router_dhcp_relay_server'] = 'logical-router-dhcp-relay-server'
    prop_field_metas['logical_router_gateway_external'] = 'logical-router-gateway-external'
    prop_field_metas['logical_router_type'] = 'logical-router-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_machine_interface_refs'] = 'logical-router-interface'
    ref_field_metas['route_target_refs'] = 'logical-router-target'
    ref_field_metas['route_table_refs'] = 'logical-router-route-table'
    ref_field_metas['virtual_network_refs'] = 'logical-router-virtual-network'
    ref_field_metas['service_instance_refs'] = 'logical-router-service-instance'
    ref_field_metas['physical_router_refs'] = 'logical-router-physical-router'
    ref_field_metas['bgpvpn_refs'] = 'bgpvpn-router'
    ref_field_metas['tag_refs'] = 'logical-router-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, configured_route_target_list=None, vxlan_network_identifier=None, logical_router_dhcp_relay_server=None, logical_router_gateway_external=None, logical_router_type='snat-routing', id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'logical-router'
        if not name:
            name = u'default-logical-router'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if configured_route_target_list is not None:
            self._configured_route_target_list = configured_route_target_list
        if vxlan_network_identifier is not None:
            self._vxlan_network_identifier = vxlan_network_identifier
        if logical_router_dhcp_relay_server is not None:
            self._logical_router_dhcp_relay_server = logical_router_dhcp_relay_server
        if logical_router_gateway_external is not None:
            self._logical_router_gateway_external = logical_router_gateway_external
        if logical_router_type is not None:
            self._logical_router_type = logical_router_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (logical-router)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of logical-router in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of logical-router as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of logical-router's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of logical-router's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def configured_route_target_list(self):
        """Get configured-route-target-list for logical-router.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_configured_route_target_list', None)
    # end configured_route_target_list

    @configured_route_target_list.setter
    def configured_route_target_list(self, configured_route_target_list):
        """Set configured-route-target-list for logical-router.
        
        :param configured_route_target_list: RouteTargetList object
        
        """
        self._configured_route_target_list = configured_route_target_list
    # end configured_route_target_list

    def set_configured_route_target_list(self, value):
        self.configured_route_target_list = value
    # end set_configured_route_target_list

    def get_configured_route_target_list(self):
        return self.configured_route_target_list
    # end get_configured_route_target_list

    @property
    def vxlan_network_identifier(self):
        """Get vxlan-network-identifier for logical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_vxlan_network_identifier', None)
    # end vxlan_network_identifier

    @vxlan_network_identifier.setter
    def vxlan_network_identifier(self, vxlan_network_identifier):
        """Set vxlan-network-identifier for logical-router.
        
        :param vxlan_network_identifier: xsd:string object
        
        """
        self._vxlan_network_identifier = vxlan_network_identifier
    # end vxlan_network_identifier

    def set_vxlan_network_identifier(self, value):
        self.vxlan_network_identifier = value
    # end set_vxlan_network_identifier

    def get_vxlan_network_identifier(self):
        return self.vxlan_network_identifier
    # end get_vxlan_network_identifier

    @property
    def logical_router_dhcp_relay_server(self):
        """Get logical-router-dhcp-relay-server for logical-router.
        
        :returns: IpAddressesType object
        
        """
        return getattr(self, '_logical_router_dhcp_relay_server', None)
    # end logical_router_dhcp_relay_server

    @logical_router_dhcp_relay_server.setter
    def logical_router_dhcp_relay_server(self, logical_router_dhcp_relay_server):
        """Set logical-router-dhcp-relay-server for logical-router.
        
        :param logical_router_dhcp_relay_server: IpAddressesType object
        
        """
        self._logical_router_dhcp_relay_server = logical_router_dhcp_relay_server
    # end logical_router_dhcp_relay_server

    def set_logical_router_dhcp_relay_server(self, value):
        self.logical_router_dhcp_relay_server = value
    # end set_logical_router_dhcp_relay_server

    def get_logical_router_dhcp_relay_server(self):
        return self.logical_router_dhcp_relay_server
    # end get_logical_router_dhcp_relay_server

    @property
    def logical_router_gateway_external(self):
        """Get logical-router-gateway-external for logical-router.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_logical_router_gateway_external', None)
    # end logical_router_gateway_external

    @logical_router_gateway_external.setter
    def logical_router_gateway_external(self, logical_router_gateway_external):
        """Set logical-router-gateway-external for logical-router.
        
        :param logical_router_gateway_external: xsd:boolean object
        
        """
        self._logical_router_gateway_external = logical_router_gateway_external
    # end logical_router_gateway_external

    def set_logical_router_gateway_external(self, value):
        self.logical_router_gateway_external = value
    # end set_logical_router_gateway_external

    def get_logical_router_gateway_external(self):
        return self.logical_router_gateway_external
    # end get_logical_router_gateway_external

    @property
    def logical_router_type(self):
        """Get logical-router-type for logical-router.
        
        :returns: LogicalRouterType object
        
        """
        return getattr(self, '_logical_router_type', None)
    # end logical_router_type

    @logical_router_type.setter
    def logical_router_type(self, logical_router_type):
        """Set logical-router-type for logical-router.
        
        :param logical_router_type: LogicalRouterType object
        
        """
        self._logical_router_type = logical_router_type
    # end logical_router_type

    def set_logical_router_type(self, value):
        self.logical_router_type = value
    # end set_logical_router_type

    def get_logical_router_type(self):
        return self.logical_router_type
    # end get_logical_router_type

    @property
    def id_perms(self):
        """Get id-perms for logical-router.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for logical-router.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for logical-router.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for logical-router.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for logical-router.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for logical-router.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for logical-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for logical-router.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_configured_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'configured_route_target_list')
        if hasattr(self, '_vxlan_network_identifier'):
            self._serialize_field_to_json(serialized, field_names, 'vxlan_network_identifier')
        if hasattr(self, '_logical_router_dhcp_relay_server'):
            self._serialize_field_to_json(serialized, field_names, 'logical_router_dhcp_relay_server')
        if hasattr(self, '_logical_router_gateway_external'):
            self._serialize_field_to_json(serialized, field_names, 'logical_router_gateway_external')
        if hasattr(self, '_logical_router_type'):
            self._serialize_field_to_json(serialized, field_names, 'logical_router_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'route_target_refs'):
            self._serialize_field_to_json(serialized, field_names, 'route_target_refs')
        if hasattr(self, 'route_table_refs'):
            self._serialize_field_to_json(serialized, field_names, 'route_table_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'physical_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_refs')
        if hasattr(self, 'bgpvpn_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bgpvpn_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for logical-router.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to logical-router.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for logical-router.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for logical-router.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_route_target(self, ref_obj):
        """Set route-target for logical-router.
        
        :param ref_obj: RouteTarget object
        
        """
        self.route_target_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.route_target_refs[0]['uuid'] = ref_obj.uuid

    # end set_route_target

    def add_route_target(self, ref_obj):
        """Add route-target to logical-router.
        
        :param ref_obj: RouteTarget object
        
        """
        refs = getattr(self, 'route_target_refs', [])
        if not refs:
            self.route_target_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.route_target_refs.append(ref_info)
    # end add_route_target

    def del_route_target(self, ref_obj):
        refs = self.get_route_target_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.route_target_refs.remove(ref)
                return
    # end del_route_target

    def set_route_target_list(self, ref_obj_list):
        """Set route-target list for logical-router.
        
        :param ref_obj_list: list of RouteTarget object
        
        """
        self.route_target_refs = ref_obj_list
    # end set_route_target_list

    def get_route_target_refs(self):
        """Return route-target list for logical-router.
        
        :returns: list of <RouteTarget>
        
        """
        return getattr(self, 'route_target_refs', None)
    # end get_route_target_refs

    def set_route_table(self, ref_obj):
        """Set route-table for logical-router.
        
        :param ref_obj: RouteTable object
        
        """
        self.route_table_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.route_table_refs[0]['uuid'] = ref_obj.uuid

    # end set_route_table

    def add_route_table(self, ref_obj):
        """Add route-table to logical-router.
        
        :param ref_obj: RouteTable object
        
        """
        refs = getattr(self, 'route_table_refs', [])
        if not refs:
            self.route_table_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.route_table_refs.append(ref_info)
    # end add_route_table

    def del_route_table(self, ref_obj):
        refs = self.get_route_table_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.route_table_refs.remove(ref)
                return
    # end del_route_table

    def set_route_table_list(self, ref_obj_list):
        """Set route-table list for logical-router.
        
        :param ref_obj_list: list of RouteTable object
        
        """
        self.route_table_refs = ref_obj_list
    # end set_route_table_list

    def get_route_table_refs(self):
        """Return route-table list for logical-router.
        
        :returns: list of <RouteTable>
        
        """
        return getattr(self, 'route_table_refs', None)
    # end get_route_table_refs

    def set_virtual_network(self, ref_obj, ref_data=None):
        """Set virtual-network for logical-router.
        
        :param ref_obj: VirtualNetwork object
        :param ref_data: LogicalRouterVirtualNetworkType object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj, ref_data=None):
        """Add virtual-network to logical-router.
        
        :param ref_obj: VirtualNetwork object
        :param ref_data: LogicalRouterVirtualNetworkType object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list, ref_data_list=None):
        """Set virtual-network list for logical-router.
        
        :param ref_obj_list: list of VirtualNetwork object
        :param ref_data_list: list of LogicalRouterVirtualNetworkType object
        
        """
        self.virtual_network_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for logical-router.
        
        :returns: list of tuple <VirtualNetwork, LogicalRouterVirtualNetworkType>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_service_instance(self, ref_obj):
        """Set service-instance for logical-router.
        
        :param ref_obj: ServiceInstance object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj):
        """Add service-instance to logical-router.
        
        :param ref_obj: ServiceInstance object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list):
        """Set service-instance list for logical-router.
        
        :param ref_obj_list: list of ServiceInstance object
        
        """
        self.service_instance_refs = ref_obj_list
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for logical-router.
        
        :returns: list of <ServiceInstance>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_physical_router(self, ref_obj):
        """Set physical-router for logical-router.
        
        :param ref_obj: PhysicalRouter object
        
        """
        self.physical_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_router

    def add_physical_router(self, ref_obj):
        """Add physical-router to logical-router.
        
        :param ref_obj: PhysicalRouter object
        
        """
        refs = getattr(self, 'physical_router_refs', [])
        if not refs:
            self.physical_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_router_refs.append(ref_info)
    # end add_physical_router

    def del_physical_router(self, ref_obj):
        refs = self.get_physical_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_router_refs.remove(ref)
                return
    # end del_physical_router

    def set_physical_router_list(self, ref_obj_list):
        """Set physical-router list for logical-router.
        
        :param ref_obj_list: list of PhysicalRouter object
        
        """
        self.physical_router_refs = ref_obj_list
    # end set_physical_router_list

    def get_physical_router_refs(self):
        """Return physical-router list for logical-router.
        
        :returns: list of <PhysicalRouter>
        
        """
        return getattr(self, 'physical_router_refs', None)
    # end get_physical_router_refs

    def set_bgpvpn(self, ref_obj):
        """Set bgpvpn for logical-router.
        
        :param ref_obj: Bgpvpn object
        
        """
        self.bgpvpn_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.bgpvpn_refs[0]['uuid'] = ref_obj.uuid

    # end set_bgpvpn

    def add_bgpvpn(self, ref_obj):
        """Add bgpvpn to logical-router.
        
        :param ref_obj: Bgpvpn object
        
        """
        refs = getattr(self, 'bgpvpn_refs', [])
        if not refs:
            self.bgpvpn_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bgpvpn_refs.append(ref_info)
    # end add_bgpvpn

    def del_bgpvpn(self, ref_obj):
        refs = self.get_bgpvpn_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bgpvpn_refs.remove(ref)
                return
    # end del_bgpvpn

    def set_bgpvpn_list(self, ref_obj_list):
        """Set bgpvpn list for logical-router.
        
        :param ref_obj_list: list of Bgpvpn object
        
        """
        self.bgpvpn_refs = ref_obj_list
    # end set_bgpvpn_list

    def get_bgpvpn_refs(self):
        """Return bgpvpn list for logical-router.
        
        :returns: list of <Bgpvpn>
        
        """
        return getattr(self, 'bgpvpn_refs', None)
    # end get_bgpvpn_refs

    def set_tag(self, ref_obj):
        """Set tag for logical-router.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to logical-router.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for logical-router.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for logical-router.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_port_tuple_back_refs(self):
        """Return list of all port-tuples using this logical-router"""
        return getattr(self, 'port_tuple_back_refs', None)
    # end get_port_tuple_back_refs

    def get_data_center_interconnect_back_refs(self):
        """Return list of all data-center-interconnects using this logical-router"""
        return getattr(self, 'data_center_interconnect_back_refs', None)
    # end get_data_center_interconnect_back_refs

    def dump(self):
        """Display logical-router object in compact form."""
        print('------------ logical-router ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P configured_route_target_list = ', self.get_configured_route_target_list())
        print('P vxlan_network_identifier = ', self.get_vxlan_network_identifier())
        print('P logical_router_dhcp_relay_server = ', self.get_logical_router_dhcp_relay_server())
        print('P logical_router_gateway_external = ', self.get_logical_router_gateway_external())
        print('P logical_router_type = ', self.get_logical_router_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF route_target = ', self.get_route_target_refs())
        print('REF route_table = ', self.get_route_table_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF physical_router = ', self.get_physical_router_refs())
        print('REF bgpvpn = ', self.get_bgpvpn_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK port_tuple = ', self.get_port_tuple_back_refs())
        print('BCK data_center_interconnect = ', self.get_data_center_interconnect_back_refs())
    # end dump

# end class LogicalRouter

class Domain(object):
    """
    Domain is authentication namespace, a collection of projects.

    Created By:
        User

    Child of:
        :class:`.ConfigRoot` object

    Properties:
        * domain_limits
            Type: :class:`.DomainLimitsType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Domain level quota, not currently implemented

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.Project` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Project represent one instance of application or tenant.

        * list of :class:`.Namespace` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Namespace is unique networking namespace within this domain. If namespace is not present then

              default namespace of default project is used.

        * list of :class:`.ServiceTemplate` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service template defines how a service may be deployed in the network. Service instance is

              instantiated from config in service template.

        * list of :class:`.VirtualDns` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual DNS server is DNS as service for tenants. It is inbound DNS service for virtual machines in

              this project. DNS requests by end points inside this project/IPAM are served by this DNS server

              rules.

        * list of :class:`.ApiAccessList` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              API access list is list of rules that define role based access to each API and its properties at

              domain level.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'domain'
    object_type = 'domain'

    prop_fields = set([u'domain_limits', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set(['projects', u'namespaces', 'service_templates', u'virtual_DNSs', u'api_access_lists'])

    prop_field_types = {
        'domain_limits': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Domain level quota, not currently implemented'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DomainLimitsType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['projects'] = ('project', False)
    children_field_types['namespaces'] = ('namespace', False)
    children_field_types['service_templates'] = ('service-template', False)
    children_field_types['virtual_DNSs'] = ('virtual-DNS', False)
    children_field_types['api_access_lists'] = ('api-access-list', False)

    parent_types = [u'config-root']

    prop_field_metas = {}
    prop_field_metas['domain_limits'] = 'domain-limits'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'domain-tag'

    children_field_metas = {}
    children_field_metas['projects'] = 'domain-project'
    children_field_metas['namespaces'] = 'domain-namespace'
    children_field_metas['service_templates'] = 'domain-service-template'
    children_field_metas['virtual_DNSs'] = 'domain-virtual-DNS'
    children_field_metas['api_access_lists'] = 'domain-api-access-list'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, domain_limits=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'domain'
        if not name:
            name = u'default-domain'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.fq_name = [name]

        # property fields
        if domain_limits is not None:
            self._domain_limits = domain_limits
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (domain)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of domain in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of domain as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of domain's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of domain's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def domain_limits(self):
        """Get domain-limits for domain.
        
        :returns: DomainLimitsType object
        
        """
        return getattr(self, '_domain_limits', None)
    # end domain_limits

    @domain_limits.setter
    def domain_limits(self, domain_limits):
        """Set domain-limits for domain.
        
        :param domain_limits: DomainLimitsType object
        
        """
        self._domain_limits = domain_limits
    # end domain_limits

    def set_domain_limits(self, value):
        self.domain_limits = value
    # end set_domain_limits

    def get_domain_limits(self):
        return self.domain_limits
    # end get_domain_limits

    @property
    def id_perms(self):
        """Get id-perms for domain.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for domain.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for domain.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for domain.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for domain.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for domain.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for domain.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for domain.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_domain_limits'):
            self._serialize_field_to_json(serialized, field_names, 'domain_limits')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_projects(self):
        return getattr(self, 'projects', None)
    # end get_projects

    def get_namespaces(self):
        return getattr(self, 'namespaces', None)
    # end get_namespaces

    def get_service_templates(self):
        return getattr(self, 'service_templates', None)
    # end get_service_templates

    def get_virtual_DNSs(self):
        return getattr(self, 'virtual_DNSs', None)
    # end get_virtual_DNSs

    def get_api_access_lists(self):
        return getattr(self, 'api_access_lists', None)
    # end get_api_access_lists

    def set_tag(self, ref_obj):
        """Set tag for domain.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to domain.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for domain.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for domain.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display domain object in compact form."""
        print('------------ domain ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P domain_limits = ', self.get_domain_limits())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS project = ', self.get_projects())
        print('HAS namespace = ', self.get_namespaces())
        print('HAS service_template = ', self.get_service_templates())
        print('HAS virtual_DNS = ', self.get_virtual_DNSs())
        print('HAS api_access_list = ', self.get_api_access_lists())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class Domain

class StructuredSyslogHostnameRecord(object):
    """
mapping Hostname to other entities

    Created By:
        User

    Child of:
        :class:`.StructuredSyslogConfig` object

    Properties:
        * structured_syslog_hostaddr
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              The host address

        * structured_syslog_tenant
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              The tenant name

        * structured_syslog_location
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              location details

        * structured_syslog_device
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              device id

        * structured_syslog_hostname_tags
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              tags                                   corresponding to the host

        * structured_syslog_linkmap
            Type: :class:`.StructuredSyslogLinkmap`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              overlay to                                   underlay mapping

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'structured-syslog-hostname-record'
    object_type = 'structured_syslog_hostname_record'

    prop_fields = set([u'structured_syslog_hostaddr', u'structured_syslog_tenant', u'structured_syslog_location', u'structured_syslog_device', u'structured_syslog_hostname_tags', u'structured_syslog_linkmap', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'structured_syslog_hostaddr': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['The host address'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_tenant': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['The tenant name'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_location': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['location details'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_device': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['device id'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'structured_syslog_hostname_tags': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['tags                                   corresponding to the host'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'structured_syslog_linkmap': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['overlay to                                   underlay mapping'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'StructuredSyslogLinkmap', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'structured-syslog-config']

    prop_field_metas = {}
    prop_field_metas['structured_syslog_hostaddr'] = 'structured-syslog-hostaddr'
    prop_field_metas['structured_syslog_tenant'] = 'structured-syslog-tenant'
    prop_field_metas['structured_syslog_location'] = 'structured-syslog-location'
    prop_field_metas['structured_syslog_device'] = 'structured-syslog-device'
    prop_field_metas['structured_syslog_hostname_tags'] = 'structured-syslog-hostname-tags'
    prop_field_metas['structured_syslog_linkmap'] = 'structured-syslog-linkmap'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'structured-syslog-hostname-record-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, structured_syslog_hostaddr=None, structured_syslog_tenant=None, structured_syslog_location=None, structured_syslog_device=None, structured_syslog_hostname_tags=None, structured_syslog_linkmap=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'structured-syslog-hostname-record'
        if not name:
            name = u'default-structured-syslog-hostname-record'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            raise AmbiguousParentError("Ambiguous parents [u'global-analytics-config', 'project']")


        # property fields
        if structured_syslog_hostaddr is not None:
            self._structured_syslog_hostaddr = structured_syslog_hostaddr
        if structured_syslog_tenant is not None:
            self._structured_syslog_tenant = structured_syslog_tenant
        if structured_syslog_location is not None:
            self._structured_syslog_location = structured_syslog_location
        if structured_syslog_device is not None:
            self._structured_syslog_device = structured_syslog_device
        if structured_syslog_hostname_tags is not None:
            self._structured_syslog_hostname_tags = structured_syslog_hostname_tags
        if structured_syslog_linkmap is not None:
            self._structured_syslog_linkmap = structured_syslog_linkmap
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (structured-syslog-hostname-record)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of structured-syslog-hostname-record in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of structured-syslog-hostname-record as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of structured-syslog-hostname-record's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of structured-syslog-hostname-record's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def structured_syslog_hostaddr(self):
        """Get structured-syslog-hostaddr for structured-syslog-hostname-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_hostaddr', None)
    # end structured_syslog_hostaddr

    @structured_syslog_hostaddr.setter
    def structured_syslog_hostaddr(self, structured_syslog_hostaddr):
        """Set structured-syslog-hostaddr for structured-syslog-hostname-record.
        
        :param structured_syslog_hostaddr: xsd:string object
        
        """
        self._structured_syslog_hostaddr = structured_syslog_hostaddr
    # end structured_syslog_hostaddr

    def set_structured_syslog_hostaddr(self, value):
        self.structured_syslog_hostaddr = value
    # end set_structured_syslog_hostaddr

    def get_structured_syslog_hostaddr(self):
        return self.structured_syslog_hostaddr
    # end get_structured_syslog_hostaddr

    @property
    def structured_syslog_tenant(self):
        """Get structured-syslog-tenant for structured-syslog-hostname-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_tenant', None)
    # end structured_syslog_tenant

    @structured_syslog_tenant.setter
    def structured_syslog_tenant(self, structured_syslog_tenant):
        """Set structured-syslog-tenant for structured-syslog-hostname-record.
        
        :param structured_syslog_tenant: xsd:string object
        
        """
        self._structured_syslog_tenant = structured_syslog_tenant
    # end structured_syslog_tenant

    def set_structured_syslog_tenant(self, value):
        self.structured_syslog_tenant = value
    # end set_structured_syslog_tenant

    def get_structured_syslog_tenant(self):
        return self.structured_syslog_tenant
    # end get_structured_syslog_tenant

    @property
    def structured_syslog_location(self):
        """Get structured-syslog-location for structured-syslog-hostname-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_location', None)
    # end structured_syslog_location

    @structured_syslog_location.setter
    def structured_syslog_location(self, structured_syslog_location):
        """Set structured-syslog-location for structured-syslog-hostname-record.
        
        :param structured_syslog_location: xsd:string object
        
        """
        self._structured_syslog_location = structured_syslog_location
    # end structured_syslog_location

    def set_structured_syslog_location(self, value):
        self.structured_syslog_location = value
    # end set_structured_syslog_location

    def get_structured_syslog_location(self):
        return self.structured_syslog_location
    # end get_structured_syslog_location

    @property
    def structured_syslog_device(self):
        """Get structured-syslog-device for structured-syslog-hostname-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_device', None)
    # end structured_syslog_device

    @structured_syslog_device.setter
    def structured_syslog_device(self, structured_syslog_device):
        """Set structured-syslog-device for structured-syslog-hostname-record.
        
        :param structured_syslog_device: xsd:string object
        
        """
        self._structured_syslog_device = structured_syslog_device
    # end structured_syslog_device

    def set_structured_syslog_device(self, value):
        self.structured_syslog_device = value
    # end set_structured_syslog_device

    def get_structured_syslog_device(self):
        return self.structured_syslog_device
    # end get_structured_syslog_device

    @property
    def structured_syslog_hostname_tags(self):
        """Get structured-syslog-hostname-tags for structured-syslog-hostname-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_hostname_tags', None)
    # end structured_syslog_hostname_tags

    @structured_syslog_hostname_tags.setter
    def structured_syslog_hostname_tags(self, structured_syslog_hostname_tags):
        """Set structured-syslog-hostname-tags for structured-syslog-hostname-record.
        
        :param structured_syslog_hostname_tags: xsd:string object
        
        """
        self._structured_syslog_hostname_tags = structured_syslog_hostname_tags
    # end structured_syslog_hostname_tags

    def set_structured_syslog_hostname_tags(self, value):
        self.structured_syslog_hostname_tags = value
    # end set_structured_syslog_hostname_tags

    def get_structured_syslog_hostname_tags(self):
        return self.structured_syslog_hostname_tags
    # end get_structured_syslog_hostname_tags

    @property
    def structured_syslog_linkmap(self):
        """Get structured-syslog-linkmap for structured-syslog-hostname-record.
        
        :returns: StructuredSyslogLinkmap object
        
        """
        return getattr(self, '_structured_syslog_linkmap', None)
    # end structured_syslog_linkmap

    @structured_syslog_linkmap.setter
    def structured_syslog_linkmap(self, structured_syslog_linkmap):
        """Set structured-syslog-linkmap for structured-syslog-hostname-record.
        
        :param structured_syslog_linkmap: StructuredSyslogLinkmap object
        
        """
        self._structured_syslog_linkmap = structured_syslog_linkmap
    # end structured_syslog_linkmap

    def set_structured_syslog_linkmap(self, value):
        self.structured_syslog_linkmap = value
    # end set_structured_syslog_linkmap

    def get_structured_syslog_linkmap(self):
        return self.structured_syslog_linkmap
    # end get_structured_syslog_linkmap

    @property
    def id_perms(self):
        """Get id-perms for structured-syslog-hostname-record.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for structured-syslog-hostname-record.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for structured-syslog-hostname-record.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for structured-syslog-hostname-record.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for structured-syslog-hostname-record.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for structured-syslog-hostname-record.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for structured-syslog-hostname-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for structured-syslog-hostname-record.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_structured_syslog_hostaddr'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_hostaddr')
        if hasattr(self, '_structured_syslog_tenant'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_tenant')
        if hasattr(self, '_structured_syslog_location'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_location')
        if hasattr(self, '_structured_syslog_device'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_device')
        if hasattr(self, '_structured_syslog_hostname_tags'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_hostname_tags')
        if hasattr(self, '_structured_syslog_linkmap'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_linkmap')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for structured-syslog-hostname-record.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to structured-syslog-hostname-record.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for structured-syslog-hostname-record.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for structured-syslog-hostname-record.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display structured-syslog-hostname-record object in compact form."""
        print('------------ structured-syslog-hostname-record ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P structured_syslog_hostaddr = ', self.get_structured_syslog_hostaddr())
        print('P structured_syslog_tenant = ', self.get_structured_syslog_tenant())
        print('P structured_syslog_location = ', self.get_structured_syslog_location())
        print('P structured_syslog_device = ', self.get_structured_syslog_device())
        print('P structured_syslog_hostname_tags = ', self.get_structured_syslog_hostname_tags())
        print('P structured_syslog_linkmap = ', self.get_structured_syslog_linkmap())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class StructuredSyslogHostnameRecord

class ServiceInstance(object):
    """
    Service instance represents logical instance service used in the virtual world, e.g. firewall, load
    balancer etc. It can represent one or multiple virtual machines or physical devices. Many service
    instances can share a virtual machine or physical device.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * service_instance_properties
            Type: :class:`.ServiceInstanceType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Service instance configuration parameters.

        * service_instance_bindings
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Opaque key value pair for generating config for the service instance.

        * service_instance_bgp_enabled
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable BGP routing for this service instance

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.PortTuple` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Port tuples are ordered set of interfaces that represent a service virtual machine or physical

              device , which is part of this service instance.

              Order of interfaces in port tuple is same as specified in the service template.

              example SI = [(Left, Right, Management), (L, R, M), ..., (L, R, M)].


    References to:
        * list of :class:`.ServiceTemplate` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to the service template of this service instance.

        * list of (:class:`.InstanceIp` object, :class:`.ServiceInterfaceTag` attribute)
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to ip address, which is used as nexthop pointing to (service instance, service interface).

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachine` objects
        * list of :class:`.ServiceHealthCheck` objects
        * list of :class:`.InterfaceRouteTable` objects
        * list of :class:`.RoutingPolicy` objects
        * list of :class:`.RouteAggregate` objects
        * list of :class:`.LogicalRouter` objects
        * list of :class:`.LoadbalancerPool` objects
        * list of :class:`.Loadbalancer` objects
    """

    resource_type = 'service-instance'
    object_type = 'service_instance'

    prop_fields = set([u'service_instance_properties', u'service_instance_bindings', u'service_instance_bgp_enabled', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['service_template_refs', u'instance_ip_refs', u'tag_refs'])
    backref_fields = set([u'virtual_machine_back_refs', 'service_health_check_back_refs', 'interface_route_table_back_refs', 'routing_policy_back_refs', 'route_aggregate_back_refs', 'logical_router_back_refs', u'loadbalancer_pool_back_refs', 'loadbalancer_back_refs'])
    children_fields = set([u'port_tuples'])

    prop_field_types = {
        'service_instance_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Service instance configuration parameters.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ServiceInstanceType', 'restriction_type': None, 'required': 'required'},
        'service_instance_bindings': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Opaque key value pair for generating config for the service instance.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'service_instance_bgp_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': True, 'description': ['Enable BGP routing for this service instance'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_template_refs'] = ('service-template', 'None', False, ['Reference to the service template of this service instance.'])
    ref_field_types['instance_ip_refs'] = ('instance-ip', 'ServiceInterfaceTag', False, ['Reference to ip address, which is used as nexthop pointing to (service instance, service interface).'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_back_refs'] = ('virtual-machine', 'None', True)
    backref_field_types['service_health_check_back_refs'] = ('service-health-check', 'ServiceInterfaceTag', True)
    backref_field_types['interface_route_table_back_refs'] = ('interface-route-table', 'ServiceInterfaceTag', True)
    backref_field_types['routing_policy_back_refs'] = ('routing-policy', 'RoutingPolicyServiceInstanceType', False)
    backref_field_types['route_aggregate_back_refs'] = ('route-aggregate', 'ServiceInterfaceTag', False)
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'None', False)
    backref_field_types['loadbalancer_pool_back_refs'] = ('loadbalancer-pool', 'None', False)
    backref_field_types['loadbalancer_back_refs'] = ('loadbalancer', 'None', False)

    children_field_types = {}
    children_field_types['port_tuples'] = ('port-tuple', True)

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['service_instance_properties'] = 'service-instance-properties'
    prop_field_metas['service_instance_bindings'] = 'service-instance-bindings'
    prop_field_metas['service_instance_bgp_enabled'] = 'service-instance-bgp-enabled'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_template_refs'] = 'service-instance-service-template'
    ref_field_metas['instance_ip_refs'] = 'service-instance-shared-ip'
    ref_field_metas['tag_refs'] = 'service-instance-tag'

    children_field_metas = {}
    children_field_metas['port_tuples'] = 'service-instance-port-tuple'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'service_instance_bindings', u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['service_instance_bindings'] = True
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['service_instance_bindings'] = 'key'
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, service_instance_properties=None, service_instance_bindings=None, service_instance_bgp_enabled=True, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-instance'
        if not name:
            name = u'default-service-instance'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if service_instance_properties is not None:
            self._service_instance_properties = service_instance_properties
        if service_instance_bindings is not None:
            self._service_instance_bindings = service_instance_bindings
        if service_instance_bgp_enabled is not None:
            self._service_instance_bgp_enabled = service_instance_bgp_enabled
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-instance)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-instance in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-instance as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of service-instance's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of service-instance's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def service_instance_properties(self):
        """Get service-instance-properties for service-instance.
        
        :returns: ServiceInstanceType object
        
        """
        return getattr(self, '_service_instance_properties', None)
    # end service_instance_properties

    @service_instance_properties.setter
    def service_instance_properties(self, service_instance_properties):
        """Set service-instance-properties for service-instance.
        
        :param service_instance_properties: ServiceInstanceType object
        
        """
        self._service_instance_properties = service_instance_properties
    # end service_instance_properties

    def set_service_instance_properties(self, value):
        self.service_instance_properties = value
    # end set_service_instance_properties

    def get_service_instance_properties(self):
        return self.service_instance_properties
    # end get_service_instance_properties

    @property
    def service_instance_bindings(self):
        """Get service-instance-bindings for service-instance.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_service_instance_bindings', None)
    # end service_instance_bindings

    @service_instance_bindings.setter
    def service_instance_bindings(self, service_instance_bindings):
        """Set service-instance-bindings for service-instance.
        
        :param service_instance_bindings: KeyValuePairs object
        
        """
        self._service_instance_bindings = service_instance_bindings
    # end service_instance_bindings

    def set_service_instance_bindings(self, value):
        self.service_instance_bindings = value
    # end set_service_instance_bindings

    def get_service_instance_bindings(self):
        return self.service_instance_bindings
    # end get_service_instance_bindings

    @property
    def service_instance_bgp_enabled(self):
        """Get service-instance-bgp-enabled for service-instance.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_service_instance_bgp_enabled', None)
    # end service_instance_bgp_enabled

    @service_instance_bgp_enabled.setter
    def service_instance_bgp_enabled(self, service_instance_bgp_enabled):
        """Set service-instance-bgp-enabled for service-instance.
        
        :param service_instance_bgp_enabled: xsd:boolean object
        
        """
        self._service_instance_bgp_enabled = service_instance_bgp_enabled
    # end service_instance_bgp_enabled

    def set_service_instance_bgp_enabled(self, value):
        self.service_instance_bgp_enabled = value
    # end set_service_instance_bgp_enabled

    def get_service_instance_bgp_enabled(self):
        return self.service_instance_bgp_enabled
    # end get_service_instance_bgp_enabled

    @property
    def id_perms(self):
        """Get id-perms for service-instance.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-instance.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-instance.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-instance.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-instance.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-instance.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-instance.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-instance.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_service_instance_properties'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_properties')
        if hasattr(self, '_service_instance_bindings'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_bindings')
        if hasattr(self, '_service_instance_bgp_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_bgp_enabled')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_template_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_template_refs')
        if hasattr(self, 'instance_ip_refs'):
            self._serialize_field_to_json(serialized, field_names, 'instance_ip_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_port_tuples(self):
        return getattr(self, 'port_tuples', None)
    # end get_port_tuples

    def set_service_template(self, ref_obj):
        """Set service-template for service-instance.
        
        :param ref_obj: ServiceTemplate object
        
        """
        self.service_template_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_template_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_template

    def add_service_template(self, ref_obj):
        """Add service-template to service-instance.
        
        :param ref_obj: ServiceTemplate object
        
        """
        refs = getattr(self, 'service_template_refs', [])
        if not refs:
            self.service_template_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_template_refs.append(ref_info)
    # end add_service_template

    def del_service_template(self, ref_obj):
        refs = self.get_service_template_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_template_refs.remove(ref)
                return
    # end del_service_template

    def set_service_template_list(self, ref_obj_list):
        """Set service-template list for service-instance.
        
        :param ref_obj_list: list of ServiceTemplate object
        
        """
        self.service_template_refs = ref_obj_list
    # end set_service_template_list

    def get_service_template_refs(self):
        """Return service-template list for service-instance.
        
        :returns: list of <ServiceTemplate>
        
        """
        return getattr(self, 'service_template_refs', None)
    # end get_service_template_refs

    def set_instance_ip(self, ref_obj, ref_data=None):
        """Set instance-ip for service-instance.
        
        :param ref_obj: InstanceIp object
        :param ref_data: ServiceInterfaceTag object
        
        """
        self.instance_ip_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.instance_ip_refs[0]['uuid'] = ref_obj.uuid

    # end set_instance_ip

    def add_instance_ip(self, ref_obj, ref_data=None):
        """Add instance-ip to service-instance.
        
        :param ref_obj: InstanceIp object
        :param ref_data: ServiceInterfaceTag object
        
        """
        refs = getattr(self, 'instance_ip_refs', [])
        if not refs:
            self.instance_ip_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.instance_ip_refs.append(ref_info)
    # end add_instance_ip

    def del_instance_ip(self, ref_obj):
        refs = self.get_instance_ip_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.instance_ip_refs.remove(ref)
                return
    # end del_instance_ip

    def set_instance_ip_list(self, ref_obj_list, ref_data_list=None):
        """Set instance-ip list for service-instance.
        
        :param ref_obj_list: list of InstanceIp object
        :param ref_data_list: list of ServiceInterfaceTag object
        
        """
        self.instance_ip_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_instance_ip_list

    def get_instance_ip_refs(self):
        """Return instance-ip list for service-instance.
        
        :returns: list of tuple <InstanceIp, ServiceInterfaceTag>
        
        """
        return getattr(self, 'instance_ip_refs', None)
    # end get_instance_ip_refs

    def set_tag(self, ref_obj):
        """Set tag for service-instance.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-instance.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-instance.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-instance.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_back_refs(self):
        """Return list of all virtual-machines using this service-instance"""
        return getattr(self, 'virtual_machine_back_refs', None)
    # end get_virtual_machine_back_refs

    def get_service_health_check_back_refs(self):
        """Return list of all service-health-checks using this service-instance"""
        return getattr(self, 'service_health_check_back_refs', None)
    # end get_service_health_check_back_refs

    def get_interface_route_table_back_refs(self):
        """Return list of all interface-route-tables using this service-instance"""
        return getattr(self, 'interface_route_table_back_refs', None)
    # end get_interface_route_table_back_refs

    def get_routing_policy_back_refs(self):
        """Return list of all routing-policys using this service-instance"""
        return getattr(self, 'routing_policy_back_refs', None)
    # end get_routing_policy_back_refs

    def get_route_aggregate_back_refs(self):
        """Return list of all route-aggregates using this service-instance"""
        return getattr(self, 'route_aggregate_back_refs', None)
    # end get_route_aggregate_back_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this service-instance"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def get_loadbalancer_pool_back_refs(self):
        """Return list of all loadbalancer-pools using this service-instance"""
        return getattr(self, 'loadbalancer_pool_back_refs', None)
    # end get_loadbalancer_pool_back_refs

    def get_loadbalancer_back_refs(self):
        """Return list of all loadbalancers using this service-instance"""
        return getattr(self, 'loadbalancer_back_refs', None)
    # end get_loadbalancer_back_refs

    def dump(self):
        """Display service-instance object in compact form."""
        print('------------ service-instance ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P service_instance_properties = ', self.get_service_instance_properties())
        print('P service_instance_bindings = ', self.get_service_instance_bindings())
        print('P service_instance_bgp_enabled = ', self.get_service_instance_bgp_enabled())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_template = ', self.get_service_template_refs())
        print('REF instance_ip = ', self.get_instance_ip_refs())
        print('HAS port_tuple = ', self.get_port_tuples())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine = ', self.get_virtual_machine_back_refs())
        print('BCK service_health_check = ', self.get_service_health_check_back_refs())
        print('BCK interface_route_table = ', self.get_interface_route_table_back_refs())
        print('BCK routing_policy = ', self.get_routing_policy_back_refs())
        print('BCK route_aggregate = ', self.get_route_aggregate_back_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
        print('BCK loadbalancer_pool = ', self.get_loadbalancer_pool_back_refs())
        print('BCK loadbalancer = ', self.get_loadbalancer_back_refs())
    # end dump

# end class ServiceInstance

class NodeProfile(object):
    """
Node profile contains the meta-data to profile/categorize the devices so that a list of supported capabilities/roles by the device are known to the system. For example, we can define a node profile to specify list of capabilities/roles supported by a set of QFX10K devices with certain hardware/software installed. It also contains the default config parameter values for each supported roles/capability. These are the config parameters that are not modeled in the VNC data model. They could be vendor specific config parameters that we allow user to tweak via API or some kind of auto generated UI from job template input schema. The UML diagram for node-profile can be found at https://github.com/jnpr-tjiang/cfm-data-model/blob/master/5.0.1-data-model/images/node_profile.png

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * node_profile_type
            Type: str, *one-of* [u'physical-router', u'end-system']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Node profile type to differentiate the node profile network devices from server node profiles.

        * node_profile_vendor
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Vendor name (e.g. Juniper) that this node profile can be used for.

        * node_profile_device_family
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Device family name that this node profile can be used to match.

        * node_profile_hitless_upgrade
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              if set to false, do not perform hitless image upgrade on devices using this node profile

        * node_profile_roles
            Type: :class:`.NodeProfileRolesType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              List of capable physical and routing-bridging role combinations supported by the devices that

              matches one of the hardware list defined in this node profile.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.RoleConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of role configs for those physical or routing/bridging roles defined in the node-profile.


    References to:
        * list of :class:`.JobTemplate` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This reference associates the node profile to a job-template that contains a playbook that generates

              device              specific role config and deploys it to the device. The role-config.config

              attribtue value must be in JSON              format and conform to the input_schema defined in the

              job-template.

        * list of :class:`.Hardware` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Hardware info defined in a node profile that are used to categorize the devices

        * list of :class:`.RoleDefinition` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of role definitions supported for this node profile

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Fabric` objects
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.Node` objects
    """

    resource_type = 'node-profile'
    object_type = 'node_profile'

    prop_fields = set([u'node_profile_type', u'node_profile_vendor', u'node_profile_device_family', u'node_profile_hitless_upgrade', u'node_profile_roles', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'job_template_refs', u'hardware_refs', 'role_definition_refs', u'tag_refs'])
    backref_fields = set(['fabric_back_refs', 'physical_router_back_refs', u'node_back_refs'])
    children_fields = set([u'role_configs'])

    prop_field_types = {
        'node_profile_type': {'operations': 'CRUD', 'restrictions': [u'physical-router', u'end-system'], 'default': 'physical-router', 'description': ['Node profile type to differentiate the node profile network devices from server node profiles.'], 'simple_type': u'NodeProfileType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'node_profile_vendor': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Vendor name (e.g. Juniper) that this node profile can be used for.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'node_profile_device_family': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Device family name that this node profile can be used to match.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'node_profile_hitless_upgrade': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['if set to false, do not perform hitless image upgrade on devices using this node profile'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'node_profile_roles': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of capable physical and routing-bridging role combinations supported by the devices that', 'matches one of the hardware list defined in this node profile.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'NodeProfileRolesType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['job_template_refs'] = ('job-template', 'None', False, ['This reference associates the node profile to a job-template that contains a playbook that generates', 'device              specific role config and deploys it to the device. The role-config.config', 'attribtue value must be in JSON              format and conform to the input_schema defined in the', 'job-template.'])
    ref_field_types['hardware_refs'] = ('hardware', 'None', False, ['Hardware info defined in a node profile that are used to categorize the devices'])
    ref_field_types['role_definition_refs'] = ('role-definition', 'None', False, ['list of role definitions supported for this node profile'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['fabric_back_refs'] = ('fabric', 'SerialNumListType', False)
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['node_back_refs'] = ('node', 'None', False)

    children_field_types = {}
    children_field_types['role_configs'] = ('role-config', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['node_profile_type'] = 'node-profile-type'
    prop_field_metas['node_profile_vendor'] = 'node-profile-vendor'
    prop_field_metas['node_profile_device_family'] = 'node-profile-device-family'
    prop_field_metas['node_profile_hitless_upgrade'] = 'node-profile-hitless-upgrade'
    prop_field_metas['node_profile_roles'] = 'node-profile-roles'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['job_template_refs'] = 'node-profile-job-template'
    ref_field_metas['hardware_refs'] = 'node-profile-hardware'
    ref_field_metas['role_definition_refs'] = 'node-profile-role-definition'
    ref_field_metas['tag_refs'] = 'node-profile-tag'

    children_field_metas = {}
    children_field_metas['role_configs'] = 'node-profile-role-config'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, node_profile_type='physical-router', node_profile_vendor=None, node_profile_device_family=None, node_profile_hitless_upgrade=None, node_profile_roles=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'node-profile'
        if not name:
            name = u'default-node-profile'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if node_profile_type is not None:
            self._node_profile_type = node_profile_type
        if node_profile_vendor is not None:
            self._node_profile_vendor = node_profile_vendor
        if node_profile_device_family is not None:
            self._node_profile_device_family = node_profile_device_family
        if node_profile_hitless_upgrade is not None:
            self._node_profile_hitless_upgrade = node_profile_hitless_upgrade
        if node_profile_roles is not None:
            self._node_profile_roles = node_profile_roles
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (node-profile)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of node-profile in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of node-profile as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of node-profile's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of node-profile's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def node_profile_type(self):
        """Get node-profile-type for node-profile.
        
        :returns: NodeProfileType object
        
        """
        return getattr(self, '_node_profile_type', None)
    # end node_profile_type

    @node_profile_type.setter
    def node_profile_type(self, node_profile_type):
        """Set node-profile-type for node-profile.
        
        :param node_profile_type: NodeProfileType object
        
        """
        self._node_profile_type = node_profile_type
    # end node_profile_type

    def set_node_profile_type(self, value):
        self.node_profile_type = value
    # end set_node_profile_type

    def get_node_profile_type(self):
        return self.node_profile_type
    # end get_node_profile_type

    @property
    def node_profile_vendor(self):
        """Get node-profile-vendor for node-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_node_profile_vendor', None)
    # end node_profile_vendor

    @node_profile_vendor.setter
    def node_profile_vendor(self, node_profile_vendor):
        """Set node-profile-vendor for node-profile.
        
        :param node_profile_vendor: xsd:string object
        
        """
        self._node_profile_vendor = node_profile_vendor
    # end node_profile_vendor

    def set_node_profile_vendor(self, value):
        self.node_profile_vendor = value
    # end set_node_profile_vendor

    def get_node_profile_vendor(self):
        return self.node_profile_vendor
    # end get_node_profile_vendor

    @property
    def node_profile_device_family(self):
        """Get node-profile-device-family for node-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_node_profile_device_family', None)
    # end node_profile_device_family

    @node_profile_device_family.setter
    def node_profile_device_family(self, node_profile_device_family):
        """Set node-profile-device-family for node-profile.
        
        :param node_profile_device_family: xsd:string object
        
        """
        self._node_profile_device_family = node_profile_device_family
    # end node_profile_device_family

    def set_node_profile_device_family(self, value):
        self.node_profile_device_family = value
    # end set_node_profile_device_family

    def get_node_profile_device_family(self):
        return self.node_profile_device_family
    # end get_node_profile_device_family

    @property
    def node_profile_hitless_upgrade(self):
        """Get node-profile-hitless-upgrade for node-profile.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_node_profile_hitless_upgrade', None)
    # end node_profile_hitless_upgrade

    @node_profile_hitless_upgrade.setter
    def node_profile_hitless_upgrade(self, node_profile_hitless_upgrade):
        """Set node-profile-hitless-upgrade for node-profile.
        
        :param node_profile_hitless_upgrade: xsd:boolean object
        
        """
        self._node_profile_hitless_upgrade = node_profile_hitless_upgrade
    # end node_profile_hitless_upgrade

    def set_node_profile_hitless_upgrade(self, value):
        self.node_profile_hitless_upgrade = value
    # end set_node_profile_hitless_upgrade

    def get_node_profile_hitless_upgrade(self):
        return self.node_profile_hitless_upgrade
    # end get_node_profile_hitless_upgrade

    @property
    def node_profile_roles(self):
        """Get node-profile-roles for node-profile.
        
        :returns: NodeProfileRolesType object
        
        """
        return getattr(self, '_node_profile_roles', None)
    # end node_profile_roles

    @node_profile_roles.setter
    def node_profile_roles(self, node_profile_roles):
        """Set node-profile-roles for node-profile.
        
        :param node_profile_roles: NodeProfileRolesType object
        
        """
        self._node_profile_roles = node_profile_roles
    # end node_profile_roles

    def set_node_profile_roles(self, value):
        self.node_profile_roles = value
    # end set_node_profile_roles

    def get_node_profile_roles(self):
        return self.node_profile_roles
    # end get_node_profile_roles

    @property
    def id_perms(self):
        """Get id-perms for node-profile.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for node-profile.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for node-profile.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for node-profile.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for node-profile.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for node-profile.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for node-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for node-profile.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_node_profile_type'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_type')
        if hasattr(self, '_node_profile_vendor'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_vendor')
        if hasattr(self, '_node_profile_device_family'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_device_family')
        if hasattr(self, '_node_profile_hitless_upgrade'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_hitless_upgrade')
        if hasattr(self, '_node_profile_roles'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_roles')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'job_template_refs'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_refs')
        if hasattr(self, 'hardware_refs'):
            self._serialize_field_to_json(serialized, field_names, 'hardware_refs')
        if hasattr(self, 'role_definition_refs'):
            self._serialize_field_to_json(serialized, field_names, 'role_definition_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_role_configs(self):
        return getattr(self, 'role_configs', None)
    # end get_role_configs

    def set_job_template(self, ref_obj):
        """Set job-template for node-profile.
        
        :param ref_obj: JobTemplate object
        
        """
        self.job_template_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.job_template_refs[0]['uuid'] = ref_obj.uuid

    # end set_job_template

    def add_job_template(self, ref_obj):
        """Add job-template to node-profile.
        
        :param ref_obj: JobTemplate object
        
        """
        refs = getattr(self, 'job_template_refs', [])
        if not refs:
            self.job_template_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.job_template_refs.append(ref_info)
    # end add_job_template

    def del_job_template(self, ref_obj):
        refs = self.get_job_template_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.job_template_refs.remove(ref)
                return
    # end del_job_template

    def set_job_template_list(self, ref_obj_list):
        """Set job-template list for node-profile.
        
        :param ref_obj_list: list of JobTemplate object
        
        """
        self.job_template_refs = ref_obj_list
    # end set_job_template_list

    def get_job_template_refs(self):
        """Return job-template list for node-profile.
        
        :returns: list of <JobTemplate>
        
        """
        return getattr(self, 'job_template_refs', None)
    # end get_job_template_refs

    def set_hardware(self, ref_obj):
        """Set hardware for node-profile.
        
        :param ref_obj: Hardware object
        
        """
        self.hardware_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.hardware_refs[0]['uuid'] = ref_obj.uuid

    # end set_hardware

    def add_hardware(self, ref_obj):
        """Add hardware to node-profile.
        
        :param ref_obj: Hardware object
        
        """
        refs = getattr(self, 'hardware_refs', [])
        if not refs:
            self.hardware_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.hardware_refs.append(ref_info)
    # end add_hardware

    def del_hardware(self, ref_obj):
        refs = self.get_hardware_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.hardware_refs.remove(ref)
                return
    # end del_hardware

    def set_hardware_list(self, ref_obj_list):
        """Set hardware list for node-profile.
        
        :param ref_obj_list: list of Hardware object
        
        """
        self.hardware_refs = ref_obj_list
    # end set_hardware_list

    def get_hardware_refs(self):
        """Return hardware list for node-profile.
        
        :returns: list of <Hardware>
        
        """
        return getattr(self, 'hardware_refs', None)
    # end get_hardware_refs

    def set_role_definition(self, ref_obj):
        """Set role-definition for node-profile.
        
        :param ref_obj: RoleDefinition object
        
        """
        self.role_definition_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.role_definition_refs[0]['uuid'] = ref_obj.uuid

    # end set_role_definition

    def add_role_definition(self, ref_obj):
        """Add role-definition to node-profile.
        
        :param ref_obj: RoleDefinition object
        
        """
        refs = getattr(self, 'role_definition_refs', [])
        if not refs:
            self.role_definition_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.role_definition_refs.append(ref_info)
    # end add_role_definition

    def del_role_definition(self, ref_obj):
        refs = self.get_role_definition_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.role_definition_refs.remove(ref)
                return
    # end del_role_definition

    def set_role_definition_list(self, ref_obj_list):
        """Set role-definition list for node-profile.
        
        :param ref_obj_list: list of RoleDefinition object
        
        """
        self.role_definition_refs = ref_obj_list
    # end set_role_definition_list

    def get_role_definition_refs(self):
        """Return role-definition list for node-profile.
        
        :returns: list of <RoleDefinition>
        
        """
        return getattr(self, 'role_definition_refs', None)
    # end get_role_definition_refs

    def set_tag(self, ref_obj):
        """Set tag for node-profile.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to node-profile.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for node-profile.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for node-profile.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_fabric_back_refs(self):
        """Return list of all fabrics using this node-profile"""
        return getattr(self, 'fabric_back_refs', None)
    # end get_fabric_back_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this node-profile"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_node_back_refs(self):
        """Return list of all nodes using this node-profile"""
        return getattr(self, 'node_back_refs', None)
    # end get_node_back_refs

    def dump(self):
        """Display node-profile object in compact form."""
        print('------------ node-profile ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P node_profile_type = ', self.get_node_profile_type())
        print('P node_profile_vendor = ', self.get_node_profile_vendor())
        print('P node_profile_device_family = ', self.get_node_profile_device_family())
        print('P node_profile_hitless_upgrade = ', self.get_node_profile_hitless_upgrade())
        print('P node_profile_roles = ', self.get_node_profile_roles())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF job_template = ', self.get_job_template_refs())
        print('REF hardware = ', self.get_hardware_refs())
        print('REF role_definition = ', self.get_role_definition_refs())
        print('HAS role_config = ', self.get_role_configs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK fabric = ', self.get_fabric_back_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK node = ', self.get_node_back_refs())
    # end dump

# end class NodeProfile

class BridgeDomain(object):
    """
    bridge-domains configured in a virtual network

    Created By:
        User

    Child of:
        :class:`.VirtualNetwork` object

    Properties:
        * mac_learning_enabled
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable MAC learning on the network

        * mac_limit_control
            Type: :class:`.MACLimitControlType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC limit control on the network

        * mac_move_control
            Type: :class:`.MACMoveLimitControlType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC move control on the network

        * mac_aging_time
            Type: int, *within* [0, 86400]

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC aging time on the network

        * isid
            Type: int, *within* [1, 16777215]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              i-sid value

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
    """

    resource_type = 'bridge-domain'
    object_type = 'bridge_domain'

    prop_fields = set([u'mac_learning_enabled', u'mac_limit_control', u'mac_move_control', u'mac_aging_time', u'isid', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'mac_learning_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Enable MAC learning on the network'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'mac_limit_control': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC limit control on the network'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MACLimitControlType', 'restriction_type': None, 'required': 'optional'},
        'mac_move_control': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC move control on the network'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MACMoveLimitControlType', 'restriction_type': None, 'required': 'optional'},
        'mac_aging_time': {'operations': 'CRUD', 'restrictions': [0, 86400], 'default': 300, 'description': ['MAC aging time on the network'], 'simple_type': u'MACAgingTime', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'optional'},
        'isid': {'operations': 'CRUD', 'restrictions': [1, 16777215], 'default': None, 'description': ['i-sid value'], 'simple_type': u'IsidType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'BridgeDomainMembershipType', False)

    children_field_types = {}

    parent_types = ['virtual-network']

    prop_field_metas = {}
    prop_field_metas['mac_learning_enabled'] = 'mac-learning-enabled'
    prop_field_metas['mac_limit_control'] = 'mac-limit-control'
    prop_field_metas['mac_move_control'] = 'mac-move-control'
    prop_field_metas['mac_aging_time'] = 'mac-aging-time'
    prop_field_metas['isid'] = 'isid'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'bridge-domain-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, mac_learning_enabled=False, mac_limit_control=None, mac_move_control=None, mac_aging_time=300, isid=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'bridge-domain'
        if not name:
            name = u'default-bridge-domain'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'virtual-network'
            self.fq_name = [u'default-domain', 'default-project', 'default-virtual-network']
            self.fq_name.append(name)


        # property fields
        if mac_learning_enabled is not None:
            self._mac_learning_enabled = mac_learning_enabled
        if mac_limit_control is not None:
            self._mac_limit_control = mac_limit_control
        if mac_move_control is not None:
            self._mac_move_control = mac_move_control
        if mac_aging_time is not None:
            self._mac_aging_time = mac_aging_time
        if isid is not None:
            self._isid = isid
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (bridge-domain)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of bridge-domain in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of bridge-domain as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of bridge-domain's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of bridge-domain's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def mac_learning_enabled(self):
        """Get mac-learning-enabled for bridge-domain.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_mac_learning_enabled', None)
    # end mac_learning_enabled

    @mac_learning_enabled.setter
    def mac_learning_enabled(self, mac_learning_enabled):
        """Set mac-learning-enabled for bridge-domain.
        
        :param mac_learning_enabled: xsd:boolean object
        
        """
        self._mac_learning_enabled = mac_learning_enabled
    # end mac_learning_enabled

    def set_mac_learning_enabled(self, value):
        self.mac_learning_enabled = value
    # end set_mac_learning_enabled

    def get_mac_learning_enabled(self):
        return self.mac_learning_enabled
    # end get_mac_learning_enabled

    @property
    def mac_limit_control(self):
        """Get mac-limit-control for bridge-domain.
        
        :returns: MACLimitControlType object
        
        """
        return getattr(self, '_mac_limit_control', None)
    # end mac_limit_control

    @mac_limit_control.setter
    def mac_limit_control(self, mac_limit_control):
        """Set mac-limit-control for bridge-domain.
        
        :param mac_limit_control: MACLimitControlType object
        
        """
        self._mac_limit_control = mac_limit_control
    # end mac_limit_control

    def set_mac_limit_control(self, value):
        self.mac_limit_control = value
    # end set_mac_limit_control

    def get_mac_limit_control(self):
        return self.mac_limit_control
    # end get_mac_limit_control

    @property
    def mac_move_control(self):
        """Get mac-move-control for bridge-domain.
        
        :returns: MACMoveLimitControlType object
        
        """
        return getattr(self, '_mac_move_control', None)
    # end mac_move_control

    @mac_move_control.setter
    def mac_move_control(self, mac_move_control):
        """Set mac-move-control for bridge-domain.
        
        :param mac_move_control: MACMoveLimitControlType object
        
        """
        self._mac_move_control = mac_move_control
    # end mac_move_control

    def set_mac_move_control(self, value):
        self.mac_move_control = value
    # end set_mac_move_control

    def get_mac_move_control(self):
        return self.mac_move_control
    # end get_mac_move_control

    @property
    def mac_aging_time(self):
        """Get mac-aging-time for bridge-domain.
        
        :returns: MACAgingTime object
        
        """
        return getattr(self, '_mac_aging_time', None)
    # end mac_aging_time

    @mac_aging_time.setter
    def mac_aging_time(self, mac_aging_time):
        """Set mac-aging-time for bridge-domain.
        
        :param mac_aging_time: MACAgingTime object
        
        """
        self._mac_aging_time = mac_aging_time
    # end mac_aging_time

    def set_mac_aging_time(self, value):
        self.mac_aging_time = value
    # end set_mac_aging_time

    def get_mac_aging_time(self):
        return self.mac_aging_time
    # end get_mac_aging_time

    @property
    def isid(self):
        """Get isid for bridge-domain.
        
        :returns: IsidType object
        
        """
        return getattr(self, '_isid', None)
    # end isid

    @isid.setter
    def isid(self, isid):
        """Set isid for bridge-domain.
        
        :param isid: IsidType object
        
        """
        self._isid = isid
    # end isid

    def set_isid(self, value):
        self.isid = value
    # end set_isid

    def get_isid(self):
        return self.isid
    # end get_isid

    @property
    def id_perms(self):
        """Get id-perms for bridge-domain.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for bridge-domain.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for bridge-domain.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for bridge-domain.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for bridge-domain.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for bridge-domain.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for bridge-domain.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for bridge-domain.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_mac_learning_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'mac_learning_enabled')
        if hasattr(self, '_mac_limit_control'):
            self._serialize_field_to_json(serialized, field_names, 'mac_limit_control')
        if hasattr(self, '_mac_move_control'):
            self._serialize_field_to_json(serialized, field_names, 'mac_move_control')
        if hasattr(self, '_mac_aging_time'):
            self._serialize_field_to_json(serialized, field_names, 'mac_aging_time')
        if hasattr(self, '_isid'):
            self._serialize_field_to_json(serialized, field_names, 'isid')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for bridge-domain.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to bridge-domain.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for bridge-domain.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for bridge-domain.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this bridge-domain"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def dump(self):
        """Display bridge-domain object in compact form."""
        print('------------ bridge-domain ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P mac_learning_enabled = ', self.get_mac_learning_enabled())
        print('P mac_limit_control = ', self.get_mac_limit_control())
        print('P mac_move_control = ', self.get_mac_move_control())
        print('P mac_aging_time = ', self.get_mac_aging_time())
        print('P isid = ', self.get_isid())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
    # end dump

# end class BridgeDomain

class AliasIp(object):
    """
    alias ip is a ip that can be assigned to virtual-machine-interface(VMI), By doing so VMI can now be
    part of the alias ip network. packets originating with alias-ip as the source-ip belongs to alias-
    ip-network

    Created By:
        User

    Child of:
        :class:`.AliasIpPool` object

    Properties:
        * alias_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CR

            Description:

              Alias ip address.

        * alias_ip_address_family
            Type: str, *one-of* [u'v4', u'v6']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Ip address family of the alias ip, IpV4 or IpV6

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Project` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to project from which this alias ip was allocated.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to virtual machine interface to which this alias ip is attached.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'alias-ip'
    object_type = 'alias_ip'

    prop_fields = set([u'alias_ip_address', u'alias_ip_address_family', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['project_refs', 'virtual_machine_interface_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'alias_ip_address': {'operations': 'CR', 'restrictions': [], 'default': None, 'description': ['Alias ip address.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'alias_ip_address_family': {'operations': 'CRUD', 'restrictions': [u'v4', u'v6'], 'default': None, 'description': ['Ip address family of the alias ip, IpV4 or IpV6'], 'simple_type': u'IpAddressFamilyType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['project_refs'] = ('project', 'None', False, ['Reference to project from which this alias ip was allocated.'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to virtual machine interface to which this alias ip is attached.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'alias-ip-pool']

    prop_field_metas = {}
    prop_field_metas['alias_ip_address'] = 'alias-ip-address'
    prop_field_metas['alias_ip_address_family'] = 'alias-ip-address-family'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['project_refs'] = 'alias-ip-project'
    ref_field_metas['virtual_machine_interface_refs'] = 'alias-ip-virtual-machine-interface'
    ref_field_metas['tag_refs'] = 'alias-ip-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, alias_ip_address=None, alias_ip_address_family=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'alias-ip'
        if not name:
            name = u'default-alias-ip'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'alias-ip-pool'
            self.fq_name = [u'default-domain', 'default-project', 'default-virtual-network', u'default-alias-ip-pool']
            self.fq_name.append(name)


        # property fields
        if alias_ip_address is not None:
            self._alias_ip_address = alias_ip_address
        if alias_ip_address_family is not None:
            self._alias_ip_address_family = alias_ip_address_family
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (alias-ip)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of alias-ip in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of alias-ip as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of alias-ip's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of alias-ip's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def alias_ip_address(self):
        """Get alias-ip-address for alias-ip.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_alias_ip_address', None)
    # end alias_ip_address

    @alias_ip_address.setter
    def alias_ip_address(self, alias_ip_address):
        """Set alias-ip-address for alias-ip.
        
        :param alias_ip_address: IpAddressType object
        
        """
        self._alias_ip_address = alias_ip_address
    # end alias_ip_address

    def set_alias_ip_address(self, value):
        self.alias_ip_address = value
    # end set_alias_ip_address

    def get_alias_ip_address(self):
        return self.alias_ip_address
    # end get_alias_ip_address

    @property
    def alias_ip_address_family(self):
        """Get alias-ip-address-family for alias-ip.
        
        :returns: IpAddressFamilyType object
        
        """
        return getattr(self, '_alias_ip_address_family', None)
    # end alias_ip_address_family

    @alias_ip_address_family.setter
    def alias_ip_address_family(self, alias_ip_address_family):
        """Set alias-ip-address-family for alias-ip.
        
        :param alias_ip_address_family: IpAddressFamilyType object
        
        """
        self._alias_ip_address_family = alias_ip_address_family
    # end alias_ip_address_family

    def set_alias_ip_address_family(self, value):
        self.alias_ip_address_family = value
    # end set_alias_ip_address_family

    def get_alias_ip_address_family(self):
        return self.alias_ip_address_family
    # end get_alias_ip_address_family

    @property
    def id_perms(self):
        """Get id-perms for alias-ip.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for alias-ip.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for alias-ip.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for alias-ip.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for alias-ip.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for alias-ip.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for alias-ip.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for alias-ip.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_alias_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'alias_ip_address')
        if hasattr(self, '_alias_ip_address_family'):
            self._serialize_field_to_json(serialized, field_names, 'alias_ip_address_family')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'project_refs'):
            self._serialize_field_to_json(serialized, field_names, 'project_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_project(self, ref_obj):
        """Set project for alias-ip.
        
        :param ref_obj: Project object
        
        """
        self.project_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.project_refs[0]['uuid'] = ref_obj.uuid

    # end set_project

    def add_project(self, ref_obj):
        """Add project to alias-ip.
        
        :param ref_obj: Project object
        
        """
        refs = getattr(self, 'project_refs', [])
        if not refs:
            self.project_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.project_refs.append(ref_info)
    # end add_project

    def del_project(self, ref_obj):
        refs = self.get_project_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.project_refs.remove(ref)
                return
    # end del_project

    def set_project_list(self, ref_obj_list):
        """Set project list for alias-ip.
        
        :param ref_obj_list: list of Project object
        
        """
        self.project_refs = ref_obj_list
    # end set_project_list

    def get_project_refs(self):
        """Return project list for alias-ip.
        
        :returns: list of <Project>
        
        """
        return getattr(self, 'project_refs', None)
    # end get_project_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for alias-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to alias-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for alias-ip.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for alias-ip.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for alias-ip.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to alias-ip.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for alias-ip.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for alias-ip.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display alias-ip object in compact form."""
        print('------------ alias-ip ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P alias_ip_address = ', self.get_alias_ip_address())
        print('P alias_ip_address_family = ', self.get_alias_ip_address_family())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF project = ', self.get_project_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class AliasIp

class WebuiNode(object):
    """
    WebUI node is object representing a logical node in system which hosts the Contrail UI.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * webui_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Ip address of the webui node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'webui-node'
    object_type = 'webui_node'

    prop_fields = set([u'webui_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'webui_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the webui node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['webui_node_ip_address'] = 'webui-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'webui-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, webui_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'webui-node'
        if not name:
            name = u'default-webui-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if webui_node_ip_address is not None:
            self._webui_node_ip_address = webui_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (webui-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of webui-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of webui-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of webui-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of webui-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def webui_node_ip_address(self):
        """Get webui-node-ip-address for webui-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_webui_node_ip_address', None)
    # end webui_node_ip_address

    @webui_node_ip_address.setter
    def webui_node_ip_address(self, webui_node_ip_address):
        """Set webui-node-ip-address for webui-node.
        
        :param webui_node_ip_address: IpAddressType object
        
        """
        self._webui_node_ip_address = webui_node_ip_address
    # end webui_node_ip_address

    def set_webui_node_ip_address(self, value):
        self.webui_node_ip_address = value
    # end set_webui_node_ip_address

    def get_webui_node_ip_address(self):
        return self.webui_node_ip_address
    # end get_webui_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for webui-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for webui-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for webui-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for webui-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for webui-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for webui-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for webui-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for webui-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_webui_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'webui_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for webui-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to webui-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for webui-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for webui-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display webui-node object in compact form."""
        print('------------ webui-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P webui_node_ip_address = ', self.get_webui_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class WebuiNode

class Port(object):
    """
    Parent of this port.

    Created By:
        User

    Child of:
        :class:`.Node` object

    Properties:
        * port_group_uuid
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              UUID of the port group in which this port belongs

        * bms_port_info
            Type: :class:`.BaremetalPortInfo`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Details of the baremetal server port

        * esxi_port_info
            Type: :class:`.ESXIProperties`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Information related to Port-ESXi/vCenter

        * label
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Label of the interface representing the use of the interface.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PortGroup` objects
        * list of :class:`.PhysicalInterface` objects
    """

    resource_type = 'port'
    object_type = 'port'

    prop_fields = set([u'port_group_uuid', u'bms_port_info', u'esxi_port_info', u'label', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'port_group_back_refs', 'physical_interface_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'port_group_uuid': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['UUID of the port group in which this port belongs'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'bms_port_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Details of the baremetal server port'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'BaremetalPortInfo', 'restriction_type': None, 'required': 'optional'},
        'esxi_port_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Information related to Port-ESXi/vCenter'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ESXIProperties', 'restriction_type': None, 'required': 'optional'},
        'label': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Label of the interface representing the use of the interface.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['port_group_back_refs'] = ('port-group', 'None', False)
    backref_field_types['physical_interface_back_refs'] = ('physical-interface', 'None', False)

    children_field_types = {}

    parent_types = [u'node']

    prop_field_metas = {}
    prop_field_metas['port_group_uuid'] = 'port-group-uuid'
    prop_field_metas['bms_port_info'] = 'bms-port-info'
    prop_field_metas['esxi_port_info'] = 'esxi-port-info'
    prop_field_metas['label'] = 'label'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'port-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, port_group_uuid=None, bms_port_info=None, esxi_port_info=None, label=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'port'
        if not name:
            name = u'default-port'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'node'
            self.fq_name = ['default-global-system-config', u'default-node']
            self.fq_name.append(name)


        # property fields
        if port_group_uuid is not None:
            self._port_group_uuid = port_group_uuid
        if bms_port_info is not None:
            self._bms_port_info = bms_port_info
        if esxi_port_info is not None:
            self._esxi_port_info = esxi_port_info
        if label is not None:
            self._label = label
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (port)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of port in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of port as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of port's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of port's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def port_group_uuid(self):
        """Get port-group-uuid for port.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_port_group_uuid', None)
    # end port_group_uuid

    @port_group_uuid.setter
    def port_group_uuid(self, port_group_uuid):
        """Set port-group-uuid for port.
        
        :param port_group_uuid: xsd:string object
        
        """
        self._port_group_uuid = port_group_uuid
    # end port_group_uuid

    def set_port_group_uuid(self, value):
        self.port_group_uuid = value
    # end set_port_group_uuid

    def get_port_group_uuid(self):
        return self.port_group_uuid
    # end get_port_group_uuid

    @property
    def bms_port_info(self):
        """Get bms-port-info for port.
        
        :returns: BaremetalPortInfo object
        
        """
        return getattr(self, '_bms_port_info', None)
    # end bms_port_info

    @bms_port_info.setter
    def bms_port_info(self, bms_port_info):
        """Set bms-port-info for port.
        
        :param bms_port_info: BaremetalPortInfo object
        
        """
        self._bms_port_info = bms_port_info
    # end bms_port_info

    def set_bms_port_info(self, value):
        self.bms_port_info = value
    # end set_bms_port_info

    def get_bms_port_info(self):
        return self.bms_port_info
    # end get_bms_port_info

    @property
    def esxi_port_info(self):
        """Get esxi-port-info for port.
        
        :returns: ESXIProperties object
        
        """
        return getattr(self, '_esxi_port_info', None)
    # end esxi_port_info

    @esxi_port_info.setter
    def esxi_port_info(self, esxi_port_info):
        """Set esxi-port-info for port.
        
        :param esxi_port_info: ESXIProperties object
        
        """
        self._esxi_port_info = esxi_port_info
    # end esxi_port_info

    def set_esxi_port_info(self, value):
        self.esxi_port_info = value
    # end set_esxi_port_info

    def get_esxi_port_info(self):
        return self.esxi_port_info
    # end get_esxi_port_info

    @property
    def label(self):
        """Get label for port.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_label', None)
    # end label

    @label.setter
    def label(self, label):
        """Set label for port.
        
        :param label: xsd:string object
        
        """
        self._label = label
    # end label

    def set_label(self, value):
        self.label = value
    # end set_label

    def get_label(self):
        return self.label
    # end get_label

    @property
    def id_perms(self):
        """Get id-perms for port.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for port.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for port.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for port.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for port.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for port.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for port.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for port.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_port_group_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'port_group_uuid')
        if hasattr(self, '_bms_port_info'):
            self._serialize_field_to_json(serialized, field_names, 'bms_port_info')
        if hasattr(self, '_esxi_port_info'):
            self._serialize_field_to_json(serialized, field_names, 'esxi_port_info')
        if hasattr(self, '_label'):
            self._serialize_field_to_json(serialized, field_names, 'label')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for port.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to port.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for port.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for port.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_port_group_back_refs(self):
        """Return list of all port-groups using this port"""
        return getattr(self, 'port_group_back_refs', None)
    # end get_port_group_back_refs

    def get_physical_interface_back_refs(self):
        """Return list of all physical-interfaces using this port"""
        return getattr(self, 'physical_interface_back_refs', None)
    # end get_physical_interface_back_refs

    def dump(self):
        """Display port object in compact form."""
        print('------------ port ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P port_group_uuid = ', self.get_port_group_uuid())
        print('P bms_port_info = ', self.get_bms_port_info())
        print('P esxi_port_info = ', self.get_esxi_port_info())
        print('P label = ', self.get_label())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK port_group = ', self.get_port_group_back_refs())
        print('BCK physical_interface = ', self.get_physical_interface_back_refs())
    # end dump

# end class Port

class BgpAsAService(object):
    """
    BGP as service object represents BGP peer in the virtual network that can participate in dynamic
    routing with implicit default gateway of the virtual network.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * autonomous_system
            Type: int, *within* [1, 4294967295]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Autonomous System number for the cluster which is 16 bits by default, but can be changed to 32 bits

              by setting enable-4byte-as.

        * bgpaas_shared
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              True if only one BGP router needs to be created. Otherwise, one BGP router is created for each VMI

        * bgpaas_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Ip address of the BGP peer.

        * bgpaas_session_attributes
            Type: :class:`.BgpSessionAttributes`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              BGP peering session attributes.

        * bgpaas_ipv4_mapped_ipv6_nexthop
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              True when client bgp implementation expects to receive a ipv4-mapped ipv6 address (as opposed to

              regular ipv6 address) as the bgp nexthop for ipv6 routes.

        * bgpaas_suppress_route_advertisement
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              True when server should not advertise any routes to the client i.e. the client has static routes

              (typically a default) configured.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.ControlNodeZone` object, :class:`.BGPaaSControlNodeZoneAttributes` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to control-node-zone for bgp-peer selection

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to VMI on which BGPaaS BGP peering will happen.

        * list of :class:`.ServiceHealthCheck` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to health check object attached to BGPaaS object, used to enable BFD health check over

              active BGPaaS VMI.

        * list of :class:`.BgpRouter` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to internal BGP peer object automatically generated by the system.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'bgp-as-a-service'
    object_type = 'bgp_as_a_service'

    prop_fields = set([u'autonomous_system', u'bgpaas_shared', u'bgpaas_ip_address', u'bgpaas_session_attributes', u'bgpaas_ipv4_mapped_ipv6_nexthop', u'bgpaas_suppress_route_advertisement', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['control_node_zone_refs', 'virtual_machine_interface_refs', 'service_health_check_refs', 'bgp_router_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'autonomous_system': {'operations': 'CRUD', 'restrictions': [1, 4294967295], 'default': None, 'description': ['Autonomous System number for the cluster which is 16 bits by default, but can be changed to 32 bits', 'by setting enable-4byte-as.'], 'simple_type': u'AutonomousSystemType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'bgpaas_shared': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['True if only one BGP router needs to be created. Otherwise, one BGP router is created for each VMI'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'bgpaas_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the BGP peer.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'bgpaas_session_attributes': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['BGP peering session attributes.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'BgpSessionAttributes', 'restriction_type': None, 'required': 'required'},
        'bgpaas_ipv4_mapped_ipv6_nexthop': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['True when client bgp implementation expects to receive a ipv4-mapped ipv6 address (as opposed to', 'regular ipv6 address) as the bgp nexthop for ipv6 routes.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'bgpaas_suppress_route_advertisement': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['True when server should not advertise any routes to the client i.e. the client has static routes', '(typically a default) configured.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['control_node_zone_refs'] = ('control-node-zone', 'BGPaaSControlNodeZoneAttributes', False, ['Reference to control-node-zone for bgp-peer selection'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to VMI on which BGPaaS BGP peering will happen.'])
    ref_field_types['service_health_check_refs'] = ('service-health-check', 'None', False, ['Reference to health check object attached to BGPaaS object, used to enable BFD health check over', 'active BGPaaS VMI.'])
    ref_field_types['bgp_router_refs'] = ('bgp-router', 'None', False, ['Reference to internal BGP peer object automatically generated by the system.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['autonomous_system'] = 'autonomous-system'
    prop_field_metas['bgpaas_shared'] = 'bgpaas-shared'
    prop_field_metas['bgpaas_ip_address'] = 'bgpaas-ip-address'
    prop_field_metas['bgpaas_session_attributes'] = 'bgpaas-session-attributes'
    prop_field_metas['bgpaas_ipv4_mapped_ipv6_nexthop'] = 'bgpaas-ipv4-mapped-ipv6-nexthop'
    prop_field_metas['bgpaas_suppress_route_advertisement'] = 'bgpaas-suppress-route-advertisement'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['control_node_zone_refs'] = 'bgpaas-control-node-zone'
    ref_field_metas['virtual_machine_interface_refs'] = 'bgpaas-virtual-machine-interface'
    ref_field_metas['service_health_check_refs'] = 'bgpaas-health-check'
    ref_field_metas['bgp_router_refs'] = 'bgpaas-bgp-router'
    ref_field_metas['tag_refs'] = 'bgp-as-a-service-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, autonomous_system=None, bgpaas_shared=False, bgpaas_ip_address=None, bgpaas_session_attributes=None, bgpaas_ipv4_mapped_ipv6_nexthop=None, bgpaas_suppress_route_advertisement=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'bgp-as-a-service'
        if not name:
            name = u'default-bgp-as-a-service'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if autonomous_system is not None:
            self._autonomous_system = autonomous_system
        if bgpaas_shared is not None:
            self._bgpaas_shared = bgpaas_shared
        if bgpaas_ip_address is not None:
            self._bgpaas_ip_address = bgpaas_ip_address
        if bgpaas_session_attributes is not None:
            self._bgpaas_session_attributes = bgpaas_session_attributes
        if bgpaas_ipv4_mapped_ipv6_nexthop is not None:
            self._bgpaas_ipv4_mapped_ipv6_nexthop = bgpaas_ipv4_mapped_ipv6_nexthop
        if bgpaas_suppress_route_advertisement is not None:
            self._bgpaas_suppress_route_advertisement = bgpaas_suppress_route_advertisement
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (bgp-as-a-service)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of bgp-as-a-service in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of bgp-as-a-service as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of bgp-as-a-service's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of bgp-as-a-service's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def autonomous_system(self):
        """Get autonomous-system for bgp-as-a-service.
        
        :returns: AutonomousSystemType object
        
        """
        return getattr(self, '_autonomous_system', None)
    # end autonomous_system

    @autonomous_system.setter
    def autonomous_system(self, autonomous_system):
        """Set autonomous-system for bgp-as-a-service.
        
        :param autonomous_system: AutonomousSystemType object
        
        """
        self._autonomous_system = autonomous_system
    # end autonomous_system

    def set_autonomous_system(self, value):
        self.autonomous_system = value
    # end set_autonomous_system

    def get_autonomous_system(self):
        return self.autonomous_system
    # end get_autonomous_system

    @property
    def bgpaas_shared(self):
        """Get bgpaas-shared for bgp-as-a-service.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_bgpaas_shared', None)
    # end bgpaas_shared

    @bgpaas_shared.setter
    def bgpaas_shared(self, bgpaas_shared):
        """Set bgpaas-shared for bgp-as-a-service.
        
        :param bgpaas_shared: xsd:boolean object
        
        """
        self._bgpaas_shared = bgpaas_shared
    # end bgpaas_shared

    def set_bgpaas_shared(self, value):
        self.bgpaas_shared = value
    # end set_bgpaas_shared

    def get_bgpaas_shared(self):
        return self.bgpaas_shared
    # end get_bgpaas_shared

    @property
    def bgpaas_ip_address(self):
        """Get bgpaas-ip-address for bgp-as-a-service.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_bgpaas_ip_address', None)
    # end bgpaas_ip_address

    @bgpaas_ip_address.setter
    def bgpaas_ip_address(self, bgpaas_ip_address):
        """Set bgpaas-ip-address for bgp-as-a-service.
        
        :param bgpaas_ip_address: IpAddressType object
        
        """
        self._bgpaas_ip_address = bgpaas_ip_address
    # end bgpaas_ip_address

    def set_bgpaas_ip_address(self, value):
        self.bgpaas_ip_address = value
    # end set_bgpaas_ip_address

    def get_bgpaas_ip_address(self):
        return self.bgpaas_ip_address
    # end get_bgpaas_ip_address

    @property
    def bgpaas_session_attributes(self):
        """Get bgpaas-session-attributes for bgp-as-a-service.
        
        :returns: BgpSessionAttributes object
        
        """
        return getattr(self, '_bgpaas_session_attributes', None)
    # end bgpaas_session_attributes

    @bgpaas_session_attributes.setter
    def bgpaas_session_attributes(self, bgpaas_session_attributes):
        """Set bgpaas-session-attributes for bgp-as-a-service.
        
        :param bgpaas_session_attributes: BgpSessionAttributes object
        
        """
        self._bgpaas_session_attributes = bgpaas_session_attributes
    # end bgpaas_session_attributes

    def set_bgpaas_session_attributes(self, value):
        self.bgpaas_session_attributes = value
    # end set_bgpaas_session_attributes

    def get_bgpaas_session_attributes(self):
        return self.bgpaas_session_attributes
    # end get_bgpaas_session_attributes

    @property
    def bgpaas_ipv4_mapped_ipv6_nexthop(self):
        """Get bgpaas-ipv4-mapped-ipv6-nexthop for bgp-as-a-service.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_bgpaas_ipv4_mapped_ipv6_nexthop', None)
    # end bgpaas_ipv4_mapped_ipv6_nexthop

    @bgpaas_ipv4_mapped_ipv6_nexthop.setter
    def bgpaas_ipv4_mapped_ipv6_nexthop(self, bgpaas_ipv4_mapped_ipv6_nexthop):
        """Set bgpaas-ipv4-mapped-ipv6-nexthop for bgp-as-a-service.
        
        :param bgpaas_ipv4_mapped_ipv6_nexthop: xsd:boolean object
        
        """
        self._bgpaas_ipv4_mapped_ipv6_nexthop = bgpaas_ipv4_mapped_ipv6_nexthop
    # end bgpaas_ipv4_mapped_ipv6_nexthop

    def set_bgpaas_ipv4_mapped_ipv6_nexthop(self, value):
        self.bgpaas_ipv4_mapped_ipv6_nexthop = value
    # end set_bgpaas_ipv4_mapped_ipv6_nexthop

    def get_bgpaas_ipv4_mapped_ipv6_nexthop(self):
        return self.bgpaas_ipv4_mapped_ipv6_nexthop
    # end get_bgpaas_ipv4_mapped_ipv6_nexthop

    @property
    def bgpaas_suppress_route_advertisement(self):
        """Get bgpaas-suppress-route-advertisement for bgp-as-a-service.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_bgpaas_suppress_route_advertisement', None)
    # end bgpaas_suppress_route_advertisement

    @bgpaas_suppress_route_advertisement.setter
    def bgpaas_suppress_route_advertisement(self, bgpaas_suppress_route_advertisement):
        """Set bgpaas-suppress-route-advertisement for bgp-as-a-service.
        
        :param bgpaas_suppress_route_advertisement: xsd:boolean object
        
        """
        self._bgpaas_suppress_route_advertisement = bgpaas_suppress_route_advertisement
    # end bgpaas_suppress_route_advertisement

    def set_bgpaas_suppress_route_advertisement(self, value):
        self.bgpaas_suppress_route_advertisement = value
    # end set_bgpaas_suppress_route_advertisement

    def get_bgpaas_suppress_route_advertisement(self):
        return self.bgpaas_suppress_route_advertisement
    # end get_bgpaas_suppress_route_advertisement

    @property
    def id_perms(self):
        """Get id-perms for bgp-as-a-service.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for bgp-as-a-service.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for bgp-as-a-service.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for bgp-as-a-service.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for bgp-as-a-service.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for bgp-as-a-service.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for bgp-as-a-service.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for bgp-as-a-service.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_autonomous_system'):
            self._serialize_field_to_json(serialized, field_names, 'autonomous_system')
        if hasattr(self, '_bgpaas_shared'):
            self._serialize_field_to_json(serialized, field_names, 'bgpaas_shared')
        if hasattr(self, '_bgpaas_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'bgpaas_ip_address')
        if hasattr(self, '_bgpaas_session_attributes'):
            self._serialize_field_to_json(serialized, field_names, 'bgpaas_session_attributes')
        if hasattr(self, '_bgpaas_ipv4_mapped_ipv6_nexthop'):
            self._serialize_field_to_json(serialized, field_names, 'bgpaas_ipv4_mapped_ipv6_nexthop')
        if hasattr(self, '_bgpaas_suppress_route_advertisement'):
            self._serialize_field_to_json(serialized, field_names, 'bgpaas_suppress_route_advertisement')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'control_node_zone_refs'):
            self._serialize_field_to_json(serialized, field_names, 'control_node_zone_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'service_health_check_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_health_check_refs')
        if hasattr(self, 'bgp_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bgp_router_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_control_node_zone(self, ref_obj, ref_data=None):
        """Set control-node-zone for bgp-as-a-service.
        
        :param ref_obj: ControlNodeZone object
        :param ref_data: BGPaaSControlNodeZoneAttributes object
        
        """
        self.control_node_zone_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.control_node_zone_refs[0]['uuid'] = ref_obj.uuid

    # end set_control_node_zone

    def add_control_node_zone(self, ref_obj, ref_data=None):
        """Add control-node-zone to bgp-as-a-service.
        
        :param ref_obj: ControlNodeZone object
        :param ref_data: BGPaaSControlNodeZoneAttributes object
        
        """
        refs = getattr(self, 'control_node_zone_refs', [])
        if not refs:
            self.control_node_zone_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.control_node_zone_refs.append(ref_info)
    # end add_control_node_zone

    def del_control_node_zone(self, ref_obj):
        refs = self.get_control_node_zone_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.control_node_zone_refs.remove(ref)
                return
    # end del_control_node_zone

    def set_control_node_zone_list(self, ref_obj_list, ref_data_list=None):
        """Set control-node-zone list for bgp-as-a-service.
        
        :param ref_obj_list: list of ControlNodeZone object
        :param ref_data_list: list of BGPaaSControlNodeZoneAttributes object
        
        """
        self.control_node_zone_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_control_node_zone_list

    def get_control_node_zone_refs(self):
        """Return control-node-zone list for bgp-as-a-service.
        
        :returns: list of tuple <ControlNodeZone, BGPaaSControlNodeZoneAttributes>
        
        """
        return getattr(self, 'control_node_zone_refs', None)
    # end get_control_node_zone_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for bgp-as-a-service.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to bgp-as-a-service.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for bgp-as-a-service.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for bgp-as-a-service.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_service_health_check(self, ref_obj):
        """Set service-health-check for bgp-as-a-service.
        
        :param ref_obj: ServiceHealthCheck object
        
        """
        self.service_health_check_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_health_check_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_health_check

    def add_service_health_check(self, ref_obj):
        """Add service-health-check to bgp-as-a-service.
        
        :param ref_obj: ServiceHealthCheck object
        
        """
        refs = getattr(self, 'service_health_check_refs', [])
        if not refs:
            self.service_health_check_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_health_check_refs.append(ref_info)
    # end add_service_health_check

    def del_service_health_check(self, ref_obj):
        refs = self.get_service_health_check_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_health_check_refs.remove(ref)
                return
    # end del_service_health_check

    def set_service_health_check_list(self, ref_obj_list):
        """Set service-health-check list for bgp-as-a-service.
        
        :param ref_obj_list: list of ServiceHealthCheck object
        
        """
        self.service_health_check_refs = ref_obj_list
    # end set_service_health_check_list

    def get_service_health_check_refs(self):
        """Return service-health-check list for bgp-as-a-service.
        
        :returns: list of <ServiceHealthCheck>
        
        """
        return getattr(self, 'service_health_check_refs', None)
    # end get_service_health_check_refs

    def set_bgp_router(self, ref_obj):
        """Set bgp-router for bgp-as-a-service.
        
        :param ref_obj: BgpRouter object
        
        """
        self.bgp_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.bgp_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_bgp_router

    def add_bgp_router(self, ref_obj):
        """Add bgp-router to bgp-as-a-service.
        
        :param ref_obj: BgpRouter object
        
        """
        refs = getattr(self, 'bgp_router_refs', [])
        if not refs:
            self.bgp_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bgp_router_refs.append(ref_info)
    # end add_bgp_router

    def del_bgp_router(self, ref_obj):
        refs = self.get_bgp_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bgp_router_refs.remove(ref)
                return
    # end del_bgp_router

    def set_bgp_router_list(self, ref_obj_list):
        """Set bgp-router list for bgp-as-a-service.
        
        :param ref_obj_list: list of BgpRouter object
        
        """
        self.bgp_router_refs = ref_obj_list
    # end set_bgp_router_list

    def get_bgp_router_refs(self):
        """Return bgp-router list for bgp-as-a-service.
        
        :returns: list of <BgpRouter>
        
        """
        return getattr(self, 'bgp_router_refs', None)
    # end get_bgp_router_refs

    def set_tag(self, ref_obj):
        """Set tag for bgp-as-a-service.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to bgp-as-a-service.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for bgp-as-a-service.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for bgp-as-a-service.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display bgp-as-a-service object in compact form."""
        print('------------ bgp-as-a-service ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P autonomous_system = ', self.get_autonomous_system())
        print('P bgpaas_shared = ', self.get_bgpaas_shared())
        print('P bgpaas_ip_address = ', self.get_bgpaas_ip_address())
        print('P bgpaas_session_attributes = ', self.get_bgpaas_session_attributes())
        print('P bgpaas_ipv4_mapped_ipv6_nexthop = ', self.get_bgpaas_ipv4_mapped_ipv6_nexthop())
        print('P bgpaas_suppress_route_advertisement = ', self.get_bgpaas_suppress_route_advertisement())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF control_node_zone = ', self.get_control_node_zone_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF service_health_check = ', self.get_service_health_check_refs())
        print('REF bgp_router = ', self.get_bgp_router_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class BgpAsAService

class Subnet(object):
    """


    Created By:

    Properties:
        * subnet_ip_prefix
            Type: :class:`.SubnetType`

            Created By: User (required)

            Operations Allowed: CRD

            Description:

              Ip prefix/length of the subnet.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Subnet belongs of the referenced virtual machine interface. This is used in CPE use case when a

              subnet is reachable via the interface. It also serves as dynamic DHCP pool for host on this LAN,

              where vrouter is DHCP server.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'subnet'
    object_type = 'subnet'

    prop_fields = set([u'subnet_ip_prefix', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_machine_interface_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'subnet_ip_prefix': {'operations': 'CRD', 'restrictions': None, 'default': None, 'description': ['Ip prefix/length of the subnet.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SubnetType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Subnet belongs of the referenced virtual machine interface. This is used in CPE use case when a', 'subnet is reachable via the interface. It also serves as dynamic DHCP pool for host on this LAN,', 'where vrouter is DHCP server.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['subnet_ip_prefix'] = 'subnet-ip-prefix'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_machine_interface_refs'] = 'subnet-virtual-machine-interface'
    ref_field_metas['tag_refs'] = 'subnet-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, subnet_ip_prefix=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'subnet'
        if not name:
            name = u'default-subnet'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if subnet_ip_prefix is not None:
            self._subnet_ip_prefix = subnet_ip_prefix
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (subnet)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of subnet in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of subnet as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def subnet_ip_prefix(self):
        """Get subnet-ip-prefix for subnet.
        
        :returns: SubnetType object
        
        """
        return getattr(self, '_subnet_ip_prefix', None)
    # end subnet_ip_prefix

    @subnet_ip_prefix.setter
    def subnet_ip_prefix(self, subnet_ip_prefix):
        """Set subnet-ip-prefix for subnet.
        
        :param subnet_ip_prefix: SubnetType object
        
        """
        self._subnet_ip_prefix = subnet_ip_prefix
    # end subnet_ip_prefix

    def set_subnet_ip_prefix(self, value):
        self.subnet_ip_prefix = value
    # end set_subnet_ip_prefix

    def get_subnet_ip_prefix(self):
        return self.subnet_ip_prefix
    # end get_subnet_ip_prefix

    @property
    def id_perms(self):
        """Get id-perms for subnet.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for subnet.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for subnet.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for subnet.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for subnet.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for subnet.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for subnet.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for subnet.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_subnet_ip_prefix'):
            self._serialize_field_to_json(serialized, field_names, 'subnet_ip_prefix')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for subnet.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to subnet.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for subnet.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for subnet.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for subnet.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to subnet.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for subnet.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for subnet.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display subnet object in compact form."""
        print('------------ subnet ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P subnet_ip_prefix = ', self.get_subnet_ip_prefix())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class Subnet

class GlobalSystemConfig(object):
    """
    Global system config is object where all global system configuration is present.

    Created By:
        User

    Child of:
        :class:`.ConfigRoot` object

    Properties:
        * autonomous_system
            Type: int, *within* [1, 4294967295]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Autonomous System number for the cluster which is 16 bits by default, but can be changed to 32 bits

              by setting enable-4byte-as.

        * enable_4byte_as
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Knob to enable 4 byte Autonomous System number support.

        * config_version
            Type: str

            Created By: System

            Operations Allowed: R

            Description:

              Version of OpenContrail software that generated this config.

        * graceful_restart_parameters
            Type: :class:`.GracefulRestartParametersType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Graceful Restart parameters

        * plugin_tuning
            Type: :class:`.PluginProperties`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Various Orchestration system plugin(interface) parameters, like Openstack Neutron plugin.

        * data_center_interconnect_loopback_namespace
            Type: :class:`.SubnetListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Used for assigning loopback addresses on interconnect physical devices.

        * data_center_interconnect_asn_namespace
            Type: :class:`.AsnRangeType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Used for assigning asn values on interconnect physical devices.

        * ibgp_auto_mesh
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              When true, system will automatically create BGP peering mesh with all control-nodes that have same

              BGP AS number as global AS number.

        * bgp_always_compare_med
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Always compare MED even if paths are received from different ASes.

        * rd_cluster_seed
            Type: int, *within* [1, 65535]

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Used to create collision-free route distinguishers.

        * ip_fabric_subnets
            Type: :class:`.SubnetListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of all subnets in which vrouter ip address exist. Used by Device manager to configure dynamic

              GRE tunnels on the SDN gateway.

        * supported_device_families
            Type: :class:`.DeviceFamilyListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of all supported physical router device family names. Used by UI to show pick list.

        * supported_vendor_hardwares
            Type: :class:`.VendorHardwaresType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of all supported vendor hardware platforms by the system. Used by UI to show pick list.

        * bgpaas_parameters
            Type: :class:`.BGPaaServiceParametersType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              BGP As A Service Parameters configuration

        * mac_limit_control
            Type: :class:`.MACLimitControlType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC limit control on the network

        * mac_move_control
            Type: :class:`.MACMoveLimitControlType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC move control on the network

        * mac_aging_time
            Type: int, *within* [0, 86400]

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC aging time on the network

        * igmp_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              IGMP mode at Global level.

        * alarm_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Flag to enable/disable alarms configured under global-system-config. True, if not set.

        * user_defined_log_statistics
            Type: :class:`.UserDefinedLogStatList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              stats name and patterns

        * enable_security_policy_draft
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * supported_fabric_annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of supported annotations that can be used to annotate a Contrail Fabric. These annoations are

              used as directives, or hints to assign resources defined in namespaces to the network devices. For

              example, `igp-protocol: ospf` attribute could be used by the underlay provisioning playbook to

              choose which IGP protocol to use for the IP fabric.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.FeatureFlag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              configurable list of features allowed in this system.

        * list of :class:`.ControlNodeZone` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of references to all control-node-zones in systems.

        * list of :class:`.GlobalVrouterConfig` objects
            Created By: User (required)

            Operations Allowed: R

            Description:

              Global vrouter config is object where all global vrouter config is present.

        * list of :class:`.GlobalQosConfig` objects
            Created By: User (required)

            Operations Allowed: R

            Description:

              Global QoS system config is object where all global system QoS configuration is present.

        * list of :class:`.VirtualRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual router is packet forwarding system on devices such as compute nodes(servers), TOR(s),

              routers.

        * list of :class:`.ConfigNode` objects
            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Config node is object representing a logical node in system which serves config API.

        * list of :class:`.AnalyticsNode` objects
            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Analytics node is object representing a logical node in system which serves operational API and

              analytics collector.

        * list of :class:`.FlowNode` objects
            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Appformix flows node is object representing a logical node in system which serves xflow collectors.

        * list of :class:`.DevicemgrNode` objects
            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              devicemgr node is object representing a logical node in system for configuring physical devices.

        * list of :class:`.DatabaseNode` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Database node is object representing a logical node in system which host Cassandra DB and Zookeeper.

        * list of :class:`.WebuiNode` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              WebUI node is object representing a logical node in system which hosts the Contrail UI.

        * list of :class:`.ConfigDatabaseNode` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Config Database node is object representing a logical node in system which hosts Cassandra DB and

              Zookeeper for Config.

        * list of :class:`.AnalyticsAlarmNode` objects
            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Analytics node is object representing a logical node in system which serves operational API and

              analytics collector.

        * list of :class:`.AnalyticsSnmpNode` objects
            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Analytics node is object representing a logical node in system which serves operational API and

              analytics collector.

        * list of :class:`.ServiceApplianceSet` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service appliance set is the collection of service appliances.

              This collection is used as a provider in loadbalancer pool config.

              Algorithm to distribute/choose one appliance over other can be built while creating loadbalancer

              pool.

              By default, system will create service-appliance-set with name "opencontrail".

              This is the default loadbalancer provider for pools in Contrail.

              This provider is based on "ha-proxy".Service appliance set has following attribute -

                   Driver to load for provisioning the appliance

                   Service appliance properties - HA mode.

        * list of :class:`.ApiAccessList` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Global API access list applicable to all domain and projects

        * list of :class:`.Alarm` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of alarms that are applicable to objects anchored under global-system-config.

        * list of :class:`.JobTemplate` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of job templates supported by the system.

        * list of :class:`.DataCenterInterconnect` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of DCI Objects in the system. Each DCI represents an interconnect of Multiple Fabrics or

              interconnect of LRs in same fabric.

        * list of :class:`.IntentMap` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of intent-maps in the system.

        * list of :class:`.Fabric` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of fabrics in the system. Each fabric is an administrative domain for all the network devices

              in one or multiple CLOS.

        * list of :class:`.NodeProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of node profiles supported by the system.

        * list of :class:`.PhysicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Physical router object represent any physical device that participates in virtual networking, like

              routers, switches, servers, firewalls etc.

        * list of :class:`.DeviceImage` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of device image info for the images that get uploaded to the system.

        * list of :class:`.Node` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Parent of this node resource.

        * list of :class:`.Feature` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of features supported by the system.

        * list of :class:`.PhysicalRole` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of physical roles supported by the system.

        * list of :class:`.OverlayRole` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of overlay roles supported by the system.

        * list of :class:`.RoleDefinition` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of role definitions supported by the system.

        * list of :class:`.GlobalAnalyticsConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of global-analytics-config that are          anchored under global-system-config.


    References to:
        * list of :class:`.BgpRouter` objects
            Created By: User (required)

            Operations Allowed: R

            Description:

              List of references to all bgp routers in systems.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.QosConfig` objects
    """

    resource_type = 'global-system-config'
    object_type = 'global_system_config'

    prop_fields = set([u'autonomous_system', u'enable_4byte_as', u'config_version', u'graceful_restart_parameters', u'plugin_tuning', u'data_center_interconnect_loopback_namespace', u'data_center_interconnect_asn_namespace', u'ibgp_auto_mesh', u'bgp_always_compare_med', u'rd_cluster_seed', u'ip_fabric_subnets', u'supported_device_families', u'supported_vendor_hardwares', u'bgpaas_parameters', u'mac_limit_control', u'mac_move_control', u'mac_aging_time', u'igmp_enable', u'alarm_enable', u'user_defined_log_statistics', u'enable_security_policy_draft', u'supported_fabric_annotations', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['bgp_router_refs', u'tag_refs'])
    backref_fields = set(['qos_config_back_refs'])
    children_fields = set([u'feature_flags', 'control_node_zones', 'global_vrouter_configs', u'global_qos_configs', 'virtual_routers', u'config_nodes', u'analytics_nodes', 'flow_nodes', u'devicemgr_nodes', u'database_nodes', u'webui_nodes', u'config_database_nodes', u'analytics_alarm_nodes', u'analytics_snmp_nodes', u'service_appliance_sets', u'api_access_lists', u'alarms', u'job_templates', u'data_center_interconnects', u'intent_maps', 'fabrics', u'node_profiles', 'physical_routers', 'device_images', u'nodes', u'features', 'physical_roles', 'overlay_roles', 'role_definitions', u'global_analytics_configs'])

    prop_field_types = {
        'autonomous_system': {'operations': 'CRUD', 'restrictions': [1, 4294967295], 'default': None, 'description': ['Autonomous System number for the cluster which is 16 bits by default, but can be changed to 32 bits', 'by setting enable-4byte-as.'], 'simple_type': u'AutonomousSystemType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'enable_4byte_as': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Knob to enable 4 byte Autonomous System number support.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'config_version': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Version of OpenContrail software that generated this config.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'system-only'},
        'graceful_restart_parameters': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Graceful Restart parameters'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'GracefulRestartParametersType', 'restriction_type': None, 'required': 'optional'},
        'plugin_tuning': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Various Orchestration system plugin(interface) parameters, like Openstack Neutron plugin.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PluginProperties', 'restriction_type': None, 'required': 'optional'},
        'data_center_interconnect_loopback_namespace': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Used for assigning loopback addresses on interconnect physical devices.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SubnetListType', 'restriction_type': None, 'required': 'optional'},
        'data_center_interconnect_asn_namespace': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Used for assigning asn values on interconnect physical devices.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'AsnRangeType', 'restriction_type': None, 'required': 'optional'},
        'ibgp_auto_mesh': {'operations': 'CRUD', 'restrictions': None, 'default': True, 'description': ['When true, system will automatically create BGP peering mesh with all control-nodes that have same', 'BGP AS number as global AS number.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'bgp_always_compare_med': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Always compare MED even if paths are received from different ASes.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'rd_cluster_seed': {'operations': 'CRUD', 'restrictions': [1, 65535], 'default': None, 'description': ['Used to create collision-free route distinguishers.'], 'simple_type': u'RdClusterSeedType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'optional'},
        'ip_fabric_subnets': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of all subnets in which vrouter ip address exist. Used by Device manager to configure dynamic', 'GRE tunnels on the SDN gateway.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SubnetListType', 'restriction_type': None, 'required': 'optional'},
        'supported_device_families': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of all supported physical router device family names. Used by UI to show pick list.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DeviceFamilyListType', 'restriction_type': None, 'required': 'optional'},
        'supported_vendor_hardwares': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of all supported vendor hardware platforms by the system. Used by UI to show pick list.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VendorHardwaresType', 'restriction_type': None, 'required': 'optional'},
        'bgpaas_parameters': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['BGP As A Service Parameters configuration'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'BGPaaServiceParametersType', 'restriction_type': None, 'required': 'optional'},
        'mac_limit_control': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC limit control on the network'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MACLimitControlType', 'restriction_type': None, 'required': 'optional'},
        'mac_move_control': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC move control on the network'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MACMoveLimitControlType', 'restriction_type': None, 'required': 'optional'},
        'mac_aging_time': {'operations': 'CRUD', 'restrictions': [0, 86400], 'default': 300, 'description': ['MAC aging time on the network'], 'simple_type': u'MACAgingTime', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'optional'},
        'igmp_enable': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['IGMP mode at Global level.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'alarm_enable': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Flag to enable/disable alarms configured under global-system-config. True, if not set.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'user_defined_log_statistics': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['stats name and patterns'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'UserDefinedLogStatList', 'restriction_type': None, 'required': 'optional'},
        'enable_security_policy_draft': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': [], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'supported_fabric_annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of supported annotations that can be used to annotate a Contrail Fabric. These annoations are', 'used as directives, or hints to assign resources defined in namespaces to the network devices. For', 'example, `igp-protocol: ospf` attribute could be used by the underlay provisioning playbook to', 'choose which IGP protocol to use for the IP fabric.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['bgp_router_refs'] = ('bgp-router', 'None', False, ['List of references to all bgp routers in systems.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['qos_config_back_refs'] = ('qos-config', 'None', False)

    children_field_types = {}
    children_field_types['feature_flags'] = ('feature-flag', False)
    children_field_types['control_node_zones'] = ('control-node-zone', False)
    children_field_types['global_vrouter_configs'] = ('global-vrouter-config', False)
    children_field_types['global_qos_configs'] = ('global-qos-config', False)
    children_field_types['virtual_routers'] = ('virtual-router', False)
    children_field_types['config_nodes'] = ('config-node', False)
    children_field_types['analytics_nodes'] = ('analytics-node', False)
    children_field_types['flow_nodes'] = ('flow-node', False)
    children_field_types['devicemgr_nodes'] = ('devicemgr-node', False)
    children_field_types['database_nodes'] = ('database-node', False)
    children_field_types['webui_nodes'] = ('webui-node', False)
    children_field_types['config_database_nodes'] = ('config-database-node', False)
    children_field_types['analytics_alarm_nodes'] = ('analytics-alarm-node', False)
    children_field_types['analytics_snmp_nodes'] = ('analytics-snmp-node', False)
    children_field_types['service_appliance_sets'] = ('service-appliance-set', False)
    children_field_types['api_access_lists'] = ('api-access-list', False)
    children_field_types['alarms'] = ('alarm', False)
    children_field_types['job_templates'] = ('job-template', False)
    children_field_types['data_center_interconnects'] = ('data-center-interconnect', False)
    children_field_types['intent_maps'] = ('intent-map', False)
    children_field_types['fabrics'] = ('fabric', False)
    children_field_types['node_profiles'] = ('node-profile', False)
    children_field_types['physical_routers'] = ('physical-router', False)
    children_field_types['device_images'] = ('device-image', False)
    children_field_types['nodes'] = ('node', False)
    children_field_types['features'] = ('feature', False)
    children_field_types['physical_roles'] = ('physical-role', False)
    children_field_types['overlay_roles'] = ('overlay-role', False)
    children_field_types['role_definitions'] = ('role-definition', False)
    children_field_types['global_analytics_configs'] = ('global-analytics-config', False)

    parent_types = [u'config-root']

    prop_field_metas = {}
    prop_field_metas['autonomous_system'] = 'autonomous-system'
    prop_field_metas['enable_4byte_as'] = 'enable-4byte-as'
    prop_field_metas['config_version'] = 'config-version'
    prop_field_metas['graceful_restart_parameters'] = 'graceful-restart-parameters'
    prop_field_metas['plugin_tuning'] = 'plugin-tuning'
    prop_field_metas['data_center_interconnect_loopback_namespace'] = 'data-center-interconnect-loopback-namespace'
    prop_field_metas['data_center_interconnect_asn_namespace'] = 'data-center-interconnect-asn-namespace'
    prop_field_metas['ibgp_auto_mesh'] = 'ibgp-auto-mesh'
    prop_field_metas['bgp_always_compare_med'] = 'bgp-always-compare-med'
    prop_field_metas['rd_cluster_seed'] = 'rd-cluster-seed'
    prop_field_metas['ip_fabric_subnets'] = 'ip-fabric-subnets'
    prop_field_metas['supported_device_families'] = 'supported-device-families'
    prop_field_metas['supported_vendor_hardwares'] = 'supported-vendor-hardwares'
    prop_field_metas['bgpaas_parameters'] = 'bgpaas-parameters'
    prop_field_metas['mac_limit_control'] = 'mac-limit-control'
    prop_field_metas['mac_move_control'] = 'mac-move-control'
    prop_field_metas['mac_aging_time'] = 'mac-aging-time'
    prop_field_metas['igmp_enable'] = 'igmp-enable'
    prop_field_metas['alarm_enable'] = 'alarm-enable'
    prop_field_metas['user_defined_log_statistics'] = 'user-defined-log-statistics'
    prop_field_metas['enable_security_policy_draft'] = 'enable-security-policy-draft'
    prop_field_metas['supported_fabric_annotations'] = 'supported-fabric-annotations'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['bgp_router_refs'] = 'global-system-config-bgp-router'
    ref_field_metas['tag_refs'] = 'global-system-config-tag'

    children_field_metas = {}
    children_field_metas['feature_flags'] = 'global-system-config-feature-flag'
    children_field_metas['control_node_zones'] = 'global-system-config-control-node-zone'
    children_field_metas['global_vrouter_configs'] = 'global-system-config-global-vrouter-config'
    children_field_metas['global_qos_configs'] = 'global-system-config-global-qos-config'
    children_field_metas['virtual_routers'] = 'global-system-config-virtual-router'
    children_field_metas['config_nodes'] = 'global-system-config-config-node'
    children_field_metas['analytics_nodes'] = 'global-system-config-analytics-node'
    children_field_metas['flow_nodes'] = 'global-system-config-flow-node'
    children_field_metas['devicemgr_nodes'] = 'global-system-config-devicemgr-node'
    children_field_metas['database_nodes'] = 'global-system-config-database-node'
    children_field_metas['webui_nodes'] = 'global-system-config-webui-node'
    children_field_metas['config_database_nodes'] = 'global-system-config-config-database-node'
    children_field_metas['analytics_alarm_nodes'] = 'global-system-config-analytics-alarm-node'
    children_field_metas['analytics_snmp_nodes'] = 'global-system-config-analytics-snmp-node'
    children_field_metas['service_appliance_sets'] = 'global-system-config-service-appliance-set'
    children_field_metas['api_access_lists'] = 'global-system-config-api-access-list'
    children_field_metas['alarms'] = 'global-system-config-alarm'
    children_field_metas['job_templates'] = 'global-system-config-job-template'
    children_field_metas['data_center_interconnects'] = 'global-system-config-data-center-interconnect'
    children_field_metas['intent_maps'] = 'global-system-config-intent-map'
    children_field_metas['fabrics'] = 'global-system-config-fabric'
    children_field_metas['node_profiles'] = 'global-system-config-node-profile'
    children_field_metas['physical_routers'] = 'global-system-config-physical-router'
    children_field_metas['device_images'] = 'global-system-config-device-image'
    children_field_metas['nodes'] = 'global-system-config-node'
    children_field_metas['features'] = 'global-system-config-feature'
    children_field_metas['physical_roles'] = 'global-system-config-physical-role'
    children_field_metas['overlay_roles'] = 'global-system-config-overlay-role'
    children_field_metas['role_definitions'] = 'global-system-config-role-definition'
    children_field_metas['global_analytics_configs'] = 'global-system-config-global-analytics-config'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'user_defined_log_statistics', u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['user_defined_log_statistics'] = True
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['user_defined_log_statistics'] = 'name'
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, autonomous_system=None, enable_4byte_as=False, config_version=None, graceful_restart_parameters=None, plugin_tuning=None, data_center_interconnect_loopback_namespace=None, data_center_interconnect_asn_namespace=None, ibgp_auto_mesh=True, bgp_always_compare_med=None, rd_cluster_seed=None, ip_fabric_subnets=None, supported_device_families=None, supported_vendor_hardwares=None, bgpaas_parameters=None, mac_limit_control=None, mac_move_control=None, mac_aging_time=300, igmp_enable=False, alarm_enable=None, user_defined_log_statistics=None, enable_security_policy_draft=False, supported_fabric_annotations=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'global-system-config'
        if not name:
            name = u'default-global-system-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.fq_name = [name]

        # property fields
        if autonomous_system is not None:
            self._autonomous_system = autonomous_system
        if enable_4byte_as is not None:
            self._enable_4byte_as = enable_4byte_as
        if config_version is not None:
            self._config_version = config_version
        if graceful_restart_parameters is not None:
            self._graceful_restart_parameters = graceful_restart_parameters
        if plugin_tuning is not None:
            self._plugin_tuning = plugin_tuning
        if data_center_interconnect_loopback_namespace is not None:
            self._data_center_interconnect_loopback_namespace = data_center_interconnect_loopback_namespace
        if data_center_interconnect_asn_namespace is not None:
            self._data_center_interconnect_asn_namespace = data_center_interconnect_asn_namespace
        if ibgp_auto_mesh is not None:
            self._ibgp_auto_mesh = ibgp_auto_mesh
        if bgp_always_compare_med is not None:
            self._bgp_always_compare_med = bgp_always_compare_med
        if rd_cluster_seed is not None:
            self._rd_cluster_seed = rd_cluster_seed
        if ip_fabric_subnets is not None:
            self._ip_fabric_subnets = ip_fabric_subnets
        if supported_device_families is not None:
            self._supported_device_families = supported_device_families
        if supported_vendor_hardwares is not None:
            self._supported_vendor_hardwares = supported_vendor_hardwares
        if bgpaas_parameters is not None:
            self._bgpaas_parameters = bgpaas_parameters
        if mac_limit_control is not None:
            self._mac_limit_control = mac_limit_control
        if mac_move_control is not None:
            self._mac_move_control = mac_move_control
        if mac_aging_time is not None:
            self._mac_aging_time = mac_aging_time
        if igmp_enable is not None:
            self._igmp_enable = igmp_enable
        if alarm_enable is not None:
            self._alarm_enable = alarm_enable
        if user_defined_log_statistics is not None:
            self._user_defined_log_statistics = user_defined_log_statistics
        if enable_security_policy_draft is not None:
            self._enable_security_policy_draft = enable_security_policy_draft
        if supported_fabric_annotations is not None:
            self._supported_fabric_annotations = supported_fabric_annotations
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (global-system-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of global-system-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of global-system-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of global-system-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of global-system-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def autonomous_system(self):
        """Get autonomous-system for global-system-config.
        
        :returns: AutonomousSystemType object
        
        """
        return getattr(self, '_autonomous_system', None)
    # end autonomous_system

    @autonomous_system.setter
    def autonomous_system(self, autonomous_system):
        """Set autonomous-system for global-system-config.
        
        :param autonomous_system: AutonomousSystemType object
        
        """
        self._autonomous_system = autonomous_system
    # end autonomous_system

    def set_autonomous_system(self, value):
        self.autonomous_system = value
    # end set_autonomous_system

    def get_autonomous_system(self):
        return self.autonomous_system
    # end get_autonomous_system

    @property
    def enable_4byte_as(self):
        """Get enable-4byte-as for global-system-config.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_enable_4byte_as', None)
    # end enable_4byte_as

    @enable_4byte_as.setter
    def enable_4byte_as(self, enable_4byte_as):
        """Set enable-4byte-as for global-system-config.
        
        :param enable_4byte_as: xsd:boolean object
        
        """
        self._enable_4byte_as = enable_4byte_as
    # end enable_4byte_as

    def set_enable_4byte_as(self, value):
        self.enable_4byte_as = value
    # end set_enable_4byte_as

    def get_enable_4byte_as(self):
        return self.enable_4byte_as
    # end get_enable_4byte_as

    @property
    def config_version(self):
        """Get config-version for global-system-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_config_version', None)
    # end config_version

    @config_version.setter
    def config_version(self, config_version):
        """Set config-version for global-system-config.
        
        :param config_version: xsd:string object
        
        """
        self._config_version = config_version
    # end config_version

    def set_config_version(self, value):
        self.config_version = value
    # end set_config_version

    def get_config_version(self):
        return self.config_version
    # end get_config_version

    @property
    def graceful_restart_parameters(self):
        """Get graceful-restart-parameters for global-system-config.
        
        :returns: GracefulRestartParametersType object
        
        """
        return getattr(self, '_graceful_restart_parameters', None)
    # end graceful_restart_parameters

    @graceful_restart_parameters.setter
    def graceful_restart_parameters(self, graceful_restart_parameters):
        """Set graceful-restart-parameters for global-system-config.
        
        :param graceful_restart_parameters: GracefulRestartParametersType object
        
        """
        self._graceful_restart_parameters = graceful_restart_parameters
    # end graceful_restart_parameters

    def set_graceful_restart_parameters(self, value):
        self.graceful_restart_parameters = value
    # end set_graceful_restart_parameters

    def get_graceful_restart_parameters(self):
        return self.graceful_restart_parameters
    # end get_graceful_restart_parameters

    @property
    def plugin_tuning(self):
        """Get plugin-tuning for global-system-config.
        
        :returns: PluginProperties object
        
        """
        return getattr(self, '_plugin_tuning', None)
    # end plugin_tuning

    @plugin_tuning.setter
    def plugin_tuning(self, plugin_tuning):
        """Set plugin-tuning for global-system-config.
        
        :param plugin_tuning: PluginProperties object
        
        """
        self._plugin_tuning = plugin_tuning
    # end plugin_tuning

    def set_plugin_tuning(self, value):
        self.plugin_tuning = value
    # end set_plugin_tuning

    def get_plugin_tuning(self):
        return self.plugin_tuning
    # end get_plugin_tuning

    @property
    def data_center_interconnect_loopback_namespace(self):
        """Get data-center-interconnect-loopback-namespace for global-system-config.
        
        :returns: SubnetListType object
        
        """
        return getattr(self, '_data_center_interconnect_loopback_namespace', None)
    # end data_center_interconnect_loopback_namespace

    @data_center_interconnect_loopback_namespace.setter
    def data_center_interconnect_loopback_namespace(self, data_center_interconnect_loopback_namespace):
        """Set data-center-interconnect-loopback-namespace for global-system-config.
        
        :param data_center_interconnect_loopback_namespace: SubnetListType object
        
        """
        self._data_center_interconnect_loopback_namespace = data_center_interconnect_loopback_namespace
    # end data_center_interconnect_loopback_namespace

    def set_data_center_interconnect_loopback_namespace(self, value):
        self.data_center_interconnect_loopback_namespace = value
    # end set_data_center_interconnect_loopback_namespace

    def get_data_center_interconnect_loopback_namespace(self):
        return self.data_center_interconnect_loopback_namespace
    # end get_data_center_interconnect_loopback_namespace

    @property
    def data_center_interconnect_asn_namespace(self):
        """Get data-center-interconnect-asn-namespace for global-system-config.
        
        :returns: AsnRangeType object
        
        """
        return getattr(self, '_data_center_interconnect_asn_namespace', None)
    # end data_center_interconnect_asn_namespace

    @data_center_interconnect_asn_namespace.setter
    def data_center_interconnect_asn_namespace(self, data_center_interconnect_asn_namespace):
        """Set data-center-interconnect-asn-namespace for global-system-config.
        
        :param data_center_interconnect_asn_namespace: AsnRangeType object
        
        """
        self._data_center_interconnect_asn_namespace = data_center_interconnect_asn_namespace
    # end data_center_interconnect_asn_namespace

    def set_data_center_interconnect_asn_namespace(self, value):
        self.data_center_interconnect_asn_namespace = value
    # end set_data_center_interconnect_asn_namespace

    def get_data_center_interconnect_asn_namespace(self):
        return self.data_center_interconnect_asn_namespace
    # end get_data_center_interconnect_asn_namespace

    @property
    def ibgp_auto_mesh(self):
        """Get ibgp-auto-mesh for global-system-config.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_ibgp_auto_mesh', None)
    # end ibgp_auto_mesh

    @ibgp_auto_mesh.setter
    def ibgp_auto_mesh(self, ibgp_auto_mesh):
        """Set ibgp-auto-mesh for global-system-config.
        
        :param ibgp_auto_mesh: xsd:boolean object
        
        """
        self._ibgp_auto_mesh = ibgp_auto_mesh
    # end ibgp_auto_mesh

    def set_ibgp_auto_mesh(self, value):
        self.ibgp_auto_mesh = value
    # end set_ibgp_auto_mesh

    def get_ibgp_auto_mesh(self):
        return self.ibgp_auto_mesh
    # end get_ibgp_auto_mesh

    @property
    def bgp_always_compare_med(self):
        """Get bgp-always-compare-med for global-system-config.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_bgp_always_compare_med', None)
    # end bgp_always_compare_med

    @bgp_always_compare_med.setter
    def bgp_always_compare_med(self, bgp_always_compare_med):
        """Set bgp-always-compare-med for global-system-config.
        
        :param bgp_always_compare_med: xsd:boolean object
        
        """
        self._bgp_always_compare_med = bgp_always_compare_med
    # end bgp_always_compare_med

    def set_bgp_always_compare_med(self, value):
        self.bgp_always_compare_med = value
    # end set_bgp_always_compare_med

    def get_bgp_always_compare_med(self):
        return self.bgp_always_compare_med
    # end get_bgp_always_compare_med

    @property
    def rd_cluster_seed(self):
        """Get rd-cluster-seed for global-system-config.
        
        :returns: RdClusterSeedType object
        
        """
        return getattr(self, '_rd_cluster_seed', None)
    # end rd_cluster_seed

    @rd_cluster_seed.setter
    def rd_cluster_seed(self, rd_cluster_seed):
        """Set rd-cluster-seed for global-system-config.
        
        :param rd_cluster_seed: RdClusterSeedType object
        
        """
        self._rd_cluster_seed = rd_cluster_seed
    # end rd_cluster_seed

    def set_rd_cluster_seed(self, value):
        self.rd_cluster_seed = value
    # end set_rd_cluster_seed

    def get_rd_cluster_seed(self):
        return self.rd_cluster_seed
    # end get_rd_cluster_seed

    @property
    def ip_fabric_subnets(self):
        """Get ip-fabric-subnets for global-system-config.
        
        :returns: SubnetListType object
        
        """
        return getattr(self, '_ip_fabric_subnets', None)
    # end ip_fabric_subnets

    @ip_fabric_subnets.setter
    def ip_fabric_subnets(self, ip_fabric_subnets):
        """Set ip-fabric-subnets for global-system-config.
        
        :param ip_fabric_subnets: SubnetListType object
        
        """
        self._ip_fabric_subnets = ip_fabric_subnets
    # end ip_fabric_subnets

    def set_ip_fabric_subnets(self, value):
        self.ip_fabric_subnets = value
    # end set_ip_fabric_subnets

    def get_ip_fabric_subnets(self):
        return self.ip_fabric_subnets
    # end get_ip_fabric_subnets

    @property
    def supported_device_families(self):
        """Get supported-device-families for global-system-config.
        
        :returns: DeviceFamilyListType object
        
        """
        return getattr(self, '_supported_device_families', None)
    # end supported_device_families

    @supported_device_families.setter
    def supported_device_families(self, supported_device_families):
        """Set supported-device-families for global-system-config.
        
        :param supported_device_families: DeviceFamilyListType object
        
        """
        self._supported_device_families = supported_device_families
    # end supported_device_families

    def set_supported_device_families(self, value):
        self.supported_device_families = value
    # end set_supported_device_families

    def get_supported_device_families(self):
        return self.supported_device_families
    # end get_supported_device_families

    @property
    def supported_vendor_hardwares(self):
        """Get supported-vendor-hardwares for global-system-config.
        
        :returns: VendorHardwaresType object
        
        """
        return getattr(self, '_supported_vendor_hardwares', None)
    # end supported_vendor_hardwares

    @supported_vendor_hardwares.setter
    def supported_vendor_hardwares(self, supported_vendor_hardwares):
        """Set supported-vendor-hardwares for global-system-config.
        
        :param supported_vendor_hardwares: VendorHardwaresType object
        
        """
        self._supported_vendor_hardwares = supported_vendor_hardwares
    # end supported_vendor_hardwares

    def set_supported_vendor_hardwares(self, value):
        self.supported_vendor_hardwares = value
    # end set_supported_vendor_hardwares

    def get_supported_vendor_hardwares(self):
        return self.supported_vendor_hardwares
    # end get_supported_vendor_hardwares

    @property
    def bgpaas_parameters(self):
        """Get bgpaas-parameters for global-system-config.
        
        :returns: BGPaaServiceParametersType object
        
        """
        return getattr(self, '_bgpaas_parameters', None)
    # end bgpaas_parameters

    @bgpaas_parameters.setter
    def bgpaas_parameters(self, bgpaas_parameters):
        """Set bgpaas-parameters for global-system-config.
        
        :param bgpaas_parameters: BGPaaServiceParametersType object
        
        """
        self._bgpaas_parameters = bgpaas_parameters
    # end bgpaas_parameters

    def set_bgpaas_parameters(self, value):
        self.bgpaas_parameters = value
    # end set_bgpaas_parameters

    def get_bgpaas_parameters(self):
        return self.bgpaas_parameters
    # end get_bgpaas_parameters

    @property
    def mac_limit_control(self):
        """Get mac-limit-control for global-system-config.
        
        :returns: MACLimitControlType object
        
        """
        return getattr(self, '_mac_limit_control', None)
    # end mac_limit_control

    @mac_limit_control.setter
    def mac_limit_control(self, mac_limit_control):
        """Set mac-limit-control for global-system-config.
        
        :param mac_limit_control: MACLimitControlType object
        
        """
        self._mac_limit_control = mac_limit_control
    # end mac_limit_control

    def set_mac_limit_control(self, value):
        self.mac_limit_control = value
    # end set_mac_limit_control

    def get_mac_limit_control(self):
        return self.mac_limit_control
    # end get_mac_limit_control

    @property
    def mac_move_control(self):
        """Get mac-move-control for global-system-config.
        
        :returns: MACMoveLimitControlType object
        
        """
        return getattr(self, '_mac_move_control', None)
    # end mac_move_control

    @mac_move_control.setter
    def mac_move_control(self, mac_move_control):
        """Set mac-move-control for global-system-config.
        
        :param mac_move_control: MACMoveLimitControlType object
        
        """
        self._mac_move_control = mac_move_control
    # end mac_move_control

    def set_mac_move_control(self, value):
        self.mac_move_control = value
    # end set_mac_move_control

    def get_mac_move_control(self):
        return self.mac_move_control
    # end get_mac_move_control

    @property
    def mac_aging_time(self):
        """Get mac-aging-time for global-system-config.
        
        :returns: MACAgingTime object
        
        """
        return getattr(self, '_mac_aging_time', None)
    # end mac_aging_time

    @mac_aging_time.setter
    def mac_aging_time(self, mac_aging_time):
        """Set mac-aging-time for global-system-config.
        
        :param mac_aging_time: MACAgingTime object
        
        """
        self._mac_aging_time = mac_aging_time
    # end mac_aging_time

    def set_mac_aging_time(self, value):
        self.mac_aging_time = value
    # end set_mac_aging_time

    def get_mac_aging_time(self):
        return self.mac_aging_time
    # end get_mac_aging_time

    @property
    def igmp_enable(self):
        """Get igmp-enable for global-system-config.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_igmp_enable', None)
    # end igmp_enable

    @igmp_enable.setter
    def igmp_enable(self, igmp_enable):
        """Set igmp-enable for global-system-config.
        
        :param igmp_enable: xsd:boolean object
        
        """
        self._igmp_enable = igmp_enable
    # end igmp_enable

    def set_igmp_enable(self, value):
        self.igmp_enable = value
    # end set_igmp_enable

    def get_igmp_enable(self):
        return self.igmp_enable
    # end get_igmp_enable

    @property
    def alarm_enable(self):
        """Get alarm-enable for global-system-config.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_alarm_enable', None)
    # end alarm_enable

    @alarm_enable.setter
    def alarm_enable(self, alarm_enable):
        """Set alarm-enable for global-system-config.
        
        :param alarm_enable: xsd:boolean object
        
        """
        self._alarm_enable = alarm_enable
    # end alarm_enable

    def set_alarm_enable(self, value):
        self.alarm_enable = value
    # end set_alarm_enable

    def get_alarm_enable(self):
        return self.alarm_enable
    # end get_alarm_enable

    @property
    def user_defined_log_statistics(self):
        """Get user-defined-log-statistics for global-system-config.
        
        :returns: UserDefinedLogStatList object
        
        """
        return getattr(self, '_user_defined_log_statistics', None)
    # end user_defined_log_statistics

    @user_defined_log_statistics.setter
    def user_defined_log_statistics(self, user_defined_log_statistics):
        """Set user-defined-log-statistics for global-system-config.
        
        :param user_defined_log_statistics: UserDefinedLogStatList object
        
        """
        self._user_defined_log_statistics = user_defined_log_statistics
    # end user_defined_log_statistics

    def set_user_defined_log_statistics(self, value):
        self.user_defined_log_statistics = value
    # end set_user_defined_log_statistics

    def get_user_defined_log_statistics(self):
        return self.user_defined_log_statistics
    # end get_user_defined_log_statistics

    @property
    def enable_security_policy_draft(self):
        """Get enable-security-policy-draft for global-system-config.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_enable_security_policy_draft', None)
    # end enable_security_policy_draft

    @enable_security_policy_draft.setter
    def enable_security_policy_draft(self, enable_security_policy_draft):
        """Set enable-security-policy-draft for global-system-config.
        
        :param enable_security_policy_draft: xsd:boolean object
        
        """
        self._enable_security_policy_draft = enable_security_policy_draft
    # end enable_security_policy_draft

    def set_enable_security_policy_draft(self, value):
        self.enable_security_policy_draft = value
    # end set_enable_security_policy_draft

    def get_enable_security_policy_draft(self):
        return self.enable_security_policy_draft
    # end get_enable_security_policy_draft

    @property
    def supported_fabric_annotations(self):
        """Get supported-fabric-annotations for global-system-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_supported_fabric_annotations', None)
    # end supported_fabric_annotations

    @supported_fabric_annotations.setter
    def supported_fabric_annotations(self, supported_fabric_annotations):
        """Set supported-fabric-annotations for global-system-config.
        
        :param supported_fabric_annotations: KeyValuePairs object
        
        """
        self._supported_fabric_annotations = supported_fabric_annotations
    # end supported_fabric_annotations

    def set_supported_fabric_annotations(self, value):
        self.supported_fabric_annotations = value
    # end set_supported_fabric_annotations

    def get_supported_fabric_annotations(self):
        return self.supported_fabric_annotations
    # end get_supported_fabric_annotations

    @property
    def id_perms(self):
        """Get id-perms for global-system-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for global-system-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for global-system-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for global-system-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for global-system-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for global-system-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for global-system-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for global-system-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_autonomous_system'):
            self._serialize_field_to_json(serialized, field_names, 'autonomous_system')
        if hasattr(self, '_enable_4byte_as'):
            self._serialize_field_to_json(serialized, field_names, 'enable_4byte_as')
        if hasattr(self, '_config_version'):
            self._serialize_field_to_json(serialized, field_names, 'config_version')
        if hasattr(self, '_graceful_restart_parameters'):
            self._serialize_field_to_json(serialized, field_names, 'graceful_restart_parameters')
        if hasattr(self, '_plugin_tuning'):
            self._serialize_field_to_json(serialized, field_names, 'plugin_tuning')
        if hasattr(self, '_data_center_interconnect_loopback_namespace'):
            self._serialize_field_to_json(serialized, field_names, 'data_center_interconnect_loopback_namespace')
        if hasattr(self, '_data_center_interconnect_asn_namespace'):
            self._serialize_field_to_json(serialized, field_names, 'data_center_interconnect_asn_namespace')
        if hasattr(self, '_ibgp_auto_mesh'):
            self._serialize_field_to_json(serialized, field_names, 'ibgp_auto_mesh')
        if hasattr(self, '_bgp_always_compare_med'):
            self._serialize_field_to_json(serialized, field_names, 'bgp_always_compare_med')
        if hasattr(self, '_rd_cluster_seed'):
            self._serialize_field_to_json(serialized, field_names, 'rd_cluster_seed')
        if hasattr(self, '_ip_fabric_subnets'):
            self._serialize_field_to_json(serialized, field_names, 'ip_fabric_subnets')
        if hasattr(self, '_supported_device_families'):
            self._serialize_field_to_json(serialized, field_names, 'supported_device_families')
        if hasattr(self, '_supported_vendor_hardwares'):
            self._serialize_field_to_json(serialized, field_names, 'supported_vendor_hardwares')
        if hasattr(self, '_bgpaas_parameters'):
            self._serialize_field_to_json(serialized, field_names, 'bgpaas_parameters')
        if hasattr(self, '_mac_limit_control'):
            self._serialize_field_to_json(serialized, field_names, 'mac_limit_control')
        if hasattr(self, '_mac_move_control'):
            self._serialize_field_to_json(serialized, field_names, 'mac_move_control')
        if hasattr(self, '_mac_aging_time'):
            self._serialize_field_to_json(serialized, field_names, 'mac_aging_time')
        if hasattr(self, '_igmp_enable'):
            self._serialize_field_to_json(serialized, field_names, 'igmp_enable')
        if hasattr(self, '_alarm_enable'):
            self._serialize_field_to_json(serialized, field_names, 'alarm_enable')
        if hasattr(self, '_user_defined_log_statistics'):
            self._serialize_field_to_json(serialized, field_names, 'user_defined_log_statistics')
        if hasattr(self, '_enable_security_policy_draft'):
            self._serialize_field_to_json(serialized, field_names, 'enable_security_policy_draft')
        if hasattr(self, '_supported_fabric_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'supported_fabric_annotations')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'bgp_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bgp_router_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_feature_flags(self):
        return getattr(self, 'feature_flags', None)
    # end get_feature_flags

    def get_control_node_zones(self):
        return getattr(self, 'control_node_zones', None)
    # end get_control_node_zones

    def get_global_vrouter_configs(self):
        return getattr(self, 'global_vrouter_configs', None)
    # end get_global_vrouter_configs

    def get_global_qos_configs(self):
        return getattr(self, 'global_qos_configs', None)
    # end get_global_qos_configs

    def get_virtual_routers(self):
        return getattr(self, 'virtual_routers', None)
    # end get_virtual_routers

    def get_config_nodes(self):
        return getattr(self, 'config_nodes', None)
    # end get_config_nodes

    def get_analytics_nodes(self):
        return getattr(self, 'analytics_nodes', None)
    # end get_analytics_nodes

    def get_flow_nodes(self):
        return getattr(self, 'flow_nodes', None)
    # end get_flow_nodes

    def get_devicemgr_nodes(self):
        return getattr(self, 'devicemgr_nodes', None)
    # end get_devicemgr_nodes

    def get_database_nodes(self):
        return getattr(self, 'database_nodes', None)
    # end get_database_nodes

    def get_webui_nodes(self):
        return getattr(self, 'webui_nodes', None)
    # end get_webui_nodes

    def get_config_database_nodes(self):
        return getattr(self, 'config_database_nodes', None)
    # end get_config_database_nodes

    def get_analytics_alarm_nodes(self):
        return getattr(self, 'analytics_alarm_nodes', None)
    # end get_analytics_alarm_nodes

    def get_analytics_snmp_nodes(self):
        return getattr(self, 'analytics_snmp_nodes', None)
    # end get_analytics_snmp_nodes

    def get_service_appliance_sets(self):
        return getattr(self, 'service_appliance_sets', None)
    # end get_service_appliance_sets

    def get_api_access_lists(self):
        return getattr(self, 'api_access_lists', None)
    # end get_api_access_lists

    def get_alarms(self):
        return getattr(self, 'alarms', None)
    # end get_alarms

    def get_job_templates(self):
        return getattr(self, 'job_templates', None)
    # end get_job_templates

    def get_data_center_interconnects(self):
        return getattr(self, 'data_center_interconnects', None)
    # end get_data_center_interconnects

    def get_intent_maps(self):
        return getattr(self, 'intent_maps', None)
    # end get_intent_maps

    def get_fabrics(self):
        return getattr(self, 'fabrics', None)
    # end get_fabrics

    def get_node_profiles(self):
        return getattr(self, 'node_profiles', None)
    # end get_node_profiles

    def get_physical_routers(self):
        return getattr(self, 'physical_routers', None)
    # end get_physical_routers

    def get_device_images(self):
        return getattr(self, 'device_images', None)
    # end get_device_images

    def get_nodes(self):
        return getattr(self, 'nodes', None)
    # end get_nodes

    def get_features(self):
        return getattr(self, 'features', None)
    # end get_features

    def get_physical_roles(self):
        return getattr(self, 'physical_roles', None)
    # end get_physical_roles

    def get_overlay_roles(self):
        return getattr(self, 'overlay_roles', None)
    # end get_overlay_roles

    def get_role_definitions(self):
        return getattr(self, 'role_definitions', None)
    # end get_role_definitions

    def get_global_analytics_configs(self):
        return getattr(self, 'global_analytics_configs', None)
    # end get_global_analytics_configs

    def set_bgp_router(self, ref_obj):
        """Set bgp-router for global-system-config.
        
        :param ref_obj: BgpRouter object
        
        """
        self.bgp_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.bgp_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_bgp_router

    def add_bgp_router(self, ref_obj):
        """Add bgp-router to global-system-config.
        
        :param ref_obj: BgpRouter object
        
        """
        refs = getattr(self, 'bgp_router_refs', [])
        if not refs:
            self.bgp_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bgp_router_refs.append(ref_info)
    # end add_bgp_router

    def del_bgp_router(self, ref_obj):
        refs = self.get_bgp_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bgp_router_refs.remove(ref)
                return
    # end del_bgp_router

    def set_bgp_router_list(self, ref_obj_list):
        """Set bgp-router list for global-system-config.
        
        :param ref_obj_list: list of BgpRouter object
        
        """
        self.bgp_router_refs = ref_obj_list
    # end set_bgp_router_list

    def get_bgp_router_refs(self):
        """Return bgp-router list for global-system-config.
        
        :returns: list of <BgpRouter>
        
        """
        return getattr(self, 'bgp_router_refs', None)
    # end get_bgp_router_refs

    def set_tag(self, ref_obj):
        """Set tag for global-system-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to global-system-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for global-system-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for global-system-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_qos_config_back_refs(self):
        """Return list of all qos-configs using this global-system-config"""
        return getattr(self, 'qos_config_back_refs', None)
    # end get_qos_config_back_refs

    def dump(self):
        """Display global-system-config object in compact form."""
        print('------------ global-system-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P autonomous_system = ', self.get_autonomous_system())
        print('P enable_4byte_as = ', self.get_enable_4byte_as())
        print('P config_version = ', self.get_config_version())
        print('P graceful_restart_parameters = ', self.get_graceful_restart_parameters())
        print('P plugin_tuning = ', self.get_plugin_tuning())
        print('P data_center_interconnect_loopback_namespace = ', self.get_data_center_interconnect_loopback_namespace())
        print('P data_center_interconnect_asn_namespace = ', self.get_data_center_interconnect_asn_namespace())
        print('P ibgp_auto_mesh = ', self.get_ibgp_auto_mesh())
        print('P bgp_always_compare_med = ', self.get_bgp_always_compare_med())
        print('P rd_cluster_seed = ', self.get_rd_cluster_seed())
        print('P ip_fabric_subnets = ', self.get_ip_fabric_subnets())
        print('P supported_device_families = ', self.get_supported_device_families())
        print('P supported_vendor_hardwares = ', self.get_supported_vendor_hardwares())
        print('P bgpaas_parameters = ', self.get_bgpaas_parameters())
        print('P mac_limit_control = ', self.get_mac_limit_control())
        print('P mac_move_control = ', self.get_mac_move_control())
        print('P mac_aging_time = ', self.get_mac_aging_time())
        print('P igmp_enable = ', self.get_igmp_enable())
        print('P alarm_enable = ', self.get_alarm_enable())
        print('P user_defined_log_statistics = ', self.get_user_defined_log_statistics())
        print('P enable_security_policy_draft = ', self.get_enable_security_policy_draft())
        print('P supported_fabric_annotations = ', self.get_supported_fabric_annotations())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS feature_flag = ', self.get_feature_flags())
        print('REF bgp_router = ', self.get_bgp_router_refs())
        print('HAS control_node_zone = ', self.get_control_node_zones())
        print('HAS global_vrouter_config = ', self.get_global_vrouter_configs())
        print('HAS global_qos_config = ', self.get_global_qos_configs())
        print('HAS virtual_router = ', self.get_virtual_routers())
        print('HAS config_node = ', self.get_config_nodes())
        print('HAS analytics_node = ', self.get_analytics_nodes())
        print('HAS flow_node = ', self.get_flow_nodes())
        print('HAS devicemgr_node = ', self.get_devicemgr_nodes())
        print('HAS database_node = ', self.get_database_nodes())
        print('HAS webui_node = ', self.get_webui_nodes())
        print('HAS config_database_node = ', self.get_config_database_nodes())
        print('HAS analytics_alarm_node = ', self.get_analytics_alarm_nodes())
        print('HAS analytics_snmp_node = ', self.get_analytics_snmp_nodes())
        print('HAS service_appliance_set = ', self.get_service_appliance_sets())
        print('HAS api_access_list = ', self.get_api_access_lists())
        print('HAS alarm = ', self.get_alarms())
        print('HAS job_template = ', self.get_job_templates())
        print('HAS data_center_interconnect = ', self.get_data_center_interconnects())
        print('HAS intent_map = ', self.get_intent_maps())
        print('HAS fabric = ', self.get_fabrics())
        print('HAS node_profile = ', self.get_node_profiles())
        print('HAS physical_router = ', self.get_physical_routers())
        print('HAS device_image = ', self.get_device_images())
        print('HAS node = ', self.get_nodes())
        print('HAS feature = ', self.get_features())
        print('HAS physical_role = ', self.get_physical_roles())
        print('HAS overlay_role = ', self.get_overlay_roles())
        print('HAS role_definition = ', self.get_role_definitions())
        print('HAS global_analytics_config = ', self.get_global_analytics_configs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK qos_config = ', self.get_qos_config_back_refs())
    # end dump

# end class GlobalSystemConfig

class SubCluster(object):
    """


    Created By:

    Properties:
        * sub_cluster_asn
            Type: int, *within* [1, 4294967295]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              AS number of that cluster.

        * sub_cluster_id
            Type: int, *within* [1, 4294967295]

            Created By: System

            Operations Allowed: R

            Description:

              Unique 16 or 32 bit ID assigned to this sub-cluster. User can define the ID he wants to use.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualRouter` objects
        * list of :class:`.BgpRouter` objects
    """

    resource_type = 'sub-cluster'
    object_type = 'sub_cluster'

    prop_fields = set([u'sub_cluster_asn', u'sub_cluster_id', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['virtual_router_back_refs', 'bgp_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'sub_cluster_asn': {'operations': 'CRUD', 'restrictions': [1, 4294967295], 'default': None, 'description': ['AS number of that cluster.'], 'simple_type': u'AutonomousSystemType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'sub_cluster_id': {'operations': 'R', 'restrictions': [1, 4294967295], 'default': None, 'description': ['Unique 16 or 32 bit ID assigned to this sub-cluster. User can define the ID he wants to use.'], 'simple_type': u'SubClusterIdType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'system-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_router_back_refs'] = ('virtual-router', 'None', False)
    backref_field_types['bgp_router_back_refs'] = ('bgp-router', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['sub_cluster_asn'] = 'sub-cluster-asn'
    prop_field_metas['sub_cluster_id'] = 'sub-cluster-id'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'sub-cluster-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, sub_cluster_asn=None, sub_cluster_id=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'sub-cluster'
        if not name:
            name = u'default-sub-cluster'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if sub_cluster_asn is not None:
            self._sub_cluster_asn = sub_cluster_asn
        if sub_cluster_id is not None:
            self._sub_cluster_id = sub_cluster_id
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (sub-cluster)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of sub-cluster in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of sub-cluster as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def sub_cluster_asn(self):
        """Get sub-cluster-asn for sub-cluster.
        
        :returns: AutonomousSystemType object
        
        """
        return getattr(self, '_sub_cluster_asn', None)
    # end sub_cluster_asn

    @sub_cluster_asn.setter
    def sub_cluster_asn(self, sub_cluster_asn):
        """Set sub-cluster-asn for sub-cluster.
        
        :param sub_cluster_asn: AutonomousSystemType object
        
        """
        self._sub_cluster_asn = sub_cluster_asn
    # end sub_cluster_asn

    def set_sub_cluster_asn(self, value):
        self.sub_cluster_asn = value
    # end set_sub_cluster_asn

    def get_sub_cluster_asn(self):
        return self.sub_cluster_asn
    # end get_sub_cluster_asn

    @property
    def sub_cluster_id(self):
        """Get sub-cluster-id for sub-cluster.
        
        :returns: SubClusterIdType object
        
        """
        return getattr(self, '_sub_cluster_id', None)
    # end sub_cluster_id

    @sub_cluster_id.setter
    def sub_cluster_id(self, sub_cluster_id):
        """Set sub-cluster-id for sub-cluster.
        
        :param sub_cluster_id: SubClusterIdType object
        
        """
        self._sub_cluster_id = sub_cluster_id
    # end sub_cluster_id

    def set_sub_cluster_id(self, value):
        self.sub_cluster_id = value
    # end set_sub_cluster_id

    def get_sub_cluster_id(self):
        return self.sub_cluster_id
    # end get_sub_cluster_id

    @property
    def id_perms(self):
        """Get id-perms for sub-cluster.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for sub-cluster.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for sub-cluster.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for sub-cluster.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for sub-cluster.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for sub-cluster.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for sub-cluster.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for sub-cluster.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_sub_cluster_asn'):
            self._serialize_field_to_json(serialized, field_names, 'sub_cluster_asn')
        if hasattr(self, '_sub_cluster_id'):
            self._serialize_field_to_json(serialized, field_names, 'sub_cluster_id')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for sub-cluster.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to sub-cluster.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for sub-cluster.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for sub-cluster.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_router_back_refs(self):
        """Return list of all virtual-routers using this sub-cluster"""
        return getattr(self, 'virtual_router_back_refs', None)
    # end get_virtual_router_back_refs

    def get_bgp_router_back_refs(self):
        """Return list of all bgp-routers using this sub-cluster"""
        return getattr(self, 'bgp_router_back_refs', None)
    # end get_bgp_router_back_refs

    def dump(self):
        """Display sub-cluster object in compact form."""
        print('------------ sub-cluster ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P sub_cluster_asn = ', self.get_sub_cluster_asn())
        print('P sub_cluster_id = ', self.get_sub_cluster_id())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_router = ', self.get_virtual_router_back_refs())
        print('BCK bgp_router = ', self.get_bgp_router_back_refs())
    # end dump

# end class SubCluster

class ForwardingClass(object):
    """
    Link to global-qos config.

    Created By:
        User

    Child of:
        :class:`.GlobalQosConfig` object

    Properties:
        * forwarding_class_id
            Type: int, *within* [0, 255]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Unique ID for this forwarding class.

        * forwarding_class_dscp
            Type: int, *within* [0, 63]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              DSCP value to be written on outgoing packet for this forwarding-class.

        * forwarding_class_vlan_priority
            Type: int, *within* [0, 7]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              802.1p value to be written on outgoing packet for this forwarding-class.

        * forwarding_class_mpls_exp
            Type: int, *within* [0, 7]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              MPLS exp value to be written on outgoing packet for this forwarding-class.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.QosQueue` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Qos queue to be used for this forwarding class.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'forwarding-class'
    object_type = 'forwarding_class'

    prop_fields = set([u'forwarding_class_id', u'forwarding_class_dscp', u'forwarding_class_vlan_priority', u'forwarding_class_mpls_exp', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['qos_queue_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'forwarding_class_id': {'operations': 'CRUD', 'restrictions': [0, 255], 'default': 0, 'description': ['Unique ID for this forwarding class.'], 'simple_type': u'ForwardingClassId', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'forwarding_class_dscp': {'operations': 'CRUD', 'restrictions': [0, 63], 'default': None, 'description': ['DSCP value to be written on outgoing packet for this forwarding-class.'], 'simple_type': u'DscpValueType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'forwarding_class_vlan_priority': {'operations': 'CRUD', 'restrictions': [0, 7], 'default': None, 'description': ['802.1p value to be written on outgoing packet for this forwarding-class.'], 'simple_type': u'VlanPriorityType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'forwarding_class_mpls_exp': {'operations': 'CRUD', 'restrictions': [0, 7], 'default': None, 'description': ['MPLS exp value to be written on outgoing packet for this forwarding-class.'], 'simple_type': u'MplsExpType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['qos_queue_refs'] = ('qos-queue', 'None', False, ['Qos queue to be used for this forwarding class.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'global-qos-config']

    prop_field_metas = {}
    prop_field_metas['forwarding_class_id'] = 'forwarding-class-id'
    prop_field_metas['forwarding_class_dscp'] = 'forwarding-class-dscp'
    prop_field_metas['forwarding_class_vlan_priority'] = 'forwarding-class-vlan-priority'
    prop_field_metas['forwarding_class_mpls_exp'] = 'forwarding-class-mpls-exp'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['qos_queue_refs'] = 'forwarding-class-qos-queue'
    ref_field_metas['tag_refs'] = 'forwarding-class-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, forwarding_class_id=0, forwarding_class_dscp=None, forwarding_class_vlan_priority=None, forwarding_class_mpls_exp=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'forwarding-class'
        if not name:
            name = u'default-forwarding-class'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-qos-config'
            self.fq_name = ['default-global-system-config', u'default-global-qos-config']
            self.fq_name.append(name)


        # property fields
        if forwarding_class_id is not None:
            self._forwarding_class_id = forwarding_class_id
        if forwarding_class_dscp is not None:
            self._forwarding_class_dscp = forwarding_class_dscp
        if forwarding_class_vlan_priority is not None:
            self._forwarding_class_vlan_priority = forwarding_class_vlan_priority
        if forwarding_class_mpls_exp is not None:
            self._forwarding_class_mpls_exp = forwarding_class_mpls_exp
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (forwarding-class)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of forwarding-class in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of forwarding-class as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of forwarding-class's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of forwarding-class's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def forwarding_class_id(self):
        """Get forwarding-class-id for forwarding-class.
        
        :returns: ForwardingClassId object
        
        """
        return getattr(self, '_forwarding_class_id', None)
    # end forwarding_class_id

    @forwarding_class_id.setter
    def forwarding_class_id(self, forwarding_class_id):
        """Set forwarding-class-id for forwarding-class.
        
        :param forwarding_class_id: ForwardingClassId object
        
        """
        self._forwarding_class_id = forwarding_class_id
    # end forwarding_class_id

    def set_forwarding_class_id(self, value):
        self.forwarding_class_id = value
    # end set_forwarding_class_id

    def get_forwarding_class_id(self):
        return self.forwarding_class_id
    # end get_forwarding_class_id

    @property
    def forwarding_class_dscp(self):
        """Get forwarding-class-dscp for forwarding-class.
        
        :returns: DscpValueType object
        
        """
        return getattr(self, '_forwarding_class_dscp', None)
    # end forwarding_class_dscp

    @forwarding_class_dscp.setter
    def forwarding_class_dscp(self, forwarding_class_dscp):
        """Set forwarding-class-dscp for forwarding-class.
        
        :param forwarding_class_dscp: DscpValueType object
        
        """
        self._forwarding_class_dscp = forwarding_class_dscp
    # end forwarding_class_dscp

    def set_forwarding_class_dscp(self, value):
        self.forwarding_class_dscp = value
    # end set_forwarding_class_dscp

    def get_forwarding_class_dscp(self):
        return self.forwarding_class_dscp
    # end get_forwarding_class_dscp

    @property
    def forwarding_class_vlan_priority(self):
        """Get forwarding-class-vlan-priority for forwarding-class.
        
        :returns: VlanPriorityType object
        
        """
        return getattr(self, '_forwarding_class_vlan_priority', None)
    # end forwarding_class_vlan_priority

    @forwarding_class_vlan_priority.setter
    def forwarding_class_vlan_priority(self, forwarding_class_vlan_priority):
        """Set forwarding-class-vlan-priority for forwarding-class.
        
        :param forwarding_class_vlan_priority: VlanPriorityType object
        
        """
        self._forwarding_class_vlan_priority = forwarding_class_vlan_priority
    # end forwarding_class_vlan_priority

    def set_forwarding_class_vlan_priority(self, value):
        self.forwarding_class_vlan_priority = value
    # end set_forwarding_class_vlan_priority

    def get_forwarding_class_vlan_priority(self):
        return self.forwarding_class_vlan_priority
    # end get_forwarding_class_vlan_priority

    @property
    def forwarding_class_mpls_exp(self):
        """Get forwarding-class-mpls-exp for forwarding-class.
        
        :returns: MplsExpType object
        
        """
        return getattr(self, '_forwarding_class_mpls_exp', None)
    # end forwarding_class_mpls_exp

    @forwarding_class_mpls_exp.setter
    def forwarding_class_mpls_exp(self, forwarding_class_mpls_exp):
        """Set forwarding-class-mpls-exp for forwarding-class.
        
        :param forwarding_class_mpls_exp: MplsExpType object
        
        """
        self._forwarding_class_mpls_exp = forwarding_class_mpls_exp
    # end forwarding_class_mpls_exp

    def set_forwarding_class_mpls_exp(self, value):
        self.forwarding_class_mpls_exp = value
    # end set_forwarding_class_mpls_exp

    def get_forwarding_class_mpls_exp(self):
        return self.forwarding_class_mpls_exp
    # end get_forwarding_class_mpls_exp

    @property
    def id_perms(self):
        """Get id-perms for forwarding-class.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for forwarding-class.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for forwarding-class.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for forwarding-class.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for forwarding-class.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for forwarding-class.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for forwarding-class.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for forwarding-class.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_forwarding_class_id'):
            self._serialize_field_to_json(serialized, field_names, 'forwarding_class_id')
        if hasattr(self, '_forwarding_class_dscp'):
            self._serialize_field_to_json(serialized, field_names, 'forwarding_class_dscp')
        if hasattr(self, '_forwarding_class_vlan_priority'):
            self._serialize_field_to_json(serialized, field_names, 'forwarding_class_vlan_priority')
        if hasattr(self, '_forwarding_class_mpls_exp'):
            self._serialize_field_to_json(serialized, field_names, 'forwarding_class_mpls_exp')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'qos_queue_refs'):
            self._serialize_field_to_json(serialized, field_names, 'qos_queue_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_qos_queue(self, ref_obj):
        """Set qos-queue for forwarding-class.
        
        :param ref_obj: QosQueue object
        
        """
        self.qos_queue_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.qos_queue_refs[0]['uuid'] = ref_obj.uuid

    # end set_qos_queue

    def add_qos_queue(self, ref_obj):
        """Add qos-queue to forwarding-class.
        
        :param ref_obj: QosQueue object
        
        """
        refs = getattr(self, 'qos_queue_refs', [])
        if not refs:
            self.qos_queue_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.qos_queue_refs.append(ref_info)
    # end add_qos_queue

    def del_qos_queue(self, ref_obj):
        refs = self.get_qos_queue_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.qos_queue_refs.remove(ref)
                return
    # end del_qos_queue

    def set_qos_queue_list(self, ref_obj_list):
        """Set qos-queue list for forwarding-class.
        
        :param ref_obj_list: list of QosQueue object
        
        """
        self.qos_queue_refs = ref_obj_list
    # end set_qos_queue_list

    def get_qos_queue_refs(self):
        """Return qos-queue list for forwarding-class.
        
        :returns: list of <QosQueue>
        
        """
        return getattr(self, 'qos_queue_refs', None)
    # end get_qos_queue_refs

    def set_tag(self, ref_obj):
        """Set tag for forwarding-class.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to forwarding-class.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for forwarding-class.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for forwarding-class.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display forwarding-class object in compact form."""
        print('------------ forwarding-class ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P forwarding_class_id = ', self.get_forwarding_class_id())
        print('P forwarding_class_dscp = ', self.get_forwarding_class_dscp())
        print('P forwarding_class_vlan_priority = ', self.get_forwarding_class_vlan_priority())
        print('P forwarding_class_mpls_exp = ', self.get_forwarding_class_mpls_exp())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF qos_queue = ', self.get_qos_queue_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class ForwardingClass

class ServiceGroup(object):
    """
    When parent is policy-management:
        Service Group object
    When parent is project:
        Project level service Group object


    Created By:
        User when parent is :class:`.PolicyManagement`
        User when parent is :class:`.Project`

    Child of:
        :class:`.PolicyManagement` object OR
        :class:`.Project` object

    Properties:
        * draft_mode_state
            Type: str, *one-of* [u'created', u'updated', u'deleted']

            Created By: User (optional)

            Operations Allowed: R

            Description:

        * service_group_firewall_service_list
            Type: :class:`.FirewallServiceGroupType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              list of service objects (protocol, source port and destination port

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.FirewallRule` objects
    """

    resource_type = 'service-group'
    object_type = 'service_group'

    prop_fields = set([u'draft_mode_state', u'service_group_firewall_service_list', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['firewall_rule_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'draft_mode_state': {'operations': 'R', 'restrictions': [u'created', u'updated', u'deleted'], 'default': None, 'description': [], 'simple_type': u'DraftModeState', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'service_group_firewall_service_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['list of service objects (protocol, source port and destination port'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FirewallServiceGroupType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['firewall_rule_back_refs'] = ('firewall-rule', 'None', False)

    children_field_types = {}

    parent_types = [u'policy-management', 'project']

    prop_field_metas = {}
    prop_field_metas['draft_mode_state'] = 'draft-mode-state'
    prop_field_metas['service_group_firewall_service_list'] = 'service-group-firewall-service-list'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'service-group-tag'

    children_field_metas = {}

    prop_list_fields = set([u'service_group_firewall_service_list'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['service_group_firewall_service_list'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, draft_mode_state=None, service_group_firewall_service_list=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-group'
        if not name:
            name = u'default-service-group'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'policy-management', 'project']")

        # property fields
        if draft_mode_state is not None:
            self._draft_mode_state = draft_mode_state
        if service_group_firewall_service_list is not None:
            self._service_group_firewall_service_list = service_group_firewall_service_list
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-group)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-group in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-group as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of service-group's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of service-group's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def draft_mode_state(self):
        """Get draft-mode-state for service-group.
        
        :returns: DraftModeState object
        
        """
        return getattr(self, '_draft_mode_state', None)
    # end draft_mode_state

    @draft_mode_state.setter
    def draft_mode_state(self, draft_mode_state):
        """Set draft-mode-state for service-group.
        
        :param draft_mode_state: DraftModeState object
        
        """
        self._draft_mode_state = draft_mode_state
    # end draft_mode_state

    def set_draft_mode_state(self, value):
        self.draft_mode_state = value
    # end set_draft_mode_state

    def get_draft_mode_state(self):
        return self.draft_mode_state
    # end get_draft_mode_state

    @property
    def service_group_firewall_service_list(self):
        """Get service-group-firewall-service-list for service-group.
        
        :returns: FirewallServiceGroupType object
        
        """
        return getattr(self, '_service_group_firewall_service_list', None)
    # end service_group_firewall_service_list

    @service_group_firewall_service_list.setter
    def service_group_firewall_service_list(self, service_group_firewall_service_list):
        """Set service-group-firewall-service-list for service-group.
        
        :param service_group_firewall_service_list: FirewallServiceGroupType object
        
        """
        self._service_group_firewall_service_list = service_group_firewall_service_list
    # end service_group_firewall_service_list

    def set_service_group_firewall_service_list(self, value):
        self.service_group_firewall_service_list = value
    # end set_service_group_firewall_service_list

    def get_service_group_firewall_service_list(self):
        return self.service_group_firewall_service_list
    # end get_service_group_firewall_service_list

    @property
    def id_perms(self):
        """Get id-perms for service-group.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-group.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-group.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-group.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-group.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-group.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-group.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_draft_mode_state'):
            self._serialize_field_to_json(serialized, field_names, 'draft_mode_state')
        if hasattr(self, '_service_group_firewall_service_list'):
            self._serialize_field_to_json(serialized, field_names, 'service_group_firewall_service_list')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for service-group.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-group.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-group.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-group.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_firewall_rule_back_refs(self):
        """Return list of all firewall-rules using this service-group"""
        return getattr(self, 'firewall_rule_back_refs', None)
    # end get_firewall_rule_back_refs

    def dump(self):
        """Display service-group object in compact form."""
        print('------------ service-group ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P draft_mode_state = ', self.get_draft_mode_state())
        print('P service_group_firewall_service_list = ', self.get_service_group_firewall_service_list())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK firewall_rule = ', self.get_firewall_rule_back_refs())
    # end dump

# end class ServiceGroup

class GlobalAnalyticsConfig(object):
    """
global analytics config related data

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.StructuredSyslogConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of structured-syslog-config that are          applicable to objects anchored under global-

              analytics-config.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'global-analytics-config'
    object_type = 'global_analytics_config'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([u'structured_syslog_configs'])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['structured_syslog_configs'] = ('structured-syslog-config', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'global-analytics-config-tag'

    children_field_metas = {}
    children_field_metas['structured_syslog_configs'] = 'global-analytics-config-structured-syslog-config'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'global-analytics-config'
        if not name:
            name = u'default-global-analytics-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (global-analytics-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of global-analytics-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of global-analytics-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of global-analytics-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of global-analytics-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for global-analytics-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for global-analytics-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for global-analytics-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for global-analytics-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for global-analytics-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for global-analytics-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for global-analytics-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for global-analytics-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_structured_syslog_configs(self):
        return getattr(self, 'structured_syslog_configs', None)
    # end get_structured_syslog_configs

    def set_tag(self, ref_obj):
        """Set tag for global-analytics-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to global-analytics-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for global-analytics-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for global-analytics-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display global-analytics-config object in compact form."""
        print('------------ global-analytics-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS structured_syslog_config = ', self.get_structured_syslog_configs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class GlobalAnalyticsConfig

class AddressGroup(object):
    """
    When parent is policy-management:
        Address Group object
    When parent is project:
        Project level address Group object


    Created By:
        User when parent is :class:`.PolicyManagement`
        User when parent is :class:`.Project`

    Child of:
        :class:`.PolicyManagement` object OR
        :class:`.Project` object

    Properties:
        * draft_mode_state
            Type: str, *one-of* [u'created', u'updated', u'deleted']

            Created By: User (optional)

            Operations Allowed: R

            Description:

        * address_group_prefix
            Type: :class:`.SubnetListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of IP prefix

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.FirewallRule` objects
    """

    resource_type = 'address-group'
    object_type = 'address_group'

    prop_fields = set([u'draft_mode_state', u'address_group_prefix', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['firewall_rule_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'draft_mode_state': {'operations': 'R', 'restrictions': [u'created', u'updated', u'deleted'], 'default': None, 'description': [], 'simple_type': u'DraftModeState', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'address_group_prefix': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of IP prefix'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SubnetListType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['firewall_rule_back_refs'] = ('firewall-rule', 'None', False)

    children_field_types = {}

    parent_types = [u'policy-management', 'project']

    prop_field_metas = {}
    prop_field_metas['draft_mode_state'] = 'draft-mode-state'
    prop_field_metas['address_group_prefix'] = 'address-group-prefix'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'address-group-tag'

    children_field_metas = {}

    prop_list_fields = set([u'address_group_prefix'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['address_group_prefix'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, draft_mode_state=None, address_group_prefix=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'address-group'
        if not name:
            name = u'default-address-group'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'policy-management', 'project']")

        # property fields
        if draft_mode_state is not None:
            self._draft_mode_state = draft_mode_state
        if address_group_prefix is not None:
            self._address_group_prefix = address_group_prefix
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (address-group)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of address-group in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of address-group as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of address-group's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of address-group's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def draft_mode_state(self):
        """Get draft-mode-state for address-group.
        
        :returns: DraftModeState object
        
        """
        return getattr(self, '_draft_mode_state', None)
    # end draft_mode_state

    @draft_mode_state.setter
    def draft_mode_state(self, draft_mode_state):
        """Set draft-mode-state for address-group.
        
        :param draft_mode_state: DraftModeState object
        
        """
        self._draft_mode_state = draft_mode_state
    # end draft_mode_state

    def set_draft_mode_state(self, value):
        self.draft_mode_state = value
    # end set_draft_mode_state

    def get_draft_mode_state(self):
        return self.draft_mode_state
    # end get_draft_mode_state

    @property
    def address_group_prefix(self):
        """Get address-group-prefix for address-group.
        
        :returns: SubnetListType object
        
        """
        return getattr(self, '_address_group_prefix', None)
    # end address_group_prefix

    @address_group_prefix.setter
    def address_group_prefix(self, address_group_prefix):
        """Set address-group-prefix for address-group.
        
        :param address_group_prefix: SubnetListType object
        
        """
        self._address_group_prefix = address_group_prefix
    # end address_group_prefix

    def set_address_group_prefix(self, value):
        self.address_group_prefix = value
    # end set_address_group_prefix

    def get_address_group_prefix(self):
        return self.address_group_prefix
    # end get_address_group_prefix

    @property
    def id_perms(self):
        """Get id-perms for address-group.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for address-group.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for address-group.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for address-group.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for address-group.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for address-group.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for address-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for address-group.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_draft_mode_state'):
            self._serialize_field_to_json(serialized, field_names, 'draft_mode_state')
        if hasattr(self, '_address_group_prefix'):
            self._serialize_field_to_json(serialized, field_names, 'address_group_prefix')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for address-group.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to address-group.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for address-group.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for address-group.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_firewall_rule_back_refs(self):
        """Return list of all firewall-rules using this address-group"""
        return getattr(self, 'firewall_rule_back_refs', None)
    # end get_firewall_rule_back_refs

    def dump(self):
        """Display address-group object in compact form."""
        print('------------ address-group ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P draft_mode_state = ', self.get_draft_mode_state())
        print('P address_group_prefix = ', self.get_address_group_prefix())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK firewall_rule = ', self.get_firewall_rule_back_refs())
    # end dump

# end class AddressGroup

class ApplicationPolicySet(object):
    """
    When parent is policy-management:
        Application-policy object defining policies to apply for a given application tag
    When parent is project:
        Project level application-policy object defining policies to apply for a given application tag


    Created By:
        User when parent is :class:`.PolicyManagement`
        User when parent is :class:`.Project`

    Child of:
        :class:`.PolicyManagement` object OR
        :class:`.Project` object

    Properties:
        * draft_mode_state
            Type: str, *one-of* [u'created', u'updated', u'deleted']

            Created By: User (optional)

            Operations Allowed: R

            Description:

        * all_applications
            Type: bool

            Created By: User (optional)

            Operations Allowed: R

            Description:

              If set, indicates application policy set to be applied to all application tags

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.FirewallPolicy` object, :class:`.FirewallSequence` attribute)
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to firewall-policy attached to this application-policy

        * list of :class:`.GlobalVrouterConfig` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to global-vrouter-config is automatically created by system for global

              application policy sets

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Project` objects
    """

    resource_type = 'application-policy-set'
    object_type = 'application_policy_set'

    prop_fields = set([u'draft_mode_state', u'all_applications', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['firewall_policy_refs', 'global_vrouter_config_refs', u'tag_refs'])
    backref_fields = set(['project_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'draft_mode_state': {'operations': 'R', 'restrictions': [u'created', u'updated', u'deleted'], 'default': None, 'description': [], 'simple_type': u'DraftModeState', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'all_applications': {'operations': 'R', 'restrictions': None, 'default': False, 'description': ['If set, indicates application policy set to be applied to all application tags'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['firewall_policy_refs'] = ('firewall-policy', 'FirewallSequence', False, ['Reference to firewall-policy attached to this application-policy'])
    ref_field_types['global_vrouter_config_refs'] = ('global-vrouter-config', 'None', False, ['Reference to global-vrouter-config is automatically created by system for global', 'application policy sets'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['project_back_refs'] = ('project', 'None', False)

    children_field_types = {}

    parent_types = [u'policy-management', 'project']

    prop_field_metas = {}
    prop_field_metas['draft_mode_state'] = 'draft-mode-state'
    prop_field_metas['all_applications'] = 'all-applications'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['firewall_policy_refs'] = 'application-policy-set-firewall-policy'
    ref_field_metas['global_vrouter_config_refs'] = 'application-policy-set-global-vrouter-config'
    ref_field_metas['tag_refs'] = 'application-policy-set-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, draft_mode_state=None, all_applications=False, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'application-policy-set'
        if not name:
            name = u'default-application-policy-set'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'policy-management', 'project']")

        # property fields
        if draft_mode_state is not None:
            self._draft_mode_state = draft_mode_state
        if all_applications is not None:
            self._all_applications = all_applications
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (application-policy-set)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of application-policy-set in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of application-policy-set as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of application-policy-set's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of application-policy-set's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def draft_mode_state(self):
        """Get draft-mode-state for application-policy-set.
        
        :returns: DraftModeState object
        
        """
        return getattr(self, '_draft_mode_state', None)
    # end draft_mode_state

    @draft_mode_state.setter
    def draft_mode_state(self, draft_mode_state):
        """Set draft-mode-state for application-policy-set.
        
        :param draft_mode_state: DraftModeState object
        
        """
        self._draft_mode_state = draft_mode_state
    # end draft_mode_state

    def set_draft_mode_state(self, value):
        self.draft_mode_state = value
    # end set_draft_mode_state

    def get_draft_mode_state(self):
        return self.draft_mode_state
    # end get_draft_mode_state

    @property
    def all_applications(self):
        """Get all-applications for application-policy-set.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_all_applications', None)
    # end all_applications

    @all_applications.setter
    def all_applications(self, all_applications):
        """Set all-applications for application-policy-set.
        
        :param all_applications: xsd:boolean object
        
        """
        self._all_applications = all_applications
    # end all_applications

    def set_all_applications(self, value):
        self.all_applications = value
    # end set_all_applications

    def get_all_applications(self):
        return self.all_applications
    # end get_all_applications

    @property
    def id_perms(self):
        """Get id-perms for application-policy-set.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for application-policy-set.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for application-policy-set.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for application-policy-set.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for application-policy-set.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for application-policy-set.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for application-policy-set.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for application-policy-set.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_draft_mode_state'):
            self._serialize_field_to_json(serialized, field_names, 'draft_mode_state')
        if hasattr(self, '_all_applications'):
            self._serialize_field_to_json(serialized, field_names, 'all_applications')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'firewall_policy_refs'):
            self._serialize_field_to_json(serialized, field_names, 'firewall_policy_refs')
        if hasattr(self, 'global_vrouter_config_refs'):
            self._serialize_field_to_json(serialized, field_names, 'global_vrouter_config_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_firewall_policy(self, ref_obj, ref_data=None):
        """Set firewall-policy for application-policy-set.
        
        :param ref_obj: FirewallPolicy object
        :param ref_data: FirewallSequence object
        
        """
        self.firewall_policy_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.firewall_policy_refs[0]['uuid'] = ref_obj.uuid

    # end set_firewall_policy

    def add_firewall_policy(self, ref_obj, ref_data=None):
        """Add firewall-policy to application-policy-set.
        
        :param ref_obj: FirewallPolicy object
        :param ref_data: FirewallSequence object
        
        """
        refs = getattr(self, 'firewall_policy_refs', [])
        if not refs:
            self.firewall_policy_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.firewall_policy_refs.append(ref_info)
    # end add_firewall_policy

    def del_firewall_policy(self, ref_obj):
        refs = self.get_firewall_policy_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.firewall_policy_refs.remove(ref)
                return
    # end del_firewall_policy

    def set_firewall_policy_list(self, ref_obj_list, ref_data_list=None):
        """Set firewall-policy list for application-policy-set.
        
        :param ref_obj_list: list of FirewallPolicy object
        :param ref_data_list: list of FirewallSequence object
        
        """
        self.firewall_policy_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_firewall_policy_list

    def get_firewall_policy_refs(self):
        """Return firewall-policy list for application-policy-set.
        
        :returns: list of tuple <FirewallPolicy, FirewallSequence>
        
        """
        return getattr(self, 'firewall_policy_refs', None)
    # end get_firewall_policy_refs

    def set_global_vrouter_config(self, ref_obj):
        """Set global-vrouter-config for application-policy-set.
        
        :param ref_obj: GlobalVrouterConfig object
        
        """
        self.global_vrouter_config_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.global_vrouter_config_refs[0]['uuid'] = ref_obj.uuid

    # end set_global_vrouter_config

    def add_global_vrouter_config(self, ref_obj):
        """Add global-vrouter-config to application-policy-set.
        
        :param ref_obj: GlobalVrouterConfig object
        
        """
        refs = getattr(self, 'global_vrouter_config_refs', [])
        if not refs:
            self.global_vrouter_config_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.global_vrouter_config_refs.append(ref_info)
    # end add_global_vrouter_config

    def del_global_vrouter_config(self, ref_obj):
        refs = self.get_global_vrouter_config_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.global_vrouter_config_refs.remove(ref)
                return
    # end del_global_vrouter_config

    def set_global_vrouter_config_list(self, ref_obj_list):
        """Set global-vrouter-config list for application-policy-set.
        
        :param ref_obj_list: list of GlobalVrouterConfig object
        
        """
        self.global_vrouter_config_refs = ref_obj_list
    # end set_global_vrouter_config_list

    def get_global_vrouter_config_refs(self):
        """Return global-vrouter-config list for application-policy-set.
        
        :returns: list of <GlobalVrouterConfig>
        
        """
        return getattr(self, 'global_vrouter_config_refs', None)
    # end get_global_vrouter_config_refs

    def set_tag(self, ref_obj):
        """Set tag for application-policy-set.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to application-policy-set.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for application-policy-set.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for application-policy-set.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_project_back_refs(self):
        """Return list of all projects using this application-policy-set"""
        return getattr(self, 'project_back_refs', None)
    # end get_project_back_refs

    def dump(self):
        """Display application-policy-set object in compact form."""
        print('------------ application-policy-set ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P draft_mode_state = ', self.get_draft_mode_state())
        print('P all_applications = ', self.get_all_applications())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF firewall_policy = ', self.get_firewall_policy_refs())
        print('REF global_vrouter_config = ', self.get_global_vrouter_config_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK project = ', self.get_project_back_refs())
    # end dump

# end class ApplicationPolicySet

class VirtualIp(object):
    """
    Virtual ip object application(protocol, port). Applicable only to LBaaS V1

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * virtual_ip_properties
            Type: :class:`.VirtualIpType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Virtual ip configuration like port, protocol, subnet etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.LoadbalancerPool` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the load balancer pool that this virtual ip represent. Applicable only to LBaaS V1

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the virtual machine interface for virtual ip. Applicable only to LBaaS V1

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'virtual-ip'
    object_type = 'virtual_ip'

    prop_fields = set([u'virtual_ip_properties', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'loadbalancer_pool_refs', 'virtual_machine_interface_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'virtual_ip_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Virtual ip configuration like port, protocol, subnet etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VirtualIpType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['loadbalancer_pool_refs'] = ('loadbalancer-pool', 'None', False, ['Reference to the load balancer pool that this virtual ip represent. Applicable only to LBaaS V1'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to the virtual machine interface for virtual ip. Applicable only to LBaaS V1'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['virtual_ip_properties'] = 'virtual-ip-properties'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['loadbalancer_pool_refs'] = 'virtual-ip-loadbalancer-pool'
    ref_field_metas['virtual_machine_interface_refs'] = 'virtual-ip-virtual-machine-interface'
    ref_field_metas['tag_refs'] = 'virtual-ip-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, virtual_ip_properties=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-ip'
        if not name:
            name = u'default-virtual-ip'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if virtual_ip_properties is not None:
            self._virtual_ip_properties = virtual_ip_properties
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-ip)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-ip in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-ip as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of virtual-ip's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of virtual-ip's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def virtual_ip_properties(self):
        """Get virtual-ip-properties for virtual-ip.
        
        :returns: VirtualIpType object
        
        """
        return getattr(self, '_virtual_ip_properties', None)
    # end virtual_ip_properties

    @virtual_ip_properties.setter
    def virtual_ip_properties(self, virtual_ip_properties):
        """Set virtual-ip-properties for virtual-ip.
        
        :param virtual_ip_properties: VirtualIpType object
        
        """
        self._virtual_ip_properties = virtual_ip_properties
    # end virtual_ip_properties

    def set_virtual_ip_properties(self, value):
        self.virtual_ip_properties = value
    # end set_virtual_ip_properties

    def get_virtual_ip_properties(self):
        return self.virtual_ip_properties
    # end get_virtual_ip_properties

    @property
    def id_perms(self):
        """Get id-perms for virtual-ip.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-ip.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-ip.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-ip.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-ip.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-ip.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-ip.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-ip.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_virtual_ip_properties'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_ip_properties')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'loadbalancer_pool_refs'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_pool_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_loadbalancer_pool(self, ref_obj):
        """Set loadbalancer-pool for virtual-ip.
        
        :param ref_obj: LoadbalancerPool object
        
        """
        self.loadbalancer_pool_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.loadbalancer_pool_refs[0]['uuid'] = ref_obj.uuid

    # end set_loadbalancer_pool

    def add_loadbalancer_pool(self, ref_obj):
        """Add loadbalancer-pool to virtual-ip.
        
        :param ref_obj: LoadbalancerPool object
        
        """
        refs = getattr(self, 'loadbalancer_pool_refs', [])
        if not refs:
            self.loadbalancer_pool_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.loadbalancer_pool_refs.append(ref_info)
    # end add_loadbalancer_pool

    def del_loadbalancer_pool(self, ref_obj):
        refs = self.get_loadbalancer_pool_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.loadbalancer_pool_refs.remove(ref)
                return
    # end del_loadbalancer_pool

    def set_loadbalancer_pool_list(self, ref_obj_list):
        """Set loadbalancer-pool list for virtual-ip.
        
        :param ref_obj_list: list of LoadbalancerPool object
        
        """
        self.loadbalancer_pool_refs = ref_obj_list
    # end set_loadbalancer_pool_list

    def get_loadbalancer_pool_refs(self):
        """Return loadbalancer-pool list for virtual-ip.
        
        :returns: list of <LoadbalancerPool>
        
        """
        return getattr(self, 'loadbalancer_pool_refs', None)
    # end get_loadbalancer_pool_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for virtual-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to virtual-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for virtual-ip.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for virtual-ip.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for virtual-ip.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-ip.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-ip.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-ip.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display virtual-ip object in compact form."""
        print('------------ virtual-ip ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P virtual_ip_properties = ', self.get_virtual_ip_properties())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF loadbalancer_pool = ', self.get_loadbalancer_pool_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class VirtualIp

class IntentMap(object):
    """
    List of intent-maps in the system.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * intent_map_intent_type
            Type: str, *one-of* [u'assisted-replicator']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Based on this value we determine what intent model we are serving

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.Fabric` objects
    """

    resource_type = 'intent-map'
    object_type = 'intent_map'

    prop_fields = set([u'intent_map_intent_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['physical_router_back_refs', 'virtual_network_back_refs', 'fabric_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'intent_map_intent_type': {'operations': 'CRUD', 'restrictions': [u'assisted-replicator'], 'default': None, 'description': ['Based on this value we determine what intent model we are serving'], 'simple_type': u'IntentType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)
    backref_field_types['fabric_back_refs'] = ('fabric', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['intent_map_intent_type'] = 'intent-map-intent-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'intent-map-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, intent_map_intent_type=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'intent-map'
        if not name:
            name = u'default-intent-map'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if intent_map_intent_type is not None:
            self._intent_map_intent_type = intent_map_intent_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (intent-map)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of intent-map in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of intent-map as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of intent-map's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of intent-map's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def intent_map_intent_type(self):
        """Get intent-map-intent-type for intent-map.
        
        :returns: IntentType object
        
        """
        return getattr(self, '_intent_map_intent_type', None)
    # end intent_map_intent_type

    @intent_map_intent_type.setter
    def intent_map_intent_type(self, intent_map_intent_type):
        """Set intent-map-intent-type for intent-map.
        
        :param intent_map_intent_type: IntentType object
        
        """
        self._intent_map_intent_type = intent_map_intent_type
    # end intent_map_intent_type

    def set_intent_map_intent_type(self, value):
        self.intent_map_intent_type = value
    # end set_intent_map_intent_type

    def get_intent_map_intent_type(self):
        return self.intent_map_intent_type
    # end get_intent_map_intent_type

    @property
    def id_perms(self):
        """Get id-perms for intent-map.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for intent-map.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for intent-map.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for intent-map.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for intent-map.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for intent-map.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for intent-map.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for intent-map.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_intent_map_intent_type'):
            self._serialize_field_to_json(serialized, field_names, 'intent_map_intent_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for intent-map.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to intent-map.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for intent-map.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for intent-map.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this intent-map"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this intent-map"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_fabric_back_refs(self):
        """Return list of all fabrics using this intent-map"""
        return getattr(self, 'fabric_back_refs', None)
    # end get_fabric_back_refs

    def dump(self):
        """Display intent-map object in compact form."""
        print('------------ intent-map ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P intent_map_intent_type = ', self.get_intent_map_intent_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK fabric = ', self.get_fabric_back_refs())
    # end dump

# end class IntentMap

class PortTuple(object):
    """
    Port tuples are ordered set of interfaces that represent a service virtual machine or physical
    device , which is part of this service instance.
    Order of interfaces in port tuple is same as specified in the service template.
    example SI = [(Left, Right, Management), (L, R, M), ..., (L, R, M)].

    Created By:
        User

    Child of:
        :class:`.ServiceInstance` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.LogicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of tenant logical routers to be attached to the service left or right attachment point

        * list of :class:`.VirtualNetwork` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Internal virtual networks for PNF left or right service attachment points are used to internally to

              allocate route targets for the left and right service VRFs on the spine device

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
    """

    resource_type = 'port-tuple'
    object_type = 'port_tuple'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['logical_router_refs', 'virtual_network_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['logical_router_refs'] = ('logical-router', 'None', False, ['list of tenant logical routers to be attached to the service left or right attachment point'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['Internal virtual networks for PNF left or right service attachment points are used to internally to', 'allocate route targets for the left and right service VRFs on the spine device'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)

    children_field_types = {}

    parent_types = [u'service-instance']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['logical_router_refs'] = 'port-tuple-logical-router'
    ref_field_metas['virtual_network_refs'] = 'port-tuple-virtual-network'
    ref_field_metas['tag_refs'] = 'port-tuple-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'port-tuple'
        if not name:
            name = u'default-port-tuple'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'service-instance'
            self.fq_name = [u'default-domain', 'default-project', u'default-service-instance']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (port-tuple)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of port-tuple in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of port-tuple as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of port-tuple's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of port-tuple's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for port-tuple.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for port-tuple.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for port-tuple.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for port-tuple.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for port-tuple.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for port-tuple.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for port-tuple.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for port-tuple.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'logical_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'logical_router_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_logical_router(self, ref_obj):
        """Set logical-router for port-tuple.
        
        :param ref_obj: LogicalRouter object
        
        """
        self.logical_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.logical_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_logical_router

    def add_logical_router(self, ref_obj):
        """Add logical-router to port-tuple.
        
        :param ref_obj: LogicalRouter object
        
        """
        refs = getattr(self, 'logical_router_refs', [])
        if not refs:
            self.logical_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.logical_router_refs.append(ref_info)
    # end add_logical_router

    def del_logical_router(self, ref_obj):
        refs = self.get_logical_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.logical_router_refs.remove(ref)
                return
    # end del_logical_router

    def set_logical_router_list(self, ref_obj_list):
        """Set logical-router list for port-tuple.
        
        :param ref_obj_list: list of LogicalRouter object
        
        """
        self.logical_router_refs = ref_obj_list
    # end set_logical_router_list

    def get_logical_router_refs(self):
        """Return logical-router list for port-tuple.
        
        :returns: list of <LogicalRouter>
        
        """
        return getattr(self, 'logical_router_refs', None)
    # end get_logical_router_refs

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for port-tuple.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to port-tuple.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for port-tuple.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for port-tuple.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_tag(self, ref_obj):
        """Set tag for port-tuple.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to port-tuple.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for port-tuple.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for port-tuple.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this port-tuple"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def dump(self):
        """Display port-tuple object in compact form."""
        print('------------ port-tuple ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF logical_router = ', self.get_logical_router_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
    # end dump

# end class PortTuple

class AnalyticsAlarmNode(object):
    """
    Analytics node is object representing a logical node in system which serves operational API and
    analytics collector.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * analytics_alarm_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Ip address of the analytics alarm node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'analytics-alarm-node'
    object_type = 'analytics_alarm_node'

    prop_fields = set([u'analytics_alarm_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'analytics_alarm_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the analytics alarm node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'admin-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['analytics_alarm_node_ip_address'] = 'analytics-alarm-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'analytics-alarm-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, analytics_alarm_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'analytics-alarm-node'
        if not name:
            name = u'default-analytics-alarm-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if analytics_alarm_node_ip_address is not None:
            self._analytics_alarm_node_ip_address = analytics_alarm_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (analytics-alarm-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of analytics-alarm-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of analytics-alarm-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of analytics-alarm-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of analytics-alarm-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def analytics_alarm_node_ip_address(self):
        """Get analytics-alarm-node-ip-address for analytics-alarm-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_analytics_alarm_node_ip_address', None)
    # end analytics_alarm_node_ip_address

    @analytics_alarm_node_ip_address.setter
    def analytics_alarm_node_ip_address(self, analytics_alarm_node_ip_address):
        """Set analytics-alarm-node-ip-address for analytics-alarm-node.
        
        :param analytics_alarm_node_ip_address: IpAddressType object
        
        """
        self._analytics_alarm_node_ip_address = analytics_alarm_node_ip_address
    # end analytics_alarm_node_ip_address

    def set_analytics_alarm_node_ip_address(self, value):
        self.analytics_alarm_node_ip_address = value
    # end set_analytics_alarm_node_ip_address

    def get_analytics_alarm_node_ip_address(self):
        return self.analytics_alarm_node_ip_address
    # end get_analytics_alarm_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for analytics-alarm-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for analytics-alarm-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for analytics-alarm-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for analytics-alarm-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for analytics-alarm-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for analytics-alarm-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for analytics-alarm-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for analytics-alarm-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_analytics_alarm_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'analytics_alarm_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for analytics-alarm-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to analytics-alarm-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for analytics-alarm-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for analytics-alarm-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display analytics-alarm-node object in compact form."""
        print('------------ analytics-alarm-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P analytics_alarm_node_ip_address = ', self.get_analytics_alarm_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class AnalyticsAlarmNode

class QosQueue(object):
    """
    QOS queue config object in this project.

    Created By:
        User

    Child of:
        :class:`.GlobalQosConfig` object

    Properties:
        * min_bandwidth
            Type: int

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Minimum bandwidth for this queue.

        * max_bandwidth
            Type: int

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Maximum bandwidth for this queue.

        * qos_queue_identifier
            Type: int

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Unique id for this queue.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ForwardingClass` objects
    """

    resource_type = 'qos-queue'
    object_type = 'qos_queue'

    prop_fields = set([u'min_bandwidth', u'max_bandwidth', u'qos_queue_identifier', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'forwarding_class_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'min_bandwidth': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Minimum bandwidth for this queue.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'required'},
        'max_bandwidth': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Maximum bandwidth for this queue.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'required'},
        'qos_queue_identifier': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Unique id for this queue.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['forwarding_class_back_refs'] = ('forwarding-class', 'None', False)

    children_field_types = {}

    parent_types = [u'global-qos-config']

    prop_field_metas = {}
    prop_field_metas['min_bandwidth'] = 'min-bandwidth'
    prop_field_metas['max_bandwidth'] = 'max-bandwidth'
    prop_field_metas['qos_queue_identifier'] = 'qos-queue-identifier'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'qos-queue-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, min_bandwidth=None, max_bandwidth=None, qos_queue_identifier=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'qos-queue'
        if not name:
            name = u'default-qos-queue'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-qos-config'
            self.fq_name = ['default-global-system-config', u'default-global-qos-config']
            self.fq_name.append(name)


        # property fields
        if min_bandwidth is not None:
            self._min_bandwidth = min_bandwidth
        if max_bandwidth is not None:
            self._max_bandwidth = max_bandwidth
        if qos_queue_identifier is not None:
            self._qos_queue_identifier = qos_queue_identifier
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (qos-queue)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of qos-queue in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of qos-queue as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of qos-queue's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of qos-queue's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def min_bandwidth(self):
        """Get min-bandwidth for qos-queue.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_min_bandwidth', None)
    # end min_bandwidth

    @min_bandwidth.setter
    def min_bandwidth(self, min_bandwidth):
        """Set min-bandwidth for qos-queue.
        
        :param min_bandwidth: xsd:integer object
        
        """
        self._min_bandwidth = min_bandwidth
    # end min_bandwidth

    def set_min_bandwidth(self, value):
        self.min_bandwidth = value
    # end set_min_bandwidth

    def get_min_bandwidth(self):
        return self.min_bandwidth
    # end get_min_bandwidth

    @property
    def max_bandwidth(self):
        """Get max-bandwidth for qos-queue.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_max_bandwidth', None)
    # end max_bandwidth

    @max_bandwidth.setter
    def max_bandwidth(self, max_bandwidth):
        """Set max-bandwidth for qos-queue.
        
        :param max_bandwidth: xsd:integer object
        
        """
        self._max_bandwidth = max_bandwidth
    # end max_bandwidth

    def set_max_bandwidth(self, value):
        self.max_bandwidth = value
    # end set_max_bandwidth

    def get_max_bandwidth(self):
        return self.max_bandwidth
    # end get_max_bandwidth

    @property
    def qos_queue_identifier(self):
        """Get qos-queue-identifier for qos-queue.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_qos_queue_identifier', None)
    # end qos_queue_identifier

    @qos_queue_identifier.setter
    def qos_queue_identifier(self, qos_queue_identifier):
        """Set qos-queue-identifier for qos-queue.
        
        :param qos_queue_identifier: xsd:integer object
        
        """
        self._qos_queue_identifier = qos_queue_identifier
    # end qos_queue_identifier

    def set_qos_queue_identifier(self, value):
        self.qos_queue_identifier = value
    # end set_qos_queue_identifier

    def get_qos_queue_identifier(self):
        return self.qos_queue_identifier
    # end get_qos_queue_identifier

    @property
    def id_perms(self):
        """Get id-perms for qos-queue.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for qos-queue.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for qos-queue.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for qos-queue.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for qos-queue.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for qos-queue.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for qos-queue.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for qos-queue.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_min_bandwidth'):
            self._serialize_field_to_json(serialized, field_names, 'min_bandwidth')
        if hasattr(self, '_max_bandwidth'):
            self._serialize_field_to_json(serialized, field_names, 'max_bandwidth')
        if hasattr(self, '_qos_queue_identifier'):
            self._serialize_field_to_json(serialized, field_names, 'qos_queue_identifier')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for qos-queue.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to qos-queue.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for qos-queue.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for qos-queue.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_forwarding_class_back_refs(self):
        """Return list of all forwarding-classs using this qos-queue"""
        return getattr(self, 'forwarding_class_back_refs', None)
    # end get_forwarding_class_back_refs

    def dump(self):
        """Display qos-queue object in compact form."""
        print('------------ qos-queue ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P min_bandwidth = ', self.get_min_bandwidth())
        print('P max_bandwidth = ', self.get_max_bandwidth())
        print('P qos_queue_identifier = ', self.get_qos_queue_identifier())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK forwarding_class = ', self.get_forwarding_class_back_refs())
    # end dump

# end class QosQueue

class PhysicalRole(object):
    """
Defines a physical role

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.DeviceFunctionalGroup` objects
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.RoleDefinition` objects
    """

    resource_type = 'physical-role'
    object_type = 'physical_role'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['device_functional_group_back_refs', 'physical_router_back_refs', 'role_definition_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['device_functional_group_back_refs'] = ('device-functional-group', 'None', False)
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['role_definition_back_refs'] = ('role-definition', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'physical-role-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'physical-role'
        if not name:
            name = u'default-physical-role'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (physical-role)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of physical-role in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of physical-role as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of physical-role's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of physical-role's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for physical-role.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for physical-role.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for physical-role.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for physical-role.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for physical-role.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for physical-role.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for physical-role.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for physical-role.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for physical-role.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to physical-role.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for physical-role.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for physical-role.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_device_functional_group_back_refs(self):
        """Return list of all device-functional-groups using this physical-role"""
        return getattr(self, 'device_functional_group_back_refs', None)
    # end get_device_functional_group_back_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this physical-role"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_role_definition_back_refs(self):
        """Return list of all role-definitions using this physical-role"""
        return getattr(self, 'role_definition_back_refs', None)
    # end get_role_definition_back_refs

    def dump(self):
        """Display physical-role object in compact form."""
        print('------------ physical-role ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK device_functional_group = ', self.get_device_functional_group_back_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK role_definition = ', self.get_role_definition_back_refs())
    # end dump

# end class PhysicalRole

class Card(object):
    """
This resource contains the information about the interface card in a hardware platform.

    Created By:

    Properties:
        * interface_map
            Type: :class:`.InterfaceMapType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Interface map of all the physical ports on a physical interface card.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Hardware` objects
    """

    resource_type = 'card'
    object_type = 'card'

    prop_fields = set([u'interface_map', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'hardware_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'interface_map': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Interface map of all the physical ports on a physical interface card.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'InterfaceMapType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['hardware_back_refs'] = ('hardware', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['interface_map'] = 'interface-map'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'card-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, interface_map=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'card'
        if not name:
            name = u'default-card'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if interface_map is not None:
            self._interface_map = interface_map
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (card)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of card in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of card as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def interface_map(self):
        """Get interface-map for card.
        
        :returns: InterfaceMapType object
        
        """
        return getattr(self, '_interface_map', None)
    # end interface_map

    @interface_map.setter
    def interface_map(self, interface_map):
        """Set interface-map for card.
        
        :param interface_map: InterfaceMapType object
        
        """
        self._interface_map = interface_map
    # end interface_map

    def set_interface_map(self, value):
        self.interface_map = value
    # end set_interface_map

    def get_interface_map(self):
        return self.interface_map
    # end get_interface_map

    @property
    def id_perms(self):
        """Get id-perms for card.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for card.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for card.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for card.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for card.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for card.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for card.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for card.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_interface_map'):
            self._serialize_field_to_json(serialized, field_names, 'interface_map')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for card.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to card.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for card.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for card.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_hardware_back_refs(self):
        """Return list of all hardwares using this card"""
        return getattr(self, 'hardware_back_refs', None)
    # end get_hardware_back_refs

    def dump(self):
        """Display card object in compact form."""
        print('------------ card ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P interface_map = ', self.get_interface_map())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK hardware = ', self.get_hardware_back_refs())
    # end dump

# end class Card

class SecurityLoggingObject(object):
    """
    When parent is global-vrouter-config:
        Reference to security logging object for global-vrouter-config.
    When parent is project:
        Security logging object configuration for specifying session logging criteria


    Created By:
        User when parent is :class:`.GlobalVrouterConfig`
        User when parent is :class:`.Project`

    Child of:
        :class:`.GlobalVrouterConfig` object OR
        :class:`.Project` object

    Properties:
        * security_logging_object_rules
            Type: :class:`.SecurityLoggingObjectRuleListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Security logging object rules derived internally.

        * security_logging_object_rate
            Type: int

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Security logging object rate defining rate of session logging

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.NetworkPolicy` object, :class:`.SecurityLoggingObjectRuleListType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to network-policy attached to this security-logging-object

        * list of (:class:`.SecurityGroup` object, :class:`.SecurityLoggingObjectRuleListType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to security-group attached to this security-logging-object

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.FirewallPolicy` objects
        * list of :class:`.FirewallRule` objects
    """

    resource_type = 'security-logging-object'
    object_type = 'security_logging_object'

    prop_fields = set([u'security_logging_object_rules', u'security_logging_object_rate', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['network_policy_refs', 'security_group_refs', u'tag_refs'])
    backref_fields = set(['virtual_network_back_refs', 'virtual_machine_interface_back_refs', 'firewall_policy_back_refs', 'firewall_rule_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'security_logging_object_rules': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Security logging object rules derived internally.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SecurityLoggingObjectRuleListType', 'restriction_type': None, 'required': 'optional'},
        'security_logging_object_rate': {'operations': 'CRUD', 'restrictions': None, 'default': 100, 'description': ['Security logging object rate defining rate of session logging'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['network_policy_refs'] = ('network-policy', 'SecurityLoggingObjectRuleListType', False, ['Reference to network-policy attached to this security-logging-object'])
    ref_field_types['security_group_refs'] = ('security-group', 'SecurityLoggingObjectRuleListType', False, ['Reference to security-group attached to this security-logging-object'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['firewall_policy_back_refs'] = ('firewall-policy', 'SloRateType', False)
    backref_field_types['firewall_rule_back_refs'] = ('firewall-rule', 'SloRateType', False)

    children_field_types = {}

    parent_types = ['global-vrouter-config', 'project']

    prop_field_metas = {}
    prop_field_metas['security_logging_object_rules'] = 'security-logging-object-rules'
    prop_field_metas['security_logging_object_rate'] = 'security-logging-object-rate'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['network_policy_refs'] = 'security-logging-object-network-policy'
    ref_field_metas['security_group_refs'] = 'security-logging-object-security-group'
    ref_field_metas['tag_refs'] = 'security-logging-object-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, security_logging_object_rules=None, security_logging_object_rate=100, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'security-logging-object'
        if not name:
            name = u'default-security-logging-object'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("['global-vrouter-config', 'project']")

        # property fields
        if security_logging_object_rules is not None:
            self._security_logging_object_rules = security_logging_object_rules
        if security_logging_object_rate is not None:
            self._security_logging_object_rate = security_logging_object_rate
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (security-logging-object)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of security-logging-object in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of security-logging-object as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of security-logging-object's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of security-logging-object's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def security_logging_object_rules(self):
        """Get security-logging-object-rules for security-logging-object.
        
        :returns: SecurityLoggingObjectRuleListType object
        
        """
        return getattr(self, '_security_logging_object_rules', None)
    # end security_logging_object_rules

    @security_logging_object_rules.setter
    def security_logging_object_rules(self, security_logging_object_rules):
        """Set security-logging-object-rules for security-logging-object.
        
        :param security_logging_object_rules: SecurityLoggingObjectRuleListType object
        
        """
        self._security_logging_object_rules = security_logging_object_rules
    # end security_logging_object_rules

    def set_security_logging_object_rules(self, value):
        self.security_logging_object_rules = value
    # end set_security_logging_object_rules

    def get_security_logging_object_rules(self):
        return self.security_logging_object_rules
    # end get_security_logging_object_rules

    @property
    def security_logging_object_rate(self):
        """Get security-logging-object-rate for security-logging-object.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_security_logging_object_rate', None)
    # end security_logging_object_rate

    @security_logging_object_rate.setter
    def security_logging_object_rate(self, security_logging_object_rate):
        """Set security-logging-object-rate for security-logging-object.
        
        :param security_logging_object_rate: xsd:integer object
        
        """
        self._security_logging_object_rate = security_logging_object_rate
    # end security_logging_object_rate

    def set_security_logging_object_rate(self, value):
        self.security_logging_object_rate = value
    # end set_security_logging_object_rate

    def get_security_logging_object_rate(self):
        return self.security_logging_object_rate
    # end get_security_logging_object_rate

    @property
    def id_perms(self):
        """Get id-perms for security-logging-object.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for security-logging-object.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for security-logging-object.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for security-logging-object.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for security-logging-object.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for security-logging-object.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for security-logging-object.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for security-logging-object.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_security_logging_object_rules'):
            self._serialize_field_to_json(serialized, field_names, 'security_logging_object_rules')
        if hasattr(self, '_security_logging_object_rate'):
            self._serialize_field_to_json(serialized, field_names, 'security_logging_object_rate')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'network_policy_refs'):
            self._serialize_field_to_json(serialized, field_names, 'network_policy_refs')
        if hasattr(self, 'security_group_refs'):
            self._serialize_field_to_json(serialized, field_names, 'security_group_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_network_policy(self, ref_obj, ref_data=None):
        """Set network-policy for security-logging-object.
        
        :param ref_obj: NetworkPolicy object
        :param ref_data: SecurityLoggingObjectRuleListType object
        
        """
        self.network_policy_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.network_policy_refs[0]['uuid'] = ref_obj.uuid

    # end set_network_policy

    def add_network_policy(self, ref_obj, ref_data=None):
        """Add network-policy to security-logging-object.
        
        :param ref_obj: NetworkPolicy object
        :param ref_data: SecurityLoggingObjectRuleListType object
        
        """
        refs = getattr(self, 'network_policy_refs', [])
        if not refs:
            self.network_policy_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.network_policy_refs.append(ref_info)
    # end add_network_policy

    def del_network_policy(self, ref_obj):
        refs = self.get_network_policy_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.network_policy_refs.remove(ref)
                return
    # end del_network_policy

    def set_network_policy_list(self, ref_obj_list, ref_data_list=None):
        """Set network-policy list for security-logging-object.
        
        :param ref_obj_list: list of NetworkPolicy object
        :param ref_data_list: list of SecurityLoggingObjectRuleListType object
        
        """
        self.network_policy_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_network_policy_list

    def get_network_policy_refs(self):
        """Return network-policy list for security-logging-object.
        
        :returns: list of tuple <NetworkPolicy, SecurityLoggingObjectRuleListType>
        
        """
        return getattr(self, 'network_policy_refs', None)
    # end get_network_policy_refs

    def set_security_group(self, ref_obj, ref_data=None):
        """Set security-group for security-logging-object.
        
        :param ref_obj: SecurityGroup object
        :param ref_data: SecurityLoggingObjectRuleListType object
        
        """
        self.security_group_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.security_group_refs[0]['uuid'] = ref_obj.uuid

    # end set_security_group

    def add_security_group(self, ref_obj, ref_data=None):
        """Add security-group to security-logging-object.
        
        :param ref_obj: SecurityGroup object
        :param ref_data: SecurityLoggingObjectRuleListType object
        
        """
        refs = getattr(self, 'security_group_refs', [])
        if not refs:
            self.security_group_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.security_group_refs.append(ref_info)
    # end add_security_group

    def del_security_group(self, ref_obj):
        refs = self.get_security_group_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.security_group_refs.remove(ref)
                return
    # end del_security_group

    def set_security_group_list(self, ref_obj_list, ref_data_list=None):
        """Set security-group list for security-logging-object.
        
        :param ref_obj_list: list of SecurityGroup object
        :param ref_data_list: list of SecurityLoggingObjectRuleListType object
        
        """
        self.security_group_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_security_group_list

    def get_security_group_refs(self):
        """Return security-group list for security-logging-object.
        
        :returns: list of tuple <SecurityGroup, SecurityLoggingObjectRuleListType>
        
        """
        return getattr(self, 'security_group_refs', None)
    # end get_security_group_refs

    def set_tag(self, ref_obj):
        """Set tag for security-logging-object.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to security-logging-object.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for security-logging-object.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for security-logging-object.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this security-logging-object"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this security-logging-object"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_firewall_policy_back_refs(self):
        """Return list of all firewall-policys using this security-logging-object"""
        return getattr(self, 'firewall_policy_back_refs', None)
    # end get_firewall_policy_back_refs

    def get_firewall_rule_back_refs(self):
        """Return list of all firewall-rules using this security-logging-object"""
        return getattr(self, 'firewall_rule_back_refs', None)
    # end get_firewall_rule_back_refs

    def dump(self):
        """Display security-logging-object object in compact form."""
        print('------------ security-logging-object ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P security_logging_object_rules = ', self.get_security_logging_object_rules())
        print('P security_logging_object_rate = ', self.get_security_logging_object_rate())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF network_policy = ', self.get_network_policy_refs())
        print('REF security_group = ', self.get_security_group_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK firewall_policy = ', self.get_firewall_policy_back_refs())
        print('BCK firewall_rule = ', self.get_firewall_rule_back_refs())
    # end dump

# end class SecurityLoggingObject

class QosConfig(object):
    """
    When parent is global-qos-config:
        Global system QoS config for vhost and fabric traffic .
    When parent is project:
        


    Created By:
        User when parent is :class:`.GlobalQosConfig`
        User when parent is :class:`.Project`

    Child of:
        :class:`.GlobalQosConfig` object OR
        :class:`.Project` object

    Properties:
        * qos_config_type
            Type: str, *one-of* [u'vhost', u'fabric', u'project']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Specifies if qos-config is for vhost, fabric or for project.

        * dscp_entries
            Type: :class:`.QosIdForwardingClassPairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Map of DSCP match condition and applicable forwarding class for packet.

        * vlan_priority_entries
            Type: :class:`.QosIdForwardingClassPairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Map of .1p priority code to applicable forwarding class for packet.

        * mpls_exp_entries
            Type: :class:`.QosIdForwardingClassPairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Map of MPLS EXP values to applicable forwarding class for packet.

        * default_forwarding_class_id
            Type: int, *within* [0, 255]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Default forwarding class used for all non-specified QOS bits

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.GlobalSystemConfig` objects
            Created By: System

            Operations Allowed: CR

            Description:

              This link is internally created and may be removed in future. End users should not set this link or

              assume it to be there

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.VirtualMachineInterface` objects
    """

    resource_type = 'qos-config'
    object_type = 'qos_config'

    prop_fields = set([u'qos_config_type', u'dscp_entries', u'vlan_priority_entries', u'mpls_exp_entries', u'default_forwarding_class_id', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['global_system_config_refs', u'tag_refs'])
    backref_fields = set(['virtual_network_back_refs', 'virtual_machine_interface_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'qos_config_type': {'operations': 'CRUD', 'restrictions': [u'vhost', u'fabric', u'project'], 'default': None, 'description': ['Specifies if qos-config is for vhost, fabric or for project.'], 'simple_type': u'QosConfigType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'dscp_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Map of DSCP match condition and applicable forwarding class for packet.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'QosIdForwardingClassPairs', 'restriction_type': None, 'required': 'optional'},
        'vlan_priority_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Map of .1p priority code to applicable forwarding class for packet.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'QosIdForwardingClassPairs', 'restriction_type': None, 'required': 'optional'},
        'mpls_exp_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Map of MPLS EXP values to applicable forwarding class for packet.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'QosIdForwardingClassPairs', 'restriction_type': None, 'required': 'optional'},
        'default_forwarding_class_id': {'operations': 'CRUD', 'restrictions': [0, 255], 'default': 0, 'description': ['Default forwarding class used for all non-specified QOS bits'], 'simple_type': u'ForwardingClassId', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['global_system_config_refs'] = ('global-system-config', 'None', False, ['This link is internally created and may be removed in future. End users should not set this link or', 'assume it to be there'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)

    children_field_types = {}

    parent_types = [u'global-qos-config', 'project']

    prop_field_metas = {}
    prop_field_metas['qos_config_type'] = 'qos-config-type'
    prop_field_metas['dscp_entries'] = 'dscp-entries'
    prop_field_metas['vlan_priority_entries'] = 'vlan-priority-entries'
    prop_field_metas['mpls_exp_entries'] = 'mpls-exp-entries'
    prop_field_metas['default_forwarding_class_id'] = 'default-forwarding-class-id'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['global_system_config_refs'] = 'qos-config-global-system-config'
    ref_field_metas['tag_refs'] = 'qos-config-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'dscp_entries', u'vlan_priority_entries', u'mpls_exp_entries', u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['dscp_entries'] = True
    prop_map_field_has_wrappers['vlan_priority_entries'] = True
    prop_map_field_has_wrappers['mpls_exp_entries'] = True
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['dscp_entries'] = 'key'
    prop_map_field_key_names['vlan_priority_entries'] = 'key'
    prop_map_field_key_names['mpls_exp_entries'] = 'key'
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, qos_config_type=None, dscp_entries=None, vlan_priority_entries=None, mpls_exp_entries=None, default_forwarding_class_id=0, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'qos-config'
        if not name:
            name = u'default-qos-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'global-qos-config', 'project']")

        # property fields
        if qos_config_type is not None:
            self._qos_config_type = qos_config_type
        if dscp_entries is not None:
            self._dscp_entries = dscp_entries
        if vlan_priority_entries is not None:
            self._vlan_priority_entries = vlan_priority_entries
        if mpls_exp_entries is not None:
            self._mpls_exp_entries = mpls_exp_entries
        if default_forwarding_class_id is not None:
            self._default_forwarding_class_id = default_forwarding_class_id
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (qos-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of qos-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of qos-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of qos-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of qos-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def qos_config_type(self):
        """Get qos-config-type for qos-config.
        
        :returns: QosConfigType object
        
        """
        return getattr(self, '_qos_config_type', None)
    # end qos_config_type

    @qos_config_type.setter
    def qos_config_type(self, qos_config_type):
        """Set qos-config-type for qos-config.
        
        :param qos_config_type: QosConfigType object
        
        """
        self._qos_config_type = qos_config_type
    # end qos_config_type

    def set_qos_config_type(self, value):
        self.qos_config_type = value
    # end set_qos_config_type

    def get_qos_config_type(self):
        return self.qos_config_type
    # end get_qos_config_type

    @property
    def dscp_entries(self):
        """Get dscp-entries for qos-config.
        
        :returns: QosIdForwardingClassPairs object
        
        """
        return getattr(self, '_dscp_entries', None)
    # end dscp_entries

    @dscp_entries.setter
    def dscp_entries(self, dscp_entries):
        """Set dscp-entries for qos-config.
        
        :param dscp_entries: QosIdForwardingClassPairs object
        
        """
        self._dscp_entries = dscp_entries
    # end dscp_entries

    def set_dscp_entries(self, value):
        self.dscp_entries = value
    # end set_dscp_entries

    def get_dscp_entries(self):
        return self.dscp_entries
    # end get_dscp_entries

    @property
    def vlan_priority_entries(self):
        """Get vlan-priority-entries for qos-config.
        
        :returns: QosIdForwardingClassPairs object
        
        """
        return getattr(self, '_vlan_priority_entries', None)
    # end vlan_priority_entries

    @vlan_priority_entries.setter
    def vlan_priority_entries(self, vlan_priority_entries):
        """Set vlan-priority-entries for qos-config.
        
        :param vlan_priority_entries: QosIdForwardingClassPairs object
        
        """
        self._vlan_priority_entries = vlan_priority_entries
    # end vlan_priority_entries

    def set_vlan_priority_entries(self, value):
        self.vlan_priority_entries = value
    # end set_vlan_priority_entries

    def get_vlan_priority_entries(self):
        return self.vlan_priority_entries
    # end get_vlan_priority_entries

    @property
    def mpls_exp_entries(self):
        """Get mpls-exp-entries for qos-config.
        
        :returns: QosIdForwardingClassPairs object
        
        """
        return getattr(self, '_mpls_exp_entries', None)
    # end mpls_exp_entries

    @mpls_exp_entries.setter
    def mpls_exp_entries(self, mpls_exp_entries):
        """Set mpls-exp-entries for qos-config.
        
        :param mpls_exp_entries: QosIdForwardingClassPairs object
        
        """
        self._mpls_exp_entries = mpls_exp_entries
    # end mpls_exp_entries

    def set_mpls_exp_entries(self, value):
        self.mpls_exp_entries = value
    # end set_mpls_exp_entries

    def get_mpls_exp_entries(self):
        return self.mpls_exp_entries
    # end get_mpls_exp_entries

    @property
    def default_forwarding_class_id(self):
        """Get default-forwarding-class-id for qos-config.
        
        :returns: ForwardingClassId object
        
        """
        return getattr(self, '_default_forwarding_class_id', None)
    # end default_forwarding_class_id

    @default_forwarding_class_id.setter
    def default_forwarding_class_id(self, default_forwarding_class_id):
        """Set default-forwarding-class-id for qos-config.
        
        :param default_forwarding_class_id: ForwardingClassId object
        
        """
        self._default_forwarding_class_id = default_forwarding_class_id
    # end default_forwarding_class_id

    def set_default_forwarding_class_id(self, value):
        self.default_forwarding_class_id = value
    # end set_default_forwarding_class_id

    def get_default_forwarding_class_id(self):
        return self.default_forwarding_class_id
    # end get_default_forwarding_class_id

    @property
    def id_perms(self):
        """Get id-perms for qos-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for qos-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for qos-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for qos-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for qos-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for qos-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for qos-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for qos-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_qos_config_type'):
            self._serialize_field_to_json(serialized, field_names, 'qos_config_type')
        if hasattr(self, '_dscp_entries'):
            self._serialize_field_to_json(serialized, field_names, 'dscp_entries')
        if hasattr(self, '_vlan_priority_entries'):
            self._serialize_field_to_json(serialized, field_names, 'vlan_priority_entries')
        if hasattr(self, '_mpls_exp_entries'):
            self._serialize_field_to_json(serialized, field_names, 'mpls_exp_entries')
        if hasattr(self, '_default_forwarding_class_id'):
            self._serialize_field_to_json(serialized, field_names, 'default_forwarding_class_id')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'global_system_config_refs'):
            self._serialize_field_to_json(serialized, field_names, 'global_system_config_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_global_system_config(self, ref_obj):
        """Set global-system-config for qos-config.
        
        :param ref_obj: GlobalSystemConfig object
        
        """
        self.global_system_config_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.global_system_config_refs[0]['uuid'] = ref_obj.uuid

    # end set_global_system_config

    def add_global_system_config(self, ref_obj):
        """Add global-system-config to qos-config.
        
        :param ref_obj: GlobalSystemConfig object
        
        """
        refs = getattr(self, 'global_system_config_refs', [])
        if not refs:
            self.global_system_config_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.global_system_config_refs.append(ref_info)
    # end add_global_system_config

    def del_global_system_config(self, ref_obj):
        refs = self.get_global_system_config_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.global_system_config_refs.remove(ref)
                return
    # end del_global_system_config

    def set_global_system_config_list(self, ref_obj_list):
        """Set global-system-config list for qos-config.
        
        :param ref_obj_list: list of GlobalSystemConfig object
        
        """
        self.global_system_config_refs = ref_obj_list
    # end set_global_system_config_list

    def get_global_system_config_refs(self):
        """Return global-system-config list for qos-config.
        
        :returns: list of <GlobalSystemConfig>
        
        """
        return getattr(self, 'global_system_config_refs', None)
    # end get_global_system_config_refs

    def set_tag(self, ref_obj):
        """Set tag for qos-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to qos-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for qos-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for qos-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this qos-config"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this qos-config"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def dump(self):
        """Display qos-config object in compact form."""
        print('------------ qos-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P qos_config_type = ', self.get_qos_config_type())
        print('P dscp_entries = ', self.get_dscp_entries())
        print('P vlan_priority_entries = ', self.get_vlan_priority_entries())
        print('P mpls_exp_entries = ', self.get_mpls_exp_entries())
        print('P default_forwarding_class_id = ', self.get_default_forwarding_class_id())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF global_system_config = ', self.get_global_system_config_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
    # end dump

# end class QosConfig

class AnalyticsSnmpNode(object):
    """
    Analytics node is object representing a logical node in system which serves operational API and
    analytics collector.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * analytics_snmp_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Ip address of the analytics snmp node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'analytics-snmp-node'
    object_type = 'analytics_snmp_node'

    prop_fields = set([u'analytics_snmp_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'analytics_snmp_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the analytics snmp node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'admin-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['analytics_snmp_node_ip_address'] = 'analytics-snmp-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'analytics-snmp-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, analytics_snmp_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'analytics-snmp-node'
        if not name:
            name = u'default-analytics-snmp-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if analytics_snmp_node_ip_address is not None:
            self._analytics_snmp_node_ip_address = analytics_snmp_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (analytics-snmp-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of analytics-snmp-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of analytics-snmp-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of analytics-snmp-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of analytics-snmp-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def analytics_snmp_node_ip_address(self):
        """Get analytics-snmp-node-ip-address for analytics-snmp-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_analytics_snmp_node_ip_address', None)
    # end analytics_snmp_node_ip_address

    @analytics_snmp_node_ip_address.setter
    def analytics_snmp_node_ip_address(self, analytics_snmp_node_ip_address):
        """Set analytics-snmp-node-ip-address for analytics-snmp-node.
        
        :param analytics_snmp_node_ip_address: IpAddressType object
        
        """
        self._analytics_snmp_node_ip_address = analytics_snmp_node_ip_address
    # end analytics_snmp_node_ip_address

    def set_analytics_snmp_node_ip_address(self, value):
        self.analytics_snmp_node_ip_address = value
    # end set_analytics_snmp_node_ip_address

    def get_analytics_snmp_node_ip_address(self):
        return self.analytics_snmp_node_ip_address
    # end get_analytics_snmp_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for analytics-snmp-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for analytics-snmp-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for analytics-snmp-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for analytics-snmp-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for analytics-snmp-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for analytics-snmp-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for analytics-snmp-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for analytics-snmp-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_analytics_snmp_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'analytics_snmp_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for analytics-snmp-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to analytics-snmp-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for analytics-snmp-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for analytics-snmp-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display analytics-snmp-node object in compact form."""
        print('------------ analytics-snmp-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P analytics_snmp_node_ip_address = ', self.get_analytics_snmp_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class AnalyticsSnmpNode

class VirtualMachineInterface(object):
    """
    When parent is virtual-machine:
        References to child interfaces this virtual machine has, this is DEPRECATED.
    When parent is project:
        Virtual machine interface represent a interface(port) into virtual network. It may or may not have
        corresponding virtual machine. A virtual machine interface has atleast a MAC address and Ip address.
    When parent is virtual-router:
        An interface on a virtual-router, e.g. vhost0


    Created By:
        User when parent is :class:`.VirtualMachine`
        User when parent is :class:`.Project`
        User when parent is :class:`.VirtualRouter`

    Child of:
        :class:`.VirtualMachine` object OR
        :class:`.Project` object OR
        :class:`.VirtualRouter` object

    Properties:
        * ecmp_hashing_include_fields
            Type: :class:`.EcmpHashingIncludeFields`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              ECMP hashing config at global level.

        * port_security_enabled
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Port security status on the network

        * virtual_machine_interface_mac_addresses
            Type: :class:`.MacAddressesType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              MAC address of the virtual machine interface, automatically assigned by system if not provided.

        * virtual_machine_interface_dhcp_option_list
            Type: :class:`.DhcpOptionsListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              DHCP options configuration specific to this interface.

        * virtual_machine_interface_host_routes
            Type: :class:`.RouteTableType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of host routes(prefixes, nexthop) that are passed to VM via DHCP.

        * virtual_machine_interface_allowed_address_pairs
            Type: :class:`.AllowedAddressPairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of (IP address, MAC) other than instance ip on this interface.

        * vrf_assign_table
            Type: :class:`.VrfAssignTableType`

            Created By: System

            Operations Allowed: CRUD

            Description:

              VRF assignment policy for this interface, automatically generated by system.

        * virtual_machine_interface_device_owner
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              For openstack compatibility, not used by system.

        * virtual_machine_interface_disable_policy
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              When True all policy checks for ingress and egress traffic from this interface are disabled. Flow

              table entries are not created. Features that require policy will not work on this interface, these

              include security group, floating IP, service chain, linklocal services.

        * virtual_machine_interface_properties
            Type: :class:`.VirtualMachineInterfacePropertiesType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual Machine Interface miscellaneous configurations.

        * virtual_machine_interface_bindings
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) for this interface. Neutron port bindings use this.

        * virtual_machine_interface_fat_flow_protocols
            Type: :class:`.FatFlowProtocols`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of (protocol, port number), for flows to interface with (protocol, destination port number),

              vrouter will ignore source port while setting up flow and ignore it as source port in reverse flow.

              Hence many flows will map to single flow.

        * vlan_tag_based_bridge_domain
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable VLAN tag based bridge domain classification on the port

        * igmp_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              IGMP mode at Global level.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.SecurityLoggingObject` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to security logging object for this virtual machine interface

        * list of :class:`.QosConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to QoS config for this virtual machine interface.

        * list of :class:`.SecurityGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Interface ACL, Automatically generated by system based on security groups attached to this

              interface.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of references to the sub interfaces of this interface.

        * list of :class:`.VirtualMachine` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This interface belongs to the referenced virtual machine.

        * list of :class:`.VirtualNetwork` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              This interface is member of the referenced virtual network.

        * list of (:class:`.RoutingInstance` object, :class:`.PolicyBasedForwardingRuleType` attribute)
            Created By: System

            Operations Allowed: CRUD

            Description:

              Automatically generated Forwarding policy. This will be deprecated in future in favour of VRF assign

              rules.

        * list of :class:`.BgpRouter` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to bgp-router from the virtual machine interface.

        * list of :class:`.PortTuple` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Ordered set of references to the interfaces in this port tuple.

              Order is same as specified in the service interface.

              example (left, right, management, other1).

        * list of :class:`.ServiceHealthCheck` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to health check object attached to this interface.

        * list of :class:`.InterfaceRouteTable` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the interface route table attached to this interface.

        * list of :class:`.PhysicalInterface` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to the physical interface of service appliance this service interface represents.

        * list of (:class:`.BridgeDomain` object, :class:`.BridgeDomainMembershipType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual Machine interface maps to a bridge-domain by defaultor based on in coming 802.1Q vlan tag

        * list of :class:`.ServiceEndpoint` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Links the access endpoint i.e virtual-machine-interface to service endpoint.

        * list of :class:`.PortProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Port profiles attached to this virtual machine interface

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.InstanceIp` objects
        * list of :class:`.Subnet` objects
        * list of :class:`.FloatingIp` objects
        * list of :class:`.AliasIp` objects
        * list of :class:`.LogicalInterface` objects
        * list of :class:`.BgpAsAService` objects
        * list of :class:`.CustomerAttachment` objects
        * list of :class:`.LogicalRouter` objects
        * list of :class:`.LoadbalancerPool` objects
        * list of :class:`.VirtualIp` objects
        * list of :class:`.Loadbalancer` objects
        * list of :class:`.VirtualPortGroup` objects
        * list of :class:`.LinkAggregationGroup` objects
    """

    resource_type = 'virtual-machine-interface'
    object_type = 'virtual_machine_interface'

    prop_fields = set([u'ecmp_hashing_include_fields', u'port_security_enabled', u'virtual_machine_interface_mac_addresses', u'virtual_machine_interface_dhcp_option_list', u'virtual_machine_interface_host_routes', u'virtual_machine_interface_allowed_address_pairs', u'vrf_assign_table', u'virtual_machine_interface_device_owner', u'virtual_machine_interface_disable_policy', u'virtual_machine_interface_properties', u'virtual_machine_interface_bindings', u'virtual_machine_interface_fat_flow_protocols', u'vlan_tag_based_bridge_domain', u'igmp_enable', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'security_logging_object_refs', 'qos_config_refs', 'security_group_refs', 'virtual_machine_interface_refs', u'virtual_machine_refs', 'virtual_network_refs', 'routing_instance_refs', 'bgp_router_refs', u'port_tuple_refs', 'service_health_check_refs', 'interface_route_table_refs', 'physical_interface_refs', 'bridge_domain_refs', u'service_endpoint_refs', u'port_profile_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs', u'instance_ip_back_refs', u'subnet_back_refs', u'floating_ip_back_refs', u'alias_ip_back_refs', 'logical_interface_back_refs', 'bgp_as_a_service_back_refs', 'customer_attachment_back_refs', 'logical_router_back_refs', u'loadbalancer_pool_back_refs', u'virtual_ip_back_refs', 'loadbalancer_back_refs', u'virtual_port_group_back_refs', 'link_aggregation_group_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'ecmp_hashing_include_fields': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['ECMP hashing config at global level.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'EcmpHashingIncludeFields', 'restriction_type': None, 'required': 'optional'},
        'port_security_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': True, 'description': ['Port security status on the network'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'virtual_machine_interface_mac_addresses': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC address of the virtual machine interface, automatically assigned by system if not provided.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MacAddressesType', 'restriction_type': None, 'required': 'required'},
        'virtual_machine_interface_dhcp_option_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['DHCP options configuration specific to this interface.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DhcpOptionsListType', 'restriction_type': None, 'required': 'optional'},
        'virtual_machine_interface_host_routes': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of host routes(prefixes, nexthop) that are passed to VM via DHCP.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTableType', 'restriction_type': None, 'required': 'optional'},
        'virtual_machine_interface_allowed_address_pairs': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of (IP address, MAC) other than instance ip on this interface.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'AllowedAddressPairs', 'restriction_type': None, 'required': 'optional'},
        'vrf_assign_table': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['VRF assignment policy for this interface, automatically generated by system.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VrfAssignTableType', 'restriction_type': None, 'required': 'system-only'},
        'virtual_machine_interface_device_owner': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['For openstack compatibility, not used by system.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'virtual_machine_interface_disable_policy': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['When True all policy checks for ingress and egress traffic from this interface are disabled. Flow', 'table entries are not created. Features that require policy will not work on this interface, these', 'include security group, floating IP, service chain, linklocal services.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'virtual_machine_interface_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Virtual Machine Interface miscellaneous configurations.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VirtualMachineInterfacePropertiesType', 'restriction_type': None, 'required': 'optional'},
        'virtual_machine_interface_bindings': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) for this interface. Neutron port bindings use this.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'virtual_machine_interface_fat_flow_protocols': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of (protocol, port number), for flows to interface with (protocol, destination port number),', 'vrouter will ignore source port while setting up flow and ignore it as source port in reverse flow.', 'Hence many flows will map to single flow.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FatFlowProtocols', 'restriction_type': None, 'required': 'optional'},
        'vlan_tag_based_bridge_domain': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Enable VLAN tag based bridge domain classification on the port'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'igmp_enable': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['IGMP mode at Global level.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['security_logging_object_refs'] = ('security-logging-object', 'None', False, ['Reference to security logging object for this virtual machine interface'])
    ref_field_types['qos_config_refs'] = ('qos-config', 'None', False, ['Reference to QoS config for this virtual machine interface.'])
    ref_field_types['security_group_refs'] = ('security-group', 'None', False, ['Interface ACL, Automatically generated by system based on security groups attached to this', 'interface.'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['List of references to the sub interfaces of this interface.'])
    ref_field_types['virtual_machine_refs'] = ('virtual-machine', 'None', False, ['This interface belongs to the referenced virtual machine.'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['This interface is member of the referenced virtual network.'])
    ref_field_types['routing_instance_refs'] = ('routing-instance', 'PolicyBasedForwardingRuleType', False, ['Automatically generated Forwarding policy. This will be deprecated in future in favour of VRF assign', 'rules.'])
    ref_field_types['bgp_router_refs'] = ('bgp-router', 'None', False, ['Reference to bgp-router from the virtual machine interface.'])
    ref_field_types['port_tuple_refs'] = ('port-tuple', 'None', False, ['Ordered set of references to the interfaces in this port tuple.', 'Order is same as specified in the service interface.', 'example (left, right, management, other1).'])
    ref_field_types['service_health_check_refs'] = ('service-health-check', 'None', False, ['Reference to health check object attached to this interface.'])
    ref_field_types['interface_route_table_refs'] = ('interface-route-table', 'None', False, ['Reference to the interface route table attached to this interface.'])
    ref_field_types['physical_interface_refs'] = ('physical-interface', 'None', False, ['Reference to the physical interface of service appliance this service interface represents.'])
    ref_field_types['bridge_domain_refs'] = ('bridge-domain', 'BridgeDomainMembershipType', False, ['Virtual Machine interface maps to a bridge-domain by defaultor based on in coming 802.1Q vlan tag'])
    ref_field_types['service_endpoint_refs'] = ('service-endpoint', 'None', False, ['Links the access endpoint i.e virtual-machine-interface to service endpoint.'])
    ref_field_types['port_profile_refs'] = ('port-profile', 'None', False, ['Port profiles attached to this virtual machine interface'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)
    backref_field_types['subnet_back_refs'] = ('subnet', 'None', False)
    backref_field_types['floating_ip_back_refs'] = ('floating-ip', 'None', False)
    backref_field_types['alias_ip_back_refs'] = ('alias-ip', 'None', False)
    backref_field_types['logical_interface_back_refs'] = ('logical-interface', 'None', False)
    backref_field_types['bgp_as_a_service_back_refs'] = ('bgp-as-a-service', 'None', False)
    backref_field_types['customer_attachment_back_refs'] = ('customer-attachment', 'None', False)
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'None', False)
    backref_field_types['loadbalancer_pool_back_refs'] = ('loadbalancer-pool', 'None', False)
    backref_field_types['virtual_ip_back_refs'] = ('virtual-ip', 'None', False)
    backref_field_types['loadbalancer_back_refs'] = ('loadbalancer', 'None', False)
    backref_field_types['virtual_port_group_back_refs'] = ('virtual-port-group', 'None', False)
    backref_field_types['link_aggregation_group_back_refs'] = ('link-aggregation-group', 'None', False)

    children_field_types = {}

    parent_types = [u'virtual-machine', 'project', 'virtual-router']

    prop_field_metas = {}
    prop_field_metas['ecmp_hashing_include_fields'] = 'ecmp-hashing-include-fields'
    prop_field_metas['port_security_enabled'] = 'port-security-enabled'
    prop_field_metas['virtual_machine_interface_mac_addresses'] = 'virtual-machine-interface-mac-addresses'
    prop_field_metas['virtual_machine_interface_dhcp_option_list'] = 'virtual-machine-interface-dhcp-option-list'
    prop_field_metas['virtual_machine_interface_host_routes'] = 'virtual-machine-interface-host-routes'
    prop_field_metas['virtual_machine_interface_allowed_address_pairs'] = 'virtual-machine-interface-allowed-address-pairs'
    prop_field_metas['vrf_assign_table'] = 'vrf-assign-table'
    prop_field_metas['virtual_machine_interface_device_owner'] = 'virtual-machine-interface-device-owner'
    prop_field_metas['virtual_machine_interface_disable_policy'] = 'virtual-machine-interface-disable-policy'
    prop_field_metas['virtual_machine_interface_properties'] = 'virtual-machine-interface-properties'
    prop_field_metas['virtual_machine_interface_bindings'] = 'virtual-machine-interface-bindings'
    prop_field_metas['virtual_machine_interface_fat_flow_protocols'] = 'virtual-machine-interface-fat-flow-protocols'
    prop_field_metas['vlan_tag_based_bridge_domain'] = 'vlan-tag-based-bridge-domain'
    prop_field_metas['igmp_enable'] = 'igmp-enable'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['security_logging_object_refs'] = 'virtual-machine-interface-security-logging-object'
    ref_field_metas['qos_config_refs'] = 'virtual-machine-interface-qos-config'
    ref_field_metas['security_group_refs'] = 'virtual-machine-interface-security-group'
    ref_field_metas['virtual_machine_interface_refs'] = 'virtual-machine-interface-sub-interface'
    ref_field_metas['virtual_machine_refs'] = 'virtual-machine-interface-virtual-machine'
    ref_field_metas['virtual_network_refs'] = 'virtual-machine-interface-virtual-network'
    ref_field_metas['routing_instance_refs'] = 'virtual-machine-interface-routing-instance'
    ref_field_metas['bgp_router_refs'] = 'virtual-machine-interface-bgp-router'
    ref_field_metas['port_tuple_refs'] = 'port-tuple-interface'
    ref_field_metas['service_health_check_refs'] = 'service-port-health-check'
    ref_field_metas['interface_route_table_refs'] = 'virtual-machine-interface-route-table'
    ref_field_metas['physical_interface_refs'] = 'virtual-machine-interface-physical-interface'
    ref_field_metas['bridge_domain_refs'] = 'virtual-machine-interface-bridge-domain'
    ref_field_metas['service_endpoint_refs'] = 'virtual-machine-interface-service-endpoint'
    ref_field_metas['port_profile_refs'] = 'virtual-machine-interface-port-profile'
    ref_field_metas['tag_refs'] = 'virtual-machine-interface-tag'

    children_field_metas = {}

    prop_list_fields = set([u'virtual_machine_interface_fat_flow_protocols'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['virtual_machine_interface_fat_flow_protocols'] = True

    prop_map_fields = set([u'virtual_machine_interface_bindings', u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['virtual_machine_interface_bindings'] = True
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['virtual_machine_interface_bindings'] = 'key'
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, ecmp_hashing_include_fields=None, port_security_enabled=True, virtual_machine_interface_mac_addresses=None, virtual_machine_interface_dhcp_option_list=None, virtual_machine_interface_host_routes=None, virtual_machine_interface_allowed_address_pairs=None, vrf_assign_table=None, virtual_machine_interface_device_owner=None, virtual_machine_interface_disable_policy=False, virtual_machine_interface_properties=None, virtual_machine_interface_bindings=None, virtual_machine_interface_fat_flow_protocols=None, vlan_tag_based_bridge_domain=False, igmp_enable=False, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-machine-interface'
        if not name:
            name = u'default-virtual-machine-interface'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'virtual-machine', 'project', 'virtual-router']")

        # property fields
        if ecmp_hashing_include_fields is not None:
            self._ecmp_hashing_include_fields = ecmp_hashing_include_fields
        if port_security_enabled is not None:
            self._port_security_enabled = port_security_enabled
        if virtual_machine_interface_mac_addresses is not None:
            self._virtual_machine_interface_mac_addresses = virtual_machine_interface_mac_addresses
        if virtual_machine_interface_dhcp_option_list is not None:
            self._virtual_machine_interface_dhcp_option_list = virtual_machine_interface_dhcp_option_list
        if virtual_machine_interface_host_routes is not None:
            self._virtual_machine_interface_host_routes = virtual_machine_interface_host_routes
        if virtual_machine_interface_allowed_address_pairs is not None:
            self._virtual_machine_interface_allowed_address_pairs = virtual_machine_interface_allowed_address_pairs
        if vrf_assign_table is not None:
            self._vrf_assign_table = vrf_assign_table
        if virtual_machine_interface_device_owner is not None:
            self._virtual_machine_interface_device_owner = virtual_machine_interface_device_owner
        if virtual_machine_interface_disable_policy is not None:
            self._virtual_machine_interface_disable_policy = virtual_machine_interface_disable_policy
        if virtual_machine_interface_properties is not None:
            self._virtual_machine_interface_properties = virtual_machine_interface_properties
        if virtual_machine_interface_bindings is not None:
            self._virtual_machine_interface_bindings = virtual_machine_interface_bindings
        if virtual_machine_interface_fat_flow_protocols is not None:
            self._virtual_machine_interface_fat_flow_protocols = virtual_machine_interface_fat_flow_protocols
        if vlan_tag_based_bridge_domain is not None:
            self._vlan_tag_based_bridge_domain = vlan_tag_based_bridge_domain
        if igmp_enable is not None:
            self._igmp_enable = igmp_enable
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-machine-interface)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-machine-interface in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-machine-interface as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of virtual-machine-interface's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of virtual-machine-interface's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def ecmp_hashing_include_fields(self):
        """Get ecmp-hashing-include-fields for virtual-machine-interface.
        
        :returns: EcmpHashingIncludeFields object
        
        """
        return getattr(self, '_ecmp_hashing_include_fields', None)
    # end ecmp_hashing_include_fields

    @ecmp_hashing_include_fields.setter
    def ecmp_hashing_include_fields(self, ecmp_hashing_include_fields):
        """Set ecmp-hashing-include-fields for virtual-machine-interface.
        
        :param ecmp_hashing_include_fields: EcmpHashingIncludeFields object
        
        """
        self._ecmp_hashing_include_fields = ecmp_hashing_include_fields
    # end ecmp_hashing_include_fields

    def set_ecmp_hashing_include_fields(self, value):
        self.ecmp_hashing_include_fields = value
    # end set_ecmp_hashing_include_fields

    def get_ecmp_hashing_include_fields(self):
        return self.ecmp_hashing_include_fields
    # end get_ecmp_hashing_include_fields

    @property
    def port_security_enabled(self):
        """Get port-security-enabled for virtual-machine-interface.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_port_security_enabled', None)
    # end port_security_enabled

    @port_security_enabled.setter
    def port_security_enabled(self, port_security_enabled):
        """Set port-security-enabled for virtual-machine-interface.
        
        :param port_security_enabled: xsd:boolean object
        
        """
        self._port_security_enabled = port_security_enabled
    # end port_security_enabled

    def set_port_security_enabled(self, value):
        self.port_security_enabled = value
    # end set_port_security_enabled

    def get_port_security_enabled(self):
        return self.port_security_enabled
    # end get_port_security_enabled

    @property
    def virtual_machine_interface_mac_addresses(self):
        """Get virtual-machine-interface-mac-addresses for virtual-machine-interface.
        
        :returns: MacAddressesType object
        
        """
        return getattr(self, '_virtual_machine_interface_mac_addresses', None)
    # end virtual_machine_interface_mac_addresses

    @virtual_machine_interface_mac_addresses.setter
    def virtual_machine_interface_mac_addresses(self, virtual_machine_interface_mac_addresses):
        """Set virtual-machine-interface-mac-addresses for virtual-machine-interface.
        
        :param virtual_machine_interface_mac_addresses: MacAddressesType object
        
        """
        self._virtual_machine_interface_mac_addresses = virtual_machine_interface_mac_addresses
    # end virtual_machine_interface_mac_addresses

    def set_virtual_machine_interface_mac_addresses(self, value):
        self.virtual_machine_interface_mac_addresses = value
    # end set_virtual_machine_interface_mac_addresses

    def get_virtual_machine_interface_mac_addresses(self):
        return self.virtual_machine_interface_mac_addresses
    # end get_virtual_machine_interface_mac_addresses

    @property
    def virtual_machine_interface_dhcp_option_list(self):
        """Get virtual-machine-interface-dhcp-option-list for virtual-machine-interface.
        
        :returns: DhcpOptionsListType object
        
        """
        return getattr(self, '_virtual_machine_interface_dhcp_option_list', None)
    # end virtual_machine_interface_dhcp_option_list

    @virtual_machine_interface_dhcp_option_list.setter
    def virtual_machine_interface_dhcp_option_list(self, virtual_machine_interface_dhcp_option_list):
        """Set virtual-machine-interface-dhcp-option-list for virtual-machine-interface.
        
        :param virtual_machine_interface_dhcp_option_list: DhcpOptionsListType object
        
        """
        self._virtual_machine_interface_dhcp_option_list = virtual_machine_interface_dhcp_option_list
    # end virtual_machine_interface_dhcp_option_list

    def set_virtual_machine_interface_dhcp_option_list(self, value):
        self.virtual_machine_interface_dhcp_option_list = value
    # end set_virtual_machine_interface_dhcp_option_list

    def get_virtual_machine_interface_dhcp_option_list(self):
        return self.virtual_machine_interface_dhcp_option_list
    # end get_virtual_machine_interface_dhcp_option_list

    @property
    def virtual_machine_interface_host_routes(self):
        """Get virtual-machine-interface-host-routes for virtual-machine-interface.
        
        :returns: RouteTableType object
        
        """
        return getattr(self, '_virtual_machine_interface_host_routes', None)
    # end virtual_machine_interface_host_routes

    @virtual_machine_interface_host_routes.setter
    def virtual_machine_interface_host_routes(self, virtual_machine_interface_host_routes):
        """Set virtual-machine-interface-host-routes for virtual-machine-interface.
        
        :param virtual_machine_interface_host_routes: RouteTableType object
        
        """
        self._virtual_machine_interface_host_routes = virtual_machine_interface_host_routes
    # end virtual_machine_interface_host_routes

    def set_virtual_machine_interface_host_routes(self, value):
        self.virtual_machine_interface_host_routes = value
    # end set_virtual_machine_interface_host_routes

    def get_virtual_machine_interface_host_routes(self):
        return self.virtual_machine_interface_host_routes
    # end get_virtual_machine_interface_host_routes

    @property
    def virtual_machine_interface_allowed_address_pairs(self):
        """Get virtual-machine-interface-allowed-address-pairs for virtual-machine-interface.
        
        :returns: AllowedAddressPairs object
        
        """
        return getattr(self, '_virtual_machine_interface_allowed_address_pairs', None)
    # end virtual_machine_interface_allowed_address_pairs

    @virtual_machine_interface_allowed_address_pairs.setter
    def virtual_machine_interface_allowed_address_pairs(self, virtual_machine_interface_allowed_address_pairs):
        """Set virtual-machine-interface-allowed-address-pairs for virtual-machine-interface.
        
        :param virtual_machine_interface_allowed_address_pairs: AllowedAddressPairs object
        
        """
        self._virtual_machine_interface_allowed_address_pairs = virtual_machine_interface_allowed_address_pairs
    # end virtual_machine_interface_allowed_address_pairs

    def set_virtual_machine_interface_allowed_address_pairs(self, value):
        self.virtual_machine_interface_allowed_address_pairs = value
    # end set_virtual_machine_interface_allowed_address_pairs

    def get_virtual_machine_interface_allowed_address_pairs(self):
        return self.virtual_machine_interface_allowed_address_pairs
    # end get_virtual_machine_interface_allowed_address_pairs

    @property
    def vrf_assign_table(self):
        """Get vrf-assign-table for virtual-machine-interface.
        
        :returns: VrfAssignTableType object
        
        """
        return getattr(self, '_vrf_assign_table', None)
    # end vrf_assign_table

    @vrf_assign_table.setter
    def vrf_assign_table(self, vrf_assign_table):
        """Set vrf-assign-table for virtual-machine-interface.
        
        :param vrf_assign_table: VrfAssignTableType object
        
        """
        self._vrf_assign_table = vrf_assign_table
    # end vrf_assign_table

    def set_vrf_assign_table(self, value):
        self.vrf_assign_table = value
    # end set_vrf_assign_table

    def get_vrf_assign_table(self):
        return self.vrf_assign_table
    # end get_vrf_assign_table

    @property
    def virtual_machine_interface_device_owner(self):
        """Get virtual-machine-interface-device-owner for virtual-machine-interface.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_virtual_machine_interface_device_owner', None)
    # end virtual_machine_interface_device_owner

    @virtual_machine_interface_device_owner.setter
    def virtual_machine_interface_device_owner(self, virtual_machine_interface_device_owner):
        """Set virtual-machine-interface-device-owner for virtual-machine-interface.
        
        :param virtual_machine_interface_device_owner: xsd:string object
        
        """
        self._virtual_machine_interface_device_owner = virtual_machine_interface_device_owner
    # end virtual_machine_interface_device_owner

    def set_virtual_machine_interface_device_owner(self, value):
        self.virtual_machine_interface_device_owner = value
    # end set_virtual_machine_interface_device_owner

    def get_virtual_machine_interface_device_owner(self):
        return self.virtual_machine_interface_device_owner
    # end get_virtual_machine_interface_device_owner

    @property
    def virtual_machine_interface_disable_policy(self):
        """Get virtual-machine-interface-disable-policy for virtual-machine-interface.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_virtual_machine_interface_disable_policy', None)
    # end virtual_machine_interface_disable_policy

    @virtual_machine_interface_disable_policy.setter
    def virtual_machine_interface_disable_policy(self, virtual_machine_interface_disable_policy):
        """Set virtual-machine-interface-disable-policy for virtual-machine-interface.
        
        :param virtual_machine_interface_disable_policy: xsd:boolean object
        
        """
        self._virtual_machine_interface_disable_policy = virtual_machine_interface_disable_policy
    # end virtual_machine_interface_disable_policy

    def set_virtual_machine_interface_disable_policy(self, value):
        self.virtual_machine_interface_disable_policy = value
    # end set_virtual_machine_interface_disable_policy

    def get_virtual_machine_interface_disable_policy(self):
        return self.virtual_machine_interface_disable_policy
    # end get_virtual_machine_interface_disable_policy

    @property
    def virtual_machine_interface_properties(self):
        """Get virtual-machine-interface-properties for virtual-machine-interface.
        
        :returns: VirtualMachineInterfacePropertiesType object
        
        """
        return getattr(self, '_virtual_machine_interface_properties', None)
    # end virtual_machine_interface_properties

    @virtual_machine_interface_properties.setter
    def virtual_machine_interface_properties(self, virtual_machine_interface_properties):
        """Set virtual-machine-interface-properties for virtual-machine-interface.
        
        :param virtual_machine_interface_properties: VirtualMachineInterfacePropertiesType object
        
        """
        self._virtual_machine_interface_properties = virtual_machine_interface_properties
    # end virtual_machine_interface_properties

    def set_virtual_machine_interface_properties(self, value):
        self.virtual_machine_interface_properties = value
    # end set_virtual_machine_interface_properties

    def get_virtual_machine_interface_properties(self):
        return self.virtual_machine_interface_properties
    # end get_virtual_machine_interface_properties

    @property
    def virtual_machine_interface_bindings(self):
        """Get virtual-machine-interface-bindings for virtual-machine-interface.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_virtual_machine_interface_bindings', None)
    # end virtual_machine_interface_bindings

    @virtual_machine_interface_bindings.setter
    def virtual_machine_interface_bindings(self, virtual_machine_interface_bindings):
        """Set virtual-machine-interface-bindings for virtual-machine-interface.
        
        :param virtual_machine_interface_bindings: KeyValuePairs object
        
        """
        self._virtual_machine_interface_bindings = virtual_machine_interface_bindings
    # end virtual_machine_interface_bindings

    def set_virtual_machine_interface_bindings(self, value):
        self.virtual_machine_interface_bindings = value
    # end set_virtual_machine_interface_bindings

    def get_virtual_machine_interface_bindings(self):
        return self.virtual_machine_interface_bindings
    # end get_virtual_machine_interface_bindings

    @property
    def virtual_machine_interface_fat_flow_protocols(self):
        """Get virtual-machine-interface-fat-flow-protocols for virtual-machine-interface.
        
        :returns: FatFlowProtocols object
        
        """
        return getattr(self, '_virtual_machine_interface_fat_flow_protocols', None)
    # end virtual_machine_interface_fat_flow_protocols

    @virtual_machine_interface_fat_flow_protocols.setter
    def virtual_machine_interface_fat_flow_protocols(self, virtual_machine_interface_fat_flow_protocols):
        """Set virtual-machine-interface-fat-flow-protocols for virtual-machine-interface.
        
        :param virtual_machine_interface_fat_flow_protocols: FatFlowProtocols object
        
        """
        self._virtual_machine_interface_fat_flow_protocols = virtual_machine_interface_fat_flow_protocols
    # end virtual_machine_interface_fat_flow_protocols

    def set_virtual_machine_interface_fat_flow_protocols(self, value):
        self.virtual_machine_interface_fat_flow_protocols = value
    # end set_virtual_machine_interface_fat_flow_protocols

    def get_virtual_machine_interface_fat_flow_protocols(self):
        return self.virtual_machine_interface_fat_flow_protocols
    # end get_virtual_machine_interface_fat_flow_protocols

    @property
    def vlan_tag_based_bridge_domain(self):
        """Get vlan-tag-based-bridge-domain for virtual-machine-interface.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_vlan_tag_based_bridge_domain', None)
    # end vlan_tag_based_bridge_domain

    @vlan_tag_based_bridge_domain.setter
    def vlan_tag_based_bridge_domain(self, vlan_tag_based_bridge_domain):
        """Set vlan-tag-based-bridge-domain for virtual-machine-interface.
        
        :param vlan_tag_based_bridge_domain: xsd:boolean object
        
        """
        self._vlan_tag_based_bridge_domain = vlan_tag_based_bridge_domain
    # end vlan_tag_based_bridge_domain

    def set_vlan_tag_based_bridge_domain(self, value):
        self.vlan_tag_based_bridge_domain = value
    # end set_vlan_tag_based_bridge_domain

    def get_vlan_tag_based_bridge_domain(self):
        return self.vlan_tag_based_bridge_domain
    # end get_vlan_tag_based_bridge_domain

    @property
    def igmp_enable(self):
        """Get igmp-enable for virtual-machine-interface.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_igmp_enable', None)
    # end igmp_enable

    @igmp_enable.setter
    def igmp_enable(self, igmp_enable):
        """Set igmp-enable for virtual-machine-interface.
        
        :param igmp_enable: xsd:boolean object
        
        """
        self._igmp_enable = igmp_enable
    # end igmp_enable

    def set_igmp_enable(self, value):
        self.igmp_enable = value
    # end set_igmp_enable

    def get_igmp_enable(self):
        return self.igmp_enable
    # end get_igmp_enable

    @property
    def id_perms(self):
        """Get id-perms for virtual-machine-interface.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-machine-interface.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-machine-interface.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-machine-interface.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-machine-interface.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-machine-interface.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-machine-interface.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-machine-interface.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_ecmp_hashing_include_fields'):
            self._serialize_field_to_json(serialized, field_names, 'ecmp_hashing_include_fields')
        if hasattr(self, '_port_security_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'port_security_enabled')
        if hasattr(self, '_virtual_machine_interface_mac_addresses'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_mac_addresses')
        if hasattr(self, '_virtual_machine_interface_dhcp_option_list'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_dhcp_option_list')
        if hasattr(self, '_virtual_machine_interface_host_routes'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_host_routes')
        if hasattr(self, '_virtual_machine_interface_allowed_address_pairs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_allowed_address_pairs')
        if hasattr(self, '_vrf_assign_table'):
            self._serialize_field_to_json(serialized, field_names, 'vrf_assign_table')
        if hasattr(self, '_virtual_machine_interface_device_owner'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_device_owner')
        if hasattr(self, '_virtual_machine_interface_disable_policy'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_disable_policy')
        if hasattr(self, '_virtual_machine_interface_properties'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_properties')
        if hasattr(self, '_virtual_machine_interface_bindings'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_bindings')
        if hasattr(self, '_virtual_machine_interface_fat_flow_protocols'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_fat_flow_protocols')
        if hasattr(self, '_vlan_tag_based_bridge_domain'):
            self._serialize_field_to_json(serialized, field_names, 'vlan_tag_based_bridge_domain')
        if hasattr(self, '_igmp_enable'):
            self._serialize_field_to_json(serialized, field_names, 'igmp_enable')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'security_logging_object_refs'):
            self._serialize_field_to_json(serialized, field_names, 'security_logging_object_refs')
        if hasattr(self, 'qos_config_refs'):
            self._serialize_field_to_json(serialized, field_names, 'qos_config_refs')
        if hasattr(self, 'security_group_refs'):
            self._serialize_field_to_json(serialized, field_names, 'security_group_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'virtual_machine_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'routing_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'routing_instance_refs')
        if hasattr(self, 'bgp_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bgp_router_refs')
        if hasattr(self, 'port_tuple_refs'):
            self._serialize_field_to_json(serialized, field_names, 'port_tuple_refs')
        if hasattr(self, 'service_health_check_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_health_check_refs')
        if hasattr(self, 'interface_route_table_refs'):
            self._serialize_field_to_json(serialized, field_names, 'interface_route_table_refs')
        if hasattr(self, 'physical_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_refs')
        if hasattr(self, 'bridge_domain_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bridge_domain_refs')
        if hasattr(self, 'service_endpoint_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_endpoint_refs')
        if hasattr(self, 'port_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'port_profile_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_security_logging_object(self, ref_obj):
        """Set security-logging-object for virtual-machine-interface.
        
        :param ref_obj: SecurityLoggingObject object
        
        """
        self.security_logging_object_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.security_logging_object_refs[0]['uuid'] = ref_obj.uuid

    # end set_security_logging_object

    def add_security_logging_object(self, ref_obj):
        """Add security-logging-object to virtual-machine-interface.
        
        :param ref_obj: SecurityLoggingObject object
        
        """
        refs = getattr(self, 'security_logging_object_refs', [])
        if not refs:
            self.security_logging_object_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.security_logging_object_refs.append(ref_info)
    # end add_security_logging_object

    def del_security_logging_object(self, ref_obj):
        refs = self.get_security_logging_object_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.security_logging_object_refs.remove(ref)
                return
    # end del_security_logging_object

    def set_security_logging_object_list(self, ref_obj_list):
        """Set security-logging-object list for virtual-machine-interface.
        
        :param ref_obj_list: list of SecurityLoggingObject object
        
        """
        self.security_logging_object_refs = ref_obj_list
    # end set_security_logging_object_list

    def get_security_logging_object_refs(self):
        """Return security-logging-object list for virtual-machine-interface.
        
        :returns: list of <SecurityLoggingObject>
        
        """
        return getattr(self, 'security_logging_object_refs', None)
    # end get_security_logging_object_refs

    def set_qos_config(self, ref_obj):
        """Set qos-config for virtual-machine-interface.
        
        :param ref_obj: QosConfig object
        
        """
        self.qos_config_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.qos_config_refs[0]['uuid'] = ref_obj.uuid

    # end set_qos_config

    def add_qos_config(self, ref_obj):
        """Add qos-config to virtual-machine-interface.
        
        :param ref_obj: QosConfig object
        
        """
        refs = getattr(self, 'qos_config_refs', [])
        if not refs:
            self.qos_config_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.qos_config_refs.append(ref_info)
    # end add_qos_config

    def del_qos_config(self, ref_obj):
        refs = self.get_qos_config_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.qos_config_refs.remove(ref)
                return
    # end del_qos_config

    def set_qos_config_list(self, ref_obj_list):
        """Set qos-config list for virtual-machine-interface.
        
        :param ref_obj_list: list of QosConfig object
        
        """
        self.qos_config_refs = ref_obj_list
    # end set_qos_config_list

    def get_qos_config_refs(self):
        """Return qos-config list for virtual-machine-interface.
        
        :returns: list of <QosConfig>
        
        """
        return getattr(self, 'qos_config_refs', None)
    # end get_qos_config_refs

    def set_security_group(self, ref_obj):
        """Set security-group for virtual-machine-interface.
        
        :param ref_obj: SecurityGroup object
        
        """
        self.security_group_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.security_group_refs[0]['uuid'] = ref_obj.uuid

    # end set_security_group

    def add_security_group(self, ref_obj):
        """Add security-group to virtual-machine-interface.
        
        :param ref_obj: SecurityGroup object
        
        """
        refs = getattr(self, 'security_group_refs', [])
        if not refs:
            self.security_group_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.security_group_refs.append(ref_info)
    # end add_security_group

    def del_security_group(self, ref_obj):
        refs = self.get_security_group_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.security_group_refs.remove(ref)
                return
    # end del_security_group

    def set_security_group_list(self, ref_obj_list):
        """Set security-group list for virtual-machine-interface.
        
        :param ref_obj_list: list of SecurityGroup object
        
        """
        self.security_group_refs = ref_obj_list
    # end set_security_group_list

    def get_security_group_refs(self):
        """Return security-group list for virtual-machine-interface.
        
        :returns: list of <SecurityGroup>
        
        """
        return getattr(self, 'security_group_refs', None)
    # end get_security_group_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for virtual-machine-interface.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to virtual-machine-interface.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for virtual-machine-interface.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for virtual-machine-interface.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_virtual_machine(self, ref_obj):
        """Set virtual-machine for virtual-machine-interface.
        
        :param ref_obj: VirtualMachine object
        
        """
        self.virtual_machine_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine

    def add_virtual_machine(self, ref_obj):
        """Add virtual-machine to virtual-machine-interface.
        
        :param ref_obj: VirtualMachine object
        
        """
        refs = getattr(self, 'virtual_machine_refs', [])
        if not refs:
            self.virtual_machine_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_refs.append(ref_info)
    # end add_virtual_machine

    def del_virtual_machine(self, ref_obj):
        refs = self.get_virtual_machine_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_refs.remove(ref)
                return
    # end del_virtual_machine

    def set_virtual_machine_list(self, ref_obj_list):
        """Set virtual-machine list for virtual-machine-interface.
        
        :param ref_obj_list: list of VirtualMachine object
        
        """
        self.virtual_machine_refs = ref_obj_list
    # end set_virtual_machine_list

    def get_virtual_machine_refs(self):
        """Return virtual-machine list for virtual-machine-interface.
        
        :returns: list of <VirtualMachine>
        
        """
        return getattr(self, 'virtual_machine_refs', None)
    # end get_virtual_machine_refs

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for virtual-machine-interface.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to virtual-machine-interface.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for virtual-machine-interface.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for virtual-machine-interface.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_routing_instance(self, ref_obj, ref_data=None):
        """Set routing-instance for virtual-machine-interface.
        
        :param ref_obj: RoutingInstance object
        :param ref_data: PolicyBasedForwardingRuleType object
        
        """
        self.routing_instance_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.routing_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_routing_instance

    def add_routing_instance(self, ref_obj, ref_data=None):
        """Add routing-instance to virtual-machine-interface.
        
        :param ref_obj: RoutingInstance object
        :param ref_data: PolicyBasedForwardingRuleType object
        
        """
        refs = getattr(self, 'routing_instance_refs', [])
        if not refs:
            self.routing_instance_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.routing_instance_refs.append(ref_info)
    # end add_routing_instance

    def del_routing_instance(self, ref_obj):
        refs = self.get_routing_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.routing_instance_refs.remove(ref)
                return
    # end del_routing_instance

    def set_routing_instance_list(self, ref_obj_list, ref_data_list=None):
        """Set routing-instance list for virtual-machine-interface.
        
        :param ref_obj_list: list of RoutingInstance object
        :param ref_data_list: list of PolicyBasedForwardingRuleType object
        
        """
        self.routing_instance_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_routing_instance_list

    def get_routing_instance_refs(self):
        """Return routing-instance list for virtual-machine-interface.
        
        :returns: list of tuple <RoutingInstance, PolicyBasedForwardingRuleType>
        
        """
        return getattr(self, 'routing_instance_refs', None)
    # end get_routing_instance_refs

    def set_bgp_router(self, ref_obj):
        """Set bgp-router for virtual-machine-interface.
        
        :param ref_obj: BgpRouter object
        
        """
        self.bgp_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.bgp_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_bgp_router

    def add_bgp_router(self, ref_obj):
        """Add bgp-router to virtual-machine-interface.
        
        :param ref_obj: BgpRouter object
        
        """
        refs = getattr(self, 'bgp_router_refs', [])
        if not refs:
            self.bgp_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bgp_router_refs.append(ref_info)
    # end add_bgp_router

    def del_bgp_router(self, ref_obj):
        refs = self.get_bgp_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bgp_router_refs.remove(ref)
                return
    # end del_bgp_router

    def set_bgp_router_list(self, ref_obj_list):
        """Set bgp-router list for virtual-machine-interface.
        
        :param ref_obj_list: list of BgpRouter object
        
        """
        self.bgp_router_refs = ref_obj_list
    # end set_bgp_router_list

    def get_bgp_router_refs(self):
        """Return bgp-router list for virtual-machine-interface.
        
        :returns: list of <BgpRouter>
        
        """
        return getattr(self, 'bgp_router_refs', None)
    # end get_bgp_router_refs

    def set_port_tuple(self, ref_obj):
        """Set port-tuple for virtual-machine-interface.
        
        :param ref_obj: PortTuple object
        
        """
        self.port_tuple_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.port_tuple_refs[0]['uuid'] = ref_obj.uuid

    # end set_port_tuple

    def add_port_tuple(self, ref_obj):
        """Add port-tuple to virtual-machine-interface.
        
        :param ref_obj: PortTuple object
        
        """
        refs = getattr(self, 'port_tuple_refs', [])
        if not refs:
            self.port_tuple_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.port_tuple_refs.append(ref_info)
    # end add_port_tuple

    def del_port_tuple(self, ref_obj):
        refs = self.get_port_tuple_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.port_tuple_refs.remove(ref)
                return
    # end del_port_tuple

    def set_port_tuple_list(self, ref_obj_list):
        """Set port-tuple list for virtual-machine-interface.
        
        :param ref_obj_list: list of PortTuple object
        
        """
        self.port_tuple_refs = ref_obj_list
    # end set_port_tuple_list

    def get_port_tuple_refs(self):
        """Return port-tuple list for virtual-machine-interface.
        
        :returns: list of <PortTuple>
        
        """
        return getattr(self, 'port_tuple_refs', None)
    # end get_port_tuple_refs

    def set_service_health_check(self, ref_obj):
        """Set service-health-check for virtual-machine-interface.
        
        :param ref_obj: ServiceHealthCheck object
        
        """
        self.service_health_check_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_health_check_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_health_check

    def add_service_health_check(self, ref_obj):
        """Add service-health-check to virtual-machine-interface.
        
        :param ref_obj: ServiceHealthCheck object
        
        """
        refs = getattr(self, 'service_health_check_refs', [])
        if not refs:
            self.service_health_check_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_health_check_refs.append(ref_info)
    # end add_service_health_check

    def del_service_health_check(self, ref_obj):
        refs = self.get_service_health_check_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_health_check_refs.remove(ref)
                return
    # end del_service_health_check

    def set_service_health_check_list(self, ref_obj_list):
        """Set service-health-check list for virtual-machine-interface.
        
        :param ref_obj_list: list of ServiceHealthCheck object
        
        """
        self.service_health_check_refs = ref_obj_list
    # end set_service_health_check_list

    def get_service_health_check_refs(self):
        """Return service-health-check list for virtual-machine-interface.
        
        :returns: list of <ServiceHealthCheck>
        
        """
        return getattr(self, 'service_health_check_refs', None)
    # end get_service_health_check_refs

    def set_interface_route_table(self, ref_obj):
        """Set interface-route-table for virtual-machine-interface.
        
        :param ref_obj: InterfaceRouteTable object
        
        """
        self.interface_route_table_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.interface_route_table_refs[0]['uuid'] = ref_obj.uuid

    # end set_interface_route_table

    def add_interface_route_table(self, ref_obj):
        """Add interface-route-table to virtual-machine-interface.
        
        :param ref_obj: InterfaceRouteTable object
        
        """
        refs = getattr(self, 'interface_route_table_refs', [])
        if not refs:
            self.interface_route_table_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.interface_route_table_refs.append(ref_info)
    # end add_interface_route_table

    def del_interface_route_table(self, ref_obj):
        refs = self.get_interface_route_table_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.interface_route_table_refs.remove(ref)
                return
    # end del_interface_route_table

    def set_interface_route_table_list(self, ref_obj_list):
        """Set interface-route-table list for virtual-machine-interface.
        
        :param ref_obj_list: list of InterfaceRouteTable object
        
        """
        self.interface_route_table_refs = ref_obj_list
    # end set_interface_route_table_list

    def get_interface_route_table_refs(self):
        """Return interface-route-table list for virtual-machine-interface.
        
        :returns: list of <InterfaceRouteTable>
        
        """
        return getattr(self, 'interface_route_table_refs', None)
    # end get_interface_route_table_refs

    def set_physical_interface(self, ref_obj):
        """Set physical-interface for virtual-machine-interface.
        
        :param ref_obj: PhysicalInterface object
        
        """
        self.physical_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_interface

    def add_physical_interface(self, ref_obj):
        """Add physical-interface to virtual-machine-interface.
        
        :param ref_obj: PhysicalInterface object
        
        """
        refs = getattr(self, 'physical_interface_refs', [])
        if not refs:
            self.physical_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_interface_refs.append(ref_info)
    # end add_physical_interface

    def del_physical_interface(self, ref_obj):
        refs = self.get_physical_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_interface_refs.remove(ref)
                return
    # end del_physical_interface

    def set_physical_interface_list(self, ref_obj_list):
        """Set physical-interface list for virtual-machine-interface.
        
        :param ref_obj_list: list of PhysicalInterface object
        
        """
        self.physical_interface_refs = ref_obj_list
    # end set_physical_interface_list

    def get_physical_interface_refs(self):
        """Return physical-interface list for virtual-machine-interface.
        
        :returns: list of <PhysicalInterface>
        
        """
        return getattr(self, 'physical_interface_refs', None)
    # end get_physical_interface_refs

    def set_bridge_domain(self, ref_obj, ref_data=None):
        """Set bridge-domain for virtual-machine-interface.
        
        :param ref_obj: BridgeDomain object
        :param ref_data: BridgeDomainMembershipType object
        
        """
        self.bridge_domain_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.bridge_domain_refs[0]['uuid'] = ref_obj.uuid

    # end set_bridge_domain

    def add_bridge_domain(self, ref_obj, ref_data=None):
        """Add bridge-domain to virtual-machine-interface.
        
        :param ref_obj: BridgeDomain object
        :param ref_data: BridgeDomainMembershipType object
        
        """
        refs = getattr(self, 'bridge_domain_refs', [])
        if not refs:
            self.bridge_domain_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bridge_domain_refs.append(ref_info)
    # end add_bridge_domain

    def del_bridge_domain(self, ref_obj):
        refs = self.get_bridge_domain_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bridge_domain_refs.remove(ref)
                return
    # end del_bridge_domain

    def set_bridge_domain_list(self, ref_obj_list, ref_data_list=None):
        """Set bridge-domain list for virtual-machine-interface.
        
        :param ref_obj_list: list of BridgeDomain object
        :param ref_data_list: list of BridgeDomainMembershipType object
        
        """
        self.bridge_domain_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_bridge_domain_list

    def get_bridge_domain_refs(self):
        """Return bridge-domain list for virtual-machine-interface.
        
        :returns: list of tuple <BridgeDomain, BridgeDomainMembershipType>
        
        """
        return getattr(self, 'bridge_domain_refs', None)
    # end get_bridge_domain_refs

    def set_service_endpoint(self, ref_obj):
        """Set service-endpoint for virtual-machine-interface.
        
        :param ref_obj: ServiceEndpoint object
        
        """
        self.service_endpoint_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_endpoint_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_endpoint

    def add_service_endpoint(self, ref_obj):
        """Add service-endpoint to virtual-machine-interface.
        
        :param ref_obj: ServiceEndpoint object
        
        """
        refs = getattr(self, 'service_endpoint_refs', [])
        if not refs:
            self.service_endpoint_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_endpoint_refs.append(ref_info)
    # end add_service_endpoint

    def del_service_endpoint(self, ref_obj):
        refs = self.get_service_endpoint_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_endpoint_refs.remove(ref)
                return
    # end del_service_endpoint

    def set_service_endpoint_list(self, ref_obj_list):
        """Set service-endpoint list for virtual-machine-interface.
        
        :param ref_obj_list: list of ServiceEndpoint object
        
        """
        self.service_endpoint_refs = ref_obj_list
    # end set_service_endpoint_list

    def get_service_endpoint_refs(self):
        """Return service-endpoint list for virtual-machine-interface.
        
        :returns: list of <ServiceEndpoint>
        
        """
        return getattr(self, 'service_endpoint_refs', None)
    # end get_service_endpoint_refs

    def set_port_profile(self, ref_obj):
        """Set port-profile for virtual-machine-interface.
        
        :param ref_obj: PortProfile object
        
        """
        self.port_profile_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.port_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_port_profile

    def add_port_profile(self, ref_obj):
        """Add port-profile to virtual-machine-interface.
        
        :param ref_obj: PortProfile object
        
        """
        refs = getattr(self, 'port_profile_refs', [])
        if not refs:
            self.port_profile_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.port_profile_refs.append(ref_info)
    # end add_port_profile

    def del_port_profile(self, ref_obj):
        refs = self.get_port_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.port_profile_refs.remove(ref)
                return
    # end del_port_profile

    def set_port_profile_list(self, ref_obj_list):
        """Set port-profile list for virtual-machine-interface.
        
        :param ref_obj_list: list of PortProfile object
        
        """
        self.port_profile_refs = ref_obj_list
    # end set_port_profile_list

    def get_port_profile_refs(self):
        """Return port-profile list for virtual-machine-interface.
        
        :returns: list of <PortProfile>
        
        """
        return getattr(self, 'port_profile_refs', None)
    # end get_port_profile_refs

    def set_tag(self, ref_obj):
        """Set tag for virtual-machine-interface.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-machine-interface.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-machine-interface.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-machine-interface.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this virtual-machine-interface"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this virtual-machine-interface"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def get_subnet_back_refs(self):
        """Return list of all subnets using this virtual-machine-interface"""
        return getattr(self, 'subnet_back_refs', None)
    # end get_subnet_back_refs

    def get_floating_ip_back_refs(self):
        """Return list of all floating-ips using this virtual-machine-interface"""
        return getattr(self, 'floating_ip_back_refs', None)
    # end get_floating_ip_back_refs

    def get_alias_ip_back_refs(self):
        """Return list of all alias-ips using this virtual-machine-interface"""
        return getattr(self, 'alias_ip_back_refs', None)
    # end get_alias_ip_back_refs

    def get_logical_interface_back_refs(self):
        """Return list of all logical-interfaces using this virtual-machine-interface"""
        return getattr(self, 'logical_interface_back_refs', None)
    # end get_logical_interface_back_refs

    def get_bgp_as_a_service_back_refs(self):
        """Return list of all bgp-as-a-services using this virtual-machine-interface"""
        return getattr(self, 'bgp_as_a_service_back_refs', None)
    # end get_bgp_as_a_service_back_refs

    def get_customer_attachment_back_refs(self):
        """Return list of all customer-attachments using this virtual-machine-interface"""
        return getattr(self, 'customer_attachment_back_refs', None)
    # end get_customer_attachment_back_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this virtual-machine-interface"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def get_loadbalancer_pool_back_refs(self):
        """Return list of all loadbalancer-pools using this virtual-machine-interface"""
        return getattr(self, 'loadbalancer_pool_back_refs', None)
    # end get_loadbalancer_pool_back_refs

    def get_virtual_ip_back_refs(self):
        """Return list of all virtual-ips using this virtual-machine-interface"""
        return getattr(self, 'virtual_ip_back_refs', None)
    # end get_virtual_ip_back_refs

    def get_loadbalancer_back_refs(self):
        """Return list of all loadbalancers using this virtual-machine-interface"""
        return getattr(self, 'loadbalancer_back_refs', None)
    # end get_loadbalancer_back_refs

    def get_virtual_port_group_back_refs(self):
        """Return list of all virtual-port-groups using this virtual-machine-interface"""
        return getattr(self, 'virtual_port_group_back_refs', None)
    # end get_virtual_port_group_back_refs

    def get_link_aggregation_group_back_refs(self):
        """Return list of all link-aggregation-groups using this virtual-machine-interface"""
        return getattr(self, 'link_aggregation_group_back_refs', None)
    # end get_link_aggregation_group_back_refs

    def dump(self):
        """Display virtual-machine-interface object in compact form."""
        print('------------ virtual-machine-interface ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P ecmp_hashing_include_fields = ', self.get_ecmp_hashing_include_fields())
        print('P port_security_enabled = ', self.get_port_security_enabled())
        print('P virtual_machine_interface_mac_addresses = ', self.get_virtual_machine_interface_mac_addresses())
        print('P virtual_machine_interface_dhcp_option_list = ', self.get_virtual_machine_interface_dhcp_option_list())
        print('P virtual_machine_interface_host_routes = ', self.get_virtual_machine_interface_host_routes())
        print('P virtual_machine_interface_allowed_address_pairs = ', self.get_virtual_machine_interface_allowed_address_pairs())
        print('P vrf_assign_table = ', self.get_vrf_assign_table())
        print('P virtual_machine_interface_device_owner = ', self.get_virtual_machine_interface_device_owner())
        print('P virtual_machine_interface_disable_policy = ', self.get_virtual_machine_interface_disable_policy())
        print('P virtual_machine_interface_properties = ', self.get_virtual_machine_interface_properties())
        print('P virtual_machine_interface_bindings = ', self.get_virtual_machine_interface_bindings())
        print('P virtual_machine_interface_fat_flow_protocols = ', self.get_virtual_machine_interface_fat_flow_protocols())
        print('P vlan_tag_based_bridge_domain = ', self.get_vlan_tag_based_bridge_domain())
        print('P igmp_enable = ', self.get_igmp_enable())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF security_logging_object = ', self.get_security_logging_object_refs())
        print('REF qos_config = ', self.get_qos_config_refs())
        print('REF security_group = ', self.get_security_group_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF virtual_machine = ', self.get_virtual_machine_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF routing_instance = ', self.get_routing_instance_refs())
        print('REF bgp_router = ', self.get_bgp_router_refs())
        print('REF port_tuple = ', self.get_port_tuple_refs())
        print('REF service_health_check = ', self.get_service_health_check_refs())
        print('REF interface_route_table = ', self.get_interface_route_table_refs())
        print('REF physical_interface = ', self.get_physical_interface_refs())
        print('REF bridge_domain = ', self.get_bridge_domain_refs())
        print('REF service_endpoint = ', self.get_service_endpoint_refs())
        print('REF port_profile = ', self.get_port_profile_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
        print('BCK subnet = ', self.get_subnet_back_refs())
        print('BCK floating_ip = ', self.get_floating_ip_back_refs())
        print('BCK alias_ip = ', self.get_alias_ip_back_refs())
        print('BCK logical_interface = ', self.get_logical_interface_back_refs())
        print('BCK bgp_as_a_service = ', self.get_bgp_as_a_service_back_refs())
        print('BCK customer_attachment = ', self.get_customer_attachment_back_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
        print('BCK loadbalancer_pool = ', self.get_loadbalancer_pool_back_refs())
        print('BCK virtual_ip = ', self.get_virtual_ip_back_refs())
        print('BCK loadbalancer = ', self.get_loadbalancer_back_refs())
        print('BCK virtual_port_group = ', self.get_virtual_port_group_back_refs())
        print('BCK link_aggregation_group = ', self.get_link_aggregation_group_back_refs())
    # end dump

# end class VirtualMachineInterface

class CliConfig(object):
    """
    CLI commits done on a physical router.

    Created By:
        User

    Child of:
        :class:`.PhysicalRouter` object

    Properties:
        * accepted_cli_config
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Aggregated cli accepted configs. This config will be pushed when the device undergoes RMA along with

              Contrail configuration

        * commit_diff_list
            Type: :class:`.CliDiffListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              CLI diff object containing details about the commit such as username, time and the configuration

              diff

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'cli-config'
    object_type = 'cli_config'

    prop_fields = set([u'accepted_cli_config', u'commit_diff_list', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'accepted_cli_config': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Aggregated cli accepted configs. This config will be pushed when the device undergoes RMA along with', 'Contrail configuration'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'commit_diff_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['CLI diff object containing details about the commit such as username, time and the configuration', 'diff'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'CliDiffListType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['physical-router']

    prop_field_metas = {}
    prop_field_metas['accepted_cli_config'] = 'accepted-cli-config'
    prop_field_metas['commit_diff_list'] = 'commit-diff-list'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'cli-config-tag'

    children_field_metas = {}

    prop_list_fields = set([u'commit_diff_list'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['commit_diff_list'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, accepted_cli_config=None, commit_diff_list=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'cli-config'
        if not name:
            name = u'default-cli-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'physical-router'
            self.fq_name = ['default-global-system-config', 'default-physical-router']
            self.fq_name.append(name)


        # property fields
        if accepted_cli_config is not None:
            self._accepted_cli_config = accepted_cli_config
        if commit_diff_list is not None:
            self._commit_diff_list = commit_diff_list
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (cli-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of cli-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of cli-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of cli-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of cli-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def accepted_cli_config(self):
        """Get accepted-cli-config for cli-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_accepted_cli_config', None)
    # end accepted_cli_config

    @accepted_cli_config.setter
    def accepted_cli_config(self, accepted_cli_config):
        """Set accepted-cli-config for cli-config.
        
        :param accepted_cli_config: xsd:string object
        
        """
        self._accepted_cli_config = accepted_cli_config
    # end accepted_cli_config

    def set_accepted_cli_config(self, value):
        self.accepted_cli_config = value
    # end set_accepted_cli_config

    def get_accepted_cli_config(self):
        return self.accepted_cli_config
    # end get_accepted_cli_config

    @property
    def commit_diff_list(self):
        """Get commit-diff-list for cli-config.
        
        :returns: CliDiffListType object
        
        """
        return getattr(self, '_commit_diff_list', None)
    # end commit_diff_list

    @commit_diff_list.setter
    def commit_diff_list(self, commit_diff_list):
        """Set commit-diff-list for cli-config.
        
        :param commit_diff_list: CliDiffListType object
        
        """
        self._commit_diff_list = commit_diff_list
    # end commit_diff_list

    def set_commit_diff_list(self, value):
        self.commit_diff_list = value
    # end set_commit_diff_list

    def get_commit_diff_list(self):
        return self.commit_diff_list
    # end get_commit_diff_list

    @property
    def id_perms(self):
        """Get id-perms for cli-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for cli-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for cli-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for cli-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for cli-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for cli-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for cli-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for cli-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_accepted_cli_config'):
            self._serialize_field_to_json(serialized, field_names, 'accepted_cli_config')
        if hasattr(self, '_commit_diff_list'):
            self._serialize_field_to_json(serialized, field_names, 'commit_diff_list')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for cli-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to cli-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for cli-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for cli-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display cli-config object in compact form."""
        print('------------ cli-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P accepted_cli_config = ', self.get_accepted_cli_config())
        print('P commit_diff_list = ', self.get_commit_diff_list())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class CliConfig

class ServiceObject(object):
    """


    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ServiceEndpoint` objects
        * list of :class:`.ServiceConnectionModule` objects
    """

    resource_type = 'service-object'
    object_type = 'service_object'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'service_endpoint_back_refs', u'service_connection_module_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['service_endpoint_back_refs'] = ('service-endpoint', 'None', False)
    backref_field_types['service_connection_module_back_refs'] = ('service-connection-module', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'service-object-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-object'
        if not name:
            name = u'default-service-object'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-object)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-object in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-object as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for service-object.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-object.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-object.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-object.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-object.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-object.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-object.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-object.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for service-object.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-object.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-object.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-object.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_service_endpoint_back_refs(self):
        """Return list of all service-endpoints using this service-object"""
        return getattr(self, 'service_endpoint_back_refs', None)
    # end get_service_endpoint_back_refs

    def get_service_connection_module_back_refs(self):
        """Return list of all service-connection-modules using this service-object"""
        return getattr(self, 'service_connection_module_back_refs', None)
    # end get_service_connection_module_back_refs

    def dump(self):
        """Display service-object object in compact form."""
        print('------------ service-object ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK service_endpoint = ', self.get_service_endpoint_back_refs())
        print('BCK service_connection_module = ', self.get_service_connection_module_back_refs())
    # end dump

# end class ServiceObject

class FeatureFlag(object):
    """
Feature Flag to swtich on/off the allowed feature

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * feature_description
            Type: str

            Created By: System

            Operations Allowed: R

            Description:

              short explanation about the feature.

        * feature_id
            Type: str, *one-of* [u'default', u'__test_feature_1__', u'__test_feature_2__']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              identifier for this feature

        * feature_flag_version
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              contrail release in which this feature flag is created.

        * feature_release
            Type: str

            Created By: System

            Operations Allowed: R

            Description:

              version of release in which the feature is introduced.

        * enable_feature
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              knob to enable or disable an allowed feature.

        * feature_state
            Type: str, *one-of* [u'experimental', u'alpha', u'beta', u'in-progress', u'pre-retired']

            Created By: System

            Operations Allowed: R

            Description:

              state of the feature

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'feature-flag'
    object_type = 'feature_flag'

    prop_fields = set([u'feature_description', u'feature_id', u'feature_flag_version', u'feature_release', u'enable_feature', u'feature_state', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'feature_description': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['short explanation about the feature.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'system-only'},
        'feature_id': {'operations': 'CRUD', 'restrictions': [u'default', u'__test_feature_1__', u'__test_feature_2__'], 'default': None, 'description': ['identifier for this feature'], 'simple_type': u'FeatureIdType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'feature_flag_version': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['contrail release in which this feature flag is created.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'feature_release': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['version of release in which the feature is introduced.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'system-only'},
        'enable_feature': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['knob to enable or disable an allowed feature.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'feature_state': {'operations': 'R', 'restrictions': [u'experimental', u'alpha', u'beta', u'in-progress', u'pre-retired'], 'default': None, 'description': ['state of the feature'], 'simple_type': u'FeatureStateType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'system-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['feature_description'] = 'feature-description'
    prop_field_metas['feature_id'] = 'feature-id'
    prop_field_metas['feature_flag_version'] = 'feature-flag-version'
    prop_field_metas['feature_release'] = 'feature-release'
    prop_field_metas['enable_feature'] = 'enable-feature'
    prop_field_metas['feature_state'] = 'feature-state'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'feature-flag-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, feature_description=None, feature_id=None, feature_flag_version=None, feature_release=None, enable_feature=False, feature_state=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'feature-flag'
        if not name:
            name = u'default-feature-flag'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if feature_description is not None:
            self._feature_description = feature_description
        if feature_id is not None:
            self._feature_id = feature_id
        if feature_flag_version is not None:
            self._feature_flag_version = feature_flag_version
        if feature_release is not None:
            self._feature_release = feature_release
        if enable_feature is not None:
            self._enable_feature = enable_feature
        if feature_state is not None:
            self._feature_state = feature_state
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (feature-flag)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of feature-flag in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of feature-flag as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of feature-flag's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of feature-flag's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def feature_description(self):
        """Get feature-description for feature-flag.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_feature_description', None)
    # end feature_description

    @feature_description.setter
    def feature_description(self, feature_description):
        """Set feature-description for feature-flag.
        
        :param feature_description: xsd:string object
        
        """
        self._feature_description = feature_description
    # end feature_description

    def set_feature_description(self, value):
        self.feature_description = value
    # end set_feature_description

    def get_feature_description(self):
        return self.feature_description
    # end get_feature_description

    @property
    def feature_id(self):
        """Get feature-id for feature-flag.
        
        :returns: FeatureIdType object
        
        """
        return getattr(self, '_feature_id', None)
    # end feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Set feature-id for feature-flag.
        
        :param feature_id: FeatureIdType object
        
        """
        self._feature_id = feature_id
    # end feature_id

    def set_feature_id(self, value):
        self.feature_id = value
    # end set_feature_id

    def get_feature_id(self):
        return self.feature_id
    # end get_feature_id

    @property
    def feature_flag_version(self):
        """Get feature-flag-version for feature-flag.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_feature_flag_version', None)
    # end feature_flag_version

    @feature_flag_version.setter
    def feature_flag_version(self, feature_flag_version):
        """Set feature-flag-version for feature-flag.
        
        :param feature_flag_version: xsd:string object
        
        """
        self._feature_flag_version = feature_flag_version
    # end feature_flag_version

    def set_feature_flag_version(self, value):
        self.feature_flag_version = value
    # end set_feature_flag_version

    def get_feature_flag_version(self):
        return self.feature_flag_version
    # end get_feature_flag_version

    @property
    def feature_release(self):
        """Get feature-release for feature-flag.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_feature_release', None)
    # end feature_release

    @feature_release.setter
    def feature_release(self, feature_release):
        """Set feature-release for feature-flag.
        
        :param feature_release: xsd:string object
        
        """
        self._feature_release = feature_release
    # end feature_release

    def set_feature_release(self, value):
        self.feature_release = value
    # end set_feature_release

    def get_feature_release(self):
        return self.feature_release
    # end get_feature_release

    @property
    def enable_feature(self):
        """Get enable-feature for feature-flag.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_enable_feature', None)
    # end enable_feature

    @enable_feature.setter
    def enable_feature(self, enable_feature):
        """Set enable-feature for feature-flag.
        
        :param enable_feature: xsd:boolean object
        
        """
        self._enable_feature = enable_feature
    # end enable_feature

    def set_enable_feature(self, value):
        self.enable_feature = value
    # end set_enable_feature

    def get_enable_feature(self):
        return self.enable_feature
    # end get_enable_feature

    @property
    def feature_state(self):
        """Get feature-state for feature-flag.
        
        :returns: FeatureStateType object
        
        """
        return getattr(self, '_feature_state', None)
    # end feature_state

    @feature_state.setter
    def feature_state(self, feature_state):
        """Set feature-state for feature-flag.
        
        :param feature_state: FeatureStateType object
        
        """
        self._feature_state = feature_state
    # end feature_state

    def set_feature_state(self, value):
        self.feature_state = value
    # end set_feature_state

    def get_feature_state(self):
        return self.feature_state
    # end get_feature_state

    @property
    def id_perms(self):
        """Get id-perms for feature-flag.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for feature-flag.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for feature-flag.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for feature-flag.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for feature-flag.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for feature-flag.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for feature-flag.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for feature-flag.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_feature_description'):
            self._serialize_field_to_json(serialized, field_names, 'feature_description')
        if hasattr(self, '_feature_id'):
            self._serialize_field_to_json(serialized, field_names, 'feature_id')
        if hasattr(self, '_feature_flag_version'):
            self._serialize_field_to_json(serialized, field_names, 'feature_flag_version')
        if hasattr(self, '_feature_release'):
            self._serialize_field_to_json(serialized, field_names, 'feature_release')
        if hasattr(self, '_enable_feature'):
            self._serialize_field_to_json(serialized, field_names, 'enable_feature')
        if hasattr(self, '_feature_state'):
            self._serialize_field_to_json(serialized, field_names, 'feature_state')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for feature-flag.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to feature-flag.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for feature-flag.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for feature-flag.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display feature-flag object in compact form."""
        print('------------ feature-flag ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P feature_description = ', self.get_feature_description())
        print('P feature_id = ', self.get_feature_id())
        print('P feature_flag_version = ', self.get_feature_flag_version())
        print('P feature_release = ', self.get_feature_release())
        print('P enable_feature = ', self.get_enable_feature())
        print('P feature_state = ', self.get_feature_state())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class FeatureFlag

class Loadbalancer(object):
    """
    Loadbalancer object represents a LBaaS instance. One single Virtual IP and multiple (listeners,
    pools). Applicable to LBaaS V2.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * loadbalancer_properties
            Type: :class:`.LoadbalancerType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Loadbalancer configuration like  admin state, VIP, VIP subnet etc.

        * loadbalancer_provider
            Type: str

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of

              service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the

              backend.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.ServiceApplianceSet` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * list of :class:`.ServiceInstance` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to the service instance, created automatically by the system.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to the virtual machine interface for VIP, created automatically by the system.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.LoadbalancerListener` objects
    """

    resource_type = 'loadbalancer'
    object_type = 'loadbalancer'

    prop_fields = set([u'loadbalancer_properties', u'loadbalancer_provider', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_appliance_set_refs', u'service_instance_refs', 'virtual_machine_interface_refs', u'tag_refs'])
    backref_fields = set(['loadbalancer_listener_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'loadbalancer_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Loadbalancer configuration like  admin state, VIP, VIP subnet etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'LoadbalancerType', 'restriction_type': None, 'required': 'required'},
        'loadbalancer_provider': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of', 'service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the', 'backend.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_appliance_set_refs'] = ('service-appliance-set', 'None', False, [])
    ref_field_types['service_instance_refs'] = ('service-instance', 'None', False, ['Reference to the service instance, created automatically by the system.'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to the virtual machine interface for VIP, created automatically by the system.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['loadbalancer_listener_back_refs'] = ('loadbalancer-listener', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['loadbalancer_properties'] = 'loadbalancer-properties'
    prop_field_metas['loadbalancer_provider'] = 'loadbalancer-provider'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_appliance_set_refs'] = 'loadbalancer-service-appliance-set'
    ref_field_metas['service_instance_refs'] = 'loadbalancer-service-instance'
    ref_field_metas['virtual_machine_interface_refs'] = 'loadbalancer-virtual-machine-interface'
    ref_field_metas['tag_refs'] = 'loadbalancer-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, loadbalancer_properties=None, loadbalancer_provider=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'loadbalancer'
        if not name:
            name = u'default-loadbalancer'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if loadbalancer_properties is not None:
            self._loadbalancer_properties = loadbalancer_properties
        if loadbalancer_provider is not None:
            self._loadbalancer_provider = loadbalancer_provider
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (loadbalancer)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of loadbalancer in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of loadbalancer as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of loadbalancer's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of loadbalancer's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def loadbalancer_properties(self):
        """Get loadbalancer-properties for loadbalancer.
        
        :returns: LoadbalancerType object
        
        """
        return getattr(self, '_loadbalancer_properties', None)
    # end loadbalancer_properties

    @loadbalancer_properties.setter
    def loadbalancer_properties(self, loadbalancer_properties):
        """Set loadbalancer-properties for loadbalancer.
        
        :param loadbalancer_properties: LoadbalancerType object
        
        """
        self._loadbalancer_properties = loadbalancer_properties
    # end loadbalancer_properties

    def set_loadbalancer_properties(self, value):
        self.loadbalancer_properties = value
    # end set_loadbalancer_properties

    def get_loadbalancer_properties(self):
        return self.loadbalancer_properties
    # end get_loadbalancer_properties

    @property
    def loadbalancer_provider(self):
        """Get loadbalancer-provider for loadbalancer.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_loadbalancer_provider', None)
    # end loadbalancer_provider

    @loadbalancer_provider.setter
    def loadbalancer_provider(self, loadbalancer_provider):
        """Set loadbalancer-provider for loadbalancer.
        
        :param loadbalancer_provider: xsd:string object
        
        """
        self._loadbalancer_provider = loadbalancer_provider
    # end loadbalancer_provider

    def set_loadbalancer_provider(self, value):
        self.loadbalancer_provider = value
    # end set_loadbalancer_provider

    def get_loadbalancer_provider(self):
        return self.loadbalancer_provider
    # end get_loadbalancer_provider

    @property
    def id_perms(self):
        """Get id-perms for loadbalancer.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for loadbalancer.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for loadbalancer.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for loadbalancer.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for loadbalancer.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for loadbalancer.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for loadbalancer.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for loadbalancer.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_loadbalancer_properties'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_properties')
        if hasattr(self, '_loadbalancer_provider'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_provider')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_appliance_set_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_set_refs')
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_appliance_set(self, ref_obj):
        """Set service-appliance-set for loadbalancer.
        
        :param ref_obj: ServiceApplianceSet object
        
        """
        self.service_appliance_set_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_appliance_set_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_appliance_set

    def add_service_appliance_set(self, ref_obj):
        """Add service-appliance-set to loadbalancer.
        
        :param ref_obj: ServiceApplianceSet object
        
        """
        refs = getattr(self, 'service_appliance_set_refs', [])
        if not refs:
            self.service_appliance_set_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_appliance_set_refs.append(ref_info)
    # end add_service_appliance_set

    def del_service_appliance_set(self, ref_obj):
        refs = self.get_service_appliance_set_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_appliance_set_refs.remove(ref)
                return
    # end del_service_appliance_set

    def set_service_appliance_set_list(self, ref_obj_list):
        """Set service-appliance-set list for loadbalancer.
        
        :param ref_obj_list: list of ServiceApplianceSet object
        
        """
        self.service_appliance_set_refs = ref_obj_list
    # end set_service_appliance_set_list

    def get_service_appliance_set_refs(self):
        """Return service-appliance-set list for loadbalancer.
        
        :returns: list of <ServiceApplianceSet>
        
        """
        return getattr(self, 'service_appliance_set_refs', None)
    # end get_service_appliance_set_refs

    def set_service_instance(self, ref_obj):
        """Set service-instance for loadbalancer.
        
        :param ref_obj: ServiceInstance object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj):
        """Add service-instance to loadbalancer.
        
        :param ref_obj: ServiceInstance object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list):
        """Set service-instance list for loadbalancer.
        
        :param ref_obj_list: list of ServiceInstance object
        
        """
        self.service_instance_refs = ref_obj_list
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for loadbalancer.
        
        :returns: list of <ServiceInstance>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for loadbalancer.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to loadbalancer.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for loadbalancer.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for loadbalancer.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for loadbalancer.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to loadbalancer.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for loadbalancer.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for loadbalancer.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_loadbalancer_listener_back_refs(self):
        """Return list of all loadbalancer-listeners using this loadbalancer"""
        return getattr(self, 'loadbalancer_listener_back_refs', None)
    # end get_loadbalancer_listener_back_refs

    def dump(self):
        """Display loadbalancer object in compact form."""
        print('------------ loadbalancer ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P loadbalancer_properties = ', self.get_loadbalancer_properties())
        print('P loadbalancer_provider = ', self.get_loadbalancer_provider())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_appliance_set = ', self.get_service_appliance_set_refs())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK loadbalancer_listener = ', self.get_loadbalancer_listener_back_refs())
    # end dump

# end class Loadbalancer

class PeeringPolicy(object):
    """


    Created By:

    Properties:
        * peering_service
            Type: str, *one-of* [u'public-peering']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Peering policy service type.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.E2ServiceProvider` objects
    """

    resource_type = 'peering-policy'
    object_type = 'peering_policy'

    prop_fields = set([u'peering_service', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'e2_service_provider_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'peering_service': {'operations': 'CRUD', 'restrictions': [u'public-peering'], 'default': None, 'description': ['Peering policy service type.'], 'simple_type': u'PeeringServiceType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['e2_service_provider_back_refs'] = ('e2-service-provider', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['peering_service'] = 'peering-service'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'peering-policy-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, peering_service=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'peering-policy'
        if not name:
            name = u'default-peering-policy'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if peering_service is not None:
            self._peering_service = peering_service
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (peering-policy)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of peering-policy in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of peering-policy as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def peering_service(self):
        """Get peering-service for peering-policy.
        
        :returns: PeeringServiceType object
        
        """
        return getattr(self, '_peering_service', None)
    # end peering_service

    @peering_service.setter
    def peering_service(self, peering_service):
        """Set peering-service for peering-policy.
        
        :param peering_service: PeeringServiceType object
        
        """
        self._peering_service = peering_service
    # end peering_service

    def set_peering_service(self, value):
        self.peering_service = value
    # end set_peering_service

    def get_peering_service(self):
        return self.peering_service
    # end get_peering_service

    @property
    def id_perms(self):
        """Get id-perms for peering-policy.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for peering-policy.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for peering-policy.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for peering-policy.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for peering-policy.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for peering-policy.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for peering-policy.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for peering-policy.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_peering_service'):
            self._serialize_field_to_json(serialized, field_names, 'peering_service')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for peering-policy.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to peering-policy.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for peering-policy.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for peering-policy.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_e2_service_provider_back_refs(self):
        """Return list of all e2-service-providers using this peering-policy"""
        return getattr(self, 'e2_service_provider_back_refs', None)
    # end get_e2_service_provider_back_refs

    def dump(self):
        """Display peering-policy object in compact form."""
        print('------------ peering-policy ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P peering_service = ', self.get_peering_service())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK e2_service_provider = ', self.get_e2_service_provider_back_refs())
    # end dump

# end class PeeringPolicy

class StructuredSyslogApplicationRecord(object):
    """
mapping App name to other entities

    Created By:
        User

    Child of:
        :class:`.StructuredSyslogConfig` object

    Properties:
        * structured_syslog_app_category
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              The application                                   category

        * structured_syslog_app_subcategory
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              The application                                   sub category

        * structured_syslog_app_groups
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              app groups comma                                   separated

        * structured_syslog_app_risk
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              The application                                   risk profile

        * structured_syslog_app_service_tags
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              service-tags                                   corresponding to applications

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'structured-syslog-application-record'
    object_type = 'structured_syslog_application_record'

    prop_fields = set([u'structured_syslog_app_category', u'structured_syslog_app_subcategory', u'structured_syslog_app_groups', u'structured_syslog_app_risk', u'structured_syslog_app_service_tags', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'structured_syslog_app_category': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['The application                                   category'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_app_subcategory': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['The application                                   sub category'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'structured_syslog_app_groups': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['app groups comma                                   separated'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'structured_syslog_app_risk': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['The application                                   risk profile'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'structured_syslog_app_service_tags': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['service-tags                                   corresponding to applications'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'structured-syslog-config']

    prop_field_metas = {}
    prop_field_metas['structured_syslog_app_category'] = 'structured-syslog-app-category'
    prop_field_metas['structured_syslog_app_subcategory'] = 'structured-syslog-app-subcategory'
    prop_field_metas['structured_syslog_app_groups'] = 'structured-syslog-app-groups'
    prop_field_metas['structured_syslog_app_risk'] = 'structured-syslog-app-risk'
    prop_field_metas['structured_syslog_app_service_tags'] = 'structured-syslog-app-service-tags'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'structured-syslog-application-record-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, structured_syslog_app_category=None, structured_syslog_app_subcategory=None, structured_syslog_app_groups=None, structured_syslog_app_risk=None, structured_syslog_app_service_tags=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'structured-syslog-application-record'
        if not name:
            name = u'default-structured-syslog-application-record'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            raise AmbiguousParentError("Ambiguous parents [u'global-analytics-config', 'project']")


        # property fields
        if structured_syslog_app_category is not None:
            self._structured_syslog_app_category = structured_syslog_app_category
        if structured_syslog_app_subcategory is not None:
            self._structured_syslog_app_subcategory = structured_syslog_app_subcategory
        if structured_syslog_app_groups is not None:
            self._structured_syslog_app_groups = structured_syslog_app_groups
        if structured_syslog_app_risk is not None:
            self._structured_syslog_app_risk = structured_syslog_app_risk
        if structured_syslog_app_service_tags is not None:
            self._structured_syslog_app_service_tags = structured_syslog_app_service_tags
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (structured-syslog-application-record)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of structured-syslog-application-record in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of structured-syslog-application-record as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of structured-syslog-application-record's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of structured-syslog-application-record's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def structured_syslog_app_category(self):
        """Get structured-syslog-app-category for structured-syslog-application-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_app_category', None)
    # end structured_syslog_app_category

    @structured_syslog_app_category.setter
    def structured_syslog_app_category(self, structured_syslog_app_category):
        """Set structured-syslog-app-category for structured-syslog-application-record.
        
        :param structured_syslog_app_category: xsd:string object
        
        """
        self._structured_syslog_app_category = structured_syslog_app_category
    # end structured_syslog_app_category

    def set_structured_syslog_app_category(self, value):
        self.structured_syslog_app_category = value
    # end set_structured_syslog_app_category

    def get_structured_syslog_app_category(self):
        return self.structured_syslog_app_category
    # end get_structured_syslog_app_category

    @property
    def structured_syslog_app_subcategory(self):
        """Get structured-syslog-app-subcategory for structured-syslog-application-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_app_subcategory', None)
    # end structured_syslog_app_subcategory

    @structured_syslog_app_subcategory.setter
    def structured_syslog_app_subcategory(self, structured_syslog_app_subcategory):
        """Set structured-syslog-app-subcategory for structured-syslog-application-record.
        
        :param structured_syslog_app_subcategory: xsd:string object
        
        """
        self._structured_syslog_app_subcategory = structured_syslog_app_subcategory
    # end structured_syslog_app_subcategory

    def set_structured_syslog_app_subcategory(self, value):
        self.structured_syslog_app_subcategory = value
    # end set_structured_syslog_app_subcategory

    def get_structured_syslog_app_subcategory(self):
        return self.structured_syslog_app_subcategory
    # end get_structured_syslog_app_subcategory

    @property
    def structured_syslog_app_groups(self):
        """Get structured-syslog-app-groups for structured-syslog-application-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_app_groups', None)
    # end structured_syslog_app_groups

    @structured_syslog_app_groups.setter
    def structured_syslog_app_groups(self, structured_syslog_app_groups):
        """Set structured-syslog-app-groups for structured-syslog-application-record.
        
        :param structured_syslog_app_groups: xsd:string object
        
        """
        self._structured_syslog_app_groups = structured_syslog_app_groups
    # end structured_syslog_app_groups

    def set_structured_syslog_app_groups(self, value):
        self.structured_syslog_app_groups = value
    # end set_structured_syslog_app_groups

    def get_structured_syslog_app_groups(self):
        return self.structured_syslog_app_groups
    # end get_structured_syslog_app_groups

    @property
    def structured_syslog_app_risk(self):
        """Get structured-syslog-app-risk for structured-syslog-application-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_app_risk', None)
    # end structured_syslog_app_risk

    @structured_syslog_app_risk.setter
    def structured_syslog_app_risk(self, structured_syslog_app_risk):
        """Set structured-syslog-app-risk for structured-syslog-application-record.
        
        :param structured_syslog_app_risk: xsd:string object
        
        """
        self._structured_syslog_app_risk = structured_syslog_app_risk
    # end structured_syslog_app_risk

    def set_structured_syslog_app_risk(self, value):
        self.structured_syslog_app_risk = value
    # end set_structured_syslog_app_risk

    def get_structured_syslog_app_risk(self):
        return self.structured_syslog_app_risk
    # end get_structured_syslog_app_risk

    @property
    def structured_syslog_app_service_tags(self):
        """Get structured-syslog-app-service-tags for structured-syslog-application-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_app_service_tags', None)
    # end structured_syslog_app_service_tags

    @structured_syslog_app_service_tags.setter
    def structured_syslog_app_service_tags(self, structured_syslog_app_service_tags):
        """Set structured-syslog-app-service-tags for structured-syslog-application-record.
        
        :param structured_syslog_app_service_tags: xsd:string object
        
        """
        self._structured_syslog_app_service_tags = structured_syslog_app_service_tags
    # end structured_syslog_app_service_tags

    def set_structured_syslog_app_service_tags(self, value):
        self.structured_syslog_app_service_tags = value
    # end set_structured_syslog_app_service_tags

    def get_structured_syslog_app_service_tags(self):
        return self.structured_syslog_app_service_tags
    # end get_structured_syslog_app_service_tags

    @property
    def id_perms(self):
        """Get id-perms for structured-syslog-application-record.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for structured-syslog-application-record.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for structured-syslog-application-record.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for structured-syslog-application-record.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for structured-syslog-application-record.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for structured-syslog-application-record.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for structured-syslog-application-record.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for structured-syslog-application-record.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_structured_syslog_app_category'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_app_category')
        if hasattr(self, '_structured_syslog_app_subcategory'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_app_subcategory')
        if hasattr(self, '_structured_syslog_app_groups'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_app_groups')
        if hasattr(self, '_structured_syslog_app_risk'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_app_risk')
        if hasattr(self, '_structured_syslog_app_service_tags'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_app_service_tags')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for structured-syslog-application-record.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to structured-syslog-application-record.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for structured-syslog-application-record.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for structured-syslog-application-record.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display structured-syslog-application-record object in compact form."""
        print('------------ structured-syslog-application-record ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P structured_syslog_app_category = ', self.get_structured_syslog_app_category())
        print('P structured_syslog_app_subcategory = ', self.get_structured_syslog_app_subcategory())
        print('P structured_syslog_app_groups = ', self.get_structured_syslog_app_groups())
        print('P structured_syslog_app_risk = ', self.get_structured_syslog_app_risk())
        print('P structured_syslog_app_service_tags = ', self.get_structured_syslog_app_service_tags())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class StructuredSyslogApplicationRecord

class GlobalVrouterConfig(object):
    """
    Global vrouter config is object where all global vrouter config is present.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * ecmp_hashing_include_fields
            Type: :class:`.EcmpHashingIncludeFields`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              ECMP hashing config at global level.

        * linklocal_services
            Type: :class:`.LinklocalServicesTypes`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Global services provided on link local subnet to the virtual machines.

        * encapsulation_priorities
            Type: :class:`.EncapsulationPrioritiesType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Ordered list of encapsulations that vrouter will use in priority order.

        * vxlan_network_identifier_mode
            Type: str, *one-of* [u'configured', u'automatic']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Method of allocation of VxLAN VNI(s). Set at provision time and cannot be changed.

                  configured = VxLAN VNI is given by user when virtual network is configured.

                  automatic = System will allocate VxLAN VNI automatically.

        * flow_export_rate
            Type: int

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Flow export rate is global config, rate at which each vrouter will sample and export flow records to

              analytics

        * flow_aging_timeout_list
            Type: :class:`.FlowAgingTimeoutList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Flow aging timeout per application (protocol, port) list.

        * enable_security_logging
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable or disable security-logging in the system

        * encryption_mode
            Type: str, *one-of* [u'none', u'all']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable encryption mode

        * encryption_tunnel_endpoints
            Type: :class:`.EncryptionTunnelEndpointList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Encryption tunnel endpoints list

        * forwarding_mode
            Type: str, *one-of* [u'l2_l3', u'l2', u'l3']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Packet forwarding mode for this system L2-only, L3-only OR L2-L3. L2-L3 is default.

        * port_translation_pools
            Type: :class:`.PortTranslationPools`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of Ports to be reserved for providing underlay connectivity via Port translation.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.SecurityLoggingObject` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to security logging object for global-vrouter-config.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ApplicationPolicySet` objects
    """

    resource_type = 'global-vrouter-config'
    object_type = 'global_vrouter_config'

    prop_fields = set([u'ecmp_hashing_include_fields', u'linklocal_services', u'encapsulation_priorities', u'vxlan_network_identifier_mode', u'flow_export_rate', u'flow_aging_timeout_list', u'enable_security_logging', u'encryption_mode', u'encryption_tunnel_endpoints', u'forwarding_mode', u'port_translation_pools', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['application_policy_set_back_refs'])
    children_fields = set([u'security_logging_objects'])

    prop_field_types = {
        'ecmp_hashing_include_fields': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['ECMP hashing config at global level.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'EcmpHashingIncludeFields', 'restriction_type': None, 'required': 'optional'},
        'linklocal_services': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Global services provided on link local subnet to the virtual machines.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'LinklocalServicesTypes', 'restriction_type': None, 'required': 'optional'},
        'encapsulation_priorities': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Ordered list of encapsulations that vrouter will use in priority order.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'EncapsulationPrioritiesType', 'restriction_type': None, 'required': 'optional'},
        'vxlan_network_identifier_mode': {'operations': 'CRUD', 'restrictions': [u'configured', u'automatic'], 'default': None, 'description': ['Method of allocation of VxLAN VNI(s). Set at provision time and cannot be changed.', '    configured = VxLAN VNI is given by user when virtual network is configured.', '    automatic = System will allocate VxLAN VNI automatically.'], 'simple_type': u'VxlanNetworkIdentifierModeType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'flow_export_rate': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Flow export rate is global config, rate at which each vrouter will sample and export flow records to', 'analytics'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'optional'},
        'flow_aging_timeout_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Flow aging timeout per application (protocol, port) list.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FlowAgingTimeoutList', 'restriction_type': None, 'required': 'optional'},
        'enable_security_logging': {'operations': 'CRUD', 'restrictions': None, 'default': True, 'description': ['Enable or disable security-logging in the system'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'encryption_mode': {'operations': 'CRUD', 'restrictions': [u'none', u'all'], 'default': 'none', 'description': ['Enable encryption mode'], 'simple_type': u'EncryptionMode', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'encryption_tunnel_endpoints': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Encryption tunnel endpoints list'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'EncryptionTunnelEndpointList', 'restriction_type': None, 'required': 'optional'},
        'forwarding_mode': {'operations': 'CRUD', 'restrictions': [u'l2_l3', u'l2', u'l3'], 'default': None, 'description': ['Packet forwarding mode for this system L2-only, L3-only OR L2-L3. L2-L3 is default.'], 'simple_type': u'ForwardingModeType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'port_translation_pools': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of Ports to be reserved for providing underlay connectivity via Port translation.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PortTranslationPools', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['application_policy_set_back_refs'] = ('application-policy-set', 'None', False)

    children_field_types = {}
    children_field_types['security_logging_objects'] = ('security-logging-object', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['ecmp_hashing_include_fields'] = 'ecmp-hashing-include-fields'
    prop_field_metas['linklocal_services'] = 'linklocal-services'
    prop_field_metas['encapsulation_priorities'] = 'encapsulation-priorities'
    prop_field_metas['vxlan_network_identifier_mode'] = 'vxlan-network-identifier-mode'
    prop_field_metas['flow_export_rate'] = 'flow-export-rate'
    prop_field_metas['flow_aging_timeout_list'] = 'flow-aging-timeout-list'
    prop_field_metas['enable_security_logging'] = 'enable-security-logging'
    prop_field_metas['encryption_mode'] = 'encryption-mode'
    prop_field_metas['encryption_tunnel_endpoints'] = 'encryption-tunnel-endpoints'
    prop_field_metas['forwarding_mode'] = 'forwarding-mode'
    prop_field_metas['port_translation_pools'] = 'port-translation-pools'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'global-vrouter-config-tag'

    children_field_metas = {}
    children_field_metas['security_logging_objects'] = 'global-vrouter-config-security-logging-object'

    prop_list_fields = set([u'encryption_tunnel_endpoints', u'port_translation_pools'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['encryption_tunnel_endpoints'] = True
    prop_list_field_has_wrappers['port_translation_pools'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, ecmp_hashing_include_fields=None, linklocal_services=None, encapsulation_priorities=None, vxlan_network_identifier_mode=None, flow_export_rate=None, flow_aging_timeout_list=None, enable_security_logging=True, encryption_mode='none', encryption_tunnel_endpoints=None, forwarding_mode=None, port_translation_pools=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'global-vrouter-config'
        if not name:
            name = u'default-global-vrouter-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if ecmp_hashing_include_fields is not None:
            self._ecmp_hashing_include_fields = ecmp_hashing_include_fields
        if linklocal_services is not None:
            self._linklocal_services = linklocal_services
        if encapsulation_priorities is not None:
            self._encapsulation_priorities = encapsulation_priorities
        if vxlan_network_identifier_mode is not None:
            self._vxlan_network_identifier_mode = vxlan_network_identifier_mode
        if flow_export_rate is not None:
            self._flow_export_rate = flow_export_rate
        if flow_aging_timeout_list is not None:
            self._flow_aging_timeout_list = flow_aging_timeout_list
        if enable_security_logging is not None:
            self._enable_security_logging = enable_security_logging
        if encryption_mode is not None:
            self._encryption_mode = encryption_mode
        if encryption_tunnel_endpoints is not None:
            self._encryption_tunnel_endpoints = encryption_tunnel_endpoints
        if forwarding_mode is not None:
            self._forwarding_mode = forwarding_mode
        if port_translation_pools is not None:
            self._port_translation_pools = port_translation_pools
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (global-vrouter-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of global-vrouter-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of global-vrouter-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of global-vrouter-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of global-vrouter-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def ecmp_hashing_include_fields(self):
        """Get ecmp-hashing-include-fields for global-vrouter-config.
        
        :returns: EcmpHashingIncludeFields object
        
        """
        return getattr(self, '_ecmp_hashing_include_fields', None)
    # end ecmp_hashing_include_fields

    @ecmp_hashing_include_fields.setter
    def ecmp_hashing_include_fields(self, ecmp_hashing_include_fields):
        """Set ecmp-hashing-include-fields for global-vrouter-config.
        
        :param ecmp_hashing_include_fields: EcmpHashingIncludeFields object
        
        """
        self._ecmp_hashing_include_fields = ecmp_hashing_include_fields
    # end ecmp_hashing_include_fields

    def set_ecmp_hashing_include_fields(self, value):
        self.ecmp_hashing_include_fields = value
    # end set_ecmp_hashing_include_fields

    def get_ecmp_hashing_include_fields(self):
        return self.ecmp_hashing_include_fields
    # end get_ecmp_hashing_include_fields

    @property
    def linklocal_services(self):
        """Get linklocal-services for global-vrouter-config.
        
        :returns: LinklocalServicesTypes object
        
        """
        return getattr(self, '_linklocal_services', None)
    # end linklocal_services

    @linklocal_services.setter
    def linklocal_services(self, linklocal_services):
        """Set linklocal-services for global-vrouter-config.
        
        :param linklocal_services: LinklocalServicesTypes object
        
        """
        self._linklocal_services = linklocal_services
    # end linklocal_services

    def set_linklocal_services(self, value):
        self.linklocal_services = value
    # end set_linklocal_services

    def get_linklocal_services(self):
        return self.linklocal_services
    # end get_linklocal_services

    @property
    def encapsulation_priorities(self):
        """Get encapsulation-priorities for global-vrouter-config.
        
        :returns: EncapsulationPrioritiesType object
        
        """
        return getattr(self, '_encapsulation_priorities', None)
    # end encapsulation_priorities

    @encapsulation_priorities.setter
    def encapsulation_priorities(self, encapsulation_priorities):
        """Set encapsulation-priorities for global-vrouter-config.
        
        :param encapsulation_priorities: EncapsulationPrioritiesType object
        
        """
        self._encapsulation_priorities = encapsulation_priorities
    # end encapsulation_priorities

    def set_encapsulation_priorities(self, value):
        self.encapsulation_priorities = value
    # end set_encapsulation_priorities

    def get_encapsulation_priorities(self):
        return self.encapsulation_priorities
    # end get_encapsulation_priorities

    @property
    def vxlan_network_identifier_mode(self):
        """Get vxlan-network-identifier-mode for global-vrouter-config.
        
        :returns: VxlanNetworkIdentifierModeType object
        
        """
        return getattr(self, '_vxlan_network_identifier_mode', None)
    # end vxlan_network_identifier_mode

    @vxlan_network_identifier_mode.setter
    def vxlan_network_identifier_mode(self, vxlan_network_identifier_mode):
        """Set vxlan-network-identifier-mode for global-vrouter-config.
        
        :param vxlan_network_identifier_mode: VxlanNetworkIdentifierModeType object
        
        """
        self._vxlan_network_identifier_mode = vxlan_network_identifier_mode
    # end vxlan_network_identifier_mode

    def set_vxlan_network_identifier_mode(self, value):
        self.vxlan_network_identifier_mode = value
    # end set_vxlan_network_identifier_mode

    def get_vxlan_network_identifier_mode(self):
        return self.vxlan_network_identifier_mode
    # end get_vxlan_network_identifier_mode

    @property
    def flow_export_rate(self):
        """Get flow-export-rate for global-vrouter-config.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_flow_export_rate', None)
    # end flow_export_rate

    @flow_export_rate.setter
    def flow_export_rate(self, flow_export_rate):
        """Set flow-export-rate for global-vrouter-config.
        
        :param flow_export_rate: xsd:integer object
        
        """
        self._flow_export_rate = flow_export_rate
    # end flow_export_rate

    def set_flow_export_rate(self, value):
        self.flow_export_rate = value
    # end set_flow_export_rate

    def get_flow_export_rate(self):
        return self.flow_export_rate
    # end get_flow_export_rate

    @property
    def flow_aging_timeout_list(self):
        """Get flow-aging-timeout-list for global-vrouter-config.
        
        :returns: FlowAgingTimeoutList object
        
        """
        return getattr(self, '_flow_aging_timeout_list', None)
    # end flow_aging_timeout_list

    @flow_aging_timeout_list.setter
    def flow_aging_timeout_list(self, flow_aging_timeout_list):
        """Set flow-aging-timeout-list for global-vrouter-config.
        
        :param flow_aging_timeout_list: FlowAgingTimeoutList object
        
        """
        self._flow_aging_timeout_list = flow_aging_timeout_list
    # end flow_aging_timeout_list

    def set_flow_aging_timeout_list(self, value):
        self.flow_aging_timeout_list = value
    # end set_flow_aging_timeout_list

    def get_flow_aging_timeout_list(self):
        return self.flow_aging_timeout_list
    # end get_flow_aging_timeout_list

    @property
    def enable_security_logging(self):
        """Get enable-security-logging for global-vrouter-config.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_enable_security_logging', None)
    # end enable_security_logging

    @enable_security_logging.setter
    def enable_security_logging(self, enable_security_logging):
        """Set enable-security-logging for global-vrouter-config.
        
        :param enable_security_logging: xsd:boolean object
        
        """
        self._enable_security_logging = enable_security_logging
    # end enable_security_logging

    def set_enable_security_logging(self, value):
        self.enable_security_logging = value
    # end set_enable_security_logging

    def get_enable_security_logging(self):
        return self.enable_security_logging
    # end get_enable_security_logging

    @property
    def encryption_mode(self):
        """Get encryption-mode for global-vrouter-config.
        
        :returns: EncryptionMode object
        
        """
        return getattr(self, '_encryption_mode', None)
    # end encryption_mode

    @encryption_mode.setter
    def encryption_mode(self, encryption_mode):
        """Set encryption-mode for global-vrouter-config.
        
        :param encryption_mode: EncryptionMode object
        
        """
        self._encryption_mode = encryption_mode
    # end encryption_mode

    def set_encryption_mode(self, value):
        self.encryption_mode = value
    # end set_encryption_mode

    def get_encryption_mode(self):
        return self.encryption_mode
    # end get_encryption_mode

    @property
    def encryption_tunnel_endpoints(self):
        """Get encryption-tunnel-endpoints for global-vrouter-config.
        
        :returns: EncryptionTunnelEndpointList object
        
        """
        return getattr(self, '_encryption_tunnel_endpoints', None)
    # end encryption_tunnel_endpoints

    @encryption_tunnel_endpoints.setter
    def encryption_tunnel_endpoints(self, encryption_tunnel_endpoints):
        """Set encryption-tunnel-endpoints for global-vrouter-config.
        
        :param encryption_tunnel_endpoints: EncryptionTunnelEndpointList object
        
        """
        self._encryption_tunnel_endpoints = encryption_tunnel_endpoints
    # end encryption_tunnel_endpoints

    def set_encryption_tunnel_endpoints(self, value):
        self.encryption_tunnel_endpoints = value
    # end set_encryption_tunnel_endpoints

    def get_encryption_tunnel_endpoints(self):
        return self.encryption_tunnel_endpoints
    # end get_encryption_tunnel_endpoints

    @property
    def forwarding_mode(self):
        """Get forwarding-mode for global-vrouter-config.
        
        :returns: ForwardingModeType object
        
        """
        return getattr(self, '_forwarding_mode', None)
    # end forwarding_mode

    @forwarding_mode.setter
    def forwarding_mode(self, forwarding_mode):
        """Set forwarding-mode for global-vrouter-config.
        
        :param forwarding_mode: ForwardingModeType object
        
        """
        self._forwarding_mode = forwarding_mode
    # end forwarding_mode

    def set_forwarding_mode(self, value):
        self.forwarding_mode = value
    # end set_forwarding_mode

    def get_forwarding_mode(self):
        return self.forwarding_mode
    # end get_forwarding_mode

    @property
    def port_translation_pools(self):
        """Get port-translation-pools for global-vrouter-config.
        
        :returns: PortTranslationPools object
        
        """
        return getattr(self, '_port_translation_pools', None)
    # end port_translation_pools

    @port_translation_pools.setter
    def port_translation_pools(self, port_translation_pools):
        """Set port-translation-pools for global-vrouter-config.
        
        :param port_translation_pools: PortTranslationPools object
        
        """
        self._port_translation_pools = port_translation_pools
    # end port_translation_pools

    def set_port_translation_pools(self, value):
        self.port_translation_pools = value
    # end set_port_translation_pools

    def get_port_translation_pools(self):
        return self.port_translation_pools
    # end get_port_translation_pools

    @property
    def id_perms(self):
        """Get id-perms for global-vrouter-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for global-vrouter-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for global-vrouter-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for global-vrouter-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for global-vrouter-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for global-vrouter-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for global-vrouter-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for global-vrouter-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_ecmp_hashing_include_fields'):
            self._serialize_field_to_json(serialized, field_names, 'ecmp_hashing_include_fields')
        if hasattr(self, '_linklocal_services'):
            self._serialize_field_to_json(serialized, field_names, 'linklocal_services')
        if hasattr(self, '_encapsulation_priorities'):
            self._serialize_field_to_json(serialized, field_names, 'encapsulation_priorities')
        if hasattr(self, '_vxlan_network_identifier_mode'):
            self._serialize_field_to_json(serialized, field_names, 'vxlan_network_identifier_mode')
        if hasattr(self, '_flow_export_rate'):
            self._serialize_field_to_json(serialized, field_names, 'flow_export_rate')
        if hasattr(self, '_flow_aging_timeout_list'):
            self._serialize_field_to_json(serialized, field_names, 'flow_aging_timeout_list')
        if hasattr(self, '_enable_security_logging'):
            self._serialize_field_to_json(serialized, field_names, 'enable_security_logging')
        if hasattr(self, '_encryption_mode'):
            self._serialize_field_to_json(serialized, field_names, 'encryption_mode')
        if hasattr(self, '_encryption_tunnel_endpoints'):
            self._serialize_field_to_json(serialized, field_names, 'encryption_tunnel_endpoints')
        if hasattr(self, '_forwarding_mode'):
            self._serialize_field_to_json(serialized, field_names, 'forwarding_mode')
        if hasattr(self, '_port_translation_pools'):
            self._serialize_field_to_json(serialized, field_names, 'port_translation_pools')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_security_logging_objects(self):
        return getattr(self, 'security_logging_objects', None)
    # end get_security_logging_objects

    def set_tag(self, ref_obj):
        """Set tag for global-vrouter-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to global-vrouter-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for global-vrouter-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for global-vrouter-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_application_policy_set_back_refs(self):
        """Return list of all application-policy-sets using this global-vrouter-config"""
        return getattr(self, 'application_policy_set_back_refs', None)
    # end get_application_policy_set_back_refs

    def dump(self):
        """Display global-vrouter-config object in compact form."""
        print('------------ global-vrouter-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P ecmp_hashing_include_fields = ', self.get_ecmp_hashing_include_fields())
        print('P linklocal_services = ', self.get_linklocal_services())
        print('P encapsulation_priorities = ', self.get_encapsulation_priorities())
        print('P vxlan_network_identifier_mode = ', self.get_vxlan_network_identifier_mode())
        print('P flow_export_rate = ', self.get_flow_export_rate())
        print('P flow_aging_timeout_list = ', self.get_flow_aging_timeout_list())
        print('P enable_security_logging = ', self.get_enable_security_logging())
        print('P encryption_mode = ', self.get_encryption_mode())
        print('P encryption_tunnel_endpoints = ', self.get_encryption_tunnel_endpoints())
        print('P forwarding_mode = ', self.get_forwarding_mode())
        print('P port_translation_pools = ', self.get_port_translation_pools())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS security_logging_object = ', self.get_security_logging_objects())
        print('REF tag = ', self.get_tag_refs())
        print('BCK application_policy_set = ', self.get_application_policy_set_back_refs())
    # end dump

# end class GlobalVrouterConfig

class FloatingIp(object):
    """
    When parent is floating-ip-pool:
        Floating ip is a ip that can be assigned to (virtual machine interface(VMI), ip), By doing so VMI
        can no be part of the floating ip network and floating ip is used as one:one to NAT for doing so.
    When parent is instance-ip:
        floating-ip can be child of instance-ip. By doing so instance-ip can be used as floating-ip.


    Created By:
        User when parent is :class:`.FloatingIpPool`
        User when parent is :class:`.InstanceIp`

    Child of:
        :class:`.FloatingIpPool` object OR
        :class:`.InstanceIp` object

    Properties:
        * floating_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CR

            Description:

              Floating ip address.

        * floating_ip_is_virtual_ip
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This floating ip is used as virtual ip (VIP) in case of LBaaS.

        * floating_ip_fixed_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This floating is tracking given fixed ip of the interface. The given fixed ip is used in 1:1 NAT.

        * floating_ip_address_family
            Type: str, *one-of* [u'v4', u'v6']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Ip address family of the floating ip, IpV4 or IpV6

        * floating_ip_port_mappings_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              If it is false, floating-ip Nat is done for all Ports. If it is true, floating-ip Nat is done to the

              list of PortMaps.

        * floating_ip_port_mappings
            Type: :class:`.PortMappings`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of PortMaps for this floating-ip.

        * floating_ip_traffic_direction
            Type: str, *one-of* [u'ingress', u'egress', u'both']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Specifies direction of traffic for the floating-ip

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Project` objects
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to project is which this floating ip was allocated.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to virtual machine interface to which this floating ip is attached.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.CustomerAttachment` objects
    """

    resource_type = 'floating-ip'
    object_type = 'floating_ip'

    prop_fields = set([u'floating_ip_address', u'floating_ip_is_virtual_ip', u'floating_ip_fixed_ip_address', u'floating_ip_address_family', u'floating_ip_port_mappings_enable', u'floating_ip_port_mappings', u'floating_ip_traffic_direction', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['project_refs', 'virtual_machine_interface_refs', u'tag_refs'])
    backref_fields = set(['customer_attachment_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'floating_ip_address': {'operations': 'CR', 'restrictions': [], 'default': None, 'description': ['Floating ip address.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'floating_ip_is_virtual_ip': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['This floating ip is used as virtual ip (VIP) in case of LBaaS.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'floating_ip_fixed_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['This floating is tracking given fixed ip of the interface. The given fixed ip is used in 1:1 NAT.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'floating_ip_address_family': {'operations': 'CRUD', 'restrictions': [u'v4', u'v6'], 'default': None, 'description': ['Ip address family of the floating ip, IpV4 or IpV6'], 'simple_type': u'IpAddressFamilyType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'floating_ip_port_mappings_enable': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['If it is false, floating-ip Nat is done for all Ports. If it is true, floating-ip Nat is done to the', 'list of PortMaps.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'floating_ip_port_mappings': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of PortMaps for this floating-ip.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PortMappings', 'restriction_type': None, 'required': 'optional'},
        'floating_ip_traffic_direction': {'operations': 'CRUD', 'restrictions': [u'ingress', u'egress', u'both'], 'default': 'both', 'description': ['Specifies direction of traffic for the floating-ip'], 'simple_type': u'TrafficDirectionType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['project_refs'] = ('project', 'None', False, ['Reference to project is which this floating ip was allocated.'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to virtual machine interface to which this floating ip is attached.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['customer_attachment_back_refs'] = ('customer-attachment', 'None', False)

    children_field_types = {}

    parent_types = [u'floating-ip-pool', u'instance-ip']

    prop_field_metas = {}
    prop_field_metas['floating_ip_address'] = 'floating-ip-address'
    prop_field_metas['floating_ip_is_virtual_ip'] = 'floating-ip-is-virtual-ip'
    prop_field_metas['floating_ip_fixed_ip_address'] = 'floating-ip-fixed-ip-address'
    prop_field_metas['floating_ip_address_family'] = 'floating-ip-address-family'
    prop_field_metas['floating_ip_port_mappings_enable'] = 'floating-ip-port-mappings-enable'
    prop_field_metas['floating_ip_port_mappings'] = 'floating-ip-port-mappings'
    prop_field_metas['floating_ip_traffic_direction'] = 'floating-ip-traffic-direction'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['project_refs'] = 'floating-ip-project'
    ref_field_metas['virtual_machine_interface_refs'] = 'floating-ip-virtual-machine-interface'
    ref_field_metas['tag_refs'] = 'floating-ip-tag'

    children_field_metas = {}

    prop_list_fields = set([u'floating_ip_port_mappings'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['floating_ip_port_mappings'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, floating_ip_address=None, floating_ip_is_virtual_ip=None, floating_ip_fixed_ip_address=None, floating_ip_address_family=None, floating_ip_port_mappings_enable=False, floating_ip_port_mappings=None, floating_ip_traffic_direction='both', id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'floating-ip'
        if not name:
            name = u'default-floating-ip'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'floating-ip-pool', u'instance-ip']")

        # property fields
        if floating_ip_address is not None:
            self._floating_ip_address = floating_ip_address
        if floating_ip_is_virtual_ip is not None:
            self._floating_ip_is_virtual_ip = floating_ip_is_virtual_ip
        if floating_ip_fixed_ip_address is not None:
            self._floating_ip_fixed_ip_address = floating_ip_fixed_ip_address
        if floating_ip_address_family is not None:
            self._floating_ip_address_family = floating_ip_address_family
        if floating_ip_port_mappings_enable is not None:
            self._floating_ip_port_mappings_enable = floating_ip_port_mappings_enable
        if floating_ip_port_mappings is not None:
            self._floating_ip_port_mappings = floating_ip_port_mappings
        if floating_ip_traffic_direction is not None:
            self._floating_ip_traffic_direction = floating_ip_traffic_direction
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (floating-ip)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of floating-ip in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of floating-ip as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of floating-ip's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of floating-ip's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def floating_ip_address(self):
        """Get floating-ip-address for floating-ip.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_floating_ip_address', None)
    # end floating_ip_address

    @floating_ip_address.setter
    def floating_ip_address(self, floating_ip_address):
        """Set floating-ip-address for floating-ip.
        
        :param floating_ip_address: IpAddressType object
        
        """
        self._floating_ip_address = floating_ip_address
    # end floating_ip_address

    def set_floating_ip_address(self, value):
        self.floating_ip_address = value
    # end set_floating_ip_address

    def get_floating_ip_address(self):
        return self.floating_ip_address
    # end get_floating_ip_address

    @property
    def floating_ip_is_virtual_ip(self):
        """Get floating-ip-is-virtual-ip for floating-ip.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_floating_ip_is_virtual_ip', None)
    # end floating_ip_is_virtual_ip

    @floating_ip_is_virtual_ip.setter
    def floating_ip_is_virtual_ip(self, floating_ip_is_virtual_ip):
        """Set floating-ip-is-virtual-ip for floating-ip.
        
        :param floating_ip_is_virtual_ip: xsd:boolean object
        
        """
        self._floating_ip_is_virtual_ip = floating_ip_is_virtual_ip
    # end floating_ip_is_virtual_ip

    def set_floating_ip_is_virtual_ip(self, value):
        self.floating_ip_is_virtual_ip = value
    # end set_floating_ip_is_virtual_ip

    def get_floating_ip_is_virtual_ip(self):
        return self.floating_ip_is_virtual_ip
    # end get_floating_ip_is_virtual_ip

    @property
    def floating_ip_fixed_ip_address(self):
        """Get floating-ip-fixed-ip-address for floating-ip.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_floating_ip_fixed_ip_address', None)
    # end floating_ip_fixed_ip_address

    @floating_ip_fixed_ip_address.setter
    def floating_ip_fixed_ip_address(self, floating_ip_fixed_ip_address):
        """Set floating-ip-fixed-ip-address for floating-ip.
        
        :param floating_ip_fixed_ip_address: IpAddressType object
        
        """
        self._floating_ip_fixed_ip_address = floating_ip_fixed_ip_address
    # end floating_ip_fixed_ip_address

    def set_floating_ip_fixed_ip_address(self, value):
        self.floating_ip_fixed_ip_address = value
    # end set_floating_ip_fixed_ip_address

    def get_floating_ip_fixed_ip_address(self):
        return self.floating_ip_fixed_ip_address
    # end get_floating_ip_fixed_ip_address

    @property
    def floating_ip_address_family(self):
        """Get floating-ip-address-family for floating-ip.
        
        :returns: IpAddressFamilyType object
        
        """
        return getattr(self, '_floating_ip_address_family', None)
    # end floating_ip_address_family

    @floating_ip_address_family.setter
    def floating_ip_address_family(self, floating_ip_address_family):
        """Set floating-ip-address-family for floating-ip.
        
        :param floating_ip_address_family: IpAddressFamilyType object
        
        """
        self._floating_ip_address_family = floating_ip_address_family
    # end floating_ip_address_family

    def set_floating_ip_address_family(self, value):
        self.floating_ip_address_family = value
    # end set_floating_ip_address_family

    def get_floating_ip_address_family(self):
        return self.floating_ip_address_family
    # end get_floating_ip_address_family

    @property
    def floating_ip_port_mappings_enable(self):
        """Get floating-ip-port-mappings-enable for floating-ip.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_floating_ip_port_mappings_enable', None)
    # end floating_ip_port_mappings_enable

    @floating_ip_port_mappings_enable.setter
    def floating_ip_port_mappings_enable(self, floating_ip_port_mappings_enable):
        """Set floating-ip-port-mappings-enable for floating-ip.
        
        :param floating_ip_port_mappings_enable: xsd:boolean object
        
        """
        self._floating_ip_port_mappings_enable = floating_ip_port_mappings_enable
    # end floating_ip_port_mappings_enable

    def set_floating_ip_port_mappings_enable(self, value):
        self.floating_ip_port_mappings_enable = value
    # end set_floating_ip_port_mappings_enable

    def get_floating_ip_port_mappings_enable(self):
        return self.floating_ip_port_mappings_enable
    # end get_floating_ip_port_mappings_enable

    @property
    def floating_ip_port_mappings(self):
        """Get floating-ip-port-mappings for floating-ip.
        
        :returns: PortMappings object
        
        """
        return getattr(self, '_floating_ip_port_mappings', None)
    # end floating_ip_port_mappings

    @floating_ip_port_mappings.setter
    def floating_ip_port_mappings(self, floating_ip_port_mappings):
        """Set floating-ip-port-mappings for floating-ip.
        
        :param floating_ip_port_mappings: PortMappings object
        
        """
        self._floating_ip_port_mappings = floating_ip_port_mappings
    # end floating_ip_port_mappings

    def set_floating_ip_port_mappings(self, value):
        self.floating_ip_port_mappings = value
    # end set_floating_ip_port_mappings

    def get_floating_ip_port_mappings(self):
        return self.floating_ip_port_mappings
    # end get_floating_ip_port_mappings

    @property
    def floating_ip_traffic_direction(self):
        """Get floating-ip-traffic-direction for floating-ip.
        
        :returns: TrafficDirectionType object
        
        """
        return getattr(self, '_floating_ip_traffic_direction', None)
    # end floating_ip_traffic_direction

    @floating_ip_traffic_direction.setter
    def floating_ip_traffic_direction(self, floating_ip_traffic_direction):
        """Set floating-ip-traffic-direction for floating-ip.
        
        :param floating_ip_traffic_direction: TrafficDirectionType object
        
        """
        self._floating_ip_traffic_direction = floating_ip_traffic_direction
    # end floating_ip_traffic_direction

    def set_floating_ip_traffic_direction(self, value):
        self.floating_ip_traffic_direction = value
    # end set_floating_ip_traffic_direction

    def get_floating_ip_traffic_direction(self):
        return self.floating_ip_traffic_direction
    # end get_floating_ip_traffic_direction

    @property
    def id_perms(self):
        """Get id-perms for floating-ip.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for floating-ip.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for floating-ip.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for floating-ip.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for floating-ip.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for floating-ip.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for floating-ip.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for floating-ip.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_floating_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_address')
        if hasattr(self, '_floating_ip_is_virtual_ip'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_is_virtual_ip')
        if hasattr(self, '_floating_ip_fixed_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_fixed_ip_address')
        if hasattr(self, '_floating_ip_address_family'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_address_family')
        if hasattr(self, '_floating_ip_port_mappings_enable'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_port_mappings_enable')
        if hasattr(self, '_floating_ip_port_mappings'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_port_mappings')
        if hasattr(self, '_floating_ip_traffic_direction'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_traffic_direction')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'project_refs'):
            self._serialize_field_to_json(serialized, field_names, 'project_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_project(self, ref_obj):
        """Set project for floating-ip.
        
        :param ref_obj: Project object
        
        """
        self.project_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.project_refs[0]['uuid'] = ref_obj.uuid

    # end set_project

    def add_project(self, ref_obj):
        """Add project to floating-ip.
        
        :param ref_obj: Project object
        
        """
        refs = getattr(self, 'project_refs', [])
        if not refs:
            self.project_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.project_refs.append(ref_info)
    # end add_project

    def del_project(self, ref_obj):
        refs = self.get_project_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.project_refs.remove(ref)
                return
    # end del_project

    def set_project_list(self, ref_obj_list):
        """Set project list for floating-ip.
        
        :param ref_obj_list: list of Project object
        
        """
        self.project_refs = ref_obj_list
    # end set_project_list

    def get_project_refs(self):
        """Return project list for floating-ip.
        
        :returns: list of <Project>
        
        """
        return getattr(self, 'project_refs', None)
    # end get_project_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for floating-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to floating-ip.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for floating-ip.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for floating-ip.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for floating-ip.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to floating-ip.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for floating-ip.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for floating-ip.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_customer_attachment_back_refs(self):
        """Return list of all customer-attachments using this floating-ip"""
        return getattr(self, 'customer_attachment_back_refs', None)
    # end get_customer_attachment_back_refs

    def dump(self):
        """Display floating-ip object in compact form."""
        print('------------ floating-ip ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P floating_ip_address = ', self.get_floating_ip_address())
        print('P floating_ip_is_virtual_ip = ', self.get_floating_ip_is_virtual_ip())
        print('P floating_ip_fixed_ip_address = ', self.get_floating_ip_fixed_ip_address())
        print('P floating_ip_address_family = ', self.get_floating_ip_address_family())
        print('P floating_ip_port_mappings_enable = ', self.get_floating_ip_port_mappings_enable())
        print('P floating_ip_port_mappings = ', self.get_floating_ip_port_mappings())
        print('P floating_ip_traffic_direction = ', self.get_floating_ip_traffic_direction())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF project = ', self.get_project_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK customer_attachment = ', self.get_customer_attachment_back_refs())
    # end dump

# end class FloatingIp

class LinkAggregationGroup(object):
    """
    List of link aggregation groups on this PRouter.

    Created By:
        User

    Child of:
        :class:`.PhysicalRouter` object

    Properties:
        * link_aggregation_group_lacp_enabled
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Flag to turn on or off Link Aggregation Control Protocol (LACP) on this link aggregation group.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.PhysicalInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              All the interfaces that belongs to the LAG. There should be exact one ref edge that points to the

              lag interface and two or more ref-edges points to the regular interfaces.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of virtual machine interfaces connected to this link aggregation group

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'link-aggregation-group'
    object_type = 'link_aggregation_group'

    prop_fields = set([u'link_aggregation_group_lacp_enabled', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['physical_interface_refs', 'virtual_machine_interface_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'link_aggregation_group_lacp_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Flag to turn on or off Link Aggregation Control Protocol (LACP) on this link aggregation group.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['physical_interface_refs'] = ('physical-interface', 'None', False, ['All the interfaces that belongs to the LAG. There should be exact one ref edge that points to the', 'lag interface and two or more ref-edges points to the regular interfaces.'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['list of virtual machine interfaces connected to this link aggregation group'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['physical-router']

    prop_field_metas = {}
    prop_field_metas['link_aggregation_group_lacp_enabled'] = 'link-aggregation-group-lacp-enabled'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['physical_interface_refs'] = 'link-aggregation-group-physical-interface'
    ref_field_metas['virtual_machine_interface_refs'] = 'link-aggregation-group-virtual-machine-interface'
    ref_field_metas['tag_refs'] = 'link-aggregation-group-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, link_aggregation_group_lacp_enabled=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'link-aggregation-group'
        if not name:
            name = u'default-link-aggregation-group'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'physical-router'
            self.fq_name = ['default-global-system-config', 'default-physical-router']
            self.fq_name.append(name)


        # property fields
        if link_aggregation_group_lacp_enabled is not None:
            self._link_aggregation_group_lacp_enabled = link_aggregation_group_lacp_enabled
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (link-aggregation-group)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of link-aggregation-group in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of link-aggregation-group as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of link-aggregation-group's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of link-aggregation-group's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def link_aggregation_group_lacp_enabled(self):
        """Get link-aggregation-group-lacp-enabled for link-aggregation-group.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_link_aggregation_group_lacp_enabled', None)
    # end link_aggregation_group_lacp_enabled

    @link_aggregation_group_lacp_enabled.setter
    def link_aggregation_group_lacp_enabled(self, link_aggregation_group_lacp_enabled):
        """Set link-aggregation-group-lacp-enabled for link-aggregation-group.
        
        :param link_aggregation_group_lacp_enabled: xsd:boolean object
        
        """
        self._link_aggregation_group_lacp_enabled = link_aggregation_group_lacp_enabled
    # end link_aggregation_group_lacp_enabled

    def set_link_aggregation_group_lacp_enabled(self, value):
        self.link_aggregation_group_lacp_enabled = value
    # end set_link_aggregation_group_lacp_enabled

    def get_link_aggregation_group_lacp_enabled(self):
        return self.link_aggregation_group_lacp_enabled
    # end get_link_aggregation_group_lacp_enabled

    @property
    def id_perms(self):
        """Get id-perms for link-aggregation-group.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for link-aggregation-group.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for link-aggregation-group.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for link-aggregation-group.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for link-aggregation-group.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for link-aggregation-group.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for link-aggregation-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for link-aggregation-group.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_link_aggregation_group_lacp_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'link_aggregation_group_lacp_enabled')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'physical_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_physical_interface(self, ref_obj):
        """Set physical-interface for link-aggregation-group.
        
        :param ref_obj: PhysicalInterface object
        
        """
        self.physical_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_interface

    def add_physical_interface(self, ref_obj):
        """Add physical-interface to link-aggregation-group.
        
        :param ref_obj: PhysicalInterface object
        
        """
        refs = getattr(self, 'physical_interface_refs', [])
        if not refs:
            self.physical_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_interface_refs.append(ref_info)
    # end add_physical_interface

    def del_physical_interface(self, ref_obj):
        refs = self.get_physical_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_interface_refs.remove(ref)
                return
    # end del_physical_interface

    def set_physical_interface_list(self, ref_obj_list):
        """Set physical-interface list for link-aggregation-group.
        
        :param ref_obj_list: list of PhysicalInterface object
        
        """
        self.physical_interface_refs = ref_obj_list
    # end set_physical_interface_list

    def get_physical_interface_refs(self):
        """Return physical-interface list for link-aggregation-group.
        
        :returns: list of <PhysicalInterface>
        
        """
        return getattr(self, 'physical_interface_refs', None)
    # end get_physical_interface_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for link-aggregation-group.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to link-aggregation-group.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for link-aggregation-group.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for link-aggregation-group.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for link-aggregation-group.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to link-aggregation-group.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for link-aggregation-group.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for link-aggregation-group.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display link-aggregation-group object in compact form."""
        print('------------ link-aggregation-group ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P link_aggregation_group_lacp_enabled = ', self.get_link_aggregation_group_lacp_enabled())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF physical_interface = ', self.get_physical_interface_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class LinkAggregationGroup

class VirtualRouter(object):
    """
    Virtual router is packet forwarding system on devices such as compute nodes(servers), TOR(s),
    routers.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * virtual_router_type
            Type: str, *one-of* [u'embedded', u'tor-agent', u'tor-service-node']

            Created By: User (optional)

            Operations Allowed: CRD

            Description:

              Different types of the vrouters in the system.

        * virtual_router_dpdk_enabled
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This vrouter's data path is using DPDK library, Virtual machines interfaces scheduled on this

              compute node will be tagged with additional flags so that they are spawned with user space virtio

              driver. It is only applicable for embedded vrouter.

        * virtual_router_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Ip address of the virtual router.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              An interface on a virtual-router, e.g. vhost0


    References to:
        * list of (:class:`.NetworkIpam` object, :class:`.VirtualRouterNetworkIpamType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to network-ipam this virtual-router is using. It has list of virtual-router specific

              allocation-pools and cidrs that are to be used as property of the reference.

        * list of :class:`.SubCluster` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference of vrouter to sub-cluster.

        * list of :class:`.VirtualMachine` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              References to all virtual machines on this vrouter. This link is not present for dynamically

              scheduled VMs by Nova.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.InstanceIp` objects
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.ProviderAttachment` objects
    """

    resource_type = 'virtual-router'
    object_type = 'virtual_router'

    prop_fields = set([u'virtual_router_type', u'virtual_router_dpdk_enabled', u'virtual_router_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'network_ipam_refs', 'sub_cluster_refs', u'virtual_machine_refs', u'tag_refs'])
    backref_fields = set([u'instance_ip_back_refs', 'physical_router_back_refs', 'provider_attachment_back_refs'])
    children_fields = set(['virtual_machine_interfaces'])

    prop_field_types = {
        'virtual_router_type': {'operations': 'CRD', 'restrictions': [u'embedded', u'tor-agent', u'tor-service-node'], 'default': None, 'description': ['Different types of the vrouters in the system.'], 'simple_type': u'VirtualRouterType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'virtual_router_dpdk_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ["This vrouter's data path is using DPDK library, Virtual machines interfaces scheduled on this", 'compute node will be tagged with additional flags so that they are spawned with user space virtio', 'driver. It is only applicable for embedded vrouter.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'virtual_router_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the virtual router.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['network_ipam_refs'] = ('network-ipam', 'VirtualRouterNetworkIpamType', False, ['Reference to network-ipam this virtual-router is using. It has list of virtual-router specific', 'allocation-pools and cidrs that are to be used as property of the reference.'])
    ref_field_types['sub_cluster_refs'] = ('sub-cluster', 'None', False, ['Reference of vrouter to sub-cluster.'])
    ref_field_types['virtual_machine_refs'] = ('virtual-machine', 'None', False, ['References to all virtual machines on this vrouter. This link is not present for dynamically', 'scheduled VMs by Nova.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['provider_attachment_back_refs'] = ('provider-attachment', 'None', False)

    children_field_types = {}
    children_field_types['virtual_machine_interfaces'] = ('virtual-machine-interface', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['virtual_router_type'] = 'virtual-router-type'
    prop_field_metas['virtual_router_dpdk_enabled'] = 'virtual-router-dpdk-enabled'
    prop_field_metas['virtual_router_ip_address'] = 'virtual-router-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['network_ipam_refs'] = 'virtual-router-network-ipam'
    ref_field_metas['sub_cluster_refs'] = 'virtual-router-sub-cluster'
    ref_field_metas['virtual_machine_refs'] = 'virtual-router-virtual-machine'
    ref_field_metas['tag_refs'] = 'virtual-router-tag'

    children_field_metas = {}
    children_field_metas['virtual_machine_interfaces'] = 'virtual-router-virtual-machine-interface'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, virtual_router_type=None, virtual_router_dpdk_enabled=None, virtual_router_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-router'
        if not name:
            name = u'default-virtual-router'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if virtual_router_type is not None:
            self._virtual_router_type = virtual_router_type
        if virtual_router_dpdk_enabled is not None:
            self._virtual_router_dpdk_enabled = virtual_router_dpdk_enabled
        if virtual_router_ip_address is not None:
            self._virtual_router_ip_address = virtual_router_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-router)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-router in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-router as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of virtual-router's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of virtual-router's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def virtual_router_type(self):
        """Get virtual-router-type for virtual-router.
        
        :returns: VirtualRouterType object
        
        """
        return getattr(self, '_virtual_router_type', None)
    # end virtual_router_type

    @virtual_router_type.setter
    def virtual_router_type(self, virtual_router_type):
        """Set virtual-router-type for virtual-router.
        
        :param virtual_router_type: VirtualRouterType object
        
        """
        self._virtual_router_type = virtual_router_type
    # end virtual_router_type

    def set_virtual_router_type(self, value):
        self.virtual_router_type = value
    # end set_virtual_router_type

    def get_virtual_router_type(self):
        return self.virtual_router_type
    # end get_virtual_router_type

    @property
    def virtual_router_dpdk_enabled(self):
        """Get virtual-router-dpdk-enabled for virtual-router.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_virtual_router_dpdk_enabled', None)
    # end virtual_router_dpdk_enabled

    @virtual_router_dpdk_enabled.setter
    def virtual_router_dpdk_enabled(self, virtual_router_dpdk_enabled):
        """Set virtual-router-dpdk-enabled for virtual-router.
        
        :param virtual_router_dpdk_enabled: xsd:boolean object
        
        """
        self._virtual_router_dpdk_enabled = virtual_router_dpdk_enabled
    # end virtual_router_dpdk_enabled

    def set_virtual_router_dpdk_enabled(self, value):
        self.virtual_router_dpdk_enabled = value
    # end set_virtual_router_dpdk_enabled

    def get_virtual_router_dpdk_enabled(self):
        return self.virtual_router_dpdk_enabled
    # end get_virtual_router_dpdk_enabled

    @property
    def virtual_router_ip_address(self):
        """Get virtual-router-ip-address for virtual-router.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_virtual_router_ip_address', None)
    # end virtual_router_ip_address

    @virtual_router_ip_address.setter
    def virtual_router_ip_address(self, virtual_router_ip_address):
        """Set virtual-router-ip-address for virtual-router.
        
        :param virtual_router_ip_address: IpAddressType object
        
        """
        self._virtual_router_ip_address = virtual_router_ip_address
    # end virtual_router_ip_address

    def set_virtual_router_ip_address(self, value):
        self.virtual_router_ip_address = value
    # end set_virtual_router_ip_address

    def get_virtual_router_ip_address(self):
        return self.virtual_router_ip_address
    # end get_virtual_router_ip_address

    @property
    def id_perms(self):
        """Get id-perms for virtual-router.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-router.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-router.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-router.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-router.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-router.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-router.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_virtual_router_type'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_router_type')
        if hasattr(self, '_virtual_router_dpdk_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_router_dpdk_enabled')
        if hasattr(self, '_virtual_router_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_router_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'network_ipam_refs'):
            self._serialize_field_to_json(serialized, field_names, 'network_ipam_refs')
        if hasattr(self, 'sub_cluster_refs'):
            self._serialize_field_to_json(serialized, field_names, 'sub_cluster_refs')
        if hasattr(self, 'virtual_machine_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_virtual_machine_interfaces(self):
        return getattr(self, 'virtual_machine_interfaces', None)
    # end get_virtual_machine_interfaces

    def set_network_ipam(self, ref_obj, ref_data=None):
        """Set network-ipam for virtual-router.
        
        :param ref_obj: NetworkIpam object
        :param ref_data: VirtualRouterNetworkIpamType object
        
        """
        self.network_ipam_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.network_ipam_refs[0]['uuid'] = ref_obj.uuid

    # end set_network_ipam

    def add_network_ipam(self, ref_obj, ref_data=None):
        """Add network-ipam to virtual-router.
        
        :param ref_obj: NetworkIpam object
        :param ref_data: VirtualRouterNetworkIpamType object
        
        """
        refs = getattr(self, 'network_ipam_refs', [])
        if not refs:
            self.network_ipam_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.network_ipam_refs.append(ref_info)
    # end add_network_ipam

    def del_network_ipam(self, ref_obj):
        refs = self.get_network_ipam_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.network_ipam_refs.remove(ref)
                return
    # end del_network_ipam

    def set_network_ipam_list(self, ref_obj_list, ref_data_list=None):
        """Set network-ipam list for virtual-router.
        
        :param ref_obj_list: list of NetworkIpam object
        :param ref_data_list: list of VirtualRouterNetworkIpamType object
        
        """
        self.network_ipam_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_network_ipam_list

    def get_network_ipam_refs(self):
        """Return network-ipam list for virtual-router.
        
        :returns: list of tuple <NetworkIpam, VirtualRouterNetworkIpamType>
        
        """
        return getattr(self, 'network_ipam_refs', None)
    # end get_network_ipam_refs

    def set_sub_cluster(self, ref_obj):
        """Set sub-cluster for virtual-router.
        
        :param ref_obj: SubCluster object
        
        """
        self.sub_cluster_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.sub_cluster_refs[0]['uuid'] = ref_obj.uuid

    # end set_sub_cluster

    def add_sub_cluster(self, ref_obj):
        """Add sub-cluster to virtual-router.
        
        :param ref_obj: SubCluster object
        
        """
        refs = getattr(self, 'sub_cluster_refs', [])
        if not refs:
            self.sub_cluster_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.sub_cluster_refs.append(ref_info)
    # end add_sub_cluster

    def del_sub_cluster(self, ref_obj):
        refs = self.get_sub_cluster_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.sub_cluster_refs.remove(ref)
                return
    # end del_sub_cluster

    def set_sub_cluster_list(self, ref_obj_list):
        """Set sub-cluster list for virtual-router.
        
        :param ref_obj_list: list of SubCluster object
        
        """
        self.sub_cluster_refs = ref_obj_list
    # end set_sub_cluster_list

    def get_sub_cluster_refs(self):
        """Return sub-cluster list for virtual-router.
        
        :returns: list of <SubCluster>
        
        """
        return getattr(self, 'sub_cluster_refs', None)
    # end get_sub_cluster_refs

    def set_virtual_machine(self, ref_obj):
        """Set virtual-machine for virtual-router.
        
        :param ref_obj: VirtualMachine object
        
        """
        self.virtual_machine_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine

    def add_virtual_machine(self, ref_obj):
        """Add virtual-machine to virtual-router.
        
        :param ref_obj: VirtualMachine object
        
        """
        refs = getattr(self, 'virtual_machine_refs', [])
        if not refs:
            self.virtual_machine_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_refs.append(ref_info)
    # end add_virtual_machine

    def del_virtual_machine(self, ref_obj):
        refs = self.get_virtual_machine_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_refs.remove(ref)
                return
    # end del_virtual_machine

    def set_virtual_machine_list(self, ref_obj_list):
        """Set virtual-machine list for virtual-router.
        
        :param ref_obj_list: list of VirtualMachine object
        
        """
        self.virtual_machine_refs = ref_obj_list
    # end set_virtual_machine_list

    def get_virtual_machine_refs(self):
        """Return virtual-machine list for virtual-router.
        
        :returns: list of <VirtualMachine>
        
        """
        return getattr(self, 'virtual_machine_refs', None)
    # end get_virtual_machine_refs

    def set_tag(self, ref_obj):
        """Set tag for virtual-router.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-router.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-router.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-router.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this virtual-router"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this virtual-router"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_provider_attachment_back_refs(self):
        """Return list of all provider-attachments using this virtual-router"""
        return getattr(self, 'provider_attachment_back_refs', None)
    # end get_provider_attachment_back_refs

    def dump(self):
        """Display virtual-router object in compact form."""
        print('------------ virtual-router ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P virtual_router_type = ', self.get_virtual_router_type())
        print('P virtual_router_dpdk_enabled = ', self.get_virtual_router_dpdk_enabled())
        print('P virtual_router_ip_address = ', self.get_virtual_router_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF network_ipam = ', self.get_network_ipam_refs())
        print('HAS virtual_machine_interface = ', self.get_virtual_machine_interfaces())
        print('REF sub_cluster = ', self.get_sub_cluster_refs())
        print('REF virtual_machine = ', self.get_virtual_machine_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK provider_attachment = ', self.get_provider_attachment_back_refs())
    # end dump

# end class VirtualRouter

class PortProfile(object):
    """
Encapsulates port configurations like storm control, QoS etc

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.StormControlProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Storm control profile that this port profile uses.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.VirtualPortGroup` objects
    """

    resource_type = 'port-profile'
    object_type = 'port_profile'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'storm_control_profile_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs', u'virtual_port_group_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['storm_control_profile_refs'] = ('storm-control-profile', 'None', False, ['Storm control profile that this port profile uses.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['virtual_port_group_back_refs'] = ('virtual-port-group', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['storm_control_profile_refs'] = 'port-profile-storm-control-profile'
    ref_field_metas['tag_refs'] = 'port-profile-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'port-profile'
        if not name:
            name = u'default-port-profile'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (port-profile)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of port-profile in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of port-profile as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of port-profile's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of port-profile's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for port-profile.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for port-profile.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for port-profile.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for port-profile.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for port-profile.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for port-profile.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for port-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for port-profile.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'storm_control_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'storm_control_profile_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_storm_control_profile(self, ref_obj):
        """Set storm-control-profile for port-profile.
        
        :param ref_obj: StormControlProfile object
        
        """
        self.storm_control_profile_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.storm_control_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_storm_control_profile

    def add_storm_control_profile(self, ref_obj):
        """Add storm-control-profile to port-profile.
        
        :param ref_obj: StormControlProfile object
        
        """
        refs = getattr(self, 'storm_control_profile_refs', [])
        if not refs:
            self.storm_control_profile_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.storm_control_profile_refs.append(ref_info)
    # end add_storm_control_profile

    def del_storm_control_profile(self, ref_obj):
        refs = self.get_storm_control_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.storm_control_profile_refs.remove(ref)
                return
    # end del_storm_control_profile

    def set_storm_control_profile_list(self, ref_obj_list):
        """Set storm-control-profile list for port-profile.
        
        :param ref_obj_list: list of StormControlProfile object
        
        """
        self.storm_control_profile_refs = ref_obj_list
    # end set_storm_control_profile_list

    def get_storm_control_profile_refs(self):
        """Return storm-control-profile list for port-profile.
        
        :returns: list of <StormControlProfile>
        
        """
        return getattr(self, 'storm_control_profile_refs', None)
    # end get_storm_control_profile_refs

    def set_tag(self, ref_obj):
        """Set tag for port-profile.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to port-profile.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for port-profile.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for port-profile.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this port-profile"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_virtual_port_group_back_refs(self):
        """Return list of all virtual-port-groups using this port-profile"""
        return getattr(self, 'virtual_port_group_back_refs', None)
    # end get_virtual_port_group_back_refs

    def dump(self):
        """Display port-profile object in compact form."""
        print('------------ port-profile ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF storm_control_profile = ', self.get_storm_control_profile_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK virtual_port_group = ', self.get_virtual_port_group_back_refs())
    # end dump

# end class PortProfile

class PolicyManagement(object):
    """
    When parent is config-root:
        Global level policy-management object re-grouping global policy resources.
    When parent is project:
        Project level policy-management object re-grouping project policy resources


    Created By:
        User when parent is :class:`.ConfigRoot`
        User when parent is :class:`.Project`

    Child of:
        :class:`.ConfigRoot` object OR
        :class:`.Project` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.ServiceGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service Group object

        * list of :class:`.AddressGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Address Group object

        * list of :class:`.FirewallRule` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Firewall-rule object

        * list of :class:`.FirewallPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              firewall-policy object consisting of one or more firewall rules

        * list of :class:`.ApplicationPolicySet` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Application-policy object defining policies to apply for a given application tag


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'policy-management'
    object_type = 'policy_management'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set(['service_groups', 'address_groups', 'firewall_rules', 'firewall_policys', 'application_policy_sets'])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['service_groups'] = ('service-group', False)
    children_field_types['address_groups'] = ('address-group', False)
    children_field_types['firewall_rules'] = ('firewall-rule', False)
    children_field_types['firewall_policys'] = ('firewall-policy', False)
    children_field_types['application_policy_sets'] = ('application-policy-set', False)

    parent_types = [u'config-root', 'project']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'policy-management-tag'

    children_field_metas = {}
    children_field_metas['service_groups'] = 'policy-management-service-group'
    children_field_metas['address_groups'] = 'policy-management-address-group'
    children_field_metas['firewall_rules'] = 'policy-management-firewall-rule'
    children_field_metas['firewall_policys'] = 'policy-management-firewall-policy'
    children_field_metas['application_policy_sets'] = 'policy-management-application-policy-set'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'policy-management'
        if not name:
            name = u'default-policy-management'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (policy-management)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of policy-management in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of policy-management as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of policy-management's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of policy-management's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for policy-management.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for policy-management.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for policy-management.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for policy-management.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for policy-management.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for policy-management.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for policy-management.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for policy-management.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_service_groups(self):
        return getattr(self, 'service_groups', None)
    # end get_service_groups

    def get_address_groups(self):
        return getattr(self, 'address_groups', None)
    # end get_address_groups

    def get_firewall_rules(self):
        return getattr(self, 'firewall_rules', None)
    # end get_firewall_rules

    def get_firewall_policys(self):
        return getattr(self, 'firewall_policys', None)
    # end get_firewall_policys

    def get_application_policy_sets(self):
        return getattr(self, 'application_policy_sets', None)
    # end get_application_policy_sets

    def set_tag(self, ref_obj):
        """Set tag for policy-management.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to policy-management.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for policy-management.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for policy-management.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display policy-management object in compact form."""
        print('------------ policy-management ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS service_group = ', self.get_service_groups())
        print('HAS address_group = ', self.get_address_groups())
        print('HAS firewall_rule = ', self.get_firewall_rules())
        print('HAS firewall_policy = ', self.get_firewall_policys())
        print('HAS application_policy_set = ', self.get_application_policy_sets())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class PolicyManagement

class E2ServiceProvider(object):
    """


    Created By:

    Properties:
        * e2_service_provider_promiscuous
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This service provider is connected to all other service providers.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.PeeringPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Links the service provider to a peering policy.

        * list of :class:`.PhysicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Links the service provider to peer routers.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'e2-service-provider'
    object_type = 'e2_service_provider'

    prop_fields = set([u'e2_service_provider_promiscuous', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'peering_policy_refs', 'physical_router_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'e2_service_provider_promiscuous': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['This service provider is connected to all other service providers.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['peering_policy_refs'] = ('peering-policy', 'None', False, ['Links the service provider to a peering policy.'])
    ref_field_types['physical_router_refs'] = ('physical-router', 'None', False, ['Links the service provider to peer routers.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['e2_service_provider_promiscuous'] = 'e2-service-provider-promiscuous'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['peering_policy_refs'] = 'e2-service-provider-peering-policy'
    ref_field_metas['physical_router_refs'] = 'e2-service-provider-physical-router'
    ref_field_metas['tag_refs'] = 'e2-service-provider-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, e2_service_provider_promiscuous=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'e2-service-provider'
        if not name:
            name = u'default-e2-service-provider'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if e2_service_provider_promiscuous is not None:
            self._e2_service_provider_promiscuous = e2_service_provider_promiscuous
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (e2-service-provider)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of e2-service-provider in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of e2-service-provider as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def e2_service_provider_promiscuous(self):
        """Get e2-service-provider-promiscuous for e2-service-provider.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_e2_service_provider_promiscuous', None)
    # end e2_service_provider_promiscuous

    @e2_service_provider_promiscuous.setter
    def e2_service_provider_promiscuous(self, e2_service_provider_promiscuous):
        """Set e2-service-provider-promiscuous for e2-service-provider.
        
        :param e2_service_provider_promiscuous: xsd:boolean object
        
        """
        self._e2_service_provider_promiscuous = e2_service_provider_promiscuous
    # end e2_service_provider_promiscuous

    def set_e2_service_provider_promiscuous(self, value):
        self.e2_service_provider_promiscuous = value
    # end set_e2_service_provider_promiscuous

    def get_e2_service_provider_promiscuous(self):
        return self.e2_service_provider_promiscuous
    # end get_e2_service_provider_promiscuous

    @property
    def id_perms(self):
        """Get id-perms for e2-service-provider.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for e2-service-provider.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for e2-service-provider.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for e2-service-provider.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for e2-service-provider.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for e2-service-provider.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for e2-service-provider.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for e2-service-provider.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_e2_service_provider_promiscuous'):
            self._serialize_field_to_json(serialized, field_names, 'e2_service_provider_promiscuous')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'peering_policy_refs'):
            self._serialize_field_to_json(serialized, field_names, 'peering_policy_refs')
        if hasattr(self, 'physical_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_router_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_peering_policy(self, ref_obj):
        """Set peering-policy for e2-service-provider.
        
        :param ref_obj: PeeringPolicy object
        
        """
        self.peering_policy_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.peering_policy_refs[0]['uuid'] = ref_obj.uuid

    # end set_peering_policy

    def add_peering_policy(self, ref_obj):
        """Add peering-policy to e2-service-provider.
        
        :param ref_obj: PeeringPolicy object
        
        """
        refs = getattr(self, 'peering_policy_refs', [])
        if not refs:
            self.peering_policy_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.peering_policy_refs.append(ref_info)
    # end add_peering_policy

    def del_peering_policy(self, ref_obj):
        refs = self.get_peering_policy_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.peering_policy_refs.remove(ref)
                return
    # end del_peering_policy

    def set_peering_policy_list(self, ref_obj_list):
        """Set peering-policy list for e2-service-provider.
        
        :param ref_obj_list: list of PeeringPolicy object
        
        """
        self.peering_policy_refs = ref_obj_list
    # end set_peering_policy_list

    def get_peering_policy_refs(self):
        """Return peering-policy list for e2-service-provider.
        
        :returns: list of <PeeringPolicy>
        
        """
        return getattr(self, 'peering_policy_refs', None)
    # end get_peering_policy_refs

    def set_physical_router(self, ref_obj):
        """Set physical-router for e2-service-provider.
        
        :param ref_obj: PhysicalRouter object
        
        """
        self.physical_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_router

    def add_physical_router(self, ref_obj):
        """Add physical-router to e2-service-provider.
        
        :param ref_obj: PhysicalRouter object
        
        """
        refs = getattr(self, 'physical_router_refs', [])
        if not refs:
            self.physical_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_router_refs.append(ref_info)
    # end add_physical_router

    def del_physical_router(self, ref_obj):
        refs = self.get_physical_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_router_refs.remove(ref)
                return
    # end del_physical_router

    def set_physical_router_list(self, ref_obj_list):
        """Set physical-router list for e2-service-provider.
        
        :param ref_obj_list: list of PhysicalRouter object
        
        """
        self.physical_router_refs = ref_obj_list
    # end set_physical_router_list

    def get_physical_router_refs(self):
        """Return physical-router list for e2-service-provider.
        
        :returns: list of <PhysicalRouter>
        
        """
        return getattr(self, 'physical_router_refs', None)
    # end get_physical_router_refs

    def set_tag(self, ref_obj):
        """Set tag for e2-service-provider.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to e2-service-provider.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for e2-service-provider.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for e2-service-provider.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display e2-service-provider object in compact form."""
        print('------------ e2-service-provider ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P e2_service_provider_promiscuous = ', self.get_e2_service_provider_promiscuous())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF peering_policy = ', self.get_peering_policy_refs())
        print('REF physical_router = ', self.get_physical_router_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class E2ServiceProvider

class Fabric(object):
    """
    List of fabrics in the system. Each fabric is an administrative domain for all the network devices
    in one or multiple CLOS.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * fabric_ztp
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This attribute to indicate if the fabric is zero-touch provisioned or not. If this attribute is set

              to "True", user should not be allowed to remove any existing namespaces from the fabric as they may

              be used to provision the devices.

        * fabric_os_version
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              OS version of the entire fabric. It is updated when image upgrade is chosen during ztp.

        * fabric_credentials
            Type: :class:`.DeviceCredentialList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of device credentials to manage the network devices in the fabric.

        * fabric_enterprise_style
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This attribute indicates whether to use enterprise-style or sp-style configuration in the fabric.

              True indicated enterprise-style.

        * disable_vlan_vn_uniqueness_check
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This attribute indicates whether complex validations for VLAN-VN uniqueness check should be done for

              enterprise style VPGs in the fabric. Default behaviour is to enable all the validations.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.FabricNamespace` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of fabric namespaces that define a set of resources that can be used to configure the network

              devices in the fabric.

        * list of :class:`.VirtualPortGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of virtual port groups in this fabric.


    References to:
        * list of :class:`.IntentMap` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Fabric that belongs to this intent map

        * list of (:class:`.VirtualNetwork` object, :class:`.FabricNetworkTag` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Similar to using virtual-machine to model the bare metal server, we are using virtual-network to

              model various underlay networks such as the management network and IP fabric network. This would

              allow us the re-use the same IPAM data model and code base to manage the IP auto-assignments for the

              underlay physical networks.

        * list of (:class:`.NodeProfile` object, :class:`.SerialNumListType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              node profiles assignd to the fabric. The serial number list on the link is used to auto assign node-

              profile during ZTP so that port channelization could be bootstrapped based on the hardware spec in

              the node profile.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PhysicalRouter` objects
    """

    resource_type = 'fabric'
    object_type = 'fabric'

    prop_fields = set([u'fabric_ztp', u'fabric_os_version', u'fabric_credentials', u'fabric_enterprise_style', u'disable_vlan_vn_uniqueness_check', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'intent_map_refs', 'virtual_network_refs', u'node_profile_refs', u'tag_refs'])
    backref_fields = set(['physical_router_back_refs'])
    children_fields = set([u'fabric_namespaces', u'virtual_port_groups'])

    prop_field_types = {
        'fabric_ztp': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['This attribute to indicate if the fabric is zero-touch provisioned or not. If this attribute is set', 'to "True", user should not be allowed to remove any existing namespaces from the fabric as they may', 'be used to provision the devices.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'fabric_os_version': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['OS version of the entire fabric. It is updated when image upgrade is chosen during ztp.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'fabric_credentials': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of device credentials to manage the network devices in the fabric.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DeviceCredentialList', 'restriction_type': None, 'required': 'optional'},
        'fabric_enterprise_style': {'operations': 'CRUD', 'restrictions': None, 'default': True, 'description': ['This attribute indicates whether to use enterprise-style or sp-style configuration in the fabric.', 'True indicated enterprise-style.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'disable_vlan_vn_uniqueness_check': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['This attribute indicates whether complex validations for VLAN-VN uniqueness check should be done for', 'enterprise style VPGs in the fabric. Default behaviour is to enable all the validations.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['intent_map_refs'] = ('intent-map', 'None', False, ['Fabric that belongs to this intent map'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'FabricNetworkTag', False, ['Similar to using virtual-machine to model the bare metal server, we are using virtual-network to', 'model various underlay networks such as the management network and IP fabric network. This would', 'allow us the re-use the same IPAM data model and code base to manage the IP auto-assignments for the', 'underlay physical networks.'])
    ref_field_types['node_profile_refs'] = ('node-profile', 'SerialNumListType', False, ['node profiles assignd to the fabric. The serial number list on the link is used to auto assign node-', 'profile during ZTP so that port channelization could be bootstrapped based on the hardware spec in', 'the node profile.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)

    children_field_types = {}
    children_field_types['fabric_namespaces'] = ('fabric-namespace', False)
    children_field_types['virtual_port_groups'] = ('virtual-port-group', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['fabric_ztp'] = 'fabric-ztp'
    prop_field_metas['fabric_os_version'] = 'fabric-os-version'
    prop_field_metas['fabric_credentials'] = 'fabric-credentials'
    prop_field_metas['fabric_enterprise_style'] = 'fabric-enterprise-style'
    prop_field_metas['disable_vlan_vn_uniqueness_check'] = 'disable-vlan-vn-uniqueness-check'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['intent_map_refs'] = 'fabric-intent-map'
    ref_field_metas['virtual_network_refs'] = 'fabric-virtual-network'
    ref_field_metas['node_profile_refs'] = 'fabric-node-profile'
    ref_field_metas['tag_refs'] = 'fabric-tag'

    children_field_metas = {}
    children_field_metas['fabric_namespaces'] = 'fabric-fabric-namespace'
    children_field_metas['virtual_port_groups'] = 'fabric-virtual-port-group'

    prop_list_fields = set([u'fabric_credentials'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['fabric_credentials'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, fabric_ztp=None, fabric_os_version=None, fabric_credentials=None, fabric_enterprise_style=True, disable_vlan_vn_uniqueness_check=False, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'fabric'
        if not name:
            name = u'default-fabric'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if fabric_ztp is not None:
            self._fabric_ztp = fabric_ztp
        if fabric_os_version is not None:
            self._fabric_os_version = fabric_os_version
        if fabric_credentials is not None:
            self._fabric_credentials = fabric_credentials
        if fabric_enterprise_style is not None:
            self._fabric_enterprise_style = fabric_enterprise_style
        if disable_vlan_vn_uniqueness_check is not None:
            self._disable_vlan_vn_uniqueness_check = disable_vlan_vn_uniqueness_check
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (fabric)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of fabric in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of fabric as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of fabric's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of fabric's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def fabric_ztp(self):
        """Get fabric-ztp for fabric.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_fabric_ztp', None)
    # end fabric_ztp

    @fabric_ztp.setter
    def fabric_ztp(self, fabric_ztp):
        """Set fabric-ztp for fabric.
        
        :param fabric_ztp: xsd:boolean object
        
        """
        self._fabric_ztp = fabric_ztp
    # end fabric_ztp

    def set_fabric_ztp(self, value):
        self.fabric_ztp = value
    # end set_fabric_ztp

    def get_fabric_ztp(self):
        return self.fabric_ztp
    # end get_fabric_ztp

    @property
    def fabric_os_version(self):
        """Get fabric-os-version for fabric.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_fabric_os_version', None)
    # end fabric_os_version

    @fabric_os_version.setter
    def fabric_os_version(self, fabric_os_version):
        """Set fabric-os-version for fabric.
        
        :param fabric_os_version: xsd:string object
        
        """
        self._fabric_os_version = fabric_os_version
    # end fabric_os_version

    def set_fabric_os_version(self, value):
        self.fabric_os_version = value
    # end set_fabric_os_version

    def get_fabric_os_version(self):
        return self.fabric_os_version
    # end get_fabric_os_version

    @property
    def fabric_credentials(self):
        """Get fabric-credentials for fabric.
        
        :returns: DeviceCredentialList object
        
        """
        return getattr(self, '_fabric_credentials', None)
    # end fabric_credentials

    @fabric_credentials.setter
    def fabric_credentials(self, fabric_credentials):
        """Set fabric-credentials for fabric.
        
        :param fabric_credentials: DeviceCredentialList object
        
        """
        self._fabric_credentials = fabric_credentials
    # end fabric_credentials

    def set_fabric_credentials(self, value):
        self.fabric_credentials = value
    # end set_fabric_credentials

    def get_fabric_credentials(self):
        return self.fabric_credentials
    # end get_fabric_credentials

    @property
    def fabric_enterprise_style(self):
        """Get fabric-enterprise-style for fabric.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_fabric_enterprise_style', None)
    # end fabric_enterprise_style

    @fabric_enterprise_style.setter
    def fabric_enterprise_style(self, fabric_enterprise_style):
        """Set fabric-enterprise-style for fabric.
        
        :param fabric_enterprise_style: xsd:boolean object
        
        """
        self._fabric_enterprise_style = fabric_enterprise_style
    # end fabric_enterprise_style

    def set_fabric_enterprise_style(self, value):
        self.fabric_enterprise_style = value
    # end set_fabric_enterprise_style

    def get_fabric_enterprise_style(self):
        return self.fabric_enterprise_style
    # end get_fabric_enterprise_style

    @property
    def disable_vlan_vn_uniqueness_check(self):
        """Get disable-vlan-vn-uniqueness-check for fabric.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_disable_vlan_vn_uniqueness_check', None)
    # end disable_vlan_vn_uniqueness_check

    @disable_vlan_vn_uniqueness_check.setter
    def disable_vlan_vn_uniqueness_check(self, disable_vlan_vn_uniqueness_check):
        """Set disable-vlan-vn-uniqueness-check for fabric.
        
        :param disable_vlan_vn_uniqueness_check: xsd:boolean object
        
        """
        self._disable_vlan_vn_uniqueness_check = disable_vlan_vn_uniqueness_check
    # end disable_vlan_vn_uniqueness_check

    def set_disable_vlan_vn_uniqueness_check(self, value):
        self.disable_vlan_vn_uniqueness_check = value
    # end set_disable_vlan_vn_uniqueness_check

    def get_disable_vlan_vn_uniqueness_check(self):
        return self.disable_vlan_vn_uniqueness_check
    # end get_disable_vlan_vn_uniqueness_check

    @property
    def id_perms(self):
        """Get id-perms for fabric.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for fabric.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for fabric.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for fabric.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for fabric.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for fabric.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for fabric.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for fabric.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_fabric_ztp'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_ztp')
        if hasattr(self, '_fabric_os_version'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_os_version')
        if hasattr(self, '_fabric_credentials'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_credentials')
        if hasattr(self, '_fabric_enterprise_style'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_enterprise_style')
        if hasattr(self, '_disable_vlan_vn_uniqueness_check'):
            self._serialize_field_to_json(serialized, field_names, 'disable_vlan_vn_uniqueness_check')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'intent_map_refs'):
            self._serialize_field_to_json(serialized, field_names, 'intent_map_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'node_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_fabric_namespaces(self):
        return getattr(self, 'fabric_namespaces', None)
    # end get_fabric_namespaces

    def get_virtual_port_groups(self):
        return getattr(self, 'virtual_port_groups', None)
    # end get_virtual_port_groups

    def set_intent_map(self, ref_obj):
        """Set intent-map for fabric.
        
        :param ref_obj: IntentMap object
        
        """
        self.intent_map_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.intent_map_refs[0]['uuid'] = ref_obj.uuid

    # end set_intent_map

    def add_intent_map(self, ref_obj):
        """Add intent-map to fabric.
        
        :param ref_obj: IntentMap object
        
        """
        refs = getattr(self, 'intent_map_refs', [])
        if not refs:
            self.intent_map_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.intent_map_refs.append(ref_info)
    # end add_intent_map

    def del_intent_map(self, ref_obj):
        refs = self.get_intent_map_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.intent_map_refs.remove(ref)
                return
    # end del_intent_map

    def set_intent_map_list(self, ref_obj_list):
        """Set intent-map list for fabric.
        
        :param ref_obj_list: list of IntentMap object
        
        """
        self.intent_map_refs = ref_obj_list
    # end set_intent_map_list

    def get_intent_map_refs(self):
        """Return intent-map list for fabric.
        
        :returns: list of <IntentMap>
        
        """
        return getattr(self, 'intent_map_refs', None)
    # end get_intent_map_refs

    def set_virtual_network(self, ref_obj, ref_data=None):
        """Set virtual-network for fabric.
        
        :param ref_obj: VirtualNetwork object
        :param ref_data: FabricNetworkTag object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj, ref_data=None):
        """Add virtual-network to fabric.
        
        :param ref_obj: VirtualNetwork object
        :param ref_data: FabricNetworkTag object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list, ref_data_list=None):
        """Set virtual-network list for fabric.
        
        :param ref_obj_list: list of VirtualNetwork object
        :param ref_data_list: list of FabricNetworkTag object
        
        """
        self.virtual_network_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for fabric.
        
        :returns: list of tuple <VirtualNetwork, FabricNetworkTag>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_node_profile(self, ref_obj, ref_data=None):
        """Set node-profile for fabric.
        
        :param ref_obj: NodeProfile object
        :param ref_data: SerialNumListType object
        
        """
        self.node_profile_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.node_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_node_profile

    def add_node_profile(self, ref_obj, ref_data=None):
        """Add node-profile to fabric.
        
        :param ref_obj: NodeProfile object
        :param ref_data: SerialNumListType object
        
        """
        refs = getattr(self, 'node_profile_refs', [])
        if not refs:
            self.node_profile_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.node_profile_refs.append(ref_info)
    # end add_node_profile

    def del_node_profile(self, ref_obj):
        refs = self.get_node_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.node_profile_refs.remove(ref)
                return
    # end del_node_profile

    def set_node_profile_list(self, ref_obj_list, ref_data_list=None):
        """Set node-profile list for fabric.
        
        :param ref_obj_list: list of NodeProfile object
        :param ref_data_list: list of SerialNumListType object
        
        """
        self.node_profile_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_node_profile_list

    def get_node_profile_refs(self):
        """Return node-profile list for fabric.
        
        :returns: list of tuple <NodeProfile, SerialNumListType>
        
        """
        return getattr(self, 'node_profile_refs', None)
    # end get_node_profile_refs

    def set_tag(self, ref_obj):
        """Set tag for fabric.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to fabric.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for fabric.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for fabric.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this fabric"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def dump(self):
        """Display fabric object in compact form."""
        print('------------ fabric ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P fabric_ztp = ', self.get_fabric_ztp())
        print('P fabric_os_version = ', self.get_fabric_os_version())
        print('P fabric_credentials = ', self.get_fabric_credentials())
        print('P fabric_enterprise_style = ', self.get_fabric_enterprise_style())
        print('P disable_vlan_vn_uniqueness_check = ', self.get_disable_vlan_vn_uniqueness_check())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF intent_map = ', self.get_intent_map_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('HAS fabric_namespace = ', self.get_fabric_namespaces())
        print('REF node_profile = ', self.get_node_profile_refs())
        print('HAS virtual_port_group = ', self.get_virtual_port_groups())
        print('REF tag = ', self.get_tag_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
    # end dump

# end class Fabric

class JobTemplate(object):
    """
    List of job templates supported by the system.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * job_template_synchronous_job
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              if set to true, the "/execute-job" action simply executes the playbook directly and wait until the

              playbook finishes. So the playbook in the synchronous job should not take long to execute. There

              will no job log or job uve being created for synchronous job. This is an optional field. If not set,

              the default value is "false".

        * job_template_type
            Type: str, *one-of* [u'workflow', u'device_operation', u'config', u'executable']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              This attribute is to identify the template type. This property is mainly needed to list all generic

              device operations in the UI. There are at present 4 types. Workflow based (e.g. fabric onboarding,

              existing fabric onboarding), device operation based (standalone like e.g. device discovery, device

              import, discover role), config based (e.g. role_assignment, fabric_config) and device command based

              (for generic device operations)

        * job_template_concurrency_level
            Type: str, *one-of* [u'fabric', u'device']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              This attribute controls the number concurrent job execution against the same fabric. When this

              attribute set to "fabric", there could only one job execution per fabric When this attribute set to

              "device", there could be only one playbook execution running against the same device at the time.

        * job_template_playbooks
            Type: :class:`.PlaybookInfoListType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              List of vendor specific playbooks that achieve the same functionality on each vendor device. All the

              vendor specific playbooks listed here share the same input/output schema defined in the job template

        * job_template_executables
            Type: :class:`.ExecutableInfoListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of Executables that needs to be Executed

        * job_template_input_schema
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              JSON schema of the job input parameters which will be used to validate the job input json or

              generate UI form for user to enter the job parameters. This property stores the JSON schema content

              as string. Here is an example fo the image upgrade job template input schema:{    "$schema": "http

              ://json-schema.org/draft-06/schema#",    "title": "Image upgrade input",    "type": "object",

              "properties": {        "image_uuid": {            "type": "string"        }    },    "required":

              ["image_uuid"]}

        * job_template_output_schema
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              JSON schema of the job output that describes the output from the job and could be used by UI to

              render the output automatically. This property stores the JSON schema content as string.

        * job_template_input_ui_schema
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              UI JSON schema of the job input that could be used by UI to render the input form with certain nice-

              to-have features like ordering of the input fields, placeholders etc. This property stores the UI

              JSON schema content as string.

        * job_template_output_ui_schema
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              UI JSON schema of the job output that could be used by UI to render the input form with certain

              nice-to-have features like ordering of the output fields etc. This property stores the UI JSON

              schema content as string.

        * job_template_description
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              A detailed description of what the job template functionality is

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.NodeProfile` objects
    """

    resource_type = 'job-template'
    object_type = 'job_template'

    prop_fields = set([u'job_template_synchronous_job', u'job_template_type', u'job_template_concurrency_level', u'job_template_playbooks', u'job_template_executables', u'job_template_input_schema', u'job_template_output_schema', u'job_template_input_ui_schema', u'job_template_output_ui_schema', u'job_template_description', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'node_profile_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'job_template_synchronous_job': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['if set to true, the "/execute-job" action simply executes the playbook directly and wait until the', 'playbook finishes. So the playbook in the synchronous job should not take long to execute. There', 'will no job log or job uve being created for synchronous job. This is an optional field. If not set,', 'the default value is "false".'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'job_template_type': {'operations': 'CRUD', 'restrictions': [u'workflow', u'device_operation', u'config', u'executable'], 'default': None, 'description': ['This attribute is to identify the template type. This property is mainly needed to list all generic', 'device operations in the UI. There are at present 4 types. Workflow based (e.g. fabric onboarding,', 'existing fabric onboarding), device operation based (standalone like e.g. device discovery, device', 'import, discover role), config based (e.g. role_assignment, fabric_config) and device command based', '(for generic device operations)'], 'simple_type': u'JobTemplateType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'job_template_concurrency_level': {'operations': 'CRUD', 'restrictions': [u'fabric', u'device'], 'default': None, 'description': ['This attribute controls the number concurrent job execution against the same fabric. When this', 'attribute set to "fabric", there could only one job execution per fabric When this attribute set to', '"device", there could be only one playbook execution running against the same device at the time.'], 'simple_type': u'JobConcurrencyLevelType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'job_template_playbooks': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of vendor specific playbooks that achieve the same functionality on each vendor device. All the', 'vendor specific playbooks listed here share the same input/output schema defined in the job template'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PlaybookInfoListType', 'restriction_type': None, 'required': 'required'},
        'job_template_executables': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of Executables that needs to be Executed'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ExecutableInfoListType', 'restriction_type': None, 'required': 'optional'},
        'job_template_input_schema': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['JSON schema of the job input parameters which will be used to validate the job input json or', 'generate UI form for user to enter the job parameters. This property stores the JSON schema content', 'as string. Here is an example fo the image upgrade job template input schema:{    "$schema": "http', '://json-schema.org/draft-06/schema#",    "title": "Image upgrade input",    "type": "object",', '"properties": {        "image_uuid": {            "type": "string"        }    },    "required":', '["image_uuid"]}'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'job_template_output_schema': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['JSON schema of the job output that describes the output from the job and could be used by UI to', 'render the output automatically. This property stores the JSON schema content as string.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'job_template_input_ui_schema': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['UI JSON schema of the job input that could be used by UI to render the input form with certain nice-', 'to-have features like ordering of the input fields, placeholders etc. This property stores the UI', 'JSON schema content as string.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'job_template_output_ui_schema': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['UI JSON schema of the job output that could be used by UI to render the input form with certain', 'nice-to-have features like ordering of the output fields etc. This property stores the UI JSON', 'schema content as string.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'job_template_description': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['A detailed description of what the job template functionality is'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['node_profile_back_refs'] = ('node-profile', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['job_template_synchronous_job'] = 'job-template-synchronous-job'
    prop_field_metas['job_template_type'] = 'job-template-type'
    prop_field_metas['job_template_concurrency_level'] = 'job-template-concurrency-level'
    prop_field_metas['job_template_playbooks'] = 'job-template-playbooks'
    prop_field_metas['job_template_executables'] = 'job-template-executables'
    prop_field_metas['job_template_input_schema'] = 'job-template-input-schema'
    prop_field_metas['job_template_output_schema'] = 'job-template-output-schema'
    prop_field_metas['job_template_input_ui_schema'] = 'job-template-input-ui-schema'
    prop_field_metas['job_template_output_ui_schema'] = 'job-template-output-ui-schema'
    prop_field_metas['job_template_description'] = 'job-template-description'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'job-template-tag'

    children_field_metas = {}

    prop_list_fields = set([u'job_template_playbooks', u'job_template_executables'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['job_template_playbooks'] = True
    prop_list_field_has_wrappers['job_template_executables'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, job_template_synchronous_job=None, job_template_type=None, job_template_concurrency_level=None, job_template_playbooks=None, job_template_executables=None, job_template_input_schema=None, job_template_output_schema=None, job_template_input_ui_schema=None, job_template_output_ui_schema=None, job_template_description=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'job-template'
        if not name:
            name = u'default-job-template'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if job_template_synchronous_job is not None:
            self._job_template_synchronous_job = job_template_synchronous_job
        if job_template_type is not None:
            self._job_template_type = job_template_type
        if job_template_concurrency_level is not None:
            self._job_template_concurrency_level = job_template_concurrency_level
        if job_template_playbooks is not None:
            self._job_template_playbooks = job_template_playbooks
        if job_template_executables is not None:
            self._job_template_executables = job_template_executables
        if job_template_input_schema is not None:
            self._job_template_input_schema = job_template_input_schema
        if job_template_output_schema is not None:
            self._job_template_output_schema = job_template_output_schema
        if job_template_input_ui_schema is not None:
            self._job_template_input_ui_schema = job_template_input_ui_schema
        if job_template_output_ui_schema is not None:
            self._job_template_output_ui_schema = job_template_output_ui_schema
        if job_template_description is not None:
            self._job_template_description = job_template_description
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (job-template)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of job-template in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of job-template as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of job-template's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of job-template's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def job_template_synchronous_job(self):
        """Get job-template-synchronous-job for job-template.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_job_template_synchronous_job', None)
    # end job_template_synchronous_job

    @job_template_synchronous_job.setter
    def job_template_synchronous_job(self, job_template_synchronous_job):
        """Set job-template-synchronous-job for job-template.
        
        :param job_template_synchronous_job: xsd:boolean object
        
        """
        self._job_template_synchronous_job = job_template_synchronous_job
    # end job_template_synchronous_job

    def set_job_template_synchronous_job(self, value):
        self.job_template_synchronous_job = value
    # end set_job_template_synchronous_job

    def get_job_template_synchronous_job(self):
        return self.job_template_synchronous_job
    # end get_job_template_synchronous_job

    @property
    def job_template_type(self):
        """Get job-template-type for job-template.
        
        :returns: JobTemplateType object
        
        """
        return getattr(self, '_job_template_type', None)
    # end job_template_type

    @job_template_type.setter
    def job_template_type(self, job_template_type):
        """Set job-template-type for job-template.
        
        :param job_template_type: JobTemplateType object
        
        """
        self._job_template_type = job_template_type
    # end job_template_type

    def set_job_template_type(self, value):
        self.job_template_type = value
    # end set_job_template_type

    def get_job_template_type(self):
        return self.job_template_type
    # end get_job_template_type

    @property
    def job_template_concurrency_level(self):
        """Get job-template-concurrency-level for job-template.
        
        :returns: JobConcurrencyLevelType object
        
        """
        return getattr(self, '_job_template_concurrency_level', None)
    # end job_template_concurrency_level

    @job_template_concurrency_level.setter
    def job_template_concurrency_level(self, job_template_concurrency_level):
        """Set job-template-concurrency-level for job-template.
        
        :param job_template_concurrency_level: JobConcurrencyLevelType object
        
        """
        self._job_template_concurrency_level = job_template_concurrency_level
    # end job_template_concurrency_level

    def set_job_template_concurrency_level(self, value):
        self.job_template_concurrency_level = value
    # end set_job_template_concurrency_level

    def get_job_template_concurrency_level(self):
        return self.job_template_concurrency_level
    # end get_job_template_concurrency_level

    @property
    def job_template_playbooks(self):
        """Get job-template-playbooks for job-template.
        
        :returns: PlaybookInfoListType object
        
        """
        return getattr(self, '_job_template_playbooks', None)
    # end job_template_playbooks

    @job_template_playbooks.setter
    def job_template_playbooks(self, job_template_playbooks):
        """Set job-template-playbooks for job-template.
        
        :param job_template_playbooks: PlaybookInfoListType object
        
        """
        self._job_template_playbooks = job_template_playbooks
    # end job_template_playbooks

    def set_job_template_playbooks(self, value):
        self.job_template_playbooks = value
    # end set_job_template_playbooks

    def get_job_template_playbooks(self):
        return self.job_template_playbooks
    # end get_job_template_playbooks

    @property
    def job_template_executables(self):
        """Get job-template-executables for job-template.
        
        :returns: ExecutableInfoListType object
        
        """
        return getattr(self, '_job_template_executables', None)
    # end job_template_executables

    @job_template_executables.setter
    def job_template_executables(self, job_template_executables):
        """Set job-template-executables for job-template.
        
        :param job_template_executables: ExecutableInfoListType object
        
        """
        self._job_template_executables = job_template_executables
    # end job_template_executables

    def set_job_template_executables(self, value):
        self.job_template_executables = value
    # end set_job_template_executables

    def get_job_template_executables(self):
        return self.job_template_executables
    # end get_job_template_executables

    @property
    def job_template_input_schema(self):
        """Get job-template-input-schema for job-template.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_job_template_input_schema', None)
    # end job_template_input_schema

    @job_template_input_schema.setter
    def job_template_input_schema(self, job_template_input_schema):
        """Set job-template-input-schema for job-template.
        
        :param job_template_input_schema: xsd:string object
        
        """
        self._job_template_input_schema = job_template_input_schema
    # end job_template_input_schema

    def set_job_template_input_schema(self, value):
        self.job_template_input_schema = value
    # end set_job_template_input_schema

    def get_job_template_input_schema(self):
        return self.job_template_input_schema
    # end get_job_template_input_schema

    @property
    def job_template_output_schema(self):
        """Get job-template-output-schema for job-template.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_job_template_output_schema', None)
    # end job_template_output_schema

    @job_template_output_schema.setter
    def job_template_output_schema(self, job_template_output_schema):
        """Set job-template-output-schema for job-template.
        
        :param job_template_output_schema: xsd:string object
        
        """
        self._job_template_output_schema = job_template_output_schema
    # end job_template_output_schema

    def set_job_template_output_schema(self, value):
        self.job_template_output_schema = value
    # end set_job_template_output_schema

    def get_job_template_output_schema(self):
        return self.job_template_output_schema
    # end get_job_template_output_schema

    @property
    def job_template_input_ui_schema(self):
        """Get job-template-input-ui-schema for job-template.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_job_template_input_ui_schema', None)
    # end job_template_input_ui_schema

    @job_template_input_ui_schema.setter
    def job_template_input_ui_schema(self, job_template_input_ui_schema):
        """Set job-template-input-ui-schema for job-template.
        
        :param job_template_input_ui_schema: xsd:string object
        
        """
        self._job_template_input_ui_schema = job_template_input_ui_schema
    # end job_template_input_ui_schema

    def set_job_template_input_ui_schema(self, value):
        self.job_template_input_ui_schema = value
    # end set_job_template_input_ui_schema

    def get_job_template_input_ui_schema(self):
        return self.job_template_input_ui_schema
    # end get_job_template_input_ui_schema

    @property
    def job_template_output_ui_schema(self):
        """Get job-template-output-ui-schema for job-template.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_job_template_output_ui_schema', None)
    # end job_template_output_ui_schema

    @job_template_output_ui_schema.setter
    def job_template_output_ui_schema(self, job_template_output_ui_schema):
        """Set job-template-output-ui-schema for job-template.
        
        :param job_template_output_ui_schema: xsd:string object
        
        """
        self._job_template_output_ui_schema = job_template_output_ui_schema
    # end job_template_output_ui_schema

    def set_job_template_output_ui_schema(self, value):
        self.job_template_output_ui_schema = value
    # end set_job_template_output_ui_schema

    def get_job_template_output_ui_schema(self):
        return self.job_template_output_ui_schema
    # end get_job_template_output_ui_schema

    @property
    def job_template_description(self):
        """Get job-template-description for job-template.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_job_template_description', None)
    # end job_template_description

    @job_template_description.setter
    def job_template_description(self, job_template_description):
        """Set job-template-description for job-template.
        
        :param job_template_description: xsd:string object
        
        """
        self._job_template_description = job_template_description
    # end job_template_description

    def set_job_template_description(self, value):
        self.job_template_description = value
    # end set_job_template_description

    def get_job_template_description(self):
        return self.job_template_description
    # end get_job_template_description

    @property
    def id_perms(self):
        """Get id-perms for job-template.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for job-template.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for job-template.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for job-template.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for job-template.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for job-template.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for job-template.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for job-template.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_job_template_synchronous_job'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_synchronous_job')
        if hasattr(self, '_job_template_type'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_type')
        if hasattr(self, '_job_template_concurrency_level'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_concurrency_level')
        if hasattr(self, '_job_template_playbooks'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_playbooks')
        if hasattr(self, '_job_template_executables'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_executables')
        if hasattr(self, '_job_template_input_schema'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_input_schema')
        if hasattr(self, '_job_template_output_schema'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_output_schema')
        if hasattr(self, '_job_template_input_ui_schema'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_input_ui_schema')
        if hasattr(self, '_job_template_output_ui_schema'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_output_ui_schema')
        if hasattr(self, '_job_template_description'):
            self._serialize_field_to_json(serialized, field_names, 'job_template_description')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for job-template.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to job-template.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for job-template.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for job-template.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_node_profile_back_refs(self):
        """Return list of all node-profiles using this job-template"""
        return getattr(self, 'node_profile_back_refs', None)
    # end get_node_profile_back_refs

    def dump(self):
        """Display job-template object in compact form."""
        print('------------ job-template ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P job_template_synchronous_job = ', self.get_job_template_synchronous_job())
        print('P job_template_type = ', self.get_job_template_type())
        print('P job_template_concurrency_level = ', self.get_job_template_concurrency_level())
        print('P job_template_playbooks = ', self.get_job_template_playbooks())
        print('P job_template_executables = ', self.get_job_template_executables())
        print('P job_template_input_schema = ', self.get_job_template_input_schema())
        print('P job_template_output_schema = ', self.get_job_template_output_schema())
        print('P job_template_input_ui_schema = ', self.get_job_template_input_ui_schema())
        print('P job_template_output_ui_schema = ', self.get_job_template_output_ui_schema())
        print('P job_template_description = ', self.get_job_template_description())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK node_profile = ', self.get_node_profile_back_refs())
    # end dump

# end class JobTemplate

class RoutingPolicy(object):
    """
    List of references of child routing policy objects. automatically maintained by system.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * routing_policy_entries
            Type: :class:`.PolicyStatementType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * term_type
            Type: str, *one-of* [u'vrouter', u'network-device']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.ServiceInstance` object, :class:`.RoutingPolicyServiceInstanceType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to routing policy attached to (service instance, interface).

        * list of (:class:`.RoutingInstance` object, :class:`.RoutingPolicyType` attribute)
            Created By: User (Reference to internal routing instance object automatically generated by system. Reference has property of sequence number which is order of in which routing policies are applied to given routing instance.)

            Operations Allowed: CRUD

            Description:

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.DataCenterInterconnect` objects
        * list of :class:`.VirtualNetwork` objects
    """

    resource_type = 'routing-policy'
    object_type = 'routing_policy'

    prop_fields = set([u'routing_policy_entries', u'term_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_instance_refs', 'routing_instance_refs', u'tag_refs'])
    backref_fields = set([u'data_center_interconnect_back_refs', 'virtual_network_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'routing_policy_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': [], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PolicyStatementType', 'restriction_type': None, 'required': 'optional'},
        'term_type': {'operations': 'CRUD', 'restrictions': [u'vrouter', u'network-device'], 'default': None, 'description': [], 'simple_type': u'TermType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_instance_refs'] = ('service-instance', 'RoutingPolicyServiceInstanceType', False, ['Reference to routing policy attached to (service instance, interface).'])
    ref_field_types['routing_instance_refs'] = ('routing-instance', 'RoutingPolicyType', False, [])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['data_center_interconnect_back_refs'] = ('data-center-interconnect', 'None', False)
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'RoutingPolicyType', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['routing_policy_entries'] = 'routing-policy-entries'
    prop_field_metas['term_type'] = 'term-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_instance_refs'] = 'routing-policy-service-instance'
    ref_field_metas['routing_instance_refs'] = 'routing-policy-routing-instance'
    ref_field_metas['tag_refs'] = 'routing-policy-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, routing_policy_entries=None, term_type=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'routing-policy'
        if not name:
            name = u'default-routing-policy'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if routing_policy_entries is not None:
            self._routing_policy_entries = routing_policy_entries
        if term_type is not None:
            self._term_type = term_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (routing-policy)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of routing-policy in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of routing-policy as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of routing-policy's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of routing-policy's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def routing_policy_entries(self):
        """Get routing-policy-entries for routing-policy.
        
        :returns: PolicyStatementType object
        
        """
        return getattr(self, '_routing_policy_entries', None)
    # end routing_policy_entries

    @routing_policy_entries.setter
    def routing_policy_entries(self, routing_policy_entries):
        """Set routing-policy-entries for routing-policy.
        
        :param routing_policy_entries: PolicyStatementType object
        
        """
        self._routing_policy_entries = routing_policy_entries
    # end routing_policy_entries

    def set_routing_policy_entries(self, value):
        self.routing_policy_entries = value
    # end set_routing_policy_entries

    def get_routing_policy_entries(self):
        return self.routing_policy_entries
    # end get_routing_policy_entries

    @property
    def term_type(self):
        """Get term-type for routing-policy.
        
        :returns: TermType object
        
        """
        return getattr(self, '_term_type', None)
    # end term_type

    @term_type.setter
    def term_type(self, term_type):
        """Set term-type for routing-policy.
        
        :param term_type: TermType object
        
        """
        self._term_type = term_type
    # end term_type

    def set_term_type(self, value):
        self.term_type = value
    # end set_term_type

    def get_term_type(self):
        return self.term_type
    # end get_term_type

    @property
    def id_perms(self):
        """Get id-perms for routing-policy.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for routing-policy.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for routing-policy.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for routing-policy.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for routing-policy.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for routing-policy.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for routing-policy.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for routing-policy.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_routing_policy_entries'):
            self._serialize_field_to_json(serialized, field_names, 'routing_policy_entries')
        if hasattr(self, '_term_type'):
            self._serialize_field_to_json(serialized, field_names, 'term_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'routing_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'routing_instance_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_instance(self, ref_obj, ref_data=None):
        """Set service-instance for routing-policy.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: RoutingPolicyServiceInstanceType object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj, ref_data=None):
        """Add service-instance to routing-policy.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: RoutingPolicyServiceInstanceType object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list, ref_data_list=None):
        """Set service-instance list for routing-policy.
        
        :param ref_obj_list: list of ServiceInstance object
        :param ref_data_list: list of RoutingPolicyServiceInstanceType object
        
        """
        self.service_instance_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for routing-policy.
        
        :returns: list of tuple <ServiceInstance, RoutingPolicyServiceInstanceType>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_routing_instance(self, ref_obj, ref_data=None):
        """Set routing-instance for routing-policy.
        
        :param ref_obj: RoutingInstance object
        :param ref_data: RoutingPolicyType object
        
        """
        self.routing_instance_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.routing_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_routing_instance

    def add_routing_instance(self, ref_obj, ref_data=None):
        """Add routing-instance to routing-policy.
        
        :param ref_obj: RoutingInstance object
        :param ref_data: RoutingPolicyType object
        
        """
        refs = getattr(self, 'routing_instance_refs', [])
        if not refs:
            self.routing_instance_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.routing_instance_refs.append(ref_info)
    # end add_routing_instance

    def del_routing_instance(self, ref_obj):
        refs = self.get_routing_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.routing_instance_refs.remove(ref)
                return
    # end del_routing_instance

    def set_routing_instance_list(self, ref_obj_list, ref_data_list=None):
        """Set routing-instance list for routing-policy.
        
        :param ref_obj_list: list of RoutingInstance object
        :param ref_data_list: list of RoutingPolicyType object
        
        """
        self.routing_instance_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_routing_instance_list

    def get_routing_instance_refs(self):
        """Return routing-instance list for routing-policy.
        
        :returns: list of tuple <RoutingInstance, RoutingPolicyType>
        
        """
        return getattr(self, 'routing_instance_refs', None)
    # end get_routing_instance_refs

    def set_tag(self, ref_obj):
        """Set tag for routing-policy.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to routing-policy.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for routing-policy.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for routing-policy.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_data_center_interconnect_back_refs(self):
        """Return list of all data-center-interconnects using this routing-policy"""
        return getattr(self, 'data_center_interconnect_back_refs', None)
    # end get_data_center_interconnect_back_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this routing-policy"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def dump(self):
        """Display routing-policy object in compact form."""
        print('------------ routing-policy ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P routing_policy_entries = ', self.get_routing_policy_entries())
        print('P term_type = ', self.get_term_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF routing_instance = ', self.get_routing_instance_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK data_center_interconnect = ', self.get_data_center_interconnect_back_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
    # end dump

# end class RoutingPolicy

class RoleConfig(object):
    """
This resource exposes to users additional parameters to configure a specify physical or routing/switching roles. These are the config parameters that are mot modeled in VNC data model and we don't want to hard code in the fabric ansible playbooks. These could be vendor specific parameters or could be extended by the field or customer who might want to tweak the playbooks. The schema for the role config are defined in the job-template.input_schema. This schema could be used by the UI to generically render the form for user to edit the config.

    Created By:
        User

    Child of:
        :class:`.NodeProfile` object

    Properties:
        * role_config_config
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              role config in JSON format. This JSON config must conform to the input-schema of the job template

              for the role provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'role-config'
    object_type = 'role_config'

    prop_fields = set([u'role_config_config', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'role_config_config': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['role config in JSON format. This JSON config must conform to the input-schema of the job template', 'for the role provisioning.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'node-profile']

    prop_field_metas = {}
    prop_field_metas['role_config_config'] = 'role-config-config'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'role-config-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, role_config_config=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'role-config'
        if not name:
            name = u'default-role-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'node-profile'
            self.fq_name = ['default-global-system-config', u'default-node-profile']
            self.fq_name.append(name)


        # property fields
        if role_config_config is not None:
            self._role_config_config = role_config_config
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (role-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of role-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of role-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of role-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of role-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def role_config_config(self):
        """Get role-config-config for role-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_role_config_config', None)
    # end role_config_config

    @role_config_config.setter
    def role_config_config(self, role_config_config):
        """Set role-config-config for role-config.
        
        :param role_config_config: xsd:string object
        
        """
        self._role_config_config = role_config_config
    # end role_config_config

    def set_role_config_config(self, value):
        self.role_config_config = value
    # end set_role_config_config

    def get_role_config_config(self):
        return self.role_config_config
    # end get_role_config_config

    @property
    def id_perms(self):
        """Get id-perms for role-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for role-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for role-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for role-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for role-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for role-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for role-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for role-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_role_config_config'):
            self._serialize_field_to_json(serialized, field_names, 'role_config_config')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for role-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to role-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for role-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for role-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display role-config object in compact form."""
        print('------------ role-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P role_config_config = ', self.get_role_config_config())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class RoleConfig

class TagType(object):
    """


    Created By:

    Properties:
        * tag_type_id
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: R

            Description:

              Internal Tag type ID                  coded on 16 bits where the first 255 IDs are reserved

              and pre-defined. Users (principally cloud admin) can define                  arbitrary types but its

              automatically shared to all project as                  it is a global resource.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Tag` objects
    """

    resource_type = 'tag-type'
    object_type = 'tag_type'

    prop_fields = set([u'tag_type_id', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'tag_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'tag_type_id': {'operations': 'R', 'restrictions': [], 'default': None, 'description': ['Internal Tag type ID                  coded on 16 bits where the first 255 IDs are reserved', 'and pre-defined. Users (principally cloud admin) can define                  arbitrary types but its', 'automatically shared to all project as                  it is a global resource.'], 'simple_type': u'U16BitHexInt', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['tag_back_refs'] = ('tag', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['tag_type_id'] = 'tag-type-id'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'tag-type-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, tag_type_id=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'tag-type'
        if not name:
            name = u'default-tag-type'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if tag_type_id is not None:
            self._tag_type_id = tag_type_id
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (tag-type)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of tag-type in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of tag-type as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def tag_type_id(self):
        """Get tag-type-id for tag-type.
        
        :returns: U16BitHexInt object
        
        """
        return getattr(self, '_tag_type_id', None)
    # end tag_type_id

    @tag_type_id.setter
    def tag_type_id(self, tag_type_id):
        """Set tag-type-id for tag-type.
        
        :param tag_type_id: U16BitHexInt object
        
        """
        self._tag_type_id = tag_type_id
    # end tag_type_id

    def set_tag_type_id(self, value):
        self.tag_type_id = value
    # end set_tag_type_id

    def get_tag_type_id(self):
        return self.tag_type_id
    # end get_tag_type_id

    @property
    def id_perms(self):
        """Get id-perms for tag-type.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for tag-type.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for tag-type.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for tag-type.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for tag-type.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for tag-type.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for tag-type.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for tag-type.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_tag_type_id'):
            self._serialize_field_to_json(serialized, field_names, 'tag_type_id')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for tag-type.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to tag-type.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for tag-type.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for tag-type.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_tag_back_refs(self):
        """Return list of all tags using this tag-type"""
        return getattr(self, 'tag_back_refs', None)
    # end get_tag_back_refs

    def dump(self):
        """Display tag-type object in compact form."""
        print('------------ tag-type ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P tag_type_id = ', self.get_tag_type_id())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK tag = ', self.get_tag_back_refs())
    # end dump

# end class TagType

class StructuredSyslogMessage(object):
    """
structured syslog messages to be handled

    Created By:
        User

    Child of:
        :class:`.StructuredSyslogConfig` object

    Properties:
        * structured_syslog_message_tagged_fields
            Type: :class:`.FieldNamesList`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              list of field names in the message to be tagged

        * structured_syslog_message_integer_fields
            Type: :class:`.FieldNamesList`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              list of integer fields in the message

        * structured_syslog_message_process_and_store
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              message is to be processed and stored or not

        * structured_syslog_message_process_and_summarize
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              message is to be processed and summarized or not

        * structured_syslog_message_process_and_summarize_user
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              message is to be processed and summarized for user or not

        * structured_syslog_message_forward
            Type: str, *one-of* [u'do-not-forward', u'forward-unprocessed', u'forward-processed']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              fowarding action to be taken on the message

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'structured-syslog-message'
    object_type = 'structured_syslog_message'

    prop_fields = set([u'structured_syslog_message_tagged_fields', u'structured_syslog_message_integer_fields', u'structured_syslog_message_process_and_store', u'structured_syslog_message_process_and_summarize', u'structured_syslog_message_process_and_summarize_user', u'structured_syslog_message_forward', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'structured_syslog_message_tagged_fields': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['list of field names in the message to be tagged'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FieldNamesList', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_message_integer_fields': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['list of integer fields in the message'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FieldNamesList', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_message_process_and_store': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['message is to be processed and stored or not'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_message_process_and_summarize': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['message is to be processed and summarized or not'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_message_process_and_summarize_user': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['message is to be processed and summarized for user or not'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'structured_syslog_message_forward': {'operations': 'CRUD', 'restrictions': [u'do-not-forward', u'forward-unprocessed', u'forward-processed'], 'default': None, 'description': ['fowarding action to be taken on the message'], 'simple_type': u'StructuredSyslogMessageForwardType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'structured-syslog-config']

    prop_field_metas = {}
    prop_field_metas['structured_syslog_message_tagged_fields'] = 'structured-syslog-message-tagged-fields'
    prop_field_metas['structured_syslog_message_integer_fields'] = 'structured-syslog-message-integer-fields'
    prop_field_metas['structured_syslog_message_process_and_store'] = 'structured-syslog-message-process-and-store'
    prop_field_metas['structured_syslog_message_process_and_summarize'] = 'structured-syslog-message-process-and-summarize'
    prop_field_metas['structured_syslog_message_process_and_summarize_user'] = 'structured-syslog-message-process-and-summarize-user'
    prop_field_metas['structured_syslog_message_forward'] = 'structured-syslog-message-forward'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'structured-syslog-message-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, structured_syslog_message_tagged_fields=None, structured_syslog_message_integer_fields=None, structured_syslog_message_process_and_store=False, structured_syslog_message_process_and_summarize=False, structured_syslog_message_process_and_summarize_user=False, structured_syslog_message_forward=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'structured-syslog-message'
        if not name:
            name = u'default-structured-syslog-message'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            raise AmbiguousParentError("Ambiguous parents [u'global-analytics-config', 'project']")


        # property fields
        if structured_syslog_message_tagged_fields is not None:
            self._structured_syslog_message_tagged_fields = structured_syslog_message_tagged_fields
        if structured_syslog_message_integer_fields is not None:
            self._structured_syslog_message_integer_fields = structured_syslog_message_integer_fields
        if structured_syslog_message_process_and_store is not None:
            self._structured_syslog_message_process_and_store = structured_syslog_message_process_and_store
        if structured_syslog_message_process_and_summarize is not None:
            self._structured_syslog_message_process_and_summarize = structured_syslog_message_process_and_summarize
        if structured_syslog_message_process_and_summarize_user is not None:
            self._structured_syslog_message_process_and_summarize_user = structured_syslog_message_process_and_summarize_user
        if structured_syslog_message_forward is not None:
            self._structured_syslog_message_forward = structured_syslog_message_forward
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (structured-syslog-message)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of structured-syslog-message in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of structured-syslog-message as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of structured-syslog-message's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of structured-syslog-message's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def structured_syslog_message_tagged_fields(self):
        """Get structured-syslog-message-tagged-fields for structured-syslog-message.
        
        :returns: FieldNamesList object
        
        """
        return getattr(self, '_structured_syslog_message_tagged_fields', None)
    # end structured_syslog_message_tagged_fields

    @structured_syslog_message_tagged_fields.setter
    def structured_syslog_message_tagged_fields(self, structured_syslog_message_tagged_fields):
        """Set structured-syslog-message-tagged-fields for structured-syslog-message.
        
        :param structured_syslog_message_tagged_fields: FieldNamesList object
        
        """
        self._structured_syslog_message_tagged_fields = structured_syslog_message_tagged_fields
    # end structured_syslog_message_tagged_fields

    def set_structured_syslog_message_tagged_fields(self, value):
        self.structured_syslog_message_tagged_fields = value
    # end set_structured_syslog_message_tagged_fields

    def get_structured_syslog_message_tagged_fields(self):
        return self.structured_syslog_message_tagged_fields
    # end get_structured_syslog_message_tagged_fields

    @property
    def structured_syslog_message_integer_fields(self):
        """Get structured-syslog-message-integer-fields for structured-syslog-message.
        
        :returns: FieldNamesList object
        
        """
        return getattr(self, '_structured_syslog_message_integer_fields', None)
    # end structured_syslog_message_integer_fields

    @structured_syslog_message_integer_fields.setter
    def structured_syslog_message_integer_fields(self, structured_syslog_message_integer_fields):
        """Set structured-syslog-message-integer-fields for structured-syslog-message.
        
        :param structured_syslog_message_integer_fields: FieldNamesList object
        
        """
        self._structured_syslog_message_integer_fields = structured_syslog_message_integer_fields
    # end structured_syslog_message_integer_fields

    def set_structured_syslog_message_integer_fields(self, value):
        self.structured_syslog_message_integer_fields = value
    # end set_structured_syslog_message_integer_fields

    def get_structured_syslog_message_integer_fields(self):
        return self.structured_syslog_message_integer_fields
    # end get_structured_syslog_message_integer_fields

    @property
    def structured_syslog_message_process_and_store(self):
        """Get structured-syslog-message-process-and-store for structured-syslog-message.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_structured_syslog_message_process_and_store', None)
    # end structured_syslog_message_process_and_store

    @structured_syslog_message_process_and_store.setter
    def structured_syslog_message_process_and_store(self, structured_syslog_message_process_and_store):
        """Set structured-syslog-message-process-and-store for structured-syslog-message.
        
        :param structured_syslog_message_process_and_store: xsd:boolean object
        
        """
        self._structured_syslog_message_process_and_store = structured_syslog_message_process_and_store
    # end structured_syslog_message_process_and_store

    def set_structured_syslog_message_process_and_store(self, value):
        self.structured_syslog_message_process_and_store = value
    # end set_structured_syslog_message_process_and_store

    def get_structured_syslog_message_process_and_store(self):
        return self.structured_syslog_message_process_and_store
    # end get_structured_syslog_message_process_and_store

    @property
    def structured_syslog_message_process_and_summarize(self):
        """Get structured-syslog-message-process-and-summarize for structured-syslog-message.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_structured_syslog_message_process_and_summarize', None)
    # end structured_syslog_message_process_and_summarize

    @structured_syslog_message_process_and_summarize.setter
    def structured_syslog_message_process_and_summarize(self, structured_syslog_message_process_and_summarize):
        """Set structured-syslog-message-process-and-summarize for structured-syslog-message.
        
        :param structured_syslog_message_process_and_summarize: xsd:boolean object
        
        """
        self._structured_syslog_message_process_and_summarize = structured_syslog_message_process_and_summarize
    # end structured_syslog_message_process_and_summarize

    def set_structured_syslog_message_process_and_summarize(self, value):
        self.structured_syslog_message_process_and_summarize = value
    # end set_structured_syslog_message_process_and_summarize

    def get_structured_syslog_message_process_and_summarize(self):
        return self.structured_syslog_message_process_and_summarize
    # end get_structured_syslog_message_process_and_summarize

    @property
    def structured_syslog_message_process_and_summarize_user(self):
        """Get structured-syslog-message-process-and-summarize-user for structured-syslog-message.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_structured_syslog_message_process_and_summarize_user', None)
    # end structured_syslog_message_process_and_summarize_user

    @structured_syslog_message_process_and_summarize_user.setter
    def structured_syslog_message_process_and_summarize_user(self, structured_syslog_message_process_and_summarize_user):
        """Set structured-syslog-message-process-and-summarize-user for structured-syslog-message.
        
        :param structured_syslog_message_process_and_summarize_user: xsd:boolean object
        
        """
        self._structured_syslog_message_process_and_summarize_user = structured_syslog_message_process_and_summarize_user
    # end structured_syslog_message_process_and_summarize_user

    def set_structured_syslog_message_process_and_summarize_user(self, value):
        self.structured_syslog_message_process_and_summarize_user = value
    # end set_structured_syslog_message_process_and_summarize_user

    def get_structured_syslog_message_process_and_summarize_user(self):
        return self.structured_syslog_message_process_and_summarize_user
    # end get_structured_syslog_message_process_and_summarize_user

    @property
    def structured_syslog_message_forward(self):
        """Get structured-syslog-message-forward for structured-syslog-message.
        
        :returns: StructuredSyslogMessageForwardType object
        
        """
        return getattr(self, '_structured_syslog_message_forward', None)
    # end structured_syslog_message_forward

    @structured_syslog_message_forward.setter
    def structured_syslog_message_forward(self, structured_syslog_message_forward):
        """Set structured-syslog-message-forward for structured-syslog-message.
        
        :param structured_syslog_message_forward: StructuredSyslogMessageForwardType object
        
        """
        self._structured_syslog_message_forward = structured_syslog_message_forward
    # end structured_syslog_message_forward

    def set_structured_syslog_message_forward(self, value):
        self.structured_syslog_message_forward = value
    # end set_structured_syslog_message_forward

    def get_structured_syslog_message_forward(self):
        return self.structured_syslog_message_forward
    # end get_structured_syslog_message_forward

    @property
    def id_perms(self):
        """Get id-perms for structured-syslog-message.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for structured-syslog-message.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for structured-syslog-message.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for structured-syslog-message.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for structured-syslog-message.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for structured-syslog-message.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for structured-syslog-message.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for structured-syslog-message.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_structured_syslog_message_tagged_fields'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_message_tagged_fields')
        if hasattr(self, '_structured_syslog_message_integer_fields'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_message_integer_fields')
        if hasattr(self, '_structured_syslog_message_process_and_store'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_message_process_and_store')
        if hasattr(self, '_structured_syslog_message_process_and_summarize'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_message_process_and_summarize')
        if hasattr(self, '_structured_syslog_message_process_and_summarize_user'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_message_process_and_summarize_user')
        if hasattr(self, '_structured_syslog_message_forward'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_message_forward')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for structured-syslog-message.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to structured-syslog-message.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for structured-syslog-message.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for structured-syslog-message.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display structured-syslog-message object in compact form."""
        print('------------ structured-syslog-message ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P structured_syslog_message_tagged_fields = ', self.get_structured_syslog_message_tagged_fields())
        print('P structured_syslog_message_integer_fields = ', self.get_structured_syslog_message_integer_fields())
        print('P structured_syslog_message_process_and_store = ', self.get_structured_syslog_message_process_and_store())
        print('P structured_syslog_message_process_and_summarize = ', self.get_structured_syslog_message_process_and_summarize())
        print('P structured_syslog_message_process_and_summarize_user = ', self.get_structured_syslog_message_process_and_summarize_user())
        print('P structured_syslog_message_forward = ', self.get_structured_syslog_message_forward())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class StructuredSyslogMessage

class LoadbalancerPool(object):
    """
    Loadbalancer pool object represent set(pool) member servers which needs load balancing.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * loadbalancer_pool_properties
            Type: :class:`.LoadbalancerPoolType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Configuration for loadbalancer pool like protocol, subnet, etc.

        * loadbalancer_pool_provider
            Type: str

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of

              service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the

              backend. Applicable to LBaaS V1

        * loadbalancer_pool_custom_attributes
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Custom loadbalancer config, opaque to the system. Specified as list of Key:Value pairs. Applicable

              to LBaaS V1.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.LoadbalancerMember` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Configuration object representing each member of load balancer pool.


    References to:
        * list of :class:`.ServiceInstance` objects
            Created By: System

            Operations Allowed: CR

            Description:

              Reference to the service instance serving this pool, applicable to LBaaS V1.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: System

            Operations Allowed: CR

            Description:

              Reference to the virtual machine interface reaching pool subnet, applicable to LBaaS V1.

        * list of :class:`.LoadbalancerListener` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to loadbalancer listener served by this pool, applicable to LBaaS V2.

        * list of :class:`.ServiceApplianceSet` objects
            Created By: System

            Operations Allowed: RReference to service-appliance-set where this loadbalancer-pool is hosted. Applicable to LBaaS V1.

            Description:

        * list of :class:`.LoadbalancerHealthmonitor` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to loadbalancer healthmonitor that this pool uses.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualIp` objects
    """

    resource_type = 'loadbalancer-pool'
    object_type = 'loadbalancer_pool'

    prop_fields = set([u'loadbalancer_pool_properties', u'loadbalancer_pool_provider', u'loadbalancer_pool_custom_attributes', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_instance_refs', 'virtual_machine_interface_refs', 'loadbalancer_listener_refs', u'service_appliance_set_refs', u'loadbalancer_healthmonitor_refs', u'tag_refs'])
    backref_fields = set([u'virtual_ip_back_refs'])
    children_fields = set([u'loadbalancer_members'])

    prop_field_types = {
        'loadbalancer_pool_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Configuration for loadbalancer pool like protocol, subnet, etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'LoadbalancerPoolType', 'restriction_type': None, 'required': 'required'},
        'loadbalancer_pool_provider': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of', 'service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the', 'backend. Applicable to LBaaS V1'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'loadbalancer_pool_custom_attributes': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Custom loadbalancer config, opaque to the system. Specified as list of Key:Value pairs. Applicable', 'to LBaaS V1.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_instance_refs'] = ('service-instance', 'None', False, ['Reference to the service instance serving this pool, applicable to LBaaS V1.'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Reference to the virtual machine interface reaching pool subnet, applicable to LBaaS V1.'])
    ref_field_types['loadbalancer_listener_refs'] = ('loadbalancer-listener', 'None', False, ['Reference to loadbalancer listener served by this pool, applicable to LBaaS V2.'])
    ref_field_types['service_appliance_set_refs'] = ('service-appliance-set', 'None', False, [])
    ref_field_types['loadbalancer_healthmonitor_refs'] = ('loadbalancer-healthmonitor', 'None', False, ['Reference to loadbalancer healthmonitor that this pool uses.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_ip_back_refs'] = ('virtual-ip', 'None', False)

    children_field_types = {}
    children_field_types['loadbalancer_members'] = ('loadbalancer-member', False)

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['loadbalancer_pool_properties'] = 'loadbalancer-pool-properties'
    prop_field_metas['loadbalancer_pool_provider'] = 'loadbalancer-pool-provider'
    prop_field_metas['loadbalancer_pool_custom_attributes'] = 'loadbalancer-pool-custom-attributes'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_instance_refs'] = 'loadbalancer-pool-service-instance'
    ref_field_metas['virtual_machine_interface_refs'] = 'loadbalancer-pool-virtual-machine-interface'
    ref_field_metas['loadbalancer_listener_refs'] = 'loadbalancer-pool-loadbalancer-listener'
    ref_field_metas['service_appliance_set_refs'] = 'loadbalancer-pool-service-appliance-set'
    ref_field_metas['loadbalancer_healthmonitor_refs'] = 'loadbalancer-pool-loadbalancer-healthmonitor'
    ref_field_metas['tag_refs'] = 'loadbalancer-pool-tag'

    children_field_metas = {}
    children_field_metas['loadbalancer_members'] = 'loadbalancer-pool-loadbalancer-member'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, loadbalancer_pool_properties=None, loadbalancer_pool_provider=None, loadbalancer_pool_custom_attributes=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'loadbalancer-pool'
        if not name:
            name = u'default-loadbalancer-pool'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if loadbalancer_pool_properties is not None:
            self._loadbalancer_pool_properties = loadbalancer_pool_properties
        if loadbalancer_pool_provider is not None:
            self._loadbalancer_pool_provider = loadbalancer_pool_provider
        if loadbalancer_pool_custom_attributes is not None:
            self._loadbalancer_pool_custom_attributes = loadbalancer_pool_custom_attributes
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (loadbalancer-pool)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of loadbalancer-pool in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of loadbalancer-pool as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of loadbalancer-pool's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of loadbalancer-pool's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def loadbalancer_pool_properties(self):
        """Get loadbalancer-pool-properties for loadbalancer-pool.
        
        :returns: LoadbalancerPoolType object
        
        """
        return getattr(self, '_loadbalancer_pool_properties', None)
    # end loadbalancer_pool_properties

    @loadbalancer_pool_properties.setter
    def loadbalancer_pool_properties(self, loadbalancer_pool_properties):
        """Set loadbalancer-pool-properties for loadbalancer-pool.
        
        :param loadbalancer_pool_properties: LoadbalancerPoolType object
        
        """
        self._loadbalancer_pool_properties = loadbalancer_pool_properties
    # end loadbalancer_pool_properties

    def set_loadbalancer_pool_properties(self, value):
        self.loadbalancer_pool_properties = value
    # end set_loadbalancer_pool_properties

    def get_loadbalancer_pool_properties(self):
        return self.loadbalancer_pool_properties
    # end get_loadbalancer_pool_properties

    @property
    def loadbalancer_pool_provider(self):
        """Get loadbalancer-pool-provider for loadbalancer-pool.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_loadbalancer_pool_provider', None)
    # end loadbalancer_pool_provider

    @loadbalancer_pool_provider.setter
    def loadbalancer_pool_provider(self, loadbalancer_pool_provider):
        """Set loadbalancer-pool-provider for loadbalancer-pool.
        
        :param loadbalancer_pool_provider: xsd:string object
        
        """
        self._loadbalancer_pool_provider = loadbalancer_pool_provider
    # end loadbalancer_pool_provider

    def set_loadbalancer_pool_provider(self, value):
        self.loadbalancer_pool_provider = value
    # end set_loadbalancer_pool_provider

    def get_loadbalancer_pool_provider(self):
        return self.loadbalancer_pool_provider
    # end get_loadbalancer_pool_provider

    @property
    def loadbalancer_pool_custom_attributes(self):
        """Get loadbalancer-pool-custom-attributes for loadbalancer-pool.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_loadbalancer_pool_custom_attributes', None)
    # end loadbalancer_pool_custom_attributes

    @loadbalancer_pool_custom_attributes.setter
    def loadbalancer_pool_custom_attributes(self, loadbalancer_pool_custom_attributes):
        """Set loadbalancer-pool-custom-attributes for loadbalancer-pool.
        
        :param loadbalancer_pool_custom_attributes: KeyValuePairs object
        
        """
        self._loadbalancer_pool_custom_attributes = loadbalancer_pool_custom_attributes
    # end loadbalancer_pool_custom_attributes

    def set_loadbalancer_pool_custom_attributes(self, value):
        self.loadbalancer_pool_custom_attributes = value
    # end set_loadbalancer_pool_custom_attributes

    def get_loadbalancer_pool_custom_attributes(self):
        return self.loadbalancer_pool_custom_attributes
    # end get_loadbalancer_pool_custom_attributes

    @property
    def id_perms(self):
        """Get id-perms for loadbalancer-pool.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for loadbalancer-pool.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for loadbalancer-pool.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for loadbalancer-pool.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for loadbalancer-pool.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for loadbalancer-pool.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for loadbalancer-pool.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for loadbalancer-pool.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_loadbalancer_pool_properties'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_pool_properties')
        if hasattr(self, '_loadbalancer_pool_provider'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_pool_provider')
        if hasattr(self, '_loadbalancer_pool_custom_attributes'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_pool_custom_attributes')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'loadbalancer_listener_refs'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_listener_refs')
        if hasattr(self, 'service_appliance_set_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_set_refs')
        if hasattr(self, 'loadbalancer_healthmonitor_refs'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_healthmonitor_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_loadbalancer_members(self):
        return getattr(self, 'loadbalancer_members', None)
    # end get_loadbalancer_members

    def set_service_instance(self, ref_obj):
        """Set service-instance for loadbalancer-pool.
        
        :param ref_obj: ServiceInstance object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj):
        """Add service-instance to loadbalancer-pool.
        
        :param ref_obj: ServiceInstance object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list):
        """Set service-instance list for loadbalancer-pool.
        
        :param ref_obj_list: list of ServiceInstance object
        
        """
        self.service_instance_refs = ref_obj_list
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for loadbalancer-pool.
        
        :returns: list of <ServiceInstance>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for loadbalancer-pool.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to loadbalancer-pool.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for loadbalancer-pool.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for loadbalancer-pool.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_loadbalancer_listener(self, ref_obj):
        """Set loadbalancer-listener for loadbalancer-pool.
        
        :param ref_obj: LoadbalancerListener object
        
        """
        self.loadbalancer_listener_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.loadbalancer_listener_refs[0]['uuid'] = ref_obj.uuid

    # end set_loadbalancer_listener

    def add_loadbalancer_listener(self, ref_obj):
        """Add loadbalancer-listener to loadbalancer-pool.
        
        :param ref_obj: LoadbalancerListener object
        
        """
        refs = getattr(self, 'loadbalancer_listener_refs', [])
        if not refs:
            self.loadbalancer_listener_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.loadbalancer_listener_refs.append(ref_info)
    # end add_loadbalancer_listener

    def del_loadbalancer_listener(self, ref_obj):
        refs = self.get_loadbalancer_listener_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.loadbalancer_listener_refs.remove(ref)
                return
    # end del_loadbalancer_listener

    def set_loadbalancer_listener_list(self, ref_obj_list):
        """Set loadbalancer-listener list for loadbalancer-pool.
        
        :param ref_obj_list: list of LoadbalancerListener object
        
        """
        self.loadbalancer_listener_refs = ref_obj_list
    # end set_loadbalancer_listener_list

    def get_loadbalancer_listener_refs(self):
        """Return loadbalancer-listener list for loadbalancer-pool.
        
        :returns: list of <LoadbalancerListener>
        
        """
        return getattr(self, 'loadbalancer_listener_refs', None)
    # end get_loadbalancer_listener_refs

    def set_service_appliance_set(self, ref_obj):
        """Set service-appliance-set for loadbalancer-pool.
        
        :param ref_obj: ServiceApplianceSet object
        
        """
        self.service_appliance_set_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_appliance_set_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_appliance_set

    def add_service_appliance_set(self, ref_obj):
        """Add service-appliance-set to loadbalancer-pool.
        
        :param ref_obj: ServiceApplianceSet object
        
        """
        refs = getattr(self, 'service_appliance_set_refs', [])
        if not refs:
            self.service_appliance_set_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_appliance_set_refs.append(ref_info)
    # end add_service_appliance_set

    def del_service_appliance_set(self, ref_obj):
        refs = self.get_service_appliance_set_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_appliance_set_refs.remove(ref)
                return
    # end del_service_appliance_set

    def set_service_appliance_set_list(self, ref_obj_list):
        """Set service-appliance-set list for loadbalancer-pool.
        
        :param ref_obj_list: list of ServiceApplianceSet object
        
        """
        self.service_appliance_set_refs = ref_obj_list
    # end set_service_appliance_set_list

    def get_service_appliance_set_refs(self):
        """Return service-appliance-set list for loadbalancer-pool.
        
        :returns: list of <ServiceApplianceSet>
        
        """
        return getattr(self, 'service_appliance_set_refs', None)
    # end get_service_appliance_set_refs

    def set_loadbalancer_healthmonitor(self, ref_obj):
        """Set loadbalancer-healthmonitor for loadbalancer-pool.
        
        :param ref_obj: LoadbalancerHealthmonitor object
        
        """
        self.loadbalancer_healthmonitor_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.loadbalancer_healthmonitor_refs[0]['uuid'] = ref_obj.uuid

    # end set_loadbalancer_healthmonitor

    def add_loadbalancer_healthmonitor(self, ref_obj):
        """Add loadbalancer-healthmonitor to loadbalancer-pool.
        
        :param ref_obj: LoadbalancerHealthmonitor object
        
        """
        refs = getattr(self, 'loadbalancer_healthmonitor_refs', [])
        if not refs:
            self.loadbalancer_healthmonitor_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.loadbalancer_healthmonitor_refs.append(ref_info)
    # end add_loadbalancer_healthmonitor

    def del_loadbalancer_healthmonitor(self, ref_obj):
        refs = self.get_loadbalancer_healthmonitor_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.loadbalancer_healthmonitor_refs.remove(ref)
                return
    # end del_loadbalancer_healthmonitor

    def set_loadbalancer_healthmonitor_list(self, ref_obj_list):
        """Set loadbalancer-healthmonitor list for loadbalancer-pool.
        
        :param ref_obj_list: list of LoadbalancerHealthmonitor object
        
        """
        self.loadbalancer_healthmonitor_refs = ref_obj_list
    # end set_loadbalancer_healthmonitor_list

    def get_loadbalancer_healthmonitor_refs(self):
        """Return loadbalancer-healthmonitor list for loadbalancer-pool.
        
        :returns: list of <LoadbalancerHealthmonitor>
        
        """
        return getattr(self, 'loadbalancer_healthmonitor_refs', None)
    # end get_loadbalancer_healthmonitor_refs

    def set_tag(self, ref_obj):
        """Set tag for loadbalancer-pool.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to loadbalancer-pool.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for loadbalancer-pool.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for loadbalancer-pool.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_ip_back_refs(self):
        """Return list of all virtual-ips using this loadbalancer-pool"""
        return getattr(self, 'virtual_ip_back_refs', None)
    # end get_virtual_ip_back_refs

    def dump(self):
        """Display loadbalancer-pool object in compact form."""
        print('------------ loadbalancer-pool ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P loadbalancer_pool_properties = ', self.get_loadbalancer_pool_properties())
        print('P loadbalancer_pool_provider = ', self.get_loadbalancer_pool_provider())
        print('P loadbalancer_pool_custom_attributes = ', self.get_loadbalancer_pool_custom_attributes())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF loadbalancer_listener = ', self.get_loadbalancer_listener_refs())
        print('REF service_appliance_set = ', self.get_service_appliance_set_refs())
        print('HAS loadbalancer_member = ', self.get_loadbalancer_members())
        print('REF loadbalancer_healthmonitor = ', self.get_loadbalancer_healthmonitor_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_ip = ', self.get_virtual_ip_back_refs())
    # end dump

# end class LoadbalancerPool

class DeviceChassis(object):
    """
This resource contains information about the device chassis. The PR can refer to this object for chassis details. This resource name must follow the convention: 'vendorname_chassismac' (replacing mac ':' with '_'), for example, 'juniper_00_11_22_33_44_55' 

    Created By:

    Properties:
        * device_chassis_type
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              type of the chassis address if known.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PhysicalRouter` objects
    """

    resource_type = 'device-chassis'
    object_type = 'device_chassis'

    prop_fields = set([u'device_chassis_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['physical_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'device_chassis_type': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['type of the chassis address if known.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['device_chassis_type'] = 'device-chassis-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'device-chassis-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, device_chassis_type=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'device-chassis'
        if not name:
            name = u'default-device-chassis'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if device_chassis_type is not None:
            self._device_chassis_type = device_chassis_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (device-chassis)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of device-chassis in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of device-chassis as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def device_chassis_type(self):
        """Get device-chassis-type for device-chassis.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_chassis_type', None)
    # end device_chassis_type

    @device_chassis_type.setter
    def device_chassis_type(self, device_chassis_type):
        """Set device-chassis-type for device-chassis.
        
        :param device_chassis_type: xsd:string object
        
        """
        self._device_chassis_type = device_chassis_type
    # end device_chassis_type

    def set_device_chassis_type(self, value):
        self.device_chassis_type = value
    # end set_device_chassis_type

    def get_device_chassis_type(self):
        return self.device_chassis_type
    # end get_device_chassis_type

    @property
    def id_perms(self):
        """Get id-perms for device-chassis.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for device-chassis.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for device-chassis.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for device-chassis.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for device-chassis.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for device-chassis.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for device-chassis.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for device-chassis.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_device_chassis_type'):
            self._serialize_field_to_json(serialized, field_names, 'device_chassis_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for device-chassis.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to device-chassis.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for device-chassis.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for device-chassis.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this device-chassis"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def dump(self):
        """Display device-chassis object in compact form."""
        print('------------ device-chassis ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P device_chassis_type = ', self.get_device_chassis_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
    # end dump

# end class DeviceChassis

class GlobalQosConfig(object):
    """
    Global QoS system config is object where all global system QoS configuration is present.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * control_traffic_dscp
            Type: :class:`.ControlTrafficDscpType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              DSCP value of IP header for control traffic

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.QosConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Global system QoS config for vhost and fabric traffic .

        * list of :class:`.ForwardingClass` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Link to global-qos config.

        * list of :class:`.QosQueue` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              QOS queue config object in this project.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'global-qos-config'
    object_type = 'global_qos_config'

    prop_fields = set([u'control_traffic_dscp', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set(['qos_configs', u'forwarding_classs', 'qos_queues'])

    prop_field_types = {
        'control_traffic_dscp': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['DSCP value of IP header for control traffic'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ControlTrafficDscpType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['qos_configs'] = ('qos-config', False)
    children_field_types['forwarding_classs'] = ('forwarding-class', False)
    children_field_types['qos_queues'] = ('qos-queue', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['control_traffic_dscp'] = 'control-traffic-dscp'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'global-qos-config-tag'

    children_field_metas = {}
    children_field_metas['qos_configs'] = 'global-qos-config-qos-config'
    children_field_metas['forwarding_classs'] = 'global-qos-config-forwarding-class'
    children_field_metas['qos_queues'] = 'global-qos-config-qos-queue'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, control_traffic_dscp=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'global-qos-config'
        if not name:
            name = u'default-global-qos-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if control_traffic_dscp is not None:
            self._control_traffic_dscp = control_traffic_dscp
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (global-qos-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of global-qos-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of global-qos-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of global-qos-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of global-qos-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def control_traffic_dscp(self):
        """Get control-traffic-dscp for global-qos-config.
        
        :returns: ControlTrafficDscpType object
        
        """
        return getattr(self, '_control_traffic_dscp', None)
    # end control_traffic_dscp

    @control_traffic_dscp.setter
    def control_traffic_dscp(self, control_traffic_dscp):
        """Set control-traffic-dscp for global-qos-config.
        
        :param control_traffic_dscp: ControlTrafficDscpType object
        
        """
        self._control_traffic_dscp = control_traffic_dscp
    # end control_traffic_dscp

    def set_control_traffic_dscp(self, value):
        self.control_traffic_dscp = value
    # end set_control_traffic_dscp

    def get_control_traffic_dscp(self):
        return self.control_traffic_dscp
    # end get_control_traffic_dscp

    @property
    def id_perms(self):
        """Get id-perms for global-qos-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for global-qos-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for global-qos-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for global-qos-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for global-qos-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for global-qos-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for global-qos-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for global-qos-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_control_traffic_dscp'):
            self._serialize_field_to_json(serialized, field_names, 'control_traffic_dscp')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_qos_configs(self):
        return getattr(self, 'qos_configs', None)
    # end get_qos_configs

    def get_forwarding_classs(self):
        return getattr(self, 'forwarding_classs', None)
    # end get_forwarding_classs

    def get_qos_queues(self):
        return getattr(self, 'qos_queues', None)
    # end get_qos_queues

    def set_tag(self, ref_obj):
        """Set tag for global-qos-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to global-qos-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for global-qos-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for global-qos-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display global-qos-config object in compact form."""
        print('------------ global-qos-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P control_traffic_dscp = ', self.get_control_traffic_dscp())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS qos_config = ', self.get_qos_configs())
        print('HAS forwarding_class = ', self.get_forwarding_classs())
        print('HAS qos_queue = ', self.get_qos_queues())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class GlobalQosConfig

class AnalyticsNode(object):
    """
    Analytics node is object representing a logical node in system which serves operational API and
    analytics collector.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * analytics_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Ip address of the analytics node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'analytics-node'
    object_type = 'analytics_node'

    prop_fields = set([u'analytics_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'analytics_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the analytics node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'admin-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['analytics_node_ip_address'] = 'analytics-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'analytics-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, analytics_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'analytics-node'
        if not name:
            name = u'default-analytics-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if analytics_node_ip_address is not None:
            self._analytics_node_ip_address = analytics_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (analytics-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of analytics-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of analytics-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of analytics-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of analytics-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def analytics_node_ip_address(self):
        """Get analytics-node-ip-address for analytics-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_analytics_node_ip_address', None)
    # end analytics_node_ip_address

    @analytics_node_ip_address.setter
    def analytics_node_ip_address(self, analytics_node_ip_address):
        """Set analytics-node-ip-address for analytics-node.
        
        :param analytics_node_ip_address: IpAddressType object
        
        """
        self._analytics_node_ip_address = analytics_node_ip_address
    # end analytics_node_ip_address

    def set_analytics_node_ip_address(self, value):
        self.analytics_node_ip_address = value
    # end set_analytics_node_ip_address

    def get_analytics_node_ip_address(self):
        return self.analytics_node_ip_address
    # end get_analytics_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for analytics-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for analytics-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for analytics-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for analytics-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for analytics-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for analytics-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for analytics-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for analytics-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_analytics_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'analytics_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for analytics-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to analytics-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for analytics-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for analytics-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display analytics-node object in compact form."""
        print('------------ analytics-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P analytics_node_ip_address = ', self.get_analytics_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class AnalyticsNode

class VirtualDns(object):
    """
    Virtual DNS server is DNS as service for tenants. It is inbound DNS service for virtual machines in
    this project. DNS requests by end points inside this project/IPAM are served by this DNS server
    rules.

    Created By:
        User

    Child of:
        :class:`.Domain` object

    Properties:
        * virtual_DNS_data
            Type: :class:`.VirtualDnsType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Virtual DNS data has configuration for virtual DNS like domain, dynamic records etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.VirtualDnsRecord` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Static DNS records in virtual DNS server.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.NetworkIpam` objects
    """

    resource_type = 'virtual-DNS'
    object_type = 'virtual_DNS'

    prop_fields = set([u'virtual_DNS_data', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'network_ipam_back_refs'])
    children_fields = set([u'virtual_DNS_records'])

    prop_field_types = {
        'virtual_DNS_data': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Virtual DNS data has configuration for virtual DNS like domain, dynamic records etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VirtualDnsType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['network_ipam_back_refs'] = ('network-ipam', 'None', False)

    children_field_types = {}
    children_field_types['virtual_DNS_records'] = ('virtual-DNS-record', False)

    parent_types = [u'domain']

    prop_field_metas = {}
    prop_field_metas['virtual_DNS_data'] = 'virtual-DNS-data'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'virtual-DNS-tag'

    children_field_metas = {}
    children_field_metas['virtual_DNS_records'] = 'virtual-DNS-virtual-DNS-record'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, virtual_DNS_data=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-DNS'
        if not name:
            name = u'default-virtual-DNS'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'domain'
            self.fq_name = [u'default-domain']
            self.fq_name.append(name)


        # property fields
        if virtual_DNS_data is not None:
            self._virtual_DNS_data = virtual_DNS_data
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-DNS)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-DNS in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-DNS as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of virtual-DNS's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of virtual-DNS's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def virtual_DNS_data(self):
        """Get virtual-DNS-data for virtual-DNS.
        
        :returns: VirtualDnsType object
        
        """
        return getattr(self, '_virtual_DNS_data', None)
    # end virtual_DNS_data

    @virtual_DNS_data.setter
    def virtual_DNS_data(self, virtual_DNS_data):
        """Set virtual-DNS-data for virtual-DNS.
        
        :param virtual_DNS_data: VirtualDnsType object
        
        """
        self._virtual_DNS_data = virtual_DNS_data
    # end virtual_DNS_data

    def set_virtual_DNS_data(self, value):
        self.virtual_DNS_data = value
    # end set_virtual_DNS_data

    def get_virtual_DNS_data(self):
        return self.virtual_DNS_data
    # end get_virtual_DNS_data

    @property
    def id_perms(self):
        """Get id-perms for virtual-DNS.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-DNS.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-DNS.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-DNS.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-DNS.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-DNS.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-DNS.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-DNS.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_virtual_DNS_data'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_DNS_data')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_virtual_DNS_records(self):
        return getattr(self, 'virtual_DNS_records', None)
    # end get_virtual_DNS_records

    def set_tag(self, ref_obj):
        """Set tag for virtual-DNS.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-DNS.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-DNS.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-DNS.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_network_ipam_back_refs(self):
        """Return list of all network-ipams using this virtual-DNS"""
        return getattr(self, 'network_ipam_back_refs', None)
    # end get_network_ipam_back_refs

    def dump(self):
        """Display virtual-DNS object in compact form."""
        print('------------ virtual-DNS ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P virtual_DNS_data = ', self.get_virtual_DNS_data())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS virtual_DNS_record = ', self.get_virtual_DNS_records())
        print('REF tag = ', self.get_tag_refs())
        print('BCK network_ipam = ', self.get_network_ipam_back_refs())
    # end dump

# end class VirtualDns

class ConfigDatabaseNode(object):
    """
    Config Database node is object representing a logical node in system which hosts Cassandra DB and
    Zookeeper for Config.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * config_database_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Ip address of the Config DB node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'config-database-node'
    object_type = 'config_database_node'

    prop_fields = set([u'config_database_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'config_database_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the Config DB node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['config_database_node_ip_address'] = 'config-database-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'config-database-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, config_database_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'config-database-node'
        if not name:
            name = u'default-config-database-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if config_database_node_ip_address is not None:
            self._config_database_node_ip_address = config_database_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (config-database-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of config-database-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of config-database-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of config-database-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of config-database-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def config_database_node_ip_address(self):
        """Get config-database-node-ip-address for config-database-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_config_database_node_ip_address', None)
    # end config_database_node_ip_address

    @config_database_node_ip_address.setter
    def config_database_node_ip_address(self, config_database_node_ip_address):
        """Set config-database-node-ip-address for config-database-node.
        
        :param config_database_node_ip_address: IpAddressType object
        
        """
        self._config_database_node_ip_address = config_database_node_ip_address
    # end config_database_node_ip_address

    def set_config_database_node_ip_address(self, value):
        self.config_database_node_ip_address = value
    # end set_config_database_node_ip_address

    def get_config_database_node_ip_address(self):
        return self.config_database_node_ip_address
    # end get_config_database_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for config-database-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for config-database-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for config-database-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for config-database-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for config-database-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for config-database-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for config-database-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for config-database-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_config_database_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'config_database_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for config-database-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to config-database-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for config-database-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for config-database-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display config-database-node object in compact form."""
        print('------------ config-database-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P config_database_node_ip_address = ', self.get_config_database_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class ConfigDatabaseNode

class ConfigNode(object):
    """
    Config node is object representing a logical node in system which serves config API.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * config_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Ip address of the config node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'config-node'
    object_type = 'config_node'

    prop_fields = set([u'config_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'config_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the config node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'admin-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['config_node_ip_address'] = 'config-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'config-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, config_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'config-node'
        if not name:
            name = u'default-config-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if config_node_ip_address is not None:
            self._config_node_ip_address = config_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (config-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of config-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of config-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of config-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of config-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def config_node_ip_address(self):
        """Get config-node-ip-address for config-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_config_node_ip_address', None)
    # end config_node_ip_address

    @config_node_ip_address.setter
    def config_node_ip_address(self, config_node_ip_address):
        """Set config-node-ip-address for config-node.
        
        :param config_node_ip_address: IpAddressType object
        
        """
        self._config_node_ip_address = config_node_ip_address
    # end config_node_ip_address

    def set_config_node_ip_address(self, value):
        self.config_node_ip_address = value
    # end set_config_node_ip_address

    def get_config_node_ip_address(self):
        return self.config_node_ip_address
    # end get_config_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for config-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for config-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for config-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for config-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for config-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for config-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for config-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for config-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_config_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'config_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for config-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to config-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for config-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for config-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display config-node object in compact form."""
        print('------------ config-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P config_node_ip_address = ', self.get_config_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class ConfigNode

class DeviceFunctionalGroup(object):
    """
Device functional group is used to group together any selected list of devices for the purpose of assigning identical attributes. For example, os-version, physical-roles, rb-roles

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * device_functional_group_description
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Description of the functional group stating the functionality the devices would get if assigned to

              this group

        * device_functional_group_os_version
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              OS version for devices in this group. If set, it is the first choice for device image upgrade during

              ztp. If not set, fabric-os-version is used

        * device_functional_group_routing_bridging_roles
            Type: :class:`.RoutingBridgingRolesType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Routing-bridging role (e.g. CRB, ERB, etc.), used by the device manager to provision physical

              router, for e.g device manager may choose to configure physical router based on its role.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.PhysicalRole` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Physical role assigned to all physical routers which are members of this device functional group

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PhysicalRouter` objects
    """

    resource_type = 'device-functional-group'
    object_type = 'device_functional_group'

    prop_fields = set([u'device_functional_group_description', u'device_functional_group_os_version', u'device_functional_group_routing_bridging_roles', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['physical_role_refs', u'tag_refs'])
    backref_fields = set(['physical_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'device_functional_group_description': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Description of the functional group stating the functionality the devices would get if assigned to', 'this group'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'device_functional_group_os_version': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['OS version for devices in this group. If set, it is the first choice for device image upgrade during', 'ztp. If not set, fabric-os-version is used'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'device_functional_group_routing_bridging_roles': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Routing-bridging role (e.g. CRB, ERB, etc.), used by the device manager to provision physical', 'router, for e.g device manager may choose to configure physical router based on its role.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RoutingBridgingRolesType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['physical_role_refs'] = ('physical-role', 'None', False, ['Physical role assigned to all physical routers which are members of this device functional group'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['device_functional_group_description'] = 'device-functional-group-description'
    prop_field_metas['device_functional_group_os_version'] = 'device-functional-group-os-version'
    prop_field_metas['device_functional_group_routing_bridging_roles'] = 'device-functional-group-routing-bridging-roles'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['physical_role_refs'] = 'device-functional-group-physical-role'
    ref_field_metas['tag_refs'] = 'device-functional-group-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, device_functional_group_description=None, device_functional_group_os_version=None, device_functional_group_routing_bridging_roles=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'device-functional-group'
        if not name:
            name = u'default-device-functional-group'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if device_functional_group_description is not None:
            self._device_functional_group_description = device_functional_group_description
        if device_functional_group_os_version is not None:
            self._device_functional_group_os_version = device_functional_group_os_version
        if device_functional_group_routing_bridging_roles is not None:
            self._device_functional_group_routing_bridging_roles = device_functional_group_routing_bridging_roles
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (device-functional-group)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of device-functional-group in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of device-functional-group as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of device-functional-group's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of device-functional-group's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def device_functional_group_description(self):
        """Get device-functional-group-description for device-functional-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_functional_group_description', None)
    # end device_functional_group_description

    @device_functional_group_description.setter
    def device_functional_group_description(self, device_functional_group_description):
        """Set device-functional-group-description for device-functional-group.
        
        :param device_functional_group_description: xsd:string object
        
        """
        self._device_functional_group_description = device_functional_group_description
    # end device_functional_group_description

    def set_device_functional_group_description(self, value):
        self.device_functional_group_description = value
    # end set_device_functional_group_description

    def get_device_functional_group_description(self):
        return self.device_functional_group_description
    # end get_device_functional_group_description

    @property
    def device_functional_group_os_version(self):
        """Get device-functional-group-os-version for device-functional-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_functional_group_os_version', None)
    # end device_functional_group_os_version

    @device_functional_group_os_version.setter
    def device_functional_group_os_version(self, device_functional_group_os_version):
        """Set device-functional-group-os-version for device-functional-group.
        
        :param device_functional_group_os_version: xsd:string object
        
        """
        self._device_functional_group_os_version = device_functional_group_os_version
    # end device_functional_group_os_version

    def set_device_functional_group_os_version(self, value):
        self.device_functional_group_os_version = value
    # end set_device_functional_group_os_version

    def get_device_functional_group_os_version(self):
        return self.device_functional_group_os_version
    # end get_device_functional_group_os_version

    @property
    def device_functional_group_routing_bridging_roles(self):
        """Get device-functional-group-routing-bridging-roles for device-functional-group.
        
        :returns: RoutingBridgingRolesType object
        
        """
        return getattr(self, '_device_functional_group_routing_bridging_roles', None)
    # end device_functional_group_routing_bridging_roles

    @device_functional_group_routing_bridging_roles.setter
    def device_functional_group_routing_bridging_roles(self, device_functional_group_routing_bridging_roles):
        """Set device-functional-group-routing-bridging-roles for device-functional-group.
        
        :param device_functional_group_routing_bridging_roles: RoutingBridgingRolesType object
        
        """
        self._device_functional_group_routing_bridging_roles = device_functional_group_routing_bridging_roles
    # end device_functional_group_routing_bridging_roles

    def set_device_functional_group_routing_bridging_roles(self, value):
        self.device_functional_group_routing_bridging_roles = value
    # end set_device_functional_group_routing_bridging_roles

    def get_device_functional_group_routing_bridging_roles(self):
        return self.device_functional_group_routing_bridging_roles
    # end get_device_functional_group_routing_bridging_roles

    @property
    def id_perms(self):
        """Get id-perms for device-functional-group.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for device-functional-group.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for device-functional-group.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for device-functional-group.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for device-functional-group.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for device-functional-group.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for device-functional-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for device-functional-group.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_device_functional_group_description'):
            self._serialize_field_to_json(serialized, field_names, 'device_functional_group_description')
        if hasattr(self, '_device_functional_group_os_version'):
            self._serialize_field_to_json(serialized, field_names, 'device_functional_group_os_version')
        if hasattr(self, '_device_functional_group_routing_bridging_roles'):
            self._serialize_field_to_json(serialized, field_names, 'device_functional_group_routing_bridging_roles')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'physical_role_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_role_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_physical_role(self, ref_obj):
        """Set physical-role for device-functional-group.
        
        :param ref_obj: PhysicalRole object
        
        """
        self.physical_role_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_role_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_role

    def add_physical_role(self, ref_obj):
        """Add physical-role to device-functional-group.
        
        :param ref_obj: PhysicalRole object
        
        """
        refs = getattr(self, 'physical_role_refs', [])
        if not refs:
            self.physical_role_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_role_refs.append(ref_info)
    # end add_physical_role

    def del_physical_role(self, ref_obj):
        refs = self.get_physical_role_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_role_refs.remove(ref)
                return
    # end del_physical_role

    def set_physical_role_list(self, ref_obj_list):
        """Set physical-role list for device-functional-group.
        
        :param ref_obj_list: list of PhysicalRole object
        
        """
        self.physical_role_refs = ref_obj_list
    # end set_physical_role_list

    def get_physical_role_refs(self):
        """Return physical-role list for device-functional-group.
        
        :returns: list of <PhysicalRole>
        
        """
        return getattr(self, 'physical_role_refs', None)
    # end get_physical_role_refs

    def set_tag(self, ref_obj):
        """Set tag for device-functional-group.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to device-functional-group.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for device-functional-group.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for device-functional-group.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this device-functional-group"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def dump(self):
        """Display device-functional-group object in compact form."""
        print('------------ device-functional-group ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P device_functional_group_description = ', self.get_device_functional_group_description())
        print('P device_functional_group_os_version = ', self.get_device_functional_group_os_version())
        print('P device_functional_group_routing_bridging_roles = ', self.get_device_functional_group_routing_bridging_roles())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF physical_role = ', self.get_physical_role_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
    # end dump

# end class DeviceFunctionalGroup

class FirewallRule(object):
    """
    When parent is policy-management:
        Firewall-rule object
    When parent is project:
        Project level firewall-rule object


    Created By:
        User when parent is :class:`.PolicyManagement`
        User when parent is :class:`.Project`

    Child of:
        :class:`.PolicyManagement` object OR
        :class:`.Project` object

    Properties:
        * draft_mode_state
            Type: str, *one-of* [u'created', u'updated', u'deleted']

            Created By: User (optional)

            Operations Allowed: R

            Description:

        * action_list
            Type: :class:`.ActionListType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Actions to be performed if packets match condition

        * service
            Type: :class:`.FirewallServiceType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service (port, protocol) for packets match condition

        * endpoint_1
            Type: :class:`.FirewallRuleEndpointType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              match condition for traffic source

        * endpoint_2
            Type: :class:`.FirewallRuleEndpointType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              match condition for traffic destination

        * match_tags
            Type: :class:`.FirewallRuleMatchTagsType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              matching tags for source and destination endpoints

        * match_tag_types
            Type: :class:`.FirewallRuleMatchTagsTypeIdList`

            Created By: User (required)

            Operations Allowed: R

            Description:

              matching tags ids for source and destination endpoints

        * direction
            Type: str, *one-of* [u'<', u'>', u'<>']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Direction in the rule

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.ServiceGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to service-group attached to this firewall policy

        * list of :class:`.AddressGroup` objects
            Created By: User (optional)

            Operations Allowed: R

            Description:

              Reference to address group attached to endpoints

        * list of :class:`.VirtualNetwork` objects
            Created By: User (optional)

            Operations Allowed: R

            Description:

              Reference to virtual network attached to endpoints

        * list of (:class:`.SecurityLoggingObject` object, :class:`.SloRateType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to security-logging-object attached to this firewall-rule

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.FirewallPolicy` objects
    """

    resource_type = 'firewall-rule'
    object_type = 'firewall_rule'

    prop_fields = set([u'draft_mode_state', u'action_list', u'service', u'endpoint_1', u'endpoint_2', u'match_tags', u'match_tag_types', u'direction', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['service_group_refs', 'address_group_refs', 'virtual_network_refs', u'security_logging_object_refs', u'tag_refs'])
    backref_fields = set(['firewall_policy_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'draft_mode_state': {'operations': 'R', 'restrictions': [u'created', u'updated', u'deleted'], 'default': None, 'description': [], 'simple_type': u'DraftModeState', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'action_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Actions to be performed if packets match condition'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ActionListType', 'restriction_type': None, 'required': 'required'},
        'service': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Service (port, protocol) for packets match condition'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FirewallServiceType', 'restriction_type': None, 'required': 'optional'},
        'endpoint_1': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['match condition for traffic source'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FirewallRuleEndpointType', 'restriction_type': None, 'required': 'required'},
        'endpoint_2': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['match condition for traffic destination'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FirewallRuleEndpointType', 'restriction_type': None, 'required': 'required'},
        'match_tags': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['matching tags for source and destination endpoints'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FirewallRuleMatchTagsType', 'restriction_type': None, 'required': 'required'},
        'match_tag_types': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['matching tags ids for source and destination endpoints'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FirewallRuleMatchTagsTypeIdList', 'restriction_type': None, 'required': 'required'},
        'direction': {'operations': 'CRUD', 'restrictions': [u'<', u'>', u'<>'], 'default': None, 'description': ['Direction in the rule'], 'simple_type': u'FirewallRuleDirectionType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_group_refs'] = ('service-group', 'None', False, ['Reference to service-group attached to this firewall policy'])
    ref_field_types['address_group_refs'] = ('address-group', 'None', False, ['Reference to address group attached to endpoints'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['Reference to virtual network attached to endpoints'])
    ref_field_types['security_logging_object_refs'] = ('security-logging-object', 'SloRateType', False, ['Reference to security-logging-object attached to this firewall-rule'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['firewall_policy_back_refs'] = ('firewall-policy', 'FirewallSequence', False)

    children_field_types = {}

    parent_types = [u'policy-management', 'project']

    prop_field_metas = {}
    prop_field_metas['draft_mode_state'] = 'draft-mode-state'
    prop_field_metas['action_list'] = 'action-list'
    prop_field_metas['service'] = 'service'
    prop_field_metas['endpoint_1'] = 'endpoint-1'
    prop_field_metas['endpoint_2'] = 'endpoint-2'
    prop_field_metas['match_tags'] = 'match-tags'
    prop_field_metas['match_tag_types'] = 'match-tag-types'
    prop_field_metas['direction'] = 'direction'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_group_refs'] = 'firewall-rule-service-group'
    ref_field_metas['address_group_refs'] = 'firewall-rule-address-group'
    ref_field_metas['virtual_network_refs'] = 'firewall-rule-virtual-network'
    ref_field_metas['security_logging_object_refs'] = 'firewall-rule-security-logging-object'
    ref_field_metas['tag_refs'] = 'firewall-rule-tag'

    children_field_metas = {}

    prop_list_fields = set([u'match_tags'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['match_tags'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, draft_mode_state=None, action_list=None, service=None, endpoint_1=None, endpoint_2=None, match_tags=None, match_tag_types=None, direction=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'firewall-rule'
        if not name:
            name = u'default-firewall-rule'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'policy-management', 'project']")

        # property fields
        if draft_mode_state is not None:
            self._draft_mode_state = draft_mode_state
        if action_list is not None:
            self._action_list = action_list
        if service is not None:
            self._service = service
        if endpoint_1 is not None:
            self._endpoint_1 = endpoint_1
        if endpoint_2 is not None:
            self._endpoint_2 = endpoint_2
        if match_tags is not None:
            self._match_tags = match_tags
        if match_tag_types is not None:
            self._match_tag_types = match_tag_types
        if direction is not None:
            self._direction = direction
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (firewall-rule)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of firewall-rule in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of firewall-rule as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of firewall-rule's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of firewall-rule's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def draft_mode_state(self):
        """Get draft-mode-state for firewall-rule.
        
        :returns: DraftModeState object
        
        """
        return getattr(self, '_draft_mode_state', None)
    # end draft_mode_state

    @draft_mode_state.setter
    def draft_mode_state(self, draft_mode_state):
        """Set draft-mode-state for firewall-rule.
        
        :param draft_mode_state: DraftModeState object
        
        """
        self._draft_mode_state = draft_mode_state
    # end draft_mode_state

    def set_draft_mode_state(self, value):
        self.draft_mode_state = value
    # end set_draft_mode_state

    def get_draft_mode_state(self):
        return self.draft_mode_state
    # end get_draft_mode_state

    @property
    def action_list(self):
        """Get action-list for firewall-rule.
        
        :returns: ActionListType object
        
        """
        return getattr(self, '_action_list', None)
    # end action_list

    @action_list.setter
    def action_list(self, action_list):
        """Set action-list for firewall-rule.
        
        :param action_list: ActionListType object
        
        """
        self._action_list = action_list
    # end action_list

    def set_action_list(self, value):
        self.action_list = value
    # end set_action_list

    def get_action_list(self):
        return self.action_list
    # end get_action_list

    @property
    def service(self):
        """Get service for firewall-rule.
        
        :returns: FirewallServiceType object
        
        """
        return getattr(self, '_service', None)
    # end service

    @service.setter
    def service(self, service):
        """Set service for firewall-rule.
        
        :param service: FirewallServiceType object
        
        """
        self._service = service
    # end service

    def set_service(self, value):
        self.service = value
    # end set_service

    def get_service(self):
        return self.service
    # end get_service

    @property
    def endpoint_1(self):
        """Get endpoint-1 for firewall-rule.
        
        :returns: FirewallRuleEndpointType object
        
        """
        return getattr(self, '_endpoint_1', None)
    # end endpoint_1

    @endpoint_1.setter
    def endpoint_1(self, endpoint_1):
        """Set endpoint-1 for firewall-rule.
        
        :param endpoint_1: FirewallRuleEndpointType object
        
        """
        self._endpoint_1 = endpoint_1
    # end endpoint_1

    def set_endpoint_1(self, value):
        self.endpoint_1 = value
    # end set_endpoint_1

    def get_endpoint_1(self):
        return self.endpoint_1
    # end get_endpoint_1

    @property
    def endpoint_2(self):
        """Get endpoint-2 for firewall-rule.
        
        :returns: FirewallRuleEndpointType object
        
        """
        return getattr(self, '_endpoint_2', None)
    # end endpoint_2

    @endpoint_2.setter
    def endpoint_2(self, endpoint_2):
        """Set endpoint-2 for firewall-rule.
        
        :param endpoint_2: FirewallRuleEndpointType object
        
        """
        self._endpoint_2 = endpoint_2
    # end endpoint_2

    def set_endpoint_2(self, value):
        self.endpoint_2 = value
    # end set_endpoint_2

    def get_endpoint_2(self):
        return self.endpoint_2
    # end get_endpoint_2

    @property
    def match_tags(self):
        """Get match-tags for firewall-rule.
        
        :returns: FirewallRuleMatchTagsType object
        
        """
        return getattr(self, '_match_tags', None)
    # end match_tags

    @match_tags.setter
    def match_tags(self, match_tags):
        """Set match-tags for firewall-rule.
        
        :param match_tags: FirewallRuleMatchTagsType object
        
        """
        self._match_tags = match_tags
    # end match_tags

    def set_match_tags(self, value):
        self.match_tags = value
    # end set_match_tags

    def get_match_tags(self):
        return self.match_tags
    # end get_match_tags

    @property
    def match_tag_types(self):
        """Get match-tag-types for firewall-rule.
        
        :returns: FirewallRuleMatchTagsTypeIdList object
        
        """
        return getattr(self, '_match_tag_types', None)
    # end match_tag_types

    @match_tag_types.setter
    def match_tag_types(self, match_tag_types):
        """Set match-tag-types for firewall-rule.
        
        :param match_tag_types: FirewallRuleMatchTagsTypeIdList object
        
        """
        self._match_tag_types = match_tag_types
    # end match_tag_types

    def set_match_tag_types(self, value):
        self.match_tag_types = value
    # end set_match_tag_types

    def get_match_tag_types(self):
        return self.match_tag_types
    # end get_match_tag_types

    @property
    def direction(self):
        """Get direction for firewall-rule.
        
        :returns: FirewallRuleDirectionType object
        
        """
        return getattr(self, '_direction', None)
    # end direction

    @direction.setter
    def direction(self, direction):
        """Set direction for firewall-rule.
        
        :param direction: FirewallRuleDirectionType object
        
        """
        self._direction = direction
    # end direction

    def set_direction(self, value):
        self.direction = value
    # end set_direction

    def get_direction(self):
        return self.direction
    # end get_direction

    @property
    def id_perms(self):
        """Get id-perms for firewall-rule.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for firewall-rule.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for firewall-rule.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for firewall-rule.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for firewall-rule.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for firewall-rule.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for firewall-rule.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for firewall-rule.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_draft_mode_state'):
            self._serialize_field_to_json(serialized, field_names, 'draft_mode_state')
        if hasattr(self, '_action_list'):
            self._serialize_field_to_json(serialized, field_names, 'action_list')
        if hasattr(self, '_service'):
            self._serialize_field_to_json(serialized, field_names, 'service')
        if hasattr(self, '_endpoint_1'):
            self._serialize_field_to_json(serialized, field_names, 'endpoint_1')
        if hasattr(self, '_endpoint_2'):
            self._serialize_field_to_json(serialized, field_names, 'endpoint_2')
        if hasattr(self, '_match_tags'):
            self._serialize_field_to_json(serialized, field_names, 'match_tags')
        if hasattr(self, '_match_tag_types'):
            self._serialize_field_to_json(serialized, field_names, 'match_tag_types')
        if hasattr(self, '_direction'):
            self._serialize_field_to_json(serialized, field_names, 'direction')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_group_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_group_refs')
        if hasattr(self, 'address_group_refs'):
            self._serialize_field_to_json(serialized, field_names, 'address_group_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'security_logging_object_refs'):
            self._serialize_field_to_json(serialized, field_names, 'security_logging_object_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_group(self, ref_obj):
        """Set service-group for firewall-rule.
        
        :param ref_obj: ServiceGroup object
        
        """
        self.service_group_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_group_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_group

    def add_service_group(self, ref_obj):
        """Add service-group to firewall-rule.
        
        :param ref_obj: ServiceGroup object
        
        """
        refs = getattr(self, 'service_group_refs', [])
        if not refs:
            self.service_group_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_group_refs.append(ref_info)
    # end add_service_group

    def del_service_group(self, ref_obj):
        refs = self.get_service_group_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_group_refs.remove(ref)
                return
    # end del_service_group

    def set_service_group_list(self, ref_obj_list):
        """Set service-group list for firewall-rule.
        
        :param ref_obj_list: list of ServiceGroup object
        
        """
        self.service_group_refs = ref_obj_list
    # end set_service_group_list

    def get_service_group_refs(self):
        """Return service-group list for firewall-rule.
        
        :returns: list of <ServiceGroup>
        
        """
        return getattr(self, 'service_group_refs', None)
    # end get_service_group_refs

    def set_address_group(self, ref_obj):
        """Set address-group for firewall-rule.
        
        :param ref_obj: AddressGroup object
        
        """
        self.address_group_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.address_group_refs[0]['uuid'] = ref_obj.uuid

    # end set_address_group

    def add_address_group(self, ref_obj):
        """Add address-group to firewall-rule.
        
        :param ref_obj: AddressGroup object
        
        """
        refs = getattr(self, 'address_group_refs', [])
        if not refs:
            self.address_group_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.address_group_refs.append(ref_info)
    # end add_address_group

    def del_address_group(self, ref_obj):
        refs = self.get_address_group_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.address_group_refs.remove(ref)
                return
    # end del_address_group

    def set_address_group_list(self, ref_obj_list):
        """Set address-group list for firewall-rule.
        
        :param ref_obj_list: list of AddressGroup object
        
        """
        self.address_group_refs = ref_obj_list
    # end set_address_group_list

    def get_address_group_refs(self):
        """Return address-group list for firewall-rule.
        
        :returns: list of <AddressGroup>
        
        """
        return getattr(self, 'address_group_refs', None)
    # end get_address_group_refs

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for firewall-rule.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to firewall-rule.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for firewall-rule.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for firewall-rule.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_security_logging_object(self, ref_obj, ref_data=None):
        """Set security-logging-object for firewall-rule.
        
        :param ref_obj: SecurityLoggingObject object
        :param ref_data: SloRateType object
        
        """
        self.security_logging_object_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.security_logging_object_refs[0]['uuid'] = ref_obj.uuid

    # end set_security_logging_object

    def add_security_logging_object(self, ref_obj, ref_data=None):
        """Add security-logging-object to firewall-rule.
        
        :param ref_obj: SecurityLoggingObject object
        :param ref_data: SloRateType object
        
        """
        refs = getattr(self, 'security_logging_object_refs', [])
        if not refs:
            self.security_logging_object_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.security_logging_object_refs.append(ref_info)
    # end add_security_logging_object

    def del_security_logging_object(self, ref_obj):
        refs = self.get_security_logging_object_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.security_logging_object_refs.remove(ref)
                return
    # end del_security_logging_object

    def set_security_logging_object_list(self, ref_obj_list, ref_data_list=None):
        """Set security-logging-object list for firewall-rule.
        
        :param ref_obj_list: list of SecurityLoggingObject object
        :param ref_data_list: list of SloRateType object
        
        """
        self.security_logging_object_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_security_logging_object_list

    def get_security_logging_object_refs(self):
        """Return security-logging-object list for firewall-rule.
        
        :returns: list of tuple <SecurityLoggingObject, SloRateType>
        
        """
        return getattr(self, 'security_logging_object_refs', None)
    # end get_security_logging_object_refs

    def set_tag(self, ref_obj):
        """Set tag for firewall-rule.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to firewall-rule.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for firewall-rule.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for firewall-rule.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_firewall_policy_back_refs(self):
        """Return list of all firewall-policys using this firewall-rule"""
        return getattr(self, 'firewall_policy_back_refs', None)
    # end get_firewall_policy_back_refs

    def dump(self):
        """Display firewall-rule object in compact form."""
        print('------------ firewall-rule ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P draft_mode_state = ', self.get_draft_mode_state())
        print('P action_list = ', self.get_action_list())
        print('P service = ', self.get_service())
        print('P endpoint_1 = ', self.get_endpoint_1())
        print('P endpoint_2 = ', self.get_endpoint_2())
        print('P match_tags = ', self.get_match_tags())
        print('P match_tag_types = ', self.get_match_tag_types())
        print('P direction = ', self.get_direction())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_group = ', self.get_service_group_refs())
        print('REF address_group = ', self.get_address_group_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF security_logging_object = ', self.get_security_logging_object_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK firewall_policy = ', self.get_firewall_policy_back_refs())
    # end dump

# end class FirewallRule

class Bgpvpn(object):
    """
    BGP VPN resource contains a set of parameters for a BGP-based VPN

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that are used as both import and export for this virtual network.

        * import_route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that are used as import for this virtual network.

        * export_route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that are used as export for this virtual network.

        * bgpvpn_type
            Type: str, *one-of* [u'l2', u'l3']

            Created By: User (required)

            Operations Allowed: CR

            Description:

              BGP VPN type selection between IP VPN (l3) and Ethernet VPN (l2) (default: l3).

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.LogicalRouter` objects
    """

    resource_type = 'bgpvpn'
    object_type = 'bgpvpn'

    prop_fields = set([u'route_target_list', u'import_route_target_list', u'export_route_target_list', u'bgpvpn_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['virtual_network_back_refs', 'logical_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that are used as both import and export for this virtual network.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'import_route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that are used as import for this virtual network.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'export_route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that are used as export for this virtual network.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'bgpvpn_type': {'operations': 'CR', 'restrictions': [u'l2', u'l3'], 'default': 'l3', 'description': ['BGP VPN type selection between IP VPN (l3) and Ethernet VPN (l2) (default: l3).'], 'simple_type': u'VpnType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['route_target_list'] = 'route-target-list'
    prop_field_metas['import_route_target_list'] = 'import-route-target-list'
    prop_field_metas['export_route_target_list'] = 'export-route-target-list'
    prop_field_metas['bgpvpn_type'] = 'bgpvpn-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'bgpvpn-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, route_target_list=None, import_route_target_list=None, export_route_target_list=None, bgpvpn_type='l3', id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'bgpvpn'
        if not name:
            name = u'default-bgpvpn'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if route_target_list is not None:
            self._route_target_list = route_target_list
        if import_route_target_list is not None:
            self._import_route_target_list = import_route_target_list
        if export_route_target_list is not None:
            self._export_route_target_list = export_route_target_list
        if bgpvpn_type is not None:
            self._bgpvpn_type = bgpvpn_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (bgpvpn)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of bgpvpn in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of bgpvpn as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of bgpvpn's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of bgpvpn's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def route_target_list(self):
        """Get route-target-list for bgpvpn.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_route_target_list', None)
    # end route_target_list

    @route_target_list.setter
    def route_target_list(self, route_target_list):
        """Set route-target-list for bgpvpn.
        
        :param route_target_list: RouteTargetList object
        
        """
        self._route_target_list = route_target_list
    # end route_target_list

    def set_route_target_list(self, value):
        self.route_target_list = value
    # end set_route_target_list

    def get_route_target_list(self):
        return self.route_target_list
    # end get_route_target_list

    @property
    def import_route_target_list(self):
        """Get import-route-target-list for bgpvpn.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_import_route_target_list', None)
    # end import_route_target_list

    @import_route_target_list.setter
    def import_route_target_list(self, import_route_target_list):
        """Set import-route-target-list for bgpvpn.
        
        :param import_route_target_list: RouteTargetList object
        
        """
        self._import_route_target_list = import_route_target_list
    # end import_route_target_list

    def set_import_route_target_list(self, value):
        self.import_route_target_list = value
    # end set_import_route_target_list

    def get_import_route_target_list(self):
        return self.import_route_target_list
    # end get_import_route_target_list

    @property
    def export_route_target_list(self):
        """Get export-route-target-list for bgpvpn.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_export_route_target_list', None)
    # end export_route_target_list

    @export_route_target_list.setter
    def export_route_target_list(self, export_route_target_list):
        """Set export-route-target-list for bgpvpn.
        
        :param export_route_target_list: RouteTargetList object
        
        """
        self._export_route_target_list = export_route_target_list
    # end export_route_target_list

    def set_export_route_target_list(self, value):
        self.export_route_target_list = value
    # end set_export_route_target_list

    def get_export_route_target_list(self):
        return self.export_route_target_list
    # end get_export_route_target_list

    @property
    def bgpvpn_type(self):
        """Get bgpvpn-type for bgpvpn.
        
        :returns: VpnType object
        
        """
        return getattr(self, '_bgpvpn_type', None)
    # end bgpvpn_type

    @bgpvpn_type.setter
    def bgpvpn_type(self, bgpvpn_type):
        """Set bgpvpn-type for bgpvpn.
        
        :param bgpvpn_type: VpnType object
        
        """
        self._bgpvpn_type = bgpvpn_type
    # end bgpvpn_type

    def set_bgpvpn_type(self, value):
        self.bgpvpn_type = value
    # end set_bgpvpn_type

    def get_bgpvpn_type(self):
        return self.bgpvpn_type
    # end get_bgpvpn_type

    @property
    def id_perms(self):
        """Get id-perms for bgpvpn.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for bgpvpn.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for bgpvpn.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for bgpvpn.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for bgpvpn.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for bgpvpn.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for bgpvpn.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for bgpvpn.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'route_target_list')
        if hasattr(self, '_import_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'import_route_target_list')
        if hasattr(self, '_export_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'export_route_target_list')
        if hasattr(self, '_bgpvpn_type'):
            self._serialize_field_to_json(serialized, field_names, 'bgpvpn_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for bgpvpn.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to bgpvpn.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for bgpvpn.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for bgpvpn.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this bgpvpn"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this bgpvpn"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def dump(self):
        """Display bgpvpn object in compact form."""
        print('------------ bgpvpn ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P route_target_list = ', self.get_route_target_list())
        print('P import_route_target_list = ', self.get_import_route_target_list())
        print('P export_route_target_list = ', self.get_export_route_target_list())
        print('P bgpvpn_type = ', self.get_bgpvpn_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
    # end dump

# end class Bgpvpn

class RoleDefinition(object):
    """
Defines a role combination which comprises of a physical role and overlay role and the features associated with it.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.FeatureConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of feature configs for this role definition.


    References to:
        * list of :class:`.Feature` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of features for this role definition.

        * list of :class:`.PhysicalRole` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              physical role for this role definition.

        * list of :class:`.OverlayRole` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              overlay role for this role definition.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.NodeProfile` objects
    """

    resource_type = 'role-definition'
    object_type = 'role_definition'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'feature_refs', 'physical_role_refs', 'overlay_role_refs', u'tag_refs'])
    backref_fields = set([u'node_profile_back_refs'])
    children_fields = set([u'feature_configs'])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['feature_refs'] = ('feature', 'None', False, ['list of features for this role definition.'])
    ref_field_types['physical_role_refs'] = ('physical-role', 'None', False, ['physical role for this role definition.'])
    ref_field_types['overlay_role_refs'] = ('overlay-role', 'None', False, ['overlay role for this role definition.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['node_profile_back_refs'] = ('node-profile', 'None', False)

    children_field_types = {}
    children_field_types['feature_configs'] = ('feature-config', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['feature_refs'] = 'role-definition-feature'
    ref_field_metas['physical_role_refs'] = 'role-definition-physical-role'
    ref_field_metas['overlay_role_refs'] = 'role-definition-overlay-role'
    ref_field_metas['tag_refs'] = 'role-definition-tag'

    children_field_metas = {}
    children_field_metas['feature_configs'] = 'role-definition-feature-config'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'role-definition'
        if not name:
            name = u'default-role-definition'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (role-definition)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of role-definition in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of role-definition as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of role-definition's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of role-definition's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for role-definition.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for role-definition.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for role-definition.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for role-definition.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for role-definition.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for role-definition.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for role-definition.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for role-definition.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'feature_refs'):
            self._serialize_field_to_json(serialized, field_names, 'feature_refs')
        if hasattr(self, 'physical_role_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_role_refs')
        if hasattr(self, 'overlay_role_refs'):
            self._serialize_field_to_json(serialized, field_names, 'overlay_role_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_feature_configs(self):
        return getattr(self, 'feature_configs', None)
    # end get_feature_configs

    def set_feature(self, ref_obj):
        """Set feature for role-definition.
        
        :param ref_obj: Feature object
        
        """
        self.feature_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.feature_refs[0]['uuid'] = ref_obj.uuid

    # end set_feature

    def add_feature(self, ref_obj):
        """Add feature to role-definition.
        
        :param ref_obj: Feature object
        
        """
        refs = getattr(self, 'feature_refs', [])
        if not refs:
            self.feature_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.feature_refs.append(ref_info)
    # end add_feature

    def del_feature(self, ref_obj):
        refs = self.get_feature_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.feature_refs.remove(ref)
                return
    # end del_feature

    def set_feature_list(self, ref_obj_list):
        """Set feature list for role-definition.
        
        :param ref_obj_list: list of Feature object
        
        """
        self.feature_refs = ref_obj_list
    # end set_feature_list

    def get_feature_refs(self):
        """Return feature list for role-definition.
        
        :returns: list of <Feature>
        
        """
        return getattr(self, 'feature_refs', None)
    # end get_feature_refs

    def set_physical_role(self, ref_obj):
        """Set physical-role for role-definition.
        
        :param ref_obj: PhysicalRole object
        
        """
        self.physical_role_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_role_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_role

    def add_physical_role(self, ref_obj):
        """Add physical-role to role-definition.
        
        :param ref_obj: PhysicalRole object
        
        """
        refs = getattr(self, 'physical_role_refs', [])
        if not refs:
            self.physical_role_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_role_refs.append(ref_info)
    # end add_physical_role

    def del_physical_role(self, ref_obj):
        refs = self.get_physical_role_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_role_refs.remove(ref)
                return
    # end del_physical_role

    def set_physical_role_list(self, ref_obj_list):
        """Set physical-role list for role-definition.
        
        :param ref_obj_list: list of PhysicalRole object
        
        """
        self.physical_role_refs = ref_obj_list
    # end set_physical_role_list

    def get_physical_role_refs(self):
        """Return physical-role list for role-definition.
        
        :returns: list of <PhysicalRole>
        
        """
        return getattr(self, 'physical_role_refs', None)
    # end get_physical_role_refs

    def set_overlay_role(self, ref_obj):
        """Set overlay-role for role-definition.
        
        :param ref_obj: OverlayRole object
        
        """
        self.overlay_role_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.overlay_role_refs[0]['uuid'] = ref_obj.uuid

    # end set_overlay_role

    def add_overlay_role(self, ref_obj):
        """Add overlay-role to role-definition.
        
        :param ref_obj: OverlayRole object
        
        """
        refs = getattr(self, 'overlay_role_refs', [])
        if not refs:
            self.overlay_role_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.overlay_role_refs.append(ref_info)
    # end add_overlay_role

    def del_overlay_role(self, ref_obj):
        refs = self.get_overlay_role_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.overlay_role_refs.remove(ref)
                return
    # end del_overlay_role

    def set_overlay_role_list(self, ref_obj_list):
        """Set overlay-role list for role-definition.
        
        :param ref_obj_list: list of OverlayRole object
        
        """
        self.overlay_role_refs = ref_obj_list
    # end set_overlay_role_list

    def get_overlay_role_refs(self):
        """Return overlay-role list for role-definition.
        
        :returns: list of <OverlayRole>
        
        """
        return getattr(self, 'overlay_role_refs', None)
    # end get_overlay_role_refs

    def set_tag(self, ref_obj):
        """Set tag for role-definition.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to role-definition.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for role-definition.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for role-definition.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_node_profile_back_refs(self):
        """Return list of all node-profiles using this role-definition"""
        return getattr(self, 'node_profile_back_refs', None)
    # end get_node_profile_back_refs

    def dump(self):
        """Display role-definition object in compact form."""
        print('------------ role-definition ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF feature = ', self.get_feature_refs())
        print('REF physical_role = ', self.get_physical_role_refs())
        print('REF overlay_role = ', self.get_overlay_role_refs())
        print('HAS feature_config = ', self.get_feature_configs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK node_profile = ', self.get_node_profile_back_refs())
    # end dump

# end class RoleDefinition

class ServiceConnectionModule(object):
    """


    Created By:

    Properties:
        * e2_service
            Type: str, *one-of* [u'point-to-point', u'point-to-list', u'multi-point-to-multi-point']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              E2 service type.

        * service_type
            Type: str, *one-of* [u'vpws-l2ckt', u'vpws-l2vpn', u'vpws-evpn', u'fabric-interface']

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Type of service assigned for this object

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.ServiceObject` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Links the service-connection-module to a service object.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ServiceEndpoint` objects
    """

    resource_type = 'service-connection-module'
    object_type = 'service_connection_module'

    prop_fields = set([u'e2_service', u'service_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_object_refs', u'tag_refs'])
    backref_fields = set([u'service_endpoint_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'e2_service': {'operations': 'CRUD', 'restrictions': [u'point-to-point', u'point-to-list', u'multi-point-to-multi-point'], 'default': None, 'description': ['E2 service type.'], 'simple_type': u'E2servicetype', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'service_type': {'operations': 'CRUD', 'restrictions': [u'vpws-l2ckt', u'vpws-l2vpn', u'vpws-evpn', u'fabric-interface'], 'default': None, 'description': ['Type of service assigned for this object'], 'simple_type': u'ServiceConnectionType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_object_refs'] = ('service-object', 'None', False, ['Links the service-connection-module to a service object.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['service_endpoint_back_refs'] = ('service-endpoint', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['e2_service'] = 'e2-service'
    prop_field_metas['service_type'] = 'service-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_object_refs'] = 'service-connection-module-service-object'
    ref_field_metas['tag_refs'] = 'service-connection-module-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, e2_service=None, service_type=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-connection-module'
        if not name:
            name = u'default-service-connection-module'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if e2_service is not None:
            self._e2_service = e2_service
        if service_type is not None:
            self._service_type = service_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-connection-module)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-connection-module in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-connection-module as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def e2_service(self):
        """Get e2-service for service-connection-module.
        
        :returns: E2servicetype object
        
        """
        return getattr(self, '_e2_service', None)
    # end e2_service

    @e2_service.setter
    def e2_service(self, e2_service):
        """Set e2-service for service-connection-module.
        
        :param e2_service: E2servicetype object
        
        """
        self._e2_service = e2_service
    # end e2_service

    def set_e2_service(self, value):
        self.e2_service = value
    # end set_e2_service

    def get_e2_service(self):
        return self.e2_service
    # end get_e2_service

    @property
    def service_type(self):
        """Get service-type for service-connection-module.
        
        :returns: ServiceConnectionType object
        
        """
        return getattr(self, '_service_type', None)
    # end service_type

    @service_type.setter
    def service_type(self, service_type):
        """Set service-type for service-connection-module.
        
        :param service_type: ServiceConnectionType object
        
        """
        self._service_type = service_type
    # end service_type

    def set_service_type(self, value):
        self.service_type = value
    # end set_service_type

    def get_service_type(self):
        return self.service_type
    # end get_service_type

    @property
    def id_perms(self):
        """Get id-perms for service-connection-module.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-connection-module.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-connection-module.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-connection-module.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-connection-module.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-connection-module.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-connection-module.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-connection-module.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_e2_service'):
            self._serialize_field_to_json(serialized, field_names, 'e2_service')
        if hasattr(self, '_service_type'):
            self._serialize_field_to_json(serialized, field_names, 'service_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_object_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_object_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_object(self, ref_obj):
        """Set service-object for service-connection-module.
        
        :param ref_obj: ServiceObject object
        
        """
        self.service_object_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_object_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_object

    def add_service_object(self, ref_obj):
        """Add service-object to service-connection-module.
        
        :param ref_obj: ServiceObject object
        
        """
        refs = getattr(self, 'service_object_refs', [])
        if not refs:
            self.service_object_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_object_refs.append(ref_info)
    # end add_service_object

    def del_service_object(self, ref_obj):
        refs = self.get_service_object_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_object_refs.remove(ref)
                return
    # end del_service_object

    def set_service_object_list(self, ref_obj_list):
        """Set service-object list for service-connection-module.
        
        :param ref_obj_list: list of ServiceObject object
        
        """
        self.service_object_refs = ref_obj_list
    # end set_service_object_list

    def get_service_object_refs(self):
        """Return service-object list for service-connection-module.
        
        :returns: list of <ServiceObject>
        
        """
        return getattr(self, 'service_object_refs', None)
    # end get_service_object_refs

    def set_tag(self, ref_obj):
        """Set tag for service-connection-module.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-connection-module.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-connection-module.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-connection-module.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_service_endpoint_back_refs(self):
        """Return list of all service-endpoints using this service-connection-module"""
        return getattr(self, 'service_endpoint_back_refs', None)
    # end get_service_endpoint_back_refs

    def dump(self):
        """Display service-connection-module object in compact form."""
        print('------------ service-connection-module ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P e2_service = ', self.get_e2_service())
        print('P service_type = ', self.get_service_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_object = ', self.get_service_object_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK service_endpoint = ', self.get_service_endpoint_back_refs())
    # end dump

# end class ServiceConnectionModule

class SecurityGroup(object):
    """
    Security Groups are set of state full access control rules attached to interfaces.It can be used to
    implement microsegmentation.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * security_group_id
            Type: int, *within* [8000000, 4294967296]

            Created By: System

            Operations Allowed: R

            Description:

              Unique 32 bit ID automatically assigned to this security group [8M+1, 32G].

        * configured_security_group_id
            Type: int, *within* [0, 7999999]

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Unique 32 bit user defined ID assigned to this security group [1, 8M - 1].

        * security_group_entries
            Type: :class:`.PolicyEntriesType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Security group rule entries.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.AccessControlList` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              port access control list is  automatically derived from all the security groups attached to port.


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.SecurityLoggingObject` objects
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.VirtualPortGroup` objects
    """

    resource_type = 'security-group'
    object_type = 'security_group'

    prop_fields = set([u'security_group_id', u'configured_security_group_id', u'security_group_entries', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'security_logging_object_back_refs', 'virtual_machine_interface_back_refs', u'virtual_port_group_back_refs'])
    children_fields = set([u'access_control_lists'])

    prop_field_types = {
        'security_group_id': {'operations': 'R', 'restrictions': [8000000, 4294967296], 'default': None, 'description': ['Unique 32 bit ID automatically assigned to this security group [8M+1, 32G].'], 'simple_type': u'SecurityGroupIdType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'system-only'},
        'configured_security_group_id': {'operations': 'CRUD', 'restrictions': [0, 7999999], 'default': 0, 'description': ['Unique 32 bit user defined ID assigned to this security group [1, 8M - 1].'], 'simple_type': u'ConfiguredSecurityGroupIdType', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'optional'},
        'security_group_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Security group rule entries.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PolicyEntriesType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['security_logging_object_back_refs'] = ('security-logging-object', 'SecurityLoggingObjectRuleListType', False)
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['virtual_port_group_back_refs'] = ('virtual-port-group', 'None', False)

    children_field_types = {}
    children_field_types['access_control_lists'] = ('access-control-list', True)

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['security_group_id'] = 'security-group-id'
    prop_field_metas['configured_security_group_id'] = 'configured-security-group-id'
    prop_field_metas['security_group_entries'] = 'security-group-entries'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'security-group-tag'

    children_field_metas = {}
    children_field_metas['access_control_lists'] = 'security-group-access-control-list'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, security_group_id=None, configured_security_group_id=0, security_group_entries=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'security-group'
        if not name:
            name = u'default-security-group'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if security_group_id is not None:
            self._security_group_id = security_group_id
        if configured_security_group_id is not None:
            self._configured_security_group_id = configured_security_group_id
        if security_group_entries is not None:
            self._security_group_entries = security_group_entries
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (security-group)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of security-group in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of security-group as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of security-group's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of security-group's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def security_group_id(self):
        """Get security-group-id for security-group.
        
        :returns: SecurityGroupIdType object
        
        """
        return getattr(self, '_security_group_id', None)
    # end security_group_id

    @security_group_id.setter
    def security_group_id(self, security_group_id):
        """Set security-group-id for security-group.
        
        :param security_group_id: SecurityGroupIdType object
        
        """
        self._security_group_id = security_group_id
    # end security_group_id

    def set_security_group_id(self, value):
        self.security_group_id = value
    # end set_security_group_id

    def get_security_group_id(self):
        return self.security_group_id
    # end get_security_group_id

    @property
    def configured_security_group_id(self):
        """Get configured-security-group-id for security-group.
        
        :returns: ConfiguredSecurityGroupIdType object
        
        """
        return getattr(self, '_configured_security_group_id', None)
    # end configured_security_group_id

    @configured_security_group_id.setter
    def configured_security_group_id(self, configured_security_group_id):
        """Set configured-security-group-id for security-group.
        
        :param configured_security_group_id: ConfiguredSecurityGroupIdType object
        
        """
        self._configured_security_group_id = configured_security_group_id
    # end configured_security_group_id

    def set_configured_security_group_id(self, value):
        self.configured_security_group_id = value
    # end set_configured_security_group_id

    def get_configured_security_group_id(self):
        return self.configured_security_group_id
    # end get_configured_security_group_id

    @property
    def security_group_entries(self):
        """Get security-group-entries for security-group.
        
        :returns: PolicyEntriesType object
        
        """
        return getattr(self, '_security_group_entries', None)
    # end security_group_entries

    @security_group_entries.setter
    def security_group_entries(self, security_group_entries):
        """Set security-group-entries for security-group.
        
        :param security_group_entries: PolicyEntriesType object
        
        """
        self._security_group_entries = security_group_entries
    # end security_group_entries

    def set_security_group_entries(self, value):
        self.security_group_entries = value
    # end set_security_group_entries

    def get_security_group_entries(self):
        return self.security_group_entries
    # end get_security_group_entries

    @property
    def id_perms(self):
        """Get id-perms for security-group.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for security-group.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for security-group.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for security-group.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for security-group.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for security-group.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for security-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for security-group.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_security_group_id'):
            self._serialize_field_to_json(serialized, field_names, 'security_group_id')
        if hasattr(self, '_configured_security_group_id'):
            self._serialize_field_to_json(serialized, field_names, 'configured_security_group_id')
        if hasattr(self, '_security_group_entries'):
            self._serialize_field_to_json(serialized, field_names, 'security_group_entries')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_access_control_lists(self):
        return getattr(self, 'access_control_lists', None)
    # end get_access_control_lists

    def set_tag(self, ref_obj):
        """Set tag for security-group.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to security-group.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for security-group.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for security-group.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_security_logging_object_back_refs(self):
        """Return list of all security-logging-objects using this security-group"""
        return getattr(self, 'security_logging_object_back_refs', None)
    # end get_security_logging_object_back_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this security-group"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_virtual_port_group_back_refs(self):
        """Return list of all virtual-port-groups using this security-group"""
        return getattr(self, 'virtual_port_group_back_refs', None)
    # end get_virtual_port_group_back_refs

    def dump(self):
        """Display security-group object in compact form."""
        print('------------ security-group ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P security_group_id = ', self.get_security_group_id())
        print('P configured_security_group_id = ', self.get_configured_security_group_id())
        print('P security_group_entries = ', self.get_security_group_entries())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS access_control_list = ', self.get_access_control_lists())
        print('REF tag = ', self.get_tag_refs())
        print('BCK security_logging_object = ', self.get_security_logging_object_back_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK virtual_port_group = ', self.get_virtual_port_group_back_refs())
    # end dump

# end class SecurityGroup

class DatabaseNode(object):
    """
    Database node is object representing a logical node in system which host Cassandra DB and Zookeeper.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * database_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Ip address of the database node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'database-node'
    object_type = 'database_node'

    prop_fields = set([u'database_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'database_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the database node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['database_node_ip_address'] = 'database-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'database-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, database_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'database-node'
        if not name:
            name = u'default-database-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if database_node_ip_address is not None:
            self._database_node_ip_address = database_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (database-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of database-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of database-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of database-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of database-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def database_node_ip_address(self):
        """Get database-node-ip-address for database-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_database_node_ip_address', None)
    # end database_node_ip_address

    @database_node_ip_address.setter
    def database_node_ip_address(self, database_node_ip_address):
        """Set database-node-ip-address for database-node.
        
        :param database_node_ip_address: IpAddressType object
        
        """
        self._database_node_ip_address = database_node_ip_address
    # end database_node_ip_address

    def set_database_node_ip_address(self, value):
        self.database_node_ip_address = value
    # end set_database_node_ip_address

    def get_database_node_ip_address(self):
        return self.database_node_ip_address
    # end get_database_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for database-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for database-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for database-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for database-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for database-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for database-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for database-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for database-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_database_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'database_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for database-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to database-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for database-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for database-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display database-node object in compact form."""
        print('------------ database-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P database_node_ip_address = ', self.get_database_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class DatabaseNode

class LoadbalancerHealthmonitor(object):
    """
    Health monitor objects is configuration to monitor health of individual pool members.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * loadbalancer_healthmonitor_properties
            Type: :class:`.LoadbalancerHealthmonitorType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Configuration parameters for health monitor like type, method, retries etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.LoadbalancerPool` objects
    """

    resource_type = 'loadbalancer-healthmonitor'
    object_type = 'loadbalancer_healthmonitor'

    prop_fields = set([u'loadbalancer_healthmonitor_properties', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'loadbalancer_pool_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'loadbalancer_healthmonitor_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Configuration parameters for health monitor like type, method, retries etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'LoadbalancerHealthmonitorType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['loadbalancer_pool_back_refs'] = ('loadbalancer-pool', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['loadbalancer_healthmonitor_properties'] = 'loadbalancer-healthmonitor-properties'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'loadbalancer-healthmonitor-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, loadbalancer_healthmonitor_properties=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'loadbalancer-healthmonitor'
        if not name:
            name = u'default-loadbalancer-healthmonitor'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if loadbalancer_healthmonitor_properties is not None:
            self._loadbalancer_healthmonitor_properties = loadbalancer_healthmonitor_properties
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (loadbalancer-healthmonitor)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of loadbalancer-healthmonitor in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of loadbalancer-healthmonitor as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of loadbalancer-healthmonitor's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of loadbalancer-healthmonitor's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def loadbalancer_healthmonitor_properties(self):
        """Get loadbalancer-healthmonitor-properties for loadbalancer-healthmonitor.
        
        :returns: LoadbalancerHealthmonitorType object
        
        """
        return getattr(self, '_loadbalancer_healthmonitor_properties', None)
    # end loadbalancer_healthmonitor_properties

    @loadbalancer_healthmonitor_properties.setter
    def loadbalancer_healthmonitor_properties(self, loadbalancer_healthmonitor_properties):
        """Set loadbalancer-healthmonitor-properties for loadbalancer-healthmonitor.
        
        :param loadbalancer_healthmonitor_properties: LoadbalancerHealthmonitorType object
        
        """
        self._loadbalancer_healthmonitor_properties = loadbalancer_healthmonitor_properties
    # end loadbalancer_healthmonitor_properties

    def set_loadbalancer_healthmonitor_properties(self, value):
        self.loadbalancer_healthmonitor_properties = value
    # end set_loadbalancer_healthmonitor_properties

    def get_loadbalancer_healthmonitor_properties(self):
        return self.loadbalancer_healthmonitor_properties
    # end get_loadbalancer_healthmonitor_properties

    @property
    def id_perms(self):
        """Get id-perms for loadbalancer-healthmonitor.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for loadbalancer-healthmonitor.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for loadbalancer-healthmonitor.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for loadbalancer-healthmonitor.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for loadbalancer-healthmonitor.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for loadbalancer-healthmonitor.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for loadbalancer-healthmonitor.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for loadbalancer-healthmonitor.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_loadbalancer_healthmonitor_properties'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_healthmonitor_properties')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for loadbalancer-healthmonitor.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to loadbalancer-healthmonitor.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for loadbalancer-healthmonitor.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for loadbalancer-healthmonitor.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_loadbalancer_pool_back_refs(self):
        """Return list of all loadbalancer-pools using this loadbalancer-healthmonitor"""
        return getattr(self, 'loadbalancer_pool_back_refs', None)
    # end get_loadbalancer_pool_back_refs

    def dump(self):
        """Display loadbalancer-healthmonitor object in compact form."""
        print('------------ loadbalancer-healthmonitor ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P loadbalancer_healthmonitor_properties = ', self.get_loadbalancer_healthmonitor_properties())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK loadbalancer_pool = ', self.get_loadbalancer_pool_back_refs())
    # end dump

# end class LoadbalancerHealthmonitor

class DevicemgrNode(object):
    """
    devicemgr node is object representing a logical node in system for configuring physical devices.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * devicemgr_node_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (admin-only)

            Operations Allowed: CRUD

            Description:

              Ip address of the devicemgr node, set while provisioning.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'devicemgr-node'
    object_type = 'devicemgr_node'

    prop_fields = set([u'devicemgr_node_ip_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'devicemgr_node_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Ip address of the devicemgr node, set while provisioning.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'admin-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['devicemgr_node_ip_address'] = 'devicemgr-node-ip-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'devicemgr-node-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, devicemgr_node_ip_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'devicemgr-node'
        if not name:
            name = u'default-devicemgr-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if devicemgr_node_ip_address is not None:
            self._devicemgr_node_ip_address = devicemgr_node_ip_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (devicemgr-node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of devicemgr-node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of devicemgr-node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of devicemgr-node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of devicemgr-node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def devicemgr_node_ip_address(self):
        """Get devicemgr-node-ip-address for devicemgr-node.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_devicemgr_node_ip_address', None)
    # end devicemgr_node_ip_address

    @devicemgr_node_ip_address.setter
    def devicemgr_node_ip_address(self, devicemgr_node_ip_address):
        """Set devicemgr-node-ip-address for devicemgr-node.
        
        :param devicemgr_node_ip_address: IpAddressType object
        
        """
        self._devicemgr_node_ip_address = devicemgr_node_ip_address
    # end devicemgr_node_ip_address

    def set_devicemgr_node_ip_address(self, value):
        self.devicemgr_node_ip_address = value
    # end set_devicemgr_node_ip_address

    def get_devicemgr_node_ip_address(self):
        return self.devicemgr_node_ip_address
    # end get_devicemgr_node_ip_address

    @property
    def id_perms(self):
        """Get id-perms for devicemgr-node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for devicemgr-node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for devicemgr-node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for devicemgr-node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for devicemgr-node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for devicemgr-node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for devicemgr-node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for devicemgr-node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_devicemgr_node_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'devicemgr_node_ip_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for devicemgr-node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to devicemgr-node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for devicemgr-node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for devicemgr-node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display devicemgr-node object in compact form."""
        print('------------ devicemgr-node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P devicemgr_node_ip_address = ', self.get_devicemgr_node_ip_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class DevicemgrNode

class Project(object):
    """
    Project represent one instance of application or tenant.

    Created By:
        System

    Child of:
        :class:`.Domain` object

    Properties:
        * quota
            Type: :class:`.QuotaType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Max instances limits for various objects under project.

        * vxlan_routing
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              When this knob is enabled for a project, an internal system VN (VN-Int) is created for every logical

              router in the project.

        * alarm_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Flag to enable/disable alarms configured under global-system-config. True, if not set.

        * enable_security_policy_draft
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.SecurityLoggingObject` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Security logging object configuration for specifying session logging criteria

        * list of :class:`.SecurityGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Security Groups are set of state full access control rules attached to interfaces.It can be used to

              implement microsegmentation.

        * list of :class:`.VirtualNetwork` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual network is collection of end points (interface or ip(s) or MAC(s)) that can talk to each

              other by default. It is collection of subnets connected by implicit router which default gateway in

              each subnet.

        * list of :class:`.QosConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUDQOS configuration specifying marking and queuing value for various QoS values

            Description:

        * list of :class:`.NetworkIpam` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              IP Address Management object that controls, ip allocation, DNS and DHCP

        * list of :class:`.NetworkPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Network Policy is set access control rules that can be attached to virtual networks. Network ACL(s)

              and connectivity information is derived from Network policies that are attached to virtual networks.

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual machine interface represent a interface(port) into virtual network. It may or may not have

              corresponding virtual machine. A virtual machine interface has atleast a MAC address and Ip address.

        * list of :class:`.BgpAsAService` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              BGP as service object represents BGP peer in the virtual network that can participate in dynamic

              routing with implicit default gateway of the virtual network.

        * list of :class:`.RoutingPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of references of child routing policy objects. automatically maintained by system.

        * list of :class:`.RouteAggregate` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of references of child routing route aggregate objects. automatically maintained by system.

        * list of :class:`.ServiceInstance` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service instance represents logical instance service used in the virtual world, e.g. firewall, load

              balancer etc. It can represent one or multiple virtual machines or physical devices. Many service

              instances can share a virtual machine or physical device.

        * list of :class:`.ServiceHealthCheck` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service health check is a keepalive mechanism for the virtual machine interface. Liveliness of the

              interface is determined based on configuration in the service health check. It is mainly designed

              for service instance interfaces. However it will work with any interface which present on contrail

              vrouter.

        * list of :class:`.RouteTable` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Network route table is mechanism of adding static routes in the virtual network

        * list of :class:`.InterfaceRouteTable` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Interface route table is mechanism to add static routes pointing to this interface.

        * list of :class:`.LogicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Logical router is a mechanism to connect multiple virtual network as they have been connected by a

              router.

        * list of :class:`.ApiAccessList` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              API access list is list of rules that define role based access to each API and its properties at

              project level.

        * list of :class:`.MulticastPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of references of child multicast policy objects. automatically maintained by system.

        * list of :class:`.LoadbalancerPool` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Loadbalancer pool object represent set(pool) member servers which needs load balancing.

        * list of :class:`.LoadbalancerHealthmonitor` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Health monitor objects is configuration to monitor health of individual pool members.

        * list of :class:`.VirtualIp` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual ip object application(protocol, port). Applicable only to LBaaS V1

        * list of :class:`.LoadbalancerListener` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Listener represents the application(protocol, port) to be load balanced.

        * list of :class:`.Loadbalancer` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Loadbalancer object represents a LBaaS instance. One single Virtual IP and multiple (listeners,

              pools). Applicable to LBaaS V2.

        * list of :class:`.Bgpvpn` objects
            Created By: User (optional)

            Operations Allowed: CR

            Description:

              BGP VPN resource contains a set of parameters for a BGP-based VPN

        * list of :class:`.Alarm` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of alarms that are applicable to objects anchored under the project.

        * list of :class:`.PolicyManagement` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Project level policy-management object re-grouping project policy resources

        * list of :class:`.ServiceGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Project level service Group object

        * list of :class:`.AddressGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Project level address Group object

        * list of :class:`.FirewallRule` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Project level firewall-rule object

        * list of :class:`.FirewallPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Project level firewall-policy object consisting of one or more firewall rules

        * list of :class:`.ApplicationPolicySet` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Project level application-policy object defining policies to apply for a given application tag

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Attribute attached to objects - has a type and value

        * list of :class:`.DeviceFunctionalGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of device functional groups in this project.

        * list of :class:`.VirtualPortGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of virtual port groups/trunk ports in this project.

        * list of :class:`.TelemetryProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of telemetry profiles supported under the project.

        * list of :class:`.SflowProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of sflow profiles supported under the project.

        * list of :class:`.StormControlProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of storm control profiles supported.

        * list of :class:`.PortProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Encapsulates port configurations like storm control etc

        * list of :class:`.HostBasedService` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Project level host based service.

        * list of :class:`.StructuredSyslogConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of structured-syslog-config that are          applicable to objects anchored under project.


    References to:
        * list of (:class:`.Namespace` object, :class:`.SubnetType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to network namespace of this project.

        * list of :class:`.FloatingIpPool` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Deprecated as it is not needed. Will be removed in future.

        * list of :class:`.AliasIpPool` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to alias ip pool in this project.

        * list of :class:`.ApplicationPolicySet` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to default application-policy-set is automatically created by system for default socped

              application policy sets. Needed by vrouter to identify default application-policy-set rules of a

              virtual machine interface

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.FloatingIp` objects
        * list of :class:`.AliasIp` objects
    """

    resource_type = 'project'
    object_type = 'project'

    prop_fields = set([u'quota', u'vxlan_routing', u'alarm_enable', u'enable_security_policy_draft', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'namespace_refs', u'floating_ip_pool_refs', u'alias_ip_pool_refs', 'application_policy_set_refs', u'tag_refs'])
    backref_fields = set([u'floating_ip_back_refs', u'alias_ip_back_refs'])
    children_fields = set([u'security_logging_objects', 'security_groups', 'virtual_networks', 'qos_configs', u'network_ipams', 'network_policys', 'virtual_machine_interfaces', 'bgp_as_a_services', 'routing_policys', 'route_aggregates', u'service_instances', 'service_health_checks', u'route_tables', 'interface_route_tables', 'logical_routers', u'api_access_lists', u'multicast_policys', u'loadbalancer_pools', u'loadbalancer_healthmonitors', u'virtual_ips', 'loadbalancer_listeners', 'loadbalancers', 'bgpvpns', u'alarms', u'policy_managements', 'service_groups', 'address_groups', 'firewall_rules', 'firewall_policys', 'application_policy_sets', u'tags', 'device_functional_groups', u'virtual_port_groups', u'telemetry_profiles', 'sflow_profiles', u'storm_control_profiles', u'port_profiles', u'host_based_services', u'structured_syslog_configs'])

    prop_field_types = {
        'quota': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Max instances limits for various objects under project.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'QuotaType', 'restriction_type': None, 'required': 'required'},
        'vxlan_routing': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['When this knob is enabled for a project, an internal system VN (VN-Int) is created for every logical', 'router in the project.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'alarm_enable': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Flag to enable/disable alarms configured under global-system-config. True, if not set.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'enable_security_policy_draft': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': [], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['namespace_refs'] = ('namespace', 'SubnetType', False, ['Reference to network namespace of this project.'])
    ref_field_types['floating_ip_pool_refs'] = ('floating-ip-pool', 'None', False, ['Deprecated as it is not needed. Will be removed in future.'])
    ref_field_types['alias_ip_pool_refs'] = ('alias-ip-pool', 'None', False, ['Reference to alias ip pool in this project.'])
    ref_field_types['application_policy_set_refs'] = ('application-policy-set', 'None', False, ['Reference to default application-policy-set is automatically created by system for default socped', 'application policy sets. Needed by vrouter to identify default application-policy-set rules of a', 'virtual machine interface'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['floating_ip_back_refs'] = ('floating-ip', 'None', False)
    backref_field_types['alias_ip_back_refs'] = ('alias-ip', 'None', False)

    children_field_types = {}
    children_field_types['security_logging_objects'] = ('security-logging-object', False)
    children_field_types['security_groups'] = ('security-group', False)
    children_field_types['virtual_networks'] = ('virtual-network', False)
    children_field_types['qos_configs'] = ('qos-config', False)
    children_field_types['network_ipams'] = ('network-ipam', False)
    children_field_types['network_policys'] = ('network-policy', False)
    children_field_types['virtual_machine_interfaces'] = ('virtual-machine-interface', False)
    children_field_types['bgp_as_a_services'] = ('bgp-as-a-service', False)
    children_field_types['routing_policys'] = ('routing-policy', False)
    children_field_types['route_aggregates'] = ('route-aggregate', False)
    children_field_types['service_instances'] = ('service-instance', False)
    children_field_types['service_health_checks'] = ('service-health-check', False)
    children_field_types['route_tables'] = ('route-table', False)
    children_field_types['interface_route_tables'] = ('interface-route-table', False)
    children_field_types['logical_routers'] = ('logical-router', False)
    children_field_types['api_access_lists'] = ('api-access-list', False)
    children_field_types['multicast_policys'] = ('multicast-policy', False)
    children_field_types['loadbalancer_pools'] = ('loadbalancer-pool', False)
    children_field_types['loadbalancer_healthmonitors'] = ('loadbalancer-healthmonitor', False)
    children_field_types['virtual_ips'] = ('virtual-ip', False)
    children_field_types['loadbalancer_listeners'] = ('loadbalancer-listener', False)
    children_field_types['loadbalancers'] = ('loadbalancer', False)
    children_field_types['bgpvpns'] = ('bgpvpn', False)
    children_field_types['alarms'] = ('alarm', False)
    children_field_types['policy_managements'] = ('policy-management', False)
    children_field_types['service_groups'] = ('service-group', False)
    children_field_types['address_groups'] = ('address-group', False)
    children_field_types['firewall_rules'] = ('firewall-rule', False)
    children_field_types['firewall_policys'] = ('firewall-policy', False)
    children_field_types['application_policy_sets'] = ('application-policy-set', False)
    children_field_types['tags'] = ('tag', False)
    children_field_types['device_functional_groups'] = ('device-functional-group', False)
    children_field_types['virtual_port_groups'] = ('virtual-port-group', False)
    children_field_types['telemetry_profiles'] = ('telemetry-profile', False)
    children_field_types['sflow_profiles'] = ('sflow-profile', False)
    children_field_types['storm_control_profiles'] = ('storm-control-profile', False)
    children_field_types['port_profiles'] = ('port-profile', False)
    children_field_types['host_based_services'] = ('host-based-service', False)
    children_field_types['structured_syslog_configs'] = ('structured-syslog-config', False)

    parent_types = [u'domain']

    prop_field_metas = {}
    prop_field_metas['quota'] = 'quota'
    prop_field_metas['vxlan_routing'] = 'vxlan-routing'
    prop_field_metas['alarm_enable'] = 'alarm-enable'
    prop_field_metas['enable_security_policy_draft'] = 'enable-security-policy-draft'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['namespace_refs'] = 'project-namespace'
    ref_field_metas['floating_ip_pool_refs'] = 'project-floating-ip-pool'
    ref_field_metas['alias_ip_pool_refs'] = 'project-alias-ip-pool'
    ref_field_metas['application_policy_set_refs'] = 'project-default-application-policy-set'
    ref_field_metas['tag_refs'] = 'project-tag'

    children_field_metas = {}
    children_field_metas['security_logging_objects'] = 'project-security-logging-object'
    children_field_metas['security_groups'] = 'project-security-group'
    children_field_metas['virtual_networks'] = 'project-virtual-network'
    children_field_metas['qos_configs'] = 'project-qos-config'
    children_field_metas['network_ipams'] = 'project-network-ipam'
    children_field_metas['network_policys'] = 'project-network-policy'
    children_field_metas['virtual_machine_interfaces'] = 'project-virtual-machine-interface'
    children_field_metas['bgp_as_a_services'] = 'project-bgpaas'
    children_field_metas['routing_policys'] = 'project-routing-policy'
    children_field_metas['route_aggregates'] = 'project-route-aggregate'
    children_field_metas['service_instances'] = 'project-service-instance'
    children_field_metas['service_health_checks'] = 'project-service-health-check'
    children_field_metas['route_tables'] = 'project-route-table'
    children_field_metas['interface_route_tables'] = 'project-interface-route-table'
    children_field_metas['logical_routers'] = 'project-logical-router'
    children_field_metas['api_access_lists'] = 'project-api-access-list'
    children_field_metas['multicast_policys'] = 'project-multicast-policy'
    children_field_metas['loadbalancer_pools'] = 'project-loadbalancer-pool'
    children_field_metas['loadbalancer_healthmonitors'] = 'project-loadbalancer-healthmonitor'
    children_field_metas['virtual_ips'] = 'project-virtual-ip'
    children_field_metas['loadbalancer_listeners'] = 'project-loadbalancer-listener'
    children_field_metas['loadbalancers'] = 'project-loadbalancer'
    children_field_metas['bgpvpns'] = 'project-bgpvpn'
    children_field_metas['alarms'] = 'project-alarm'
    children_field_metas['policy_managements'] = 'project-policy-management'
    children_field_metas['service_groups'] = 'project-service-group'
    children_field_metas['address_groups'] = 'project-address-group'
    children_field_metas['firewall_rules'] = 'project-firewall-rule'
    children_field_metas['firewall_policys'] = 'project-firewall-policy'
    children_field_metas['application_policy_sets'] = 'project-application-policy-set'
    children_field_metas['tags'] = 'project-scoped-tag'
    children_field_metas['device_functional_groups'] = 'project-device-functional-group'
    children_field_metas['virtual_port_groups'] = 'project-virtual-port-group'
    children_field_metas['telemetry_profiles'] = 'project-telemetry-profile'
    children_field_metas['sflow_profiles'] = 'project-sflow-profile'
    children_field_metas['storm_control_profiles'] = 'project-storm-control-profile'
    children_field_metas['port_profiles'] = 'project-port-profile'
    children_field_metas['host_based_services'] = 'project-host-based-service'
    children_field_metas['structured_syslog_configs'] = 'project-structured-syslog-config'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, quota=None, vxlan_routing=None, alarm_enable=None, enable_security_policy_draft=False, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'project'
        if not name:
            name = u'default-project'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'domain'
            self.fq_name = [u'default-domain']
            self.fq_name.append(name)


        # property fields
        if quota is not None:
            self._quota = quota
        if vxlan_routing is not None:
            self._vxlan_routing = vxlan_routing
        if alarm_enable is not None:
            self._alarm_enable = alarm_enable
        if enable_security_policy_draft is not None:
            self._enable_security_policy_draft = enable_security_policy_draft
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (project)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of project in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of project as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of project's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of project's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def quota(self):
        """Get quota for project.
        
        :returns: QuotaType object
        
        """
        return getattr(self, '_quota', None)
    # end quota

    @quota.setter
    def quota(self, quota):
        """Set quota for project.
        
        :param quota: QuotaType object
        
        """
        self._quota = quota
    # end quota

    def set_quota(self, value):
        self.quota = value
    # end set_quota

    def get_quota(self):
        return self.quota
    # end get_quota

    @property
    def vxlan_routing(self):
        """Get vxlan-routing for project.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_vxlan_routing', None)
    # end vxlan_routing

    @vxlan_routing.setter
    def vxlan_routing(self, vxlan_routing):
        """Set vxlan-routing for project.
        
        :param vxlan_routing: xsd:boolean object
        
        """
        self._vxlan_routing = vxlan_routing
    # end vxlan_routing

    def set_vxlan_routing(self, value):
        self.vxlan_routing = value
    # end set_vxlan_routing

    def get_vxlan_routing(self):
        return self.vxlan_routing
    # end get_vxlan_routing

    @property
    def alarm_enable(self):
        """Get alarm-enable for project.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_alarm_enable', None)
    # end alarm_enable

    @alarm_enable.setter
    def alarm_enable(self, alarm_enable):
        """Set alarm-enable for project.
        
        :param alarm_enable: xsd:boolean object
        
        """
        self._alarm_enable = alarm_enable
    # end alarm_enable

    def set_alarm_enable(self, value):
        self.alarm_enable = value
    # end set_alarm_enable

    def get_alarm_enable(self):
        return self.alarm_enable
    # end get_alarm_enable

    @property
    def enable_security_policy_draft(self):
        """Get enable-security-policy-draft for project.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_enable_security_policy_draft', None)
    # end enable_security_policy_draft

    @enable_security_policy_draft.setter
    def enable_security_policy_draft(self, enable_security_policy_draft):
        """Set enable-security-policy-draft for project.
        
        :param enable_security_policy_draft: xsd:boolean object
        
        """
        self._enable_security_policy_draft = enable_security_policy_draft
    # end enable_security_policy_draft

    def set_enable_security_policy_draft(self, value):
        self.enable_security_policy_draft = value
    # end set_enable_security_policy_draft

    def get_enable_security_policy_draft(self):
        return self.enable_security_policy_draft
    # end get_enable_security_policy_draft

    @property
    def id_perms(self):
        """Get id-perms for project.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for project.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for project.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for project.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for project.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for project.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for project.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for project.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_quota'):
            self._serialize_field_to_json(serialized, field_names, 'quota')
        if hasattr(self, '_vxlan_routing'):
            self._serialize_field_to_json(serialized, field_names, 'vxlan_routing')
        if hasattr(self, '_alarm_enable'):
            self._serialize_field_to_json(serialized, field_names, 'alarm_enable')
        if hasattr(self, '_enable_security_policy_draft'):
            self._serialize_field_to_json(serialized, field_names, 'enable_security_policy_draft')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'namespace_refs'):
            self._serialize_field_to_json(serialized, field_names, 'namespace_refs')
        if hasattr(self, 'floating_ip_pool_refs'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_pool_refs')
        if hasattr(self, 'alias_ip_pool_refs'):
            self._serialize_field_to_json(serialized, field_names, 'alias_ip_pool_refs')
        if hasattr(self, 'application_policy_set_refs'):
            self._serialize_field_to_json(serialized, field_names, 'application_policy_set_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_security_logging_objects(self):
        return getattr(self, 'security_logging_objects', None)
    # end get_security_logging_objects

    def get_security_groups(self):
        return getattr(self, 'security_groups', None)
    # end get_security_groups

    def get_virtual_networks(self):
        return getattr(self, 'virtual_networks', None)
    # end get_virtual_networks

    def get_qos_configs(self):
        return getattr(self, 'qos_configs', None)
    # end get_qos_configs

    def get_network_ipams(self):
        return getattr(self, 'network_ipams', None)
    # end get_network_ipams

    def get_network_policys(self):
        return getattr(self, 'network_policys', None)
    # end get_network_policys

    def get_virtual_machine_interfaces(self):
        return getattr(self, 'virtual_machine_interfaces', None)
    # end get_virtual_machine_interfaces

    def get_bgp_as_a_services(self):
        return getattr(self, 'bgp_as_a_services', None)
    # end get_bgp_as_a_services

    def get_routing_policys(self):
        return getattr(self, 'routing_policys', None)
    # end get_routing_policys

    def get_route_aggregates(self):
        return getattr(self, 'route_aggregates', None)
    # end get_route_aggregates

    def get_service_instances(self):
        return getattr(self, 'service_instances', None)
    # end get_service_instances

    def get_service_health_checks(self):
        return getattr(self, 'service_health_checks', None)
    # end get_service_health_checks

    def get_route_tables(self):
        return getattr(self, 'route_tables', None)
    # end get_route_tables

    def get_interface_route_tables(self):
        return getattr(self, 'interface_route_tables', None)
    # end get_interface_route_tables

    def get_logical_routers(self):
        return getattr(self, 'logical_routers', None)
    # end get_logical_routers

    def get_api_access_lists(self):
        return getattr(self, 'api_access_lists', None)
    # end get_api_access_lists

    def get_multicast_policys(self):
        return getattr(self, 'multicast_policys', None)
    # end get_multicast_policys

    def get_loadbalancer_pools(self):
        return getattr(self, 'loadbalancer_pools', None)
    # end get_loadbalancer_pools

    def get_loadbalancer_healthmonitors(self):
        return getattr(self, 'loadbalancer_healthmonitors', None)
    # end get_loadbalancer_healthmonitors

    def get_virtual_ips(self):
        return getattr(self, 'virtual_ips', None)
    # end get_virtual_ips

    def get_loadbalancer_listeners(self):
        return getattr(self, 'loadbalancer_listeners', None)
    # end get_loadbalancer_listeners

    def get_loadbalancers(self):
        return getattr(self, 'loadbalancers', None)
    # end get_loadbalancers

    def get_bgpvpns(self):
        return getattr(self, 'bgpvpns', None)
    # end get_bgpvpns

    def get_alarms(self):
        return getattr(self, 'alarms', None)
    # end get_alarms

    def get_policy_managements(self):
        return getattr(self, 'policy_managements', None)
    # end get_policy_managements

    def get_service_groups(self):
        return getattr(self, 'service_groups', None)
    # end get_service_groups

    def get_address_groups(self):
        return getattr(self, 'address_groups', None)
    # end get_address_groups

    def get_firewall_rules(self):
        return getattr(self, 'firewall_rules', None)
    # end get_firewall_rules

    def get_firewall_policys(self):
        return getattr(self, 'firewall_policys', None)
    # end get_firewall_policys

    def get_application_policy_sets(self):
        return getattr(self, 'application_policy_sets', None)
    # end get_application_policy_sets

    def get_tags(self):
        return getattr(self, 'tags', None)
    # end get_tags

    def get_device_functional_groups(self):
        return getattr(self, 'device_functional_groups', None)
    # end get_device_functional_groups

    def get_virtual_port_groups(self):
        return getattr(self, 'virtual_port_groups', None)
    # end get_virtual_port_groups

    def get_telemetry_profiles(self):
        return getattr(self, 'telemetry_profiles', None)
    # end get_telemetry_profiles

    def get_sflow_profiles(self):
        return getattr(self, 'sflow_profiles', None)
    # end get_sflow_profiles

    def get_storm_control_profiles(self):
        return getattr(self, 'storm_control_profiles', None)
    # end get_storm_control_profiles

    def get_port_profiles(self):
        return getattr(self, 'port_profiles', None)
    # end get_port_profiles

    def get_host_based_services(self):
        return getattr(self, 'host_based_services', None)
    # end get_host_based_services

    def get_structured_syslog_configs(self):
        return getattr(self, 'structured_syslog_configs', None)
    # end get_structured_syslog_configs

    def set_namespace(self, ref_obj, ref_data=None):
        """Set namespace for project.
        
        :param ref_obj: Namespace object
        :param ref_data: SubnetType object
        
        """
        self.namespace_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.namespace_refs[0]['uuid'] = ref_obj.uuid

    # end set_namespace

    def add_namespace(self, ref_obj, ref_data=None):
        """Add namespace to project.
        
        :param ref_obj: Namespace object
        :param ref_data: SubnetType object
        
        """
        refs = getattr(self, 'namespace_refs', [])
        if not refs:
            self.namespace_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.namespace_refs.append(ref_info)
    # end add_namespace

    def del_namespace(self, ref_obj):
        refs = self.get_namespace_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.namespace_refs.remove(ref)
                return
    # end del_namespace

    def set_namespace_list(self, ref_obj_list, ref_data_list=None):
        """Set namespace list for project.
        
        :param ref_obj_list: list of Namespace object
        :param ref_data_list: list of SubnetType object
        
        """
        self.namespace_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_namespace_list

    def get_namespace_refs(self):
        """Return namespace list for project.
        
        :returns: list of tuple <Namespace, SubnetType>
        
        """
        return getattr(self, 'namespace_refs', None)
    # end get_namespace_refs

    def set_floating_ip_pool(self, ref_obj):
        """Set floating-ip-pool for project.
        
        :param ref_obj: FloatingIpPool object
        
        """
        self.floating_ip_pool_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.floating_ip_pool_refs[0]['uuid'] = ref_obj.uuid

    # end set_floating_ip_pool

    def add_floating_ip_pool(self, ref_obj):
        """Add floating-ip-pool to project.
        
        :param ref_obj: FloatingIpPool object
        
        """
        refs = getattr(self, 'floating_ip_pool_refs', [])
        if not refs:
            self.floating_ip_pool_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.floating_ip_pool_refs.append(ref_info)
    # end add_floating_ip_pool

    def del_floating_ip_pool(self, ref_obj):
        refs = self.get_floating_ip_pool_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.floating_ip_pool_refs.remove(ref)
                return
    # end del_floating_ip_pool

    def set_floating_ip_pool_list(self, ref_obj_list):
        """Set floating-ip-pool list for project.
        
        :param ref_obj_list: list of FloatingIpPool object
        
        """
        self.floating_ip_pool_refs = ref_obj_list
    # end set_floating_ip_pool_list

    def get_floating_ip_pool_refs(self):
        """Return floating-ip-pool list for project.
        
        :returns: list of <FloatingIpPool>
        
        """
        return getattr(self, 'floating_ip_pool_refs', None)
    # end get_floating_ip_pool_refs

    def set_alias_ip_pool(self, ref_obj):
        """Set alias-ip-pool for project.
        
        :param ref_obj: AliasIpPool object
        
        """
        self.alias_ip_pool_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.alias_ip_pool_refs[0]['uuid'] = ref_obj.uuid

    # end set_alias_ip_pool

    def add_alias_ip_pool(self, ref_obj):
        """Add alias-ip-pool to project.
        
        :param ref_obj: AliasIpPool object
        
        """
        refs = getattr(self, 'alias_ip_pool_refs', [])
        if not refs:
            self.alias_ip_pool_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.alias_ip_pool_refs.append(ref_info)
    # end add_alias_ip_pool

    def del_alias_ip_pool(self, ref_obj):
        refs = self.get_alias_ip_pool_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.alias_ip_pool_refs.remove(ref)
                return
    # end del_alias_ip_pool

    def set_alias_ip_pool_list(self, ref_obj_list):
        """Set alias-ip-pool list for project.
        
        :param ref_obj_list: list of AliasIpPool object
        
        """
        self.alias_ip_pool_refs = ref_obj_list
    # end set_alias_ip_pool_list

    def get_alias_ip_pool_refs(self):
        """Return alias-ip-pool list for project.
        
        :returns: list of <AliasIpPool>
        
        """
        return getattr(self, 'alias_ip_pool_refs', None)
    # end get_alias_ip_pool_refs

    def set_application_policy_set(self, ref_obj):
        """Set application-policy-set for project.
        
        :param ref_obj: ApplicationPolicySet object
        
        """
        self.application_policy_set_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.application_policy_set_refs[0]['uuid'] = ref_obj.uuid

    # end set_application_policy_set

    def add_application_policy_set(self, ref_obj):
        """Add application-policy-set to project.
        
        :param ref_obj: ApplicationPolicySet object
        
        """
        refs = getattr(self, 'application_policy_set_refs', [])
        if not refs:
            self.application_policy_set_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.application_policy_set_refs.append(ref_info)
    # end add_application_policy_set

    def del_application_policy_set(self, ref_obj):
        refs = self.get_application_policy_set_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.application_policy_set_refs.remove(ref)
                return
    # end del_application_policy_set

    def set_application_policy_set_list(self, ref_obj_list):
        """Set application-policy-set list for project.
        
        :param ref_obj_list: list of ApplicationPolicySet object
        
        """
        self.application_policy_set_refs = ref_obj_list
    # end set_application_policy_set_list

    def get_application_policy_set_refs(self):
        """Return application-policy-set list for project.
        
        :returns: list of <ApplicationPolicySet>
        
        """
        return getattr(self, 'application_policy_set_refs', None)
    # end get_application_policy_set_refs

    def set_tag(self, ref_obj):
        """Set tag for project.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to project.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for project.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for project.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_floating_ip_back_refs(self):
        """Return list of all floating-ips using this project"""
        return getattr(self, 'floating_ip_back_refs', None)
    # end get_floating_ip_back_refs

    def get_alias_ip_back_refs(self):
        """Return list of all alias-ips using this project"""
        return getattr(self, 'alias_ip_back_refs', None)
    # end get_alias_ip_back_refs

    def dump(self):
        """Display project object in compact form."""
        print('------------ project ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P quota = ', self.get_quota())
        print('P vxlan_routing = ', self.get_vxlan_routing())
        print('P alarm_enable = ', self.get_alarm_enable())
        print('P enable_security_policy_draft = ', self.get_enable_security_policy_draft())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS security_logging_object = ', self.get_security_logging_objects())
        print('REF namespace = ', self.get_namespace_refs())
        print('HAS security_group = ', self.get_security_groups())
        print('HAS virtual_network = ', self.get_virtual_networks())
        print('HAS qos_config = ', self.get_qos_configs())
        print('HAS network_ipam = ', self.get_network_ipams())
        print('HAS network_policy = ', self.get_network_policys())
        print('HAS virtual_machine_interface = ', self.get_virtual_machine_interfaces())
        print('REF floating_ip_pool = ', self.get_floating_ip_pool_refs())
        print('REF alias_ip_pool = ', self.get_alias_ip_pool_refs())
        print('HAS bgp_as_a_service = ', self.get_bgp_as_a_services())
        print('HAS routing_policy = ', self.get_routing_policys())
        print('HAS route_aggregate = ', self.get_route_aggregates())
        print('HAS service_instance = ', self.get_service_instances())
        print('HAS service_health_check = ', self.get_service_health_checks())
        print('HAS route_table = ', self.get_route_tables())
        print('HAS interface_route_table = ', self.get_interface_route_tables())
        print('HAS logical_router = ', self.get_logical_routers())
        print('HAS api_access_list = ', self.get_api_access_lists())
        print('HAS multicast_policy = ', self.get_multicast_policys())
        print('HAS loadbalancer_pool = ', self.get_loadbalancer_pools())
        print('HAS loadbalancer_healthmonitor = ', self.get_loadbalancer_healthmonitors())
        print('HAS virtual_ip = ', self.get_virtual_ips())
        print('HAS loadbalancer_listener = ', self.get_loadbalancer_listeners())
        print('HAS loadbalancer = ', self.get_loadbalancers())
        print('HAS bgpvpn = ', self.get_bgpvpns())
        print('HAS alarm = ', self.get_alarms())
        print('HAS policy_management = ', self.get_policy_managements())
        print('HAS service_group = ', self.get_service_groups())
        print('HAS address_group = ', self.get_address_groups())
        print('HAS firewall_rule = ', self.get_firewall_rules())
        print('HAS firewall_policy = ', self.get_firewall_policys())
        print('HAS application_policy_set = ', self.get_application_policy_sets())
        print('REF application_policy_set = ', self.get_application_policy_set_refs())
        print('HAS tag = ', self.get_tags())
        print('HAS device_functional_group = ', self.get_device_functional_groups())
        print('HAS virtual_port_group = ', self.get_virtual_port_groups())
        print('HAS telemetry_profile = ', self.get_telemetry_profiles())
        print('HAS sflow_profile = ', self.get_sflow_profiles())
        print('HAS storm_control_profile = ', self.get_storm_control_profiles())
        print('HAS port_profile = ', self.get_port_profiles())
        print('HAS host_based_service = ', self.get_host_based_services())
        print('HAS structured_syslog_config = ', self.get_structured_syslog_configs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK floating_ip = ', self.get_floating_ip_back_refs())
        print('BCK alias_ip = ', self.get_alias_ip_back_refs())
    # end dump

# end class Project

class FabricNamespace(object):
    """
    list of fabric namespaces that define a set of resources that can be used to configure the network
    devices in the fabric.

    Created By:
        User

    Child of:
        :class:`.Fabric` object

    Properties:
        * fabric_namespace_type
            Type: str, *one-of* [u'IPV4-CIDR', u'ASN', u'ASN_RANGE', u'MAC_ADDR', u'SERIAL_NUM']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Supported namespace types

        * fabric_namespace_value
            Type: :class:`.NamespaceValue`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              namespace value of type defined by the namespace-type.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'fabric-namespace'
    object_type = 'fabric_namespace'

    prop_fields = set([u'fabric_namespace_type', u'fabric_namespace_value', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'fabric_namespace_type': {'operations': 'CRUD', 'restrictions': [u'IPV4-CIDR', u'ASN', u'ASN_RANGE', u'MAC_ADDR', u'SERIAL_NUM'], 'default': None, 'description': ['Supported namespace types'], 'simple_type': u'NamespaceType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'fabric_namespace_value': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['namespace value of type defined by the namespace-type.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'NamespaceValue', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['fabric']

    prop_field_metas = {}
    prop_field_metas['fabric_namespace_type'] = 'fabric-namespace-type'
    prop_field_metas['fabric_namespace_value'] = 'fabric-namespace-value'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'fabric-namespace-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, fabric_namespace_type=None, fabric_namespace_value=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'fabric-namespace'
        if not name:
            name = u'default-fabric-namespace'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'fabric'
            self.fq_name = ['default-global-system-config', 'default-fabric']
            self.fq_name.append(name)


        # property fields
        if fabric_namespace_type is not None:
            self._fabric_namespace_type = fabric_namespace_type
        if fabric_namespace_value is not None:
            self._fabric_namespace_value = fabric_namespace_value
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (fabric-namespace)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of fabric-namespace in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of fabric-namespace as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of fabric-namespace's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of fabric-namespace's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def fabric_namespace_type(self):
        """Get fabric-namespace-type for fabric-namespace.
        
        :returns: NamespaceType object
        
        """
        return getattr(self, '_fabric_namespace_type', None)
    # end fabric_namespace_type

    @fabric_namespace_type.setter
    def fabric_namespace_type(self, fabric_namespace_type):
        """Set fabric-namespace-type for fabric-namespace.
        
        :param fabric_namespace_type: NamespaceType object
        
        """
        self._fabric_namespace_type = fabric_namespace_type
    # end fabric_namespace_type

    def set_fabric_namespace_type(self, value):
        self.fabric_namespace_type = value
    # end set_fabric_namespace_type

    def get_fabric_namespace_type(self):
        return self.fabric_namespace_type
    # end get_fabric_namespace_type

    @property
    def fabric_namespace_value(self):
        """Get fabric-namespace-value for fabric-namespace.
        
        :returns: NamespaceValue object
        
        """
        return getattr(self, '_fabric_namespace_value', None)
    # end fabric_namespace_value

    @fabric_namespace_value.setter
    def fabric_namespace_value(self, fabric_namespace_value):
        """Set fabric-namespace-value for fabric-namespace.
        
        :param fabric_namespace_value: NamespaceValue object
        
        """
        self._fabric_namespace_value = fabric_namespace_value
    # end fabric_namespace_value

    def set_fabric_namespace_value(self, value):
        self.fabric_namespace_value = value
    # end set_fabric_namespace_value

    def get_fabric_namespace_value(self):
        return self.fabric_namespace_value
    # end get_fabric_namespace_value

    @property
    def id_perms(self):
        """Get id-perms for fabric-namespace.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for fabric-namespace.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for fabric-namespace.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for fabric-namespace.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for fabric-namespace.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for fabric-namespace.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for fabric-namespace.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for fabric-namespace.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_fabric_namespace_type'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_namespace_type')
        if hasattr(self, '_fabric_namespace_value'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_namespace_value')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for fabric-namespace.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to fabric-namespace.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for fabric-namespace.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for fabric-namespace.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display fabric-namespace object in compact form."""
        print('------------ fabric-namespace ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P fabric_namespace_type = ', self.get_fabric_namespace_type())
        print('P fabric_namespace_value = ', self.get_fabric_namespace_value())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class FabricNamespace

class NetworkIpam(object):
    """
    IP Address Management object that controls, ip allocation, DNS and DHCP

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * network_ipam_mgmt
            Type: :class:`.IpamType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Network IP Address Management configuration.

        * ipam_subnets
            Type: :class:`.IpamSubnets`

            Created By: User (optional)

            Operations Allowed: CRD

            Description:

              List of subnets for this ipam.

        * ipam_subnet_method
            Type: str, *one-of* [u'user-defined-subnet', u'flat-subnet', u'auto-subnet']

            Created By: User (optional)

            Operations Allowed: CRD

            Description:

              Subnet method configuration for ipam, user can configure user-defined, flat or auto.

        * ipam_subnetting
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRD

            Description:

              This flag indicates if ipam subnets are carved out from a big subnet, default behavior is False.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.VirtualDns` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to virtual DNS used by this IPAM.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.VirtualRouter` objects
        * list of :class:`.InstanceIp` objects
    """

    resource_type = 'network-ipam'
    object_type = 'network_ipam'

    prop_fields = set([u'network_ipam_mgmt', u'ipam_subnets', u'ipam_subnet_method', u'ipam_subnetting', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'virtual_DNS_refs', u'tag_refs'])
    backref_fields = set(['virtual_network_back_refs', 'virtual_router_back_refs', u'instance_ip_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'network_ipam_mgmt': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Network IP Address Management configuration.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IpamType', 'restriction_type': None, 'required': 'optional'},
        'ipam_subnets': {'operations': 'CRD', 'restrictions': None, 'default': None, 'description': ['List of subnets for this ipam.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IpamSubnets', 'restriction_type': None, 'required': 'optional'},
        'ipam_subnet_method': {'operations': 'CRD', 'restrictions': [u'user-defined-subnet', u'flat-subnet', u'auto-subnet'], 'default': None, 'description': ['Subnet method configuration for ipam, user can configure user-defined, flat or auto.'], 'simple_type': u'SubnetMethodType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'ipam_subnetting': {'operations': 'CRD', 'restrictions': None, 'default': None, 'description': ['This flag indicates if ipam subnets are carved out from a big subnet, default behavior is False.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_DNS_refs'] = ('virtual-DNS', 'None', False, ['Reference to virtual DNS used by this IPAM.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'VnSubnetsType', False)
    backref_field_types['virtual_router_back_refs'] = ('virtual-router', 'VirtualRouterNetworkIpamType', False)
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['network_ipam_mgmt'] = 'network-ipam-mgmt'
    prop_field_metas['ipam_subnets'] = 'ipam-subnets'
    prop_field_metas['ipam_subnet_method'] = 'ipam-subnet-method'
    prop_field_metas['ipam_subnetting'] = 'ipam-subnetting'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_DNS_refs'] = 'network-ipam-virtual-DNS'
    ref_field_metas['tag_refs'] = 'network-ipam-tag'

    children_field_metas = {}

    prop_list_fields = set([u'ipam_subnets'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['ipam_subnets'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, network_ipam_mgmt=None, ipam_subnets=None, ipam_subnet_method=None, ipam_subnetting=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'network-ipam'
        if not name:
            name = u'default-network-ipam'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if network_ipam_mgmt is not None:
            self._network_ipam_mgmt = network_ipam_mgmt
        if ipam_subnets is not None:
            self._ipam_subnets = ipam_subnets
        if ipam_subnet_method is not None:
            self._ipam_subnet_method = ipam_subnet_method
        if ipam_subnetting is not None:
            self._ipam_subnetting = ipam_subnetting
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (network-ipam)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of network-ipam in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of network-ipam as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of network-ipam's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of network-ipam's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def network_ipam_mgmt(self):
        """Get network-ipam-mgmt for network-ipam.
        
        :returns: IpamType object
        
        """
        return getattr(self, '_network_ipam_mgmt', None)
    # end network_ipam_mgmt

    @network_ipam_mgmt.setter
    def network_ipam_mgmt(self, network_ipam_mgmt):
        """Set network-ipam-mgmt for network-ipam.
        
        :param network_ipam_mgmt: IpamType object
        
        """
        self._network_ipam_mgmt = network_ipam_mgmt
    # end network_ipam_mgmt

    def set_network_ipam_mgmt(self, value):
        self.network_ipam_mgmt = value
    # end set_network_ipam_mgmt

    def get_network_ipam_mgmt(self):
        return self.network_ipam_mgmt
    # end get_network_ipam_mgmt

    @property
    def ipam_subnets(self):
        """Get ipam-subnets for network-ipam.
        
        :returns: IpamSubnets object
        
        """
        return getattr(self, '_ipam_subnets', None)
    # end ipam_subnets

    @ipam_subnets.setter
    def ipam_subnets(self, ipam_subnets):
        """Set ipam-subnets for network-ipam.
        
        :param ipam_subnets: IpamSubnets object
        
        """
        self._ipam_subnets = ipam_subnets
    # end ipam_subnets

    def set_ipam_subnets(self, value):
        self.ipam_subnets = value
    # end set_ipam_subnets

    def get_ipam_subnets(self):
        return self.ipam_subnets
    # end get_ipam_subnets

    @property
    def ipam_subnet_method(self):
        """Get ipam-subnet-method for network-ipam.
        
        :returns: SubnetMethodType object
        
        """
        return getattr(self, '_ipam_subnet_method', None)
    # end ipam_subnet_method

    @ipam_subnet_method.setter
    def ipam_subnet_method(self, ipam_subnet_method):
        """Set ipam-subnet-method for network-ipam.
        
        :param ipam_subnet_method: SubnetMethodType object
        
        """
        self._ipam_subnet_method = ipam_subnet_method
    # end ipam_subnet_method

    def set_ipam_subnet_method(self, value):
        self.ipam_subnet_method = value
    # end set_ipam_subnet_method

    def get_ipam_subnet_method(self):
        return self.ipam_subnet_method
    # end get_ipam_subnet_method

    @property
    def ipam_subnetting(self):
        """Get ipam-subnetting for network-ipam.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_ipam_subnetting', None)
    # end ipam_subnetting

    @ipam_subnetting.setter
    def ipam_subnetting(self, ipam_subnetting):
        """Set ipam-subnetting for network-ipam.
        
        :param ipam_subnetting: xsd:boolean object
        
        """
        self._ipam_subnetting = ipam_subnetting
    # end ipam_subnetting

    def set_ipam_subnetting(self, value):
        self.ipam_subnetting = value
    # end set_ipam_subnetting

    def get_ipam_subnetting(self):
        return self.ipam_subnetting
    # end get_ipam_subnetting

    @property
    def id_perms(self):
        """Get id-perms for network-ipam.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for network-ipam.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for network-ipam.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for network-ipam.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for network-ipam.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for network-ipam.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for network-ipam.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for network-ipam.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_network_ipam_mgmt'):
            self._serialize_field_to_json(serialized, field_names, 'network_ipam_mgmt')
        if hasattr(self, '_ipam_subnets'):
            self._serialize_field_to_json(serialized, field_names, 'ipam_subnets')
        if hasattr(self, '_ipam_subnet_method'):
            self._serialize_field_to_json(serialized, field_names, 'ipam_subnet_method')
        if hasattr(self, '_ipam_subnetting'):
            self._serialize_field_to_json(serialized, field_names, 'ipam_subnetting')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_DNS_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_DNS_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_DNS(self, ref_obj):
        """Set virtual-DNS for network-ipam.
        
        :param ref_obj: VirtualDns object
        
        """
        self.virtual_DNS_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_DNS_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_DNS

    def add_virtual_DNS(self, ref_obj):
        """Add virtual-DNS to network-ipam.
        
        :param ref_obj: VirtualDns object
        
        """
        refs = getattr(self, 'virtual_DNS_refs', [])
        if not refs:
            self.virtual_DNS_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_DNS_refs.append(ref_info)
    # end add_virtual_DNS

    def del_virtual_DNS(self, ref_obj):
        refs = self.get_virtual_DNS_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_DNS_refs.remove(ref)
                return
    # end del_virtual_DNS

    def set_virtual_DNS_list(self, ref_obj_list):
        """Set virtual-DNS list for network-ipam.
        
        :param ref_obj_list: list of VirtualDns object
        
        """
        self.virtual_DNS_refs = ref_obj_list
    # end set_virtual_DNS_list

    def get_virtual_DNS_refs(self):
        """Return virtual-DNS list for network-ipam.
        
        :returns: list of <VirtualDns>
        
        """
        return getattr(self, 'virtual_DNS_refs', None)
    # end get_virtual_DNS_refs

    def set_tag(self, ref_obj):
        """Set tag for network-ipam.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to network-ipam.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for network-ipam.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for network-ipam.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this network-ipam"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_virtual_router_back_refs(self):
        """Return list of all virtual-routers using this network-ipam"""
        return getattr(self, 'virtual_router_back_refs', None)
    # end get_virtual_router_back_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this network-ipam"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def dump(self):
        """Display network-ipam object in compact form."""
        print('------------ network-ipam ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P network_ipam_mgmt = ', self.get_network_ipam_mgmt())
        print('P ipam_subnets = ', self.get_ipam_subnets())
        print('P ipam_subnet_method = ', self.get_ipam_subnet_method())
        print('P ipam_subnetting = ', self.get_ipam_subnetting())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_DNS = ', self.get_virtual_DNS_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK virtual_router = ', self.get_virtual_router_back_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
    # end dump

# end class NetworkIpam

class NetworkPolicy(object):
    """
    Network Policy is set access control rules that can be attached to virtual networks. Network ACL(s)
    and connectivity information is derived from Network policies that are attached to virtual networks.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * network_policy_entries
            Type: :class:`.PolicyEntriesType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Network policy rule entries.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.SecurityLoggingObject` objects
        * list of :class:`.VirtualNetwork` objects
    """

    resource_type = 'network-policy'
    object_type = 'network_policy'

    prop_fields = set([u'network_policy_entries', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'security_logging_object_back_refs', 'virtual_network_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'network_policy_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Network policy rule entries.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PolicyEntriesType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['security_logging_object_back_refs'] = ('security-logging-object', 'SecurityLoggingObjectRuleListType', False)
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'VirtualNetworkPolicyType', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['network_policy_entries'] = 'network-policy-entries'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'network-policy-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, network_policy_entries=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'network-policy'
        if not name:
            name = u'default-network-policy'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if network_policy_entries is not None:
            self._network_policy_entries = network_policy_entries
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (network-policy)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of network-policy in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of network-policy as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of network-policy's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of network-policy's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def network_policy_entries(self):
        """Get network-policy-entries for network-policy.
        
        :returns: PolicyEntriesType object
        
        """
        return getattr(self, '_network_policy_entries', None)
    # end network_policy_entries

    @network_policy_entries.setter
    def network_policy_entries(self, network_policy_entries):
        """Set network-policy-entries for network-policy.
        
        :param network_policy_entries: PolicyEntriesType object
        
        """
        self._network_policy_entries = network_policy_entries
    # end network_policy_entries

    def set_network_policy_entries(self, value):
        self.network_policy_entries = value
    # end set_network_policy_entries

    def get_network_policy_entries(self):
        return self.network_policy_entries
    # end get_network_policy_entries

    @property
    def id_perms(self):
        """Get id-perms for network-policy.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for network-policy.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for network-policy.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for network-policy.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for network-policy.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for network-policy.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for network-policy.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for network-policy.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_network_policy_entries'):
            self._serialize_field_to_json(serialized, field_names, 'network_policy_entries')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for network-policy.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to network-policy.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for network-policy.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for network-policy.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_security_logging_object_back_refs(self):
        """Return list of all security-logging-objects using this network-policy"""
        return getattr(self, 'security_logging_object_back_refs', None)
    # end get_security_logging_object_back_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this network-policy"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def dump(self):
        """Display network-policy object in compact form."""
        print('------------ network-policy ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P network_policy_entries = ', self.get_network_policy_entries())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK security_logging_object = ', self.get_security_logging_object_back_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
    # end dump

# end class NetworkPolicy

class SflowProfile(object):
    """
This resource contains information specific to sflow parameters

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * sflow_profile_is_default
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This attribute indicates whether it is a default sflow profile or not. Default profiles are non-

              editable.

        * sflow_parameters
            Type: :class:`.SflowParameters`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Parameters for each sflow profile, such as polling interval, sample rate, list of sflow enabled

              interfaces, sflow agent ID etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.TelemetryProfile` objects
    """

    resource_type = 'sflow-profile'
    object_type = 'sflow_profile'

    prop_fields = set([u'sflow_profile_is_default', u'sflow_parameters', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'telemetry_profile_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'sflow_profile_is_default': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['This attribute indicates whether it is a default sflow profile or not. Default profiles are non-', 'editable.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'sflow_parameters': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Parameters for each sflow profile, such as polling interval, sample rate, list of sflow enabled', 'interfaces, sflow agent ID etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SflowParameters', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['telemetry_profile_back_refs'] = ('telemetry-profile', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['sflow_profile_is_default'] = 'sflow-profile-is-default'
    prop_field_metas['sflow_parameters'] = 'sflow-parameters'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'sflow-profile-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, sflow_profile_is_default=False, sflow_parameters=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'sflow-profile'
        if not name:
            name = u'default-sflow-profile'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if sflow_profile_is_default is not None:
            self._sflow_profile_is_default = sflow_profile_is_default
        if sflow_parameters is not None:
            self._sflow_parameters = sflow_parameters
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (sflow-profile)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of sflow-profile in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of sflow-profile as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of sflow-profile's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of sflow-profile's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def sflow_profile_is_default(self):
        """Get sflow-profile-is-default for sflow-profile.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_sflow_profile_is_default', None)
    # end sflow_profile_is_default

    @sflow_profile_is_default.setter
    def sflow_profile_is_default(self, sflow_profile_is_default):
        """Set sflow-profile-is-default for sflow-profile.
        
        :param sflow_profile_is_default: xsd:boolean object
        
        """
        self._sflow_profile_is_default = sflow_profile_is_default
    # end sflow_profile_is_default

    def set_sflow_profile_is_default(self, value):
        self.sflow_profile_is_default = value
    # end set_sflow_profile_is_default

    def get_sflow_profile_is_default(self):
        return self.sflow_profile_is_default
    # end get_sflow_profile_is_default

    @property
    def sflow_parameters(self):
        """Get sflow-parameters for sflow-profile.
        
        :returns: SflowParameters object
        
        """
        return getattr(self, '_sflow_parameters', None)
    # end sflow_parameters

    @sflow_parameters.setter
    def sflow_parameters(self, sflow_parameters):
        """Set sflow-parameters for sflow-profile.
        
        :param sflow_parameters: SflowParameters object
        
        """
        self._sflow_parameters = sflow_parameters
    # end sflow_parameters

    def set_sflow_parameters(self, value):
        self.sflow_parameters = value
    # end set_sflow_parameters

    def get_sflow_parameters(self):
        return self.sflow_parameters
    # end get_sflow_parameters

    @property
    def id_perms(self):
        """Get id-perms for sflow-profile.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for sflow-profile.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for sflow-profile.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for sflow-profile.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for sflow-profile.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for sflow-profile.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for sflow-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for sflow-profile.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_sflow_profile_is_default'):
            self._serialize_field_to_json(serialized, field_names, 'sflow_profile_is_default')
        if hasattr(self, '_sflow_parameters'):
            self._serialize_field_to_json(serialized, field_names, 'sflow_parameters')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for sflow-profile.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to sflow-profile.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for sflow-profile.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for sflow-profile.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_telemetry_profile_back_refs(self):
        """Return list of all telemetry-profiles using this sflow-profile"""
        return getattr(self, 'telemetry_profile_back_refs', None)
    # end get_telemetry_profile_back_refs

    def dump(self):
        """Display sflow-profile object in compact form."""
        print('------------ sflow-profile ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P sflow_profile_is_default = ', self.get_sflow_profile_is_default())
        print('P sflow_parameters = ', self.get_sflow_parameters())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK telemetry_profile = ', self.get_telemetry_profile_back_refs())
    # end dump

# end class SflowProfile

class Hardware(object):
    """
This resource contains the information about the device hardware info. This resource name must follow the convention: '[vendor name]-[hardware platform name]', for example, 'juniper-mx80'.

    Created By:

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Card` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of installed interface cards in a specific hardware platform.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.NodeProfile` objects
        * list of :class:`.DeviceImage` objects
    """

    resource_type = 'hardware'
    object_type = 'hardware'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'card_refs', u'tag_refs'])
    backref_fields = set([u'node_profile_back_refs', 'device_image_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['card_refs'] = ('card', 'None', False, ['List of installed interface cards in a specific hardware platform.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['node_profile_back_refs'] = ('node-profile', 'None', False)
    backref_field_types['device_image_back_refs'] = ('device-image', 'None', False)

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['card_refs'] = 'hardware-card'
    ref_field_metas['tag_refs'] = 'hardware-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'hardware'
        if not name:
            name = u'default-hardware'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (hardware)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of hardware in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of hardware as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for hardware.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for hardware.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for hardware.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for hardware.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for hardware.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for hardware.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for hardware.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for hardware.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'card_refs'):
            self._serialize_field_to_json(serialized, field_names, 'card_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_card(self, ref_obj):
        """Set card for hardware.
        
        :param ref_obj: Card object
        
        """
        self.card_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.card_refs[0]['uuid'] = ref_obj.uuid

    # end set_card

    def add_card(self, ref_obj):
        """Add card to hardware.
        
        :param ref_obj: Card object
        
        """
        refs = getattr(self, 'card_refs', [])
        if not refs:
            self.card_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.card_refs.append(ref_info)
    # end add_card

    def del_card(self, ref_obj):
        refs = self.get_card_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.card_refs.remove(ref)
                return
    # end del_card

    def set_card_list(self, ref_obj_list):
        """Set card list for hardware.
        
        :param ref_obj_list: list of Card object
        
        """
        self.card_refs = ref_obj_list
    # end set_card_list

    def get_card_refs(self):
        """Return card list for hardware.
        
        :returns: list of <Card>
        
        """
        return getattr(self, 'card_refs', None)
    # end get_card_refs

    def set_tag(self, ref_obj):
        """Set tag for hardware.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to hardware.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for hardware.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for hardware.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_node_profile_back_refs(self):
        """Return list of all node-profiles using this hardware"""
        return getattr(self, 'node_profile_back_refs', None)
    # end get_node_profile_back_refs

    def get_device_image_back_refs(self):
        """Return list of all device-images using this hardware"""
        return getattr(self, 'device_image_back_refs', None)
    # end get_device_image_back_refs

    def dump(self):
        """Display hardware object in compact form."""
        print('------------ hardware ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF card = ', self.get_card_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK node_profile = ', self.get_node_profile_back_refs())
        print('BCK device_image = ', self.get_device_image_back_refs())
    # end dump

# end class Hardware

class Tag(object):
    """
    When parent is config-root:
        Attribute attached to objects - has a type and value
    When parent is project:
        Attribute attached to objects - has a type and value


    Created By:
        User when parent is :class:`.ConfigRoot`
        User when parent is :class:`.Project`

    Child of:
        :class:`.ConfigRoot` object OR
        :class:`.Project` object

    Properties:
        * tag_type_name
            Type: str

            Created By: User (required)

            Operations Allowed: CR

            Description:

              Tag type string representation

        * tag_value
            Type: str

            Created By: User (required)

            Operations Allowed: CR

            Description:

              Tag value string representation

        * tag_predefined
            Type: bool

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              Tag delete boolean representation

        * tag_id
            Type: str, *one-of* xsd:string

            Created By: User (optional)

            Operations Allowed: R

            Description:

              Internal Tag ID encapsulating tag type and value in                  hexadecimal fomat: 0xTTTTVVVV

              (T: type, V: value)

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.TagType` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag type reference which is limited to one

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ServiceEndpoint` objects
        * list of :class:`.InstanceIp` objects
        * list of :class:`.ServiceApplianceSet` objects
        * list of :class:`.RouteTarget` objects
        * list of :class:`.LoadbalancerListener` objects
        * list of :class:`.FloatingIpPool` objects
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.ConfigRoot` objects
        * list of :class:`.ServiceTemplate` objects
        * list of :class:`.HardwareInventory` objects
        * list of :class:`.FirewallPolicy` objects
        * list of :class:`.RouteTable` objects
        * list of :class:`.ProviderAttachment` objects
        * list of :class:`.OverlayRole` objects
        * list of :class:`.MulticastPolicy` objects
        * list of :class:`.NetworkDeviceConfig` objects
        * list of :class:`.VirtualDnsRecord` objects
        * list of :class:`.ControlNodeZone` objects
        * list of :class:`.DsaRule` objects
        * list of :class:`.StructuredSyslogConfig` objects
        * list of :class:`.DiscoveryServiceAssignment` objects
        * list of :class:`.LogicalInterface` objects
        * list of :class:`.FlowNode` objects
        * list of :class:`.PortGroup` objects
        * list of :class:`.RouteAggregate` objects
        * list of :class:`.LogicalRouter` objects
        * list of :class:`.Domain` objects
        * list of :class:`.StructuredSyslogHostnameRecord` objects
        * list of :class:`.ServiceInstance` objects
        * list of :class:`.NodeProfile` objects
        * list of :class:`.BridgeDomain` objects
        * list of :class:`.AliasIp` objects
        * list of :class:`.WebuiNode` objects
        * list of :class:`.Port` objects
        * list of :class:`.BgpAsAService` objects
        * list of :class:`.Subnet` objects
        * list of :class:`.GlobalSystemConfig` objects
        * list of :class:`.SubCluster` objects
        * list of :class:`.ForwardingClass` objects
        * list of :class:`.ServiceGroup` objects
        * list of :class:`.GlobalAnalyticsConfig` objects
        * list of :class:`.AddressGroup` objects
        * list of :class:`.ApplicationPolicySet` objects
        * list of :class:`.VirtualIp` objects
        * list of :class:`.IntentMap` objects
        * list of :class:`.PortTuple` objects
        * list of :class:`.AnalyticsAlarmNode` objects
        * list of :class:`.QosQueue` objects
        * list of :class:`.PhysicalRole` objects
        * list of :class:`.Card` objects
        * list of :class:`.SecurityLoggingObject` objects
        * list of :class:`.QosConfig` objects
        * list of :class:`.AnalyticsSnmpNode` objects
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.CliConfig` objects
        * list of :class:`.ServiceObject` objects
        * list of :class:`.FeatureFlag` objects
        * list of :class:`.Loadbalancer` objects
        * list of :class:`.PeeringPolicy` objects
        * list of :class:`.StructuredSyslogApplicationRecord` objects
        * list of :class:`.GlobalVrouterConfig` objects
        * list of :class:`.FloatingIp` objects
        * list of :class:`.LinkAggregationGroup` objects
        * list of :class:`.VirtualRouter` objects
        * list of :class:`.PortProfile` objects
        * list of :class:`.PolicyManagement` objects
        * list of :class:`.E2ServiceProvider` objects
        * list of :class:`.Fabric` objects
        * list of :class:`.JobTemplate` objects
        * list of :class:`.RoutingPolicy` objects
        * list of :class:`.RoleConfig` objects
        * list of :class:`.TagType` objects
        * list of :class:`.StructuredSyslogMessage` objects
        * list of :class:`.LoadbalancerPool` objects
        * list of :class:`.DeviceChassis` objects
        * list of :class:`.GlobalQosConfig` objects
        * list of :class:`.AnalyticsNode` objects
        * list of :class:`.VirtualDns` objects
        * list of :class:`.ConfigDatabaseNode` objects
        * list of :class:`.ConfigNode` objects
        * list of :class:`.DeviceFunctionalGroup` objects
        * list of :class:`.FirewallRule` objects
        * list of :class:`.Bgpvpn` objects
        * list of :class:`.RoleDefinition` objects
        * list of :class:`.ServiceConnectionModule` objects
        * list of :class:`.SecurityGroup` objects
        * list of :class:`.DatabaseNode` objects
        * list of :class:`.LoadbalancerHealthmonitor` objects
        * list of :class:`.DevicemgrNode` objects
        * list of :class:`.Project` objects
        * list of :class:`.FabricNamespace` objects
        * list of :class:`.NetworkIpam` objects
        * list of :class:`.NetworkPolicy` objects
        * list of :class:`.SflowProfile` objects
        * list of :class:`.Hardware` objects
        * list of :class:`.Tag` objects
        * list of :class:`.FeatureConfig` objects
        * list of :class:`.TelemetryProfile` objects
        * list of :class:`.BgpRouter` objects
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.VirtualPortGroup` objects
        * list of :class:`.ServiceAppliance` objects
        * list of :class:`.Namespace` objects
        * list of :class:`.Feature` objects
        * list of :class:`.StormControlProfile` objects
        * list of :class:`.DeviceImage` objects
        * list of :class:`.PhysicalInterface` objects
        * list of :class:`.AccessControlList` objects
        * list of :class:`.Node` objects
        * list of :class:`.CustomerAttachment` objects
        * list of :class:`.StructuredSyslogSlaProfile` objects
        * list of :class:`.HostBasedService` objects
        * list of :class:`.VirtualMachine` objects
        * list of :class:`.InterfaceRouteTable` objects
        * list of :class:`.LoadbalancerMember` objects
        * list of :class:`.ServiceHealthCheck` objects
        * list of :class:`.Alarm` objects
        * list of :class:`.ApiAccessList` objects
        * list of :class:`.RoutingInstance` objects
        * list of :class:`.AliasIpPool` objects
        * list of :class:`.DataCenterInterconnect` objects
    """

    resource_type = 'tag'
    object_type = 'tag'

    prop_fields = set([u'tag_type_name', u'tag_value', u'tag_predefined', u'tag_id', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_type_refs', u'tag_refs'])
    backref_fields = set([u'service_endpoint_back_refs', u'instance_ip_back_refs', u'service_appliance_set_back_refs', 'route_target_back_refs', 'loadbalancer_listener_back_refs', u'floating_ip_pool_back_refs', 'physical_router_back_refs', u'config_root_back_refs', 'service_template_back_refs', u'hardware_inventory_back_refs', 'firewall_policy_back_refs', u'route_table_back_refs', 'provider_attachment_back_refs', 'overlay_role_back_refs', u'multicast_policy_back_refs', u'network_device_config_back_refs', u'virtual_DNS_record_back_refs', 'control_node_zone_back_refs', 'dsa_rule_back_refs', u'structured_syslog_config_back_refs', u'discovery_service_assignment_back_refs', 'logical_interface_back_refs', 'flow_node_back_refs', u'port_group_back_refs', 'route_aggregate_back_refs', 'logical_router_back_refs', u'domain_back_refs', u'structured_syslog_hostname_record_back_refs', u'service_instance_back_refs', u'node_profile_back_refs', 'bridge_domain_back_refs', u'alias_ip_back_refs', u'webui_node_back_refs', u'port_back_refs', 'bgp_as_a_service_back_refs', u'subnet_back_refs', 'global_system_config_back_refs', 'sub_cluster_back_refs', u'forwarding_class_back_refs', 'service_group_back_refs', u'global_analytics_config_back_refs', 'address_group_back_refs', 'application_policy_set_back_refs', u'virtual_ip_back_refs', u'intent_map_back_refs', u'port_tuple_back_refs', u'analytics_alarm_node_back_refs', 'qos_queue_back_refs', 'physical_role_back_refs', u'card_back_refs', u'security_logging_object_back_refs', 'qos_config_back_refs', u'analytics_snmp_node_back_refs', 'virtual_machine_interface_back_refs', u'cli_config_back_refs', u'service_object_back_refs', u'feature_flag_back_refs', 'loadbalancer_back_refs', u'peering_policy_back_refs', u'structured_syslog_application_record_back_refs', 'global_vrouter_config_back_refs', u'floating_ip_back_refs', 'link_aggregation_group_back_refs', 'virtual_router_back_refs', u'port_profile_back_refs', u'policy_management_back_refs', u'e2_service_provider_back_refs', 'fabric_back_refs', u'job_template_back_refs', 'routing_policy_back_refs', u'role_config_back_refs', u'tag_type_back_refs', u'structured_syslog_message_back_refs', u'loadbalancer_pool_back_refs', u'device_chassis_back_refs', u'global_qos_config_back_refs', u'analytics_node_back_refs', u'virtual_DNS_back_refs', u'config_database_node_back_refs', u'config_node_back_refs', 'device_functional_group_back_refs', 'firewall_rule_back_refs', 'bgpvpn_back_refs', 'role_definition_back_refs', u'service_connection_module_back_refs', 'security_group_back_refs', u'database_node_back_refs', u'loadbalancer_healthmonitor_back_refs', u'devicemgr_node_back_refs', 'project_back_refs', u'fabric_namespace_back_refs', u'network_ipam_back_refs', 'network_policy_back_refs', 'sflow_profile_back_refs', u'hardware_back_refs', u'tag_back_refs', u'feature_config_back_refs', u'telemetry_profile_back_refs', 'bgp_router_back_refs', 'virtual_network_back_refs', u'virtual_port_group_back_refs', u'service_appliance_back_refs', u'namespace_back_refs', u'feature_back_refs', u'storm_control_profile_back_refs', 'device_image_back_refs', 'physical_interface_back_refs', u'access_control_list_back_refs', u'node_back_refs', 'customer_attachment_back_refs', u'structured_syslog_sla_profile_back_refs', u'host_based_service_back_refs', u'virtual_machine_back_refs', 'interface_route_table_back_refs', u'loadbalancer_member_back_refs', 'service_health_check_back_refs', u'alarm_back_refs', u'api_access_list_back_refs', 'routing_instance_back_refs', u'alias_ip_pool_back_refs', u'data_center_interconnect_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'tag_type_name': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['Tag type string representation'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'tag_value': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['Tag value string representation'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'tag_predefined': {'operations': 'CR', 'restrictions': None, 'default': False, 'description': ['Tag delete boolean representation'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'tag_id': {'operations': 'R', 'restrictions': [], 'default': None, 'description': ['Internal Tag ID encapsulating tag type and value in                  hexadecimal fomat: 0xTTTTVVVV', '(T: type, V: value)'], 'simple_type': u'U32BitHexInt', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_type_refs'] = ('tag-type', 'None', False, ['Tag type reference which is limited to one'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['service_endpoint_back_refs'] = ('service-endpoint', 'None', False)
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)
    backref_field_types['service_appliance_set_back_refs'] = ('service-appliance-set', 'None', False)
    backref_field_types['route_target_back_refs'] = ('route-target', 'None', False)
    backref_field_types['loadbalancer_listener_back_refs'] = ('loadbalancer-listener', 'None', False)
    backref_field_types['floating_ip_pool_back_refs'] = ('floating-ip-pool', 'None', False)
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['config_root_back_refs'] = ('config-root', 'None', False)
    backref_field_types['service_template_back_refs'] = ('service-template', 'None', False)
    backref_field_types['hardware_inventory_back_refs'] = ('hardware-inventory', 'None', False)
    backref_field_types['firewall_policy_back_refs'] = ('firewall-policy', 'None', False)
    backref_field_types['route_table_back_refs'] = ('route-table', 'None', False)
    backref_field_types['provider_attachment_back_refs'] = ('provider-attachment', 'None', False)
    backref_field_types['overlay_role_back_refs'] = ('overlay-role', 'None', False)
    backref_field_types['multicast_policy_back_refs'] = ('multicast-policy', 'None', False)
    backref_field_types['network_device_config_back_refs'] = ('network-device-config', 'None', False)
    backref_field_types['virtual_DNS_record_back_refs'] = ('virtual-DNS-record', 'None', False)
    backref_field_types['control_node_zone_back_refs'] = ('control-node-zone', 'None', False)
    backref_field_types['dsa_rule_back_refs'] = ('dsa-rule', 'None', False)
    backref_field_types['structured_syslog_config_back_refs'] = ('structured-syslog-config', 'None', False)
    backref_field_types['discovery_service_assignment_back_refs'] = ('discovery-service-assignment', 'None', False)
    backref_field_types['logical_interface_back_refs'] = ('logical-interface', 'None', False)
    backref_field_types['flow_node_back_refs'] = ('flow-node', 'None', False)
    backref_field_types['port_group_back_refs'] = ('port-group', 'None', False)
    backref_field_types['route_aggregate_back_refs'] = ('route-aggregate', 'None', False)
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'None', False)
    backref_field_types['domain_back_refs'] = ('domain', 'None', False)
    backref_field_types['structured_syslog_hostname_record_back_refs'] = ('structured-syslog-hostname-record', 'None', False)
    backref_field_types['service_instance_back_refs'] = ('service-instance', 'None', False)
    backref_field_types['node_profile_back_refs'] = ('node-profile', 'None', False)
    backref_field_types['bridge_domain_back_refs'] = ('bridge-domain', 'None', False)
    backref_field_types['alias_ip_back_refs'] = ('alias-ip', 'None', False)
    backref_field_types['webui_node_back_refs'] = ('webui-node', 'None', False)
    backref_field_types['port_back_refs'] = ('port', 'None', False)
    backref_field_types['bgp_as_a_service_back_refs'] = ('bgp-as-a-service', 'None', False)
    backref_field_types['subnet_back_refs'] = ('subnet', 'None', False)
    backref_field_types['global_system_config_back_refs'] = ('global-system-config', 'None', False)
    backref_field_types['sub_cluster_back_refs'] = ('sub-cluster', 'None', False)
    backref_field_types['forwarding_class_back_refs'] = ('forwarding-class', 'None', False)
    backref_field_types['service_group_back_refs'] = ('service-group', 'None', False)
    backref_field_types['global_analytics_config_back_refs'] = ('global-analytics-config', 'None', False)
    backref_field_types['address_group_back_refs'] = ('address-group', 'None', False)
    backref_field_types['application_policy_set_back_refs'] = ('application-policy-set', 'None', False)
    backref_field_types['virtual_ip_back_refs'] = ('virtual-ip', 'None', False)
    backref_field_types['intent_map_back_refs'] = ('intent-map', 'None', False)
    backref_field_types['port_tuple_back_refs'] = ('port-tuple', 'None', False)
    backref_field_types['analytics_alarm_node_back_refs'] = ('analytics-alarm-node', 'None', False)
    backref_field_types['qos_queue_back_refs'] = ('qos-queue', 'None', False)
    backref_field_types['physical_role_back_refs'] = ('physical-role', 'None', False)
    backref_field_types['card_back_refs'] = ('card', 'None', False)
    backref_field_types['security_logging_object_back_refs'] = ('security-logging-object', 'None', False)
    backref_field_types['qos_config_back_refs'] = ('qos-config', 'None', False)
    backref_field_types['analytics_snmp_node_back_refs'] = ('analytics-snmp-node', 'None', False)
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['cli_config_back_refs'] = ('cli-config', 'None', False)
    backref_field_types['service_object_back_refs'] = ('service-object', 'None', False)
    backref_field_types['feature_flag_back_refs'] = ('feature-flag', 'None', False)
    backref_field_types['loadbalancer_back_refs'] = ('loadbalancer', 'None', False)
    backref_field_types['peering_policy_back_refs'] = ('peering-policy', 'None', False)
    backref_field_types['structured_syslog_application_record_back_refs'] = ('structured-syslog-application-record', 'None', False)
    backref_field_types['global_vrouter_config_back_refs'] = ('global-vrouter-config', 'None', False)
    backref_field_types['floating_ip_back_refs'] = ('floating-ip', 'None', False)
    backref_field_types['link_aggregation_group_back_refs'] = ('link-aggregation-group', 'None', False)
    backref_field_types['virtual_router_back_refs'] = ('virtual-router', 'None', False)
    backref_field_types['port_profile_back_refs'] = ('port-profile', 'None', False)
    backref_field_types['policy_management_back_refs'] = ('policy-management', 'None', False)
    backref_field_types['e2_service_provider_back_refs'] = ('e2-service-provider', 'None', False)
    backref_field_types['fabric_back_refs'] = ('fabric', 'None', False)
    backref_field_types['job_template_back_refs'] = ('job-template', 'None', False)
    backref_field_types['routing_policy_back_refs'] = ('routing-policy', 'None', False)
    backref_field_types['role_config_back_refs'] = ('role-config', 'None', False)
    backref_field_types['tag_type_back_refs'] = ('tag-type', 'None', False)
    backref_field_types['structured_syslog_message_back_refs'] = ('structured-syslog-message', 'None', False)
    backref_field_types['loadbalancer_pool_back_refs'] = ('loadbalancer-pool', 'None', False)
    backref_field_types['device_chassis_back_refs'] = ('device-chassis', 'None', False)
    backref_field_types['global_qos_config_back_refs'] = ('global-qos-config', 'None', False)
    backref_field_types['analytics_node_back_refs'] = ('analytics-node', 'None', False)
    backref_field_types['virtual_DNS_back_refs'] = ('virtual-DNS', 'None', False)
    backref_field_types['config_database_node_back_refs'] = ('config-database-node', 'None', False)
    backref_field_types['config_node_back_refs'] = ('config-node', 'None', False)
    backref_field_types['device_functional_group_back_refs'] = ('device-functional-group', 'None', False)
    backref_field_types['firewall_rule_back_refs'] = ('firewall-rule', 'None', False)
    backref_field_types['bgpvpn_back_refs'] = ('bgpvpn', 'None', False)
    backref_field_types['role_definition_back_refs'] = ('role-definition', 'None', False)
    backref_field_types['service_connection_module_back_refs'] = ('service-connection-module', 'None', False)
    backref_field_types['security_group_back_refs'] = ('security-group', 'None', False)
    backref_field_types['database_node_back_refs'] = ('database-node', 'None', False)
    backref_field_types['loadbalancer_healthmonitor_back_refs'] = ('loadbalancer-healthmonitor', 'None', False)
    backref_field_types['devicemgr_node_back_refs'] = ('devicemgr-node', 'None', False)
    backref_field_types['project_back_refs'] = ('project', 'None', False)
    backref_field_types['fabric_namespace_back_refs'] = ('fabric-namespace', 'None', False)
    backref_field_types['network_ipam_back_refs'] = ('network-ipam', 'None', False)
    backref_field_types['network_policy_back_refs'] = ('network-policy', 'None', False)
    backref_field_types['sflow_profile_back_refs'] = ('sflow-profile', 'None', False)
    backref_field_types['hardware_back_refs'] = ('hardware', 'None', False)
    backref_field_types['tag_back_refs'] = ('tag', 'None', False)
    backref_field_types['feature_config_back_refs'] = ('feature-config', 'None', False)
    backref_field_types['telemetry_profile_back_refs'] = ('telemetry-profile', 'None', False)
    backref_field_types['bgp_router_back_refs'] = ('bgp-router', 'None', False)
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)
    backref_field_types['virtual_port_group_back_refs'] = ('virtual-port-group', 'None', False)
    backref_field_types['service_appliance_back_refs'] = ('service-appliance', 'None', False)
    backref_field_types['namespace_back_refs'] = ('namespace', 'None', False)
    backref_field_types['feature_back_refs'] = ('feature', 'None', False)
    backref_field_types['storm_control_profile_back_refs'] = ('storm-control-profile', 'None', False)
    backref_field_types['device_image_back_refs'] = ('device-image', 'None', False)
    backref_field_types['physical_interface_back_refs'] = ('physical-interface', 'None', False)
    backref_field_types['access_control_list_back_refs'] = ('access-control-list', 'None', False)
    backref_field_types['node_back_refs'] = ('node', 'None', False)
    backref_field_types['customer_attachment_back_refs'] = ('customer-attachment', 'None', False)
    backref_field_types['structured_syslog_sla_profile_back_refs'] = ('structured-syslog-sla-profile', 'None', False)
    backref_field_types['host_based_service_back_refs'] = ('host-based-service', 'None', False)
    backref_field_types['virtual_machine_back_refs'] = ('virtual-machine', 'None', False)
    backref_field_types['interface_route_table_back_refs'] = ('interface-route-table', 'None', False)
    backref_field_types['loadbalancer_member_back_refs'] = ('loadbalancer-member', 'None', False)
    backref_field_types['service_health_check_back_refs'] = ('service-health-check', 'None', False)
    backref_field_types['alarm_back_refs'] = ('alarm', 'None', False)
    backref_field_types['api_access_list_back_refs'] = ('api-access-list', 'None', False)
    backref_field_types['routing_instance_back_refs'] = ('routing-instance', 'None', False)
    backref_field_types['alias_ip_pool_back_refs'] = ('alias-ip-pool', 'None', False)
    backref_field_types['data_center_interconnect_back_refs'] = ('data-center-interconnect', 'None', False)

    children_field_types = {}

    parent_types = [u'config-root', 'project']

    prop_field_metas = {}
    prop_field_metas['tag_type_name'] = 'tag-type-name'
    prop_field_metas['tag_value'] = 'tag-value'
    prop_field_metas['tag_predefined'] = 'tag-predefined'
    prop_field_metas['tag_id'] = 'tag-id'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_type_refs'] = 'tag-tag-type'
    ref_field_metas['tag_refs'] = 'tag-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, tag_type_name=None, tag_value=None, tag_predefined=False, tag_id=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'tag'
        if not name:
            name = u'default-tag'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.fq_name = [name]

        # property fields
        if tag_type_name is not None:
            self._tag_type_name = tag_type_name
        if tag_value is not None:
            self._tag_value = tag_value
        if tag_predefined is not None:
            self._tag_predefined = tag_predefined
        if tag_id is not None:
            self._tag_id = tag_id
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (tag)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of tag in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of tag as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of tag's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of tag's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def tag_type_name(self):
        """Get tag-type-name for tag.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_tag_type_name', None)
    # end tag_type_name

    @tag_type_name.setter
    def tag_type_name(self, tag_type_name):
        """Set tag-type-name for tag.
        
        :param tag_type_name: xsd:string object
        
        """
        self._tag_type_name = tag_type_name
    # end tag_type_name

    def set_tag_type_name(self, value):
        self.tag_type_name = value
    # end set_tag_type_name

    def get_tag_type_name(self):
        return self.tag_type_name
    # end get_tag_type_name

    @property
    def tag_value(self):
        """Get tag-value for tag.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_tag_value', None)
    # end tag_value

    @tag_value.setter
    def tag_value(self, tag_value):
        """Set tag-value for tag.
        
        :param tag_value: xsd:string object
        
        """
        self._tag_value = tag_value
    # end tag_value

    def set_tag_value(self, value):
        self.tag_value = value
    # end set_tag_value

    def get_tag_value(self):
        return self.tag_value
    # end get_tag_value

    @property
    def tag_predefined(self):
        """Get tag-predefined for tag.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_tag_predefined', None)
    # end tag_predefined

    @tag_predefined.setter
    def tag_predefined(self, tag_predefined):
        """Set tag-predefined for tag.
        
        :param tag_predefined: xsd:boolean object
        
        """
        self._tag_predefined = tag_predefined
    # end tag_predefined

    def set_tag_predefined(self, value):
        self.tag_predefined = value
    # end set_tag_predefined

    def get_tag_predefined(self):
        return self.tag_predefined
    # end get_tag_predefined

    @property
    def tag_id(self):
        """Get tag-id for tag.
        
        :returns: U32BitHexInt object
        
        """
        return getattr(self, '_tag_id', None)
    # end tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Set tag-id for tag.
        
        :param tag_id: U32BitHexInt object
        
        """
        self._tag_id = tag_id
    # end tag_id

    def set_tag_id(self, value):
        self.tag_id = value
    # end set_tag_id

    def get_tag_id(self):
        return self.tag_id
    # end get_tag_id

    @property
    def id_perms(self):
        """Get id-perms for tag.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for tag.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for tag.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for tag.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for tag.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for tag.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for tag.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for tag.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_tag_type_name'):
            self._serialize_field_to_json(serialized, field_names, 'tag_type_name')
        if hasattr(self, '_tag_value'):
            self._serialize_field_to_json(serialized, field_names, 'tag_value')
        if hasattr(self, '_tag_predefined'):
            self._serialize_field_to_json(serialized, field_names, 'tag_predefined')
        if hasattr(self, '_tag_id'):
            self._serialize_field_to_json(serialized, field_names, 'tag_id')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_type_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_type_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag_type(self, ref_obj):
        """Set tag-type for tag.
        
        :param ref_obj: TagType object
        
        """
        self.tag_type_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_type_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag_type

    def add_tag_type(self, ref_obj):
        """Add tag-type to tag.
        
        :param ref_obj: TagType object
        
        """
        refs = getattr(self, 'tag_type_refs', [])
        if not refs:
            self.tag_type_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_type_refs.append(ref_info)
    # end add_tag_type

    def del_tag_type(self, ref_obj):
        refs = self.get_tag_type_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_type_refs.remove(ref)
                return
    # end del_tag_type

    def set_tag_type_list(self, ref_obj_list):
        """Set tag-type list for tag.
        
        :param ref_obj_list: list of TagType object
        
        """
        self.tag_type_refs = ref_obj_list
    # end set_tag_type_list

    def get_tag_type_refs(self):
        """Return tag-type list for tag.
        
        :returns: list of <TagType>
        
        """
        return getattr(self, 'tag_type_refs', None)
    # end get_tag_type_refs

    def set_tag(self, ref_obj):
        """Set tag for tag.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to tag.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for tag.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for tag.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_service_endpoint_back_refs(self):
        """Return list of all service-endpoints using this tag"""
        return getattr(self, 'service_endpoint_back_refs', None)
    # end get_service_endpoint_back_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this tag"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def get_service_appliance_set_back_refs(self):
        """Return list of all service-appliance-sets using this tag"""
        return getattr(self, 'service_appliance_set_back_refs', None)
    # end get_service_appliance_set_back_refs

    def get_route_target_back_refs(self):
        """Return list of all route-targets using this tag"""
        return getattr(self, 'route_target_back_refs', None)
    # end get_route_target_back_refs

    def get_loadbalancer_listener_back_refs(self):
        """Return list of all loadbalancer-listeners using this tag"""
        return getattr(self, 'loadbalancer_listener_back_refs', None)
    # end get_loadbalancer_listener_back_refs

    def get_floating_ip_pool_back_refs(self):
        """Return list of all floating-ip-pools using this tag"""
        return getattr(self, 'floating_ip_pool_back_refs', None)
    # end get_floating_ip_pool_back_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this tag"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_config_root_back_refs(self):
        """Return list of all config-roots using this tag"""
        return getattr(self, 'config_root_back_refs', None)
    # end get_config_root_back_refs

    def get_service_template_back_refs(self):
        """Return list of all service-templates using this tag"""
        return getattr(self, 'service_template_back_refs', None)
    # end get_service_template_back_refs

    def get_hardware_inventory_back_refs(self):
        """Return list of all hardware-inventorys using this tag"""
        return getattr(self, 'hardware_inventory_back_refs', None)
    # end get_hardware_inventory_back_refs

    def get_firewall_policy_back_refs(self):
        """Return list of all firewall-policys using this tag"""
        return getattr(self, 'firewall_policy_back_refs', None)
    # end get_firewall_policy_back_refs

    def get_route_table_back_refs(self):
        """Return list of all route-tables using this tag"""
        return getattr(self, 'route_table_back_refs', None)
    # end get_route_table_back_refs

    def get_provider_attachment_back_refs(self):
        """Return list of all provider-attachments using this tag"""
        return getattr(self, 'provider_attachment_back_refs', None)
    # end get_provider_attachment_back_refs

    def get_overlay_role_back_refs(self):
        """Return list of all overlay-roles using this tag"""
        return getattr(self, 'overlay_role_back_refs', None)
    # end get_overlay_role_back_refs

    def get_multicast_policy_back_refs(self):
        """Return list of all multicast-policys using this tag"""
        return getattr(self, 'multicast_policy_back_refs', None)
    # end get_multicast_policy_back_refs

    def get_network_device_config_back_refs(self):
        """Return list of all network-device-configs using this tag"""
        return getattr(self, 'network_device_config_back_refs', None)
    # end get_network_device_config_back_refs

    def get_virtual_DNS_record_back_refs(self):
        """Return list of all virtual-DNS-records using this tag"""
        return getattr(self, 'virtual_DNS_record_back_refs', None)
    # end get_virtual_DNS_record_back_refs

    def get_control_node_zone_back_refs(self):
        """Return list of all control-node-zones using this tag"""
        return getattr(self, 'control_node_zone_back_refs', None)
    # end get_control_node_zone_back_refs

    def get_dsa_rule_back_refs(self):
        """Return list of all dsa-rules using this tag"""
        return getattr(self, 'dsa_rule_back_refs', None)
    # end get_dsa_rule_back_refs

    def get_structured_syslog_config_back_refs(self):
        """Return list of all structured-syslog-configs using this tag"""
        return getattr(self, 'structured_syslog_config_back_refs', None)
    # end get_structured_syslog_config_back_refs

    def get_discovery_service_assignment_back_refs(self):
        """Return list of all discovery-service-assignments using this tag"""
        return getattr(self, 'discovery_service_assignment_back_refs', None)
    # end get_discovery_service_assignment_back_refs

    def get_logical_interface_back_refs(self):
        """Return list of all logical-interfaces using this tag"""
        return getattr(self, 'logical_interface_back_refs', None)
    # end get_logical_interface_back_refs

    def get_flow_node_back_refs(self):
        """Return list of all flow-nodes using this tag"""
        return getattr(self, 'flow_node_back_refs', None)
    # end get_flow_node_back_refs

    def get_port_group_back_refs(self):
        """Return list of all port-groups using this tag"""
        return getattr(self, 'port_group_back_refs', None)
    # end get_port_group_back_refs

    def get_route_aggregate_back_refs(self):
        """Return list of all route-aggregates using this tag"""
        return getattr(self, 'route_aggregate_back_refs', None)
    # end get_route_aggregate_back_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this tag"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def get_domain_back_refs(self):
        """Return list of all domains using this tag"""
        return getattr(self, 'domain_back_refs', None)
    # end get_domain_back_refs

    def get_structured_syslog_hostname_record_back_refs(self):
        """Return list of all structured-syslog-hostname-records using this tag"""
        return getattr(self, 'structured_syslog_hostname_record_back_refs', None)
    # end get_structured_syslog_hostname_record_back_refs

    def get_service_instance_back_refs(self):
        """Return list of all service-instances using this tag"""
        return getattr(self, 'service_instance_back_refs', None)
    # end get_service_instance_back_refs

    def get_node_profile_back_refs(self):
        """Return list of all node-profiles using this tag"""
        return getattr(self, 'node_profile_back_refs', None)
    # end get_node_profile_back_refs

    def get_bridge_domain_back_refs(self):
        """Return list of all bridge-domains using this tag"""
        return getattr(self, 'bridge_domain_back_refs', None)
    # end get_bridge_domain_back_refs

    def get_alias_ip_back_refs(self):
        """Return list of all alias-ips using this tag"""
        return getattr(self, 'alias_ip_back_refs', None)
    # end get_alias_ip_back_refs

    def get_webui_node_back_refs(self):
        """Return list of all webui-nodes using this tag"""
        return getattr(self, 'webui_node_back_refs', None)
    # end get_webui_node_back_refs

    def get_port_back_refs(self):
        """Return list of all ports using this tag"""
        return getattr(self, 'port_back_refs', None)
    # end get_port_back_refs

    def get_bgp_as_a_service_back_refs(self):
        """Return list of all bgp-as-a-services using this tag"""
        return getattr(self, 'bgp_as_a_service_back_refs', None)
    # end get_bgp_as_a_service_back_refs

    def get_subnet_back_refs(self):
        """Return list of all subnets using this tag"""
        return getattr(self, 'subnet_back_refs', None)
    # end get_subnet_back_refs

    def get_global_system_config_back_refs(self):
        """Return list of all global-system-configs using this tag"""
        return getattr(self, 'global_system_config_back_refs', None)
    # end get_global_system_config_back_refs

    def get_sub_cluster_back_refs(self):
        """Return list of all sub-clusters using this tag"""
        return getattr(self, 'sub_cluster_back_refs', None)
    # end get_sub_cluster_back_refs

    def get_forwarding_class_back_refs(self):
        """Return list of all forwarding-classs using this tag"""
        return getattr(self, 'forwarding_class_back_refs', None)
    # end get_forwarding_class_back_refs

    def get_service_group_back_refs(self):
        """Return list of all service-groups using this tag"""
        return getattr(self, 'service_group_back_refs', None)
    # end get_service_group_back_refs

    def get_global_analytics_config_back_refs(self):
        """Return list of all global-analytics-configs using this tag"""
        return getattr(self, 'global_analytics_config_back_refs', None)
    # end get_global_analytics_config_back_refs

    def get_address_group_back_refs(self):
        """Return list of all address-groups using this tag"""
        return getattr(self, 'address_group_back_refs', None)
    # end get_address_group_back_refs

    def get_application_policy_set_back_refs(self):
        """Return list of all application-policy-sets using this tag"""
        return getattr(self, 'application_policy_set_back_refs', None)
    # end get_application_policy_set_back_refs

    def get_virtual_ip_back_refs(self):
        """Return list of all virtual-ips using this tag"""
        return getattr(self, 'virtual_ip_back_refs', None)
    # end get_virtual_ip_back_refs

    def get_intent_map_back_refs(self):
        """Return list of all intent-maps using this tag"""
        return getattr(self, 'intent_map_back_refs', None)
    # end get_intent_map_back_refs

    def get_port_tuple_back_refs(self):
        """Return list of all port-tuples using this tag"""
        return getattr(self, 'port_tuple_back_refs', None)
    # end get_port_tuple_back_refs

    def get_analytics_alarm_node_back_refs(self):
        """Return list of all analytics-alarm-nodes using this tag"""
        return getattr(self, 'analytics_alarm_node_back_refs', None)
    # end get_analytics_alarm_node_back_refs

    def get_qos_queue_back_refs(self):
        """Return list of all qos-queues using this tag"""
        return getattr(self, 'qos_queue_back_refs', None)
    # end get_qos_queue_back_refs

    def get_physical_role_back_refs(self):
        """Return list of all physical-roles using this tag"""
        return getattr(self, 'physical_role_back_refs', None)
    # end get_physical_role_back_refs

    def get_card_back_refs(self):
        """Return list of all cards using this tag"""
        return getattr(self, 'card_back_refs', None)
    # end get_card_back_refs

    def get_security_logging_object_back_refs(self):
        """Return list of all security-logging-objects using this tag"""
        return getattr(self, 'security_logging_object_back_refs', None)
    # end get_security_logging_object_back_refs

    def get_qos_config_back_refs(self):
        """Return list of all qos-configs using this tag"""
        return getattr(self, 'qos_config_back_refs', None)
    # end get_qos_config_back_refs

    def get_analytics_snmp_node_back_refs(self):
        """Return list of all analytics-snmp-nodes using this tag"""
        return getattr(self, 'analytics_snmp_node_back_refs', None)
    # end get_analytics_snmp_node_back_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this tag"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_cli_config_back_refs(self):
        """Return list of all cli-configs using this tag"""
        return getattr(self, 'cli_config_back_refs', None)
    # end get_cli_config_back_refs

    def get_service_object_back_refs(self):
        """Return list of all service-objects using this tag"""
        return getattr(self, 'service_object_back_refs', None)
    # end get_service_object_back_refs

    def get_feature_flag_back_refs(self):
        """Return list of all feature-flags using this tag"""
        return getattr(self, 'feature_flag_back_refs', None)
    # end get_feature_flag_back_refs

    def get_loadbalancer_back_refs(self):
        """Return list of all loadbalancers using this tag"""
        return getattr(self, 'loadbalancer_back_refs', None)
    # end get_loadbalancer_back_refs

    def get_peering_policy_back_refs(self):
        """Return list of all peering-policys using this tag"""
        return getattr(self, 'peering_policy_back_refs', None)
    # end get_peering_policy_back_refs

    def get_structured_syslog_application_record_back_refs(self):
        """Return list of all structured-syslog-application-records using this tag"""
        return getattr(self, 'structured_syslog_application_record_back_refs', None)
    # end get_structured_syslog_application_record_back_refs

    def get_global_vrouter_config_back_refs(self):
        """Return list of all global-vrouter-configs using this tag"""
        return getattr(self, 'global_vrouter_config_back_refs', None)
    # end get_global_vrouter_config_back_refs

    def get_floating_ip_back_refs(self):
        """Return list of all floating-ips using this tag"""
        return getattr(self, 'floating_ip_back_refs', None)
    # end get_floating_ip_back_refs

    def get_link_aggregation_group_back_refs(self):
        """Return list of all link-aggregation-groups using this tag"""
        return getattr(self, 'link_aggregation_group_back_refs', None)
    # end get_link_aggregation_group_back_refs

    def get_virtual_router_back_refs(self):
        """Return list of all virtual-routers using this tag"""
        return getattr(self, 'virtual_router_back_refs', None)
    # end get_virtual_router_back_refs

    def get_port_profile_back_refs(self):
        """Return list of all port-profiles using this tag"""
        return getattr(self, 'port_profile_back_refs', None)
    # end get_port_profile_back_refs

    def get_policy_management_back_refs(self):
        """Return list of all policy-managements using this tag"""
        return getattr(self, 'policy_management_back_refs', None)
    # end get_policy_management_back_refs

    def get_e2_service_provider_back_refs(self):
        """Return list of all e2-service-providers using this tag"""
        return getattr(self, 'e2_service_provider_back_refs', None)
    # end get_e2_service_provider_back_refs

    def get_fabric_back_refs(self):
        """Return list of all fabrics using this tag"""
        return getattr(self, 'fabric_back_refs', None)
    # end get_fabric_back_refs

    def get_job_template_back_refs(self):
        """Return list of all job-templates using this tag"""
        return getattr(self, 'job_template_back_refs', None)
    # end get_job_template_back_refs

    def get_routing_policy_back_refs(self):
        """Return list of all routing-policys using this tag"""
        return getattr(self, 'routing_policy_back_refs', None)
    # end get_routing_policy_back_refs

    def get_role_config_back_refs(self):
        """Return list of all role-configs using this tag"""
        return getattr(self, 'role_config_back_refs', None)
    # end get_role_config_back_refs

    def get_tag_type_back_refs(self):
        """Return list of all tag-types using this tag"""
        return getattr(self, 'tag_type_back_refs', None)
    # end get_tag_type_back_refs

    def get_structured_syslog_message_back_refs(self):
        """Return list of all structured-syslog-messages using this tag"""
        return getattr(self, 'structured_syslog_message_back_refs', None)
    # end get_structured_syslog_message_back_refs

    def get_loadbalancer_pool_back_refs(self):
        """Return list of all loadbalancer-pools using this tag"""
        return getattr(self, 'loadbalancer_pool_back_refs', None)
    # end get_loadbalancer_pool_back_refs

    def get_device_chassis_back_refs(self):
        """Return list of all device-chassiss using this tag"""
        return getattr(self, 'device_chassis_back_refs', None)
    # end get_device_chassis_back_refs

    def get_global_qos_config_back_refs(self):
        """Return list of all global-qos-configs using this tag"""
        return getattr(self, 'global_qos_config_back_refs', None)
    # end get_global_qos_config_back_refs

    def get_analytics_node_back_refs(self):
        """Return list of all analytics-nodes using this tag"""
        return getattr(self, 'analytics_node_back_refs', None)
    # end get_analytics_node_back_refs

    def get_virtual_DNS_back_refs(self):
        """Return list of all virtual-DNSs using this tag"""
        return getattr(self, 'virtual_DNS_back_refs', None)
    # end get_virtual_DNS_back_refs

    def get_config_database_node_back_refs(self):
        """Return list of all config-database-nodes using this tag"""
        return getattr(self, 'config_database_node_back_refs', None)
    # end get_config_database_node_back_refs

    def get_config_node_back_refs(self):
        """Return list of all config-nodes using this tag"""
        return getattr(self, 'config_node_back_refs', None)
    # end get_config_node_back_refs

    def get_device_functional_group_back_refs(self):
        """Return list of all device-functional-groups using this tag"""
        return getattr(self, 'device_functional_group_back_refs', None)
    # end get_device_functional_group_back_refs

    def get_firewall_rule_back_refs(self):
        """Return list of all firewall-rules using this tag"""
        return getattr(self, 'firewall_rule_back_refs', None)
    # end get_firewall_rule_back_refs

    def get_bgpvpn_back_refs(self):
        """Return list of all bgpvpns using this tag"""
        return getattr(self, 'bgpvpn_back_refs', None)
    # end get_bgpvpn_back_refs

    def get_role_definition_back_refs(self):
        """Return list of all role-definitions using this tag"""
        return getattr(self, 'role_definition_back_refs', None)
    # end get_role_definition_back_refs

    def get_service_connection_module_back_refs(self):
        """Return list of all service-connection-modules using this tag"""
        return getattr(self, 'service_connection_module_back_refs', None)
    # end get_service_connection_module_back_refs

    def get_security_group_back_refs(self):
        """Return list of all security-groups using this tag"""
        return getattr(self, 'security_group_back_refs', None)
    # end get_security_group_back_refs

    def get_database_node_back_refs(self):
        """Return list of all database-nodes using this tag"""
        return getattr(self, 'database_node_back_refs', None)
    # end get_database_node_back_refs

    def get_loadbalancer_healthmonitor_back_refs(self):
        """Return list of all loadbalancer-healthmonitors using this tag"""
        return getattr(self, 'loadbalancer_healthmonitor_back_refs', None)
    # end get_loadbalancer_healthmonitor_back_refs

    def get_devicemgr_node_back_refs(self):
        """Return list of all devicemgr-nodes using this tag"""
        return getattr(self, 'devicemgr_node_back_refs', None)
    # end get_devicemgr_node_back_refs

    def get_project_back_refs(self):
        """Return list of all projects using this tag"""
        return getattr(self, 'project_back_refs', None)
    # end get_project_back_refs

    def get_fabric_namespace_back_refs(self):
        """Return list of all fabric-namespaces using this tag"""
        return getattr(self, 'fabric_namespace_back_refs', None)
    # end get_fabric_namespace_back_refs

    def get_network_ipam_back_refs(self):
        """Return list of all network-ipams using this tag"""
        return getattr(self, 'network_ipam_back_refs', None)
    # end get_network_ipam_back_refs

    def get_network_policy_back_refs(self):
        """Return list of all network-policys using this tag"""
        return getattr(self, 'network_policy_back_refs', None)
    # end get_network_policy_back_refs

    def get_sflow_profile_back_refs(self):
        """Return list of all sflow-profiles using this tag"""
        return getattr(self, 'sflow_profile_back_refs', None)
    # end get_sflow_profile_back_refs

    def get_hardware_back_refs(self):
        """Return list of all hardwares using this tag"""
        return getattr(self, 'hardware_back_refs', None)
    # end get_hardware_back_refs

    def get_tag_back_refs(self):
        """Return list of all tags using this tag"""
        return getattr(self, 'tag_back_refs', None)
    # end get_tag_back_refs

    def get_feature_config_back_refs(self):
        """Return list of all feature-configs using this tag"""
        return getattr(self, 'feature_config_back_refs', None)
    # end get_feature_config_back_refs

    def get_telemetry_profile_back_refs(self):
        """Return list of all telemetry-profiles using this tag"""
        return getattr(self, 'telemetry_profile_back_refs', None)
    # end get_telemetry_profile_back_refs

    def get_bgp_router_back_refs(self):
        """Return list of all bgp-routers using this tag"""
        return getattr(self, 'bgp_router_back_refs', None)
    # end get_bgp_router_back_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this tag"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_virtual_port_group_back_refs(self):
        """Return list of all virtual-port-groups using this tag"""
        return getattr(self, 'virtual_port_group_back_refs', None)
    # end get_virtual_port_group_back_refs

    def get_service_appliance_back_refs(self):
        """Return list of all service-appliances using this tag"""
        return getattr(self, 'service_appliance_back_refs', None)
    # end get_service_appliance_back_refs

    def get_namespace_back_refs(self):
        """Return list of all namespaces using this tag"""
        return getattr(self, 'namespace_back_refs', None)
    # end get_namespace_back_refs

    def get_feature_back_refs(self):
        """Return list of all features using this tag"""
        return getattr(self, 'feature_back_refs', None)
    # end get_feature_back_refs

    def get_storm_control_profile_back_refs(self):
        """Return list of all storm-control-profiles using this tag"""
        return getattr(self, 'storm_control_profile_back_refs', None)
    # end get_storm_control_profile_back_refs

    def get_device_image_back_refs(self):
        """Return list of all device-images using this tag"""
        return getattr(self, 'device_image_back_refs', None)
    # end get_device_image_back_refs

    def get_physical_interface_back_refs(self):
        """Return list of all physical-interfaces using this tag"""
        return getattr(self, 'physical_interface_back_refs', None)
    # end get_physical_interface_back_refs

    def get_access_control_list_back_refs(self):
        """Return list of all access-control-lists using this tag"""
        return getattr(self, 'access_control_list_back_refs', None)
    # end get_access_control_list_back_refs

    def get_node_back_refs(self):
        """Return list of all nodes using this tag"""
        return getattr(self, 'node_back_refs', None)
    # end get_node_back_refs

    def get_customer_attachment_back_refs(self):
        """Return list of all customer-attachments using this tag"""
        return getattr(self, 'customer_attachment_back_refs', None)
    # end get_customer_attachment_back_refs

    def get_structured_syslog_sla_profile_back_refs(self):
        """Return list of all structured-syslog-sla-profiles using this tag"""
        return getattr(self, 'structured_syslog_sla_profile_back_refs', None)
    # end get_structured_syslog_sla_profile_back_refs

    def get_host_based_service_back_refs(self):
        """Return list of all host-based-services using this tag"""
        return getattr(self, 'host_based_service_back_refs', None)
    # end get_host_based_service_back_refs

    def get_virtual_machine_back_refs(self):
        """Return list of all virtual-machines using this tag"""
        return getattr(self, 'virtual_machine_back_refs', None)
    # end get_virtual_machine_back_refs

    def get_interface_route_table_back_refs(self):
        """Return list of all interface-route-tables using this tag"""
        return getattr(self, 'interface_route_table_back_refs', None)
    # end get_interface_route_table_back_refs

    def get_loadbalancer_member_back_refs(self):
        """Return list of all loadbalancer-members using this tag"""
        return getattr(self, 'loadbalancer_member_back_refs', None)
    # end get_loadbalancer_member_back_refs

    def get_service_health_check_back_refs(self):
        """Return list of all service-health-checks using this tag"""
        return getattr(self, 'service_health_check_back_refs', None)
    # end get_service_health_check_back_refs

    def get_alarm_back_refs(self):
        """Return list of all alarms using this tag"""
        return getattr(self, 'alarm_back_refs', None)
    # end get_alarm_back_refs

    def get_api_access_list_back_refs(self):
        """Return list of all api-access-lists using this tag"""
        return getattr(self, 'api_access_list_back_refs', None)
    # end get_api_access_list_back_refs

    def get_routing_instance_back_refs(self):
        """Return list of all routing-instances using this tag"""
        return getattr(self, 'routing_instance_back_refs', None)
    # end get_routing_instance_back_refs

    def get_alias_ip_pool_back_refs(self):
        """Return list of all alias-ip-pools using this tag"""
        return getattr(self, 'alias_ip_pool_back_refs', None)
    # end get_alias_ip_pool_back_refs

    def get_data_center_interconnect_back_refs(self):
        """Return list of all data-center-interconnects using this tag"""
        return getattr(self, 'data_center_interconnect_back_refs', None)
    # end get_data_center_interconnect_back_refs

    def dump(self):
        """Display tag object in compact form."""
        print('------------ tag ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P tag_type_name = ', self.get_tag_type_name())
        print('P tag_value = ', self.get_tag_value())
        print('P tag_predefined = ', self.get_tag_predefined())
        print('P tag_id = ', self.get_tag_id())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag_type = ', self.get_tag_type_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK service_endpoint = ', self.get_service_endpoint_back_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
        print('BCK service_appliance_set = ', self.get_service_appliance_set_back_refs())
        print('BCK route_target = ', self.get_route_target_back_refs())
        print('BCK loadbalancer_listener = ', self.get_loadbalancer_listener_back_refs())
        print('BCK floating_ip_pool = ', self.get_floating_ip_pool_back_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK config_root = ', self.get_config_root_back_refs())
        print('BCK service_template = ', self.get_service_template_back_refs())
        print('BCK hardware_inventory = ', self.get_hardware_inventory_back_refs())
        print('BCK firewall_policy = ', self.get_firewall_policy_back_refs())
        print('BCK route_table = ', self.get_route_table_back_refs())
        print('BCK provider_attachment = ', self.get_provider_attachment_back_refs())
        print('BCK overlay_role = ', self.get_overlay_role_back_refs())
        print('BCK multicast_policy = ', self.get_multicast_policy_back_refs())
        print('BCK network_device_config = ', self.get_network_device_config_back_refs())
        print('BCK virtual_DNS_record = ', self.get_virtual_DNS_record_back_refs())
        print('BCK control_node_zone = ', self.get_control_node_zone_back_refs())
        print('BCK dsa_rule = ', self.get_dsa_rule_back_refs())
        print('BCK structured_syslog_config = ', self.get_structured_syslog_config_back_refs())
        print('BCK discovery_service_assignment = ', self.get_discovery_service_assignment_back_refs())
        print('BCK logical_interface = ', self.get_logical_interface_back_refs())
        print('BCK flow_node = ', self.get_flow_node_back_refs())
        print('BCK port_group = ', self.get_port_group_back_refs())
        print('BCK route_aggregate = ', self.get_route_aggregate_back_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
        print('BCK domain = ', self.get_domain_back_refs())
        print('BCK structured_syslog_hostname_record = ', self.get_structured_syslog_hostname_record_back_refs())
        print('BCK service_instance = ', self.get_service_instance_back_refs())
        print('BCK node_profile = ', self.get_node_profile_back_refs())
        print('BCK bridge_domain = ', self.get_bridge_domain_back_refs())
        print('BCK alias_ip = ', self.get_alias_ip_back_refs())
        print('BCK webui_node = ', self.get_webui_node_back_refs())
        print('BCK port = ', self.get_port_back_refs())
        print('BCK bgp_as_a_service = ', self.get_bgp_as_a_service_back_refs())
        print('BCK subnet = ', self.get_subnet_back_refs())
        print('BCK global_system_config = ', self.get_global_system_config_back_refs())
        print('BCK sub_cluster = ', self.get_sub_cluster_back_refs())
        print('BCK forwarding_class = ', self.get_forwarding_class_back_refs())
        print('BCK service_group = ', self.get_service_group_back_refs())
        print('BCK global_analytics_config = ', self.get_global_analytics_config_back_refs())
        print('BCK address_group = ', self.get_address_group_back_refs())
        print('BCK application_policy_set = ', self.get_application_policy_set_back_refs())
        print('BCK virtual_ip = ', self.get_virtual_ip_back_refs())
        print('BCK intent_map = ', self.get_intent_map_back_refs())
        print('BCK port_tuple = ', self.get_port_tuple_back_refs())
        print('BCK analytics_alarm_node = ', self.get_analytics_alarm_node_back_refs())
        print('BCK qos_queue = ', self.get_qos_queue_back_refs())
        print('BCK physical_role = ', self.get_physical_role_back_refs())
        print('BCK card = ', self.get_card_back_refs())
        print('BCK security_logging_object = ', self.get_security_logging_object_back_refs())
        print('BCK qos_config = ', self.get_qos_config_back_refs())
        print('BCK analytics_snmp_node = ', self.get_analytics_snmp_node_back_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK cli_config = ', self.get_cli_config_back_refs())
        print('BCK service_object = ', self.get_service_object_back_refs())
        print('BCK feature_flag = ', self.get_feature_flag_back_refs())
        print('BCK loadbalancer = ', self.get_loadbalancer_back_refs())
        print('BCK peering_policy = ', self.get_peering_policy_back_refs())
        print('BCK structured_syslog_application_record = ', self.get_structured_syslog_application_record_back_refs())
        print('BCK global_vrouter_config = ', self.get_global_vrouter_config_back_refs())
        print('BCK floating_ip = ', self.get_floating_ip_back_refs())
        print('BCK link_aggregation_group = ', self.get_link_aggregation_group_back_refs())
        print('BCK virtual_router = ', self.get_virtual_router_back_refs())
        print('BCK port_profile = ', self.get_port_profile_back_refs())
        print('BCK policy_management = ', self.get_policy_management_back_refs())
        print('BCK e2_service_provider = ', self.get_e2_service_provider_back_refs())
        print('BCK fabric = ', self.get_fabric_back_refs())
        print('BCK job_template = ', self.get_job_template_back_refs())
        print('BCK routing_policy = ', self.get_routing_policy_back_refs())
        print('BCK role_config = ', self.get_role_config_back_refs())
        print('BCK tag_type = ', self.get_tag_type_back_refs())
        print('BCK structured_syslog_message = ', self.get_structured_syslog_message_back_refs())
        print('BCK loadbalancer_pool = ', self.get_loadbalancer_pool_back_refs())
        print('BCK device_chassis = ', self.get_device_chassis_back_refs())
        print('BCK global_qos_config = ', self.get_global_qos_config_back_refs())
        print('BCK analytics_node = ', self.get_analytics_node_back_refs())
        print('BCK virtual_DNS = ', self.get_virtual_DNS_back_refs())
        print('BCK config_database_node = ', self.get_config_database_node_back_refs())
        print('BCK config_node = ', self.get_config_node_back_refs())
        print('BCK device_functional_group = ', self.get_device_functional_group_back_refs())
        print('BCK firewall_rule = ', self.get_firewall_rule_back_refs())
        print('BCK bgpvpn = ', self.get_bgpvpn_back_refs())
        print('BCK role_definition = ', self.get_role_definition_back_refs())
        print('BCK service_connection_module = ', self.get_service_connection_module_back_refs())
        print('BCK security_group = ', self.get_security_group_back_refs())
        print('BCK database_node = ', self.get_database_node_back_refs())
        print('BCK loadbalancer_healthmonitor = ', self.get_loadbalancer_healthmonitor_back_refs())
        print('BCK devicemgr_node = ', self.get_devicemgr_node_back_refs())
        print('BCK project = ', self.get_project_back_refs())
        print('BCK fabric_namespace = ', self.get_fabric_namespace_back_refs())
        print('BCK network_ipam = ', self.get_network_ipam_back_refs())
        print('BCK network_policy = ', self.get_network_policy_back_refs())
        print('BCK sflow_profile = ', self.get_sflow_profile_back_refs())
        print('BCK hardware = ', self.get_hardware_back_refs())
        print('BCK tag = ', self.get_tag_back_refs())
        print('BCK feature_config = ', self.get_feature_config_back_refs())
        print('BCK telemetry_profile = ', self.get_telemetry_profile_back_refs())
        print('BCK bgp_router = ', self.get_bgp_router_back_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK virtual_port_group = ', self.get_virtual_port_group_back_refs())
        print('BCK service_appliance = ', self.get_service_appliance_back_refs())
        print('BCK namespace = ', self.get_namespace_back_refs())
        print('BCK feature = ', self.get_feature_back_refs())
        print('BCK storm_control_profile = ', self.get_storm_control_profile_back_refs())
        print('BCK device_image = ', self.get_device_image_back_refs())
        print('BCK physical_interface = ', self.get_physical_interface_back_refs())
        print('BCK access_control_list = ', self.get_access_control_list_back_refs())
        print('BCK node = ', self.get_node_back_refs())
        print('BCK customer_attachment = ', self.get_customer_attachment_back_refs())
        print('BCK structured_syslog_sla_profile = ', self.get_structured_syslog_sla_profile_back_refs())
        print('BCK host_based_service = ', self.get_host_based_service_back_refs())
        print('BCK virtual_machine = ', self.get_virtual_machine_back_refs())
        print('BCK interface_route_table = ', self.get_interface_route_table_back_refs())
        print('BCK loadbalancer_member = ', self.get_loadbalancer_member_back_refs())
        print('BCK service_health_check = ', self.get_service_health_check_back_refs())
        print('BCK alarm = ', self.get_alarm_back_refs())
        print('BCK api_access_list = ', self.get_api_access_list_back_refs())
        print('BCK routing_instance = ', self.get_routing_instance_back_refs())
        print('BCK alias_ip_pool = ', self.get_alias_ip_pool_back_refs())
        print('BCK data_center_interconnect = ', self.get_data_center_interconnect_back_refs())
    # end dump

# end class Tag

class FeatureConfig(object):
    """
Vendor specific and/or feature specific configuration parameters editable by the user

    Created By:
        User

    Child of:
        :class:`.RoleDefinition` object

    Properties:
        * feature_config_additional_params
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Additional configuration parameters for the feature.

        * feature_config_vendor_config
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Vendor specific configuration/parameters for the feature.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'feature-config'
    object_type = 'feature_config'

    prop_fields = set([u'feature_config_additional_params', u'feature_config_vendor_config', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'feature_config_additional_params': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Additional configuration parameters for the feature.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'feature_config_vendor_config': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Vendor specific configuration/parameters for the feature.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['role-definition']

    prop_field_metas = {}
    prop_field_metas['feature_config_additional_params'] = 'feature-config-additional-params'
    prop_field_metas['feature_config_vendor_config'] = 'feature-config-vendor-config'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'feature-config-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, feature_config_additional_params=None, feature_config_vendor_config=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'feature-config'
        if not name:
            name = u'default-feature-config'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'role-definition'
            self.fq_name = ['default-global-system-config', 'default-role-definition']
            self.fq_name.append(name)


        # property fields
        if feature_config_additional_params is not None:
            self._feature_config_additional_params = feature_config_additional_params
        if feature_config_vendor_config is not None:
            self._feature_config_vendor_config = feature_config_vendor_config
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (feature-config)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of feature-config in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of feature-config as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of feature-config's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of feature-config's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def feature_config_additional_params(self):
        """Get feature-config-additional-params for feature-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_feature_config_additional_params', None)
    # end feature_config_additional_params

    @feature_config_additional_params.setter
    def feature_config_additional_params(self, feature_config_additional_params):
        """Set feature-config-additional-params for feature-config.
        
        :param feature_config_additional_params: KeyValuePairs object
        
        """
        self._feature_config_additional_params = feature_config_additional_params
    # end feature_config_additional_params

    def set_feature_config_additional_params(self, value):
        self.feature_config_additional_params = value
    # end set_feature_config_additional_params

    def get_feature_config_additional_params(self):
        return self.feature_config_additional_params
    # end get_feature_config_additional_params

    @property
    def feature_config_vendor_config(self):
        """Get feature-config-vendor-config for feature-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_feature_config_vendor_config', None)
    # end feature_config_vendor_config

    @feature_config_vendor_config.setter
    def feature_config_vendor_config(self, feature_config_vendor_config):
        """Set feature-config-vendor-config for feature-config.
        
        :param feature_config_vendor_config: KeyValuePairs object
        
        """
        self._feature_config_vendor_config = feature_config_vendor_config
    # end feature_config_vendor_config

    def set_feature_config_vendor_config(self, value):
        self.feature_config_vendor_config = value
    # end set_feature_config_vendor_config

    def get_feature_config_vendor_config(self):
        return self.feature_config_vendor_config
    # end get_feature_config_vendor_config

    @property
    def id_perms(self):
        """Get id-perms for feature-config.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for feature-config.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for feature-config.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for feature-config.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for feature-config.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for feature-config.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for feature-config.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for feature-config.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_feature_config_additional_params'):
            self._serialize_field_to_json(serialized, field_names, 'feature_config_additional_params')
        if hasattr(self, '_feature_config_vendor_config'):
            self._serialize_field_to_json(serialized, field_names, 'feature_config_vendor_config')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for feature-config.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to feature-config.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for feature-config.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for feature-config.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display feature-config object in compact form."""
        print('------------ feature-config ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P feature_config_additional_params = ', self.get_feature_config_additional_params())
        print('P feature_config_vendor_config = ', self.get_feature_config_vendor_config())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class FeatureConfig

class TelemetryProfile(object):
    """
Encapsulates data related to telemetry from network devices like sflow, JTI, gRPC, SNMP etc

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * telemetry_profile_is_default
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This attribute indicates whether it is a default telemetry profile or not. Default profiles are non-

              editable.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.SflowProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Sflow profile that this telemetry profile uses. Only one sflow profile can be associated to one

              telemetry profile.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PhysicalRouter` objects
    """

    resource_type = 'telemetry-profile'
    object_type = 'telemetry_profile'

    prop_fields = set([u'telemetry_profile_is_default', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['sflow_profile_refs', u'tag_refs'])
    backref_fields = set(['physical_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'telemetry_profile_is_default': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['This attribute indicates whether it is a default telemetry profile or not. Default profiles are non-', 'editable.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['sflow_profile_refs'] = ('sflow-profile', 'None', False, ['Sflow profile that this telemetry profile uses. Only one sflow profile can be associated to one', 'telemetry profile.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['telemetry_profile_is_default'] = 'telemetry-profile-is-default'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['sflow_profile_refs'] = 'telemetry-profile-sflow-profile'
    ref_field_metas['tag_refs'] = 'telemetry-profile-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, telemetry_profile_is_default=False, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'telemetry-profile'
        if not name:
            name = u'default-telemetry-profile'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if telemetry_profile_is_default is not None:
            self._telemetry_profile_is_default = telemetry_profile_is_default
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (telemetry-profile)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of telemetry-profile in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of telemetry-profile as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of telemetry-profile's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of telemetry-profile's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def telemetry_profile_is_default(self):
        """Get telemetry-profile-is-default for telemetry-profile.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_telemetry_profile_is_default', None)
    # end telemetry_profile_is_default

    @telemetry_profile_is_default.setter
    def telemetry_profile_is_default(self, telemetry_profile_is_default):
        """Set telemetry-profile-is-default for telemetry-profile.
        
        :param telemetry_profile_is_default: xsd:boolean object
        
        """
        self._telemetry_profile_is_default = telemetry_profile_is_default
    # end telemetry_profile_is_default

    def set_telemetry_profile_is_default(self, value):
        self.telemetry_profile_is_default = value
    # end set_telemetry_profile_is_default

    def get_telemetry_profile_is_default(self):
        return self.telemetry_profile_is_default
    # end get_telemetry_profile_is_default

    @property
    def id_perms(self):
        """Get id-perms for telemetry-profile.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for telemetry-profile.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for telemetry-profile.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for telemetry-profile.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for telemetry-profile.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for telemetry-profile.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for telemetry-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for telemetry-profile.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_telemetry_profile_is_default'):
            self._serialize_field_to_json(serialized, field_names, 'telemetry_profile_is_default')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'sflow_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'sflow_profile_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_sflow_profile(self, ref_obj):
        """Set sflow-profile for telemetry-profile.
        
        :param ref_obj: SflowProfile object
        
        """
        self.sflow_profile_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.sflow_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_sflow_profile

    def add_sflow_profile(self, ref_obj):
        """Add sflow-profile to telemetry-profile.
        
        :param ref_obj: SflowProfile object
        
        """
        refs = getattr(self, 'sflow_profile_refs', [])
        if not refs:
            self.sflow_profile_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.sflow_profile_refs.append(ref_info)
    # end add_sflow_profile

    def del_sflow_profile(self, ref_obj):
        refs = self.get_sflow_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.sflow_profile_refs.remove(ref)
                return
    # end del_sflow_profile

    def set_sflow_profile_list(self, ref_obj_list):
        """Set sflow-profile list for telemetry-profile.
        
        :param ref_obj_list: list of SflowProfile object
        
        """
        self.sflow_profile_refs = ref_obj_list
    # end set_sflow_profile_list

    def get_sflow_profile_refs(self):
        """Return sflow-profile list for telemetry-profile.
        
        :returns: list of <SflowProfile>
        
        """
        return getattr(self, 'sflow_profile_refs', None)
    # end get_sflow_profile_refs

    def set_tag(self, ref_obj):
        """Set tag for telemetry-profile.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to telemetry-profile.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for telemetry-profile.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for telemetry-profile.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this telemetry-profile"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def dump(self):
        """Display telemetry-profile object in compact form."""
        print('------------ telemetry-profile ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P telemetry_profile_is_default = ', self.get_telemetry_profile_is_default())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF sflow_profile = ', self.get_sflow_profile_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
    # end dump

# end class TelemetryProfile

class BgpRouter(object):
    """
    

    Created By:
        User

    Child of:
        :class:`.RoutingInstance` object

    Properties:
        * bgp_router_parameters
            Type: :class:`.BgpRouterParams`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              BGP router configuration parameters like ip address, AS number, hold time etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.ControlNodeZone` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This bgp-router belongs to the referenced control-node-zone.

        * list of :class:`.SubCluster` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference of bgp-router to sub-cluster .

        * list of (:class:`.BgpRouter` object, :class:`.BgpPeeringAttributes` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              References to peer BGP router, property of the reference has BGP peering attributes.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.GlobalSystemConfig` objects
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.BgpAsAService` objects
        * list of :class:`.BgpRouter` objects
    """

    resource_type = 'bgp-router'
    object_type = 'bgp_router'

    prop_fields = set([u'bgp_router_parameters', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['control_node_zone_refs', 'sub_cluster_refs', 'bgp_router_refs', u'tag_refs'])
    backref_fields = set(['global_system_config_back_refs', 'physical_router_back_refs', 'virtual_machine_interface_back_refs', 'bgp_as_a_service_back_refs', 'bgp_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'bgp_router_parameters': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['BGP router configuration parameters like ip address, AS number, hold time etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'BgpRouterParams', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['control_node_zone_refs'] = ('control-node-zone', 'None', False, ['This bgp-router belongs to the referenced control-node-zone.'])
    ref_field_types['sub_cluster_refs'] = ('sub-cluster', 'None', False, ['Reference of bgp-router to sub-cluster .'])
    ref_field_types['bgp_router_refs'] = ('bgp-router', 'BgpPeeringAttributes', False, ['References to peer BGP router, property of the reference has BGP peering attributes.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['global_system_config_back_refs'] = ('global-system-config', 'None', False)
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['bgp_as_a_service_back_refs'] = ('bgp-as-a-service', 'None', False)
    backref_field_types['bgp_router_back_refs'] = ('bgp-router', 'BgpPeeringAttributes', False)

    children_field_types = {}

    parent_types = ['routing-instance']

    prop_field_metas = {}
    prop_field_metas['bgp_router_parameters'] = 'bgp-router-parameters'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['control_node_zone_refs'] = 'bgp-router-control-node-zone'
    ref_field_metas['sub_cluster_refs'] = 'bgp-router-sub-cluster'
    ref_field_metas['bgp_router_refs'] = 'bgp-peering'
    ref_field_metas['tag_refs'] = 'bgp-router-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, bgp_router_parameters=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'bgp-router'
        if not name:
            name = u'default-bgp-router'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'routing-instance'
            self.fq_name = [u'default-domain', 'default-project', 'default-virtual-network', 'default-routing-instance']
            self.fq_name.append(name)


        # property fields
        if bgp_router_parameters is not None:
            self._bgp_router_parameters = bgp_router_parameters
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (bgp-router)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of bgp-router in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of bgp-router as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of bgp-router's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of bgp-router's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def bgp_router_parameters(self):
        """Get bgp-router-parameters for bgp-router.
        
        :returns: BgpRouterParams object
        
        """
        return getattr(self, '_bgp_router_parameters', None)
    # end bgp_router_parameters

    @bgp_router_parameters.setter
    def bgp_router_parameters(self, bgp_router_parameters):
        """Set bgp-router-parameters for bgp-router.
        
        :param bgp_router_parameters: BgpRouterParams object
        
        """
        self._bgp_router_parameters = bgp_router_parameters
    # end bgp_router_parameters

    def set_bgp_router_parameters(self, value):
        self.bgp_router_parameters = value
    # end set_bgp_router_parameters

    def get_bgp_router_parameters(self):
        return self.bgp_router_parameters
    # end get_bgp_router_parameters

    @property
    def id_perms(self):
        """Get id-perms for bgp-router.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for bgp-router.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for bgp-router.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for bgp-router.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for bgp-router.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for bgp-router.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for bgp-router.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for bgp-router.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_bgp_router_parameters'):
            self._serialize_field_to_json(serialized, field_names, 'bgp_router_parameters')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'control_node_zone_refs'):
            self._serialize_field_to_json(serialized, field_names, 'control_node_zone_refs')
        if hasattr(self, 'sub_cluster_refs'):
            self._serialize_field_to_json(serialized, field_names, 'sub_cluster_refs')
        if hasattr(self, 'bgp_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bgp_router_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_control_node_zone(self, ref_obj):
        """Set control-node-zone for bgp-router.
        
        :param ref_obj: ControlNodeZone object
        
        """
        self.control_node_zone_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.control_node_zone_refs[0]['uuid'] = ref_obj.uuid

    # end set_control_node_zone

    def add_control_node_zone(self, ref_obj):
        """Add control-node-zone to bgp-router.
        
        :param ref_obj: ControlNodeZone object
        
        """
        refs = getattr(self, 'control_node_zone_refs', [])
        if not refs:
            self.control_node_zone_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.control_node_zone_refs.append(ref_info)
    # end add_control_node_zone

    def del_control_node_zone(self, ref_obj):
        refs = self.get_control_node_zone_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.control_node_zone_refs.remove(ref)
                return
    # end del_control_node_zone

    def set_control_node_zone_list(self, ref_obj_list):
        """Set control-node-zone list for bgp-router.
        
        :param ref_obj_list: list of ControlNodeZone object
        
        """
        self.control_node_zone_refs = ref_obj_list
    # end set_control_node_zone_list

    def get_control_node_zone_refs(self):
        """Return control-node-zone list for bgp-router.
        
        :returns: list of <ControlNodeZone>
        
        """
        return getattr(self, 'control_node_zone_refs', None)
    # end get_control_node_zone_refs

    def set_sub_cluster(self, ref_obj):
        """Set sub-cluster for bgp-router.
        
        :param ref_obj: SubCluster object
        
        """
        self.sub_cluster_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.sub_cluster_refs[0]['uuid'] = ref_obj.uuid

    # end set_sub_cluster

    def add_sub_cluster(self, ref_obj):
        """Add sub-cluster to bgp-router.
        
        :param ref_obj: SubCluster object
        
        """
        refs = getattr(self, 'sub_cluster_refs', [])
        if not refs:
            self.sub_cluster_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.sub_cluster_refs.append(ref_info)
    # end add_sub_cluster

    def del_sub_cluster(self, ref_obj):
        refs = self.get_sub_cluster_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.sub_cluster_refs.remove(ref)
                return
    # end del_sub_cluster

    def set_sub_cluster_list(self, ref_obj_list):
        """Set sub-cluster list for bgp-router.
        
        :param ref_obj_list: list of SubCluster object
        
        """
        self.sub_cluster_refs = ref_obj_list
    # end set_sub_cluster_list

    def get_sub_cluster_refs(self):
        """Return sub-cluster list for bgp-router.
        
        :returns: list of <SubCluster>
        
        """
        return getattr(self, 'sub_cluster_refs', None)
    # end get_sub_cluster_refs

    def set_bgp_router(self, ref_obj, ref_data=None):
        """Set bgp-router for bgp-router.
        
        :param ref_obj: BgpRouter object
        :param ref_data: BgpPeeringAttributes object
        
        """
        self.bgp_router_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.bgp_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_bgp_router

    def add_bgp_router(self, ref_obj, ref_data=None):
        """Add bgp-router to bgp-router.
        
        :param ref_obj: BgpRouter object
        :param ref_data: BgpPeeringAttributes object
        
        """
        refs = getattr(self, 'bgp_router_refs', [])
        if not refs:
            self.bgp_router_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bgp_router_refs.append(ref_info)
    # end add_bgp_router

    def del_bgp_router(self, ref_obj):
        refs = self.get_bgp_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bgp_router_refs.remove(ref)
                return
    # end del_bgp_router

    def set_bgp_router_list(self, ref_obj_list, ref_data_list=None):
        """Set bgp-router list for bgp-router.
        
        :param ref_obj_list: list of BgpRouter object
        :param ref_data_list: list of BgpPeeringAttributes object
        
        """
        self.bgp_router_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_bgp_router_list

    def get_bgp_router_refs(self):
        """Return bgp-router list for bgp-router.
        
        :returns: list of tuple <BgpRouter, BgpPeeringAttributes>
        
        """
        return getattr(self, 'bgp_router_refs', None)
    # end get_bgp_router_refs

    def set_tag(self, ref_obj):
        """Set tag for bgp-router.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to bgp-router.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for bgp-router.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for bgp-router.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_global_system_config_back_refs(self):
        """Return list of all global-system-configs using this bgp-router"""
        return getattr(self, 'global_system_config_back_refs', None)
    # end get_global_system_config_back_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this bgp-router"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this bgp-router"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_bgp_as_a_service_back_refs(self):
        """Return list of all bgp-as-a-services using this bgp-router"""
        return getattr(self, 'bgp_as_a_service_back_refs', None)
    # end get_bgp_as_a_service_back_refs

    def get_bgp_router_back_refs(self):
        """Return list of all bgp-routers using this bgp-router"""
        return getattr(self, 'bgp_router_back_refs', None)
    # end get_bgp_router_back_refs

    def dump(self):
        """Display bgp-router object in compact form."""
        print('------------ bgp-router ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P bgp_router_parameters = ', self.get_bgp_router_parameters())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF control_node_zone = ', self.get_control_node_zone_refs())
        print('REF sub_cluster = ', self.get_sub_cluster_refs())
        print('REF bgp_router = ', self.get_bgp_router_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK global_system_config = ', self.get_global_system_config_back_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK bgp_as_a_service = ', self.get_bgp_as_a_service_back_refs())
        print('BCK bgp_router = ', self.get_bgp_router_back_refs())
    # end dump

# end class BgpRouter

class VirtualNetwork(object):
    """
    Virtual network is collection of end points (interface or ip(s) or MAC(s)) that can talk to each
    other by default. It is collection of subnets connected by implicit router which default gateway in
    each subnet.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * ecmp_hashing_include_fields
            Type: :class:`.EcmpHashingIncludeFields`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              ECMP hashing config at global level.

        * virtual_network_category
            Type: str, *one-of* [u'infra', u'tenant', u'internal', u'routed']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This attribute is to differentiate the infrastructure networks from the tenant and routed networks.

              Infra-networks could be in-band network for management and control traffic

        * virtual_network_properties
            Type: :class:`.VirtualNetworkType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Virtual network miscellaneous configurations.

        * virtual_network_routed_properties
            Type: :class:`.VirtualNetworkRoutedPropertiesType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Attributes for routed virtual networks.

        * provider_properties
            Type: :class:`.ProviderDetails`

            Created By: User (optional)

            Operations Allowed: CRD

            Description:

              Virtual network is provider network. Specifies VLAN tag and physical network name.

        * virtual_network_network_id
            Type: int

            Created By: System

            Operations Allowed: CR

            Description:

              System assigned unique 32 bit ID for every virtual network.

        * is_provider_network
            Type: bool

            Created By: User (optional)

            Operations Allowed: R

            Description:

              provider network status of the virtual-network.

        * port_security_enabled
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Port security status on the network

        * fabric_snat
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Provide connectivity to underlay network by port mapping

        * route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that are used as both import and export for this virtual network.

        * import_route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that are used as import for this virtual network.

        * export_route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that are used as export for this virtual network.

        * router_external
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              When true, this virtual network is openstack router external network.

        * is_shared
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              When true, this virtual network is shared with all tenants.

        * external_ipam
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              IP address assignment to VM is done statically, outside of (external to) Contrail Ipam. vCenter only

              feature.

        * flood_unknown_unicast
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              When true, packets with unknown unicast MAC address are flooded within the network. Default they are

              dropped.

        * multi_policy_service_chains_enabled
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Allow multiple service chains within same two networks based on network policy.

              Current limitation is that both networks must reside within cluster, except when right most service

              is NAT.

        * address_allocation_mode
            Type: str, *one-of* [u'user-defined-subnet-preferred', u'user-defined-subnet-only', u'flat-subnet-preferred', u'flat-subnet-only']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Address allocation mode for virtual network.

        * virtual_network_fat_flow_protocols
            Type: :class:`.FatFlowProtocols`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Fat flow configuration which is a list, will be applied to all the interfaces in the specified

              virtual-network

        * mac_learning_enabled
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable MAC learning on the network

        * mac_limit_control
            Type: :class:`.MACLimitControlType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC limit control on the network

        * mac_move_control
            Type: :class:`.MACMoveLimitControlType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC move control on the network

        * mac_aging_time
            Type: int, *within* [0, 86400]

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC aging time on the network

        * pbb_evpn_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable/Disable PBB EVPN tunneling on the network

        * pbb_etree_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable/Disable PBB ETREE mode on the network

        * layer2_control_word
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Enable/Disable adding control word to the Layer 2 encapsulation

        * igmp_enable
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              IGMP mode at Global level.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.AccessControlList` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Virtual network access control list are automatically derived from all the network policies attached

              to virtual network.

        * list of :class:`.FloatingIpPool` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Floating ip pool is set of ip address that are carved out of a given network. Ip(s) from this set

              can be assigned to (virtual machine interface, ip) so that they become members of this network using

              one:one NAT.

        * list of :class:`.AliasIpPool` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Alias ip pool is set of addresses that are carved out of a given network. Ip(s) from this set can be

              assigned to virtual-machine-interface so that they become members of this network

        * list of :class:`.RoutingInstance` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              List of references of routing instances for this virtual network, routing instances are internal to

              the system.

        * list of :class:`.BridgeDomain` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              bridge-domains configured in a virtual network


    References to:
        * list of :class:`.SecurityLoggingObject` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to security logging object for this virtual network.

        * list of :class:`.QosConfig` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to QoS configuration for this virtual network.

        * list of (:class:`.NetworkIpam` object, :class:`.VnSubnetsType` attribute)
            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Reference to network-ipam this network is using. It has list of subnets that are to be used as

              property of the reference.

        * list of (:class:`.NetworkPolicy` object, :class:`.VirtualNetworkPolicyType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to network-policy attached to this network. It has sequence number to specify attachment

              order.

        * list of :class:`.VirtualNetwork` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to a virtual network which is the provider network for the given virtual network. Traffic

              forwarding happens in the routing instance of the provider network.

        * list of :class:`.RouteTable` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to route table attached to this virtual network.

        * list of :class:`.MulticastPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to multicast policy. Each multicast policy has a list of           (S,G) Addresses.

        * list of :class:`.Bgpvpn` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Back reference to virtual network associated to the BGP VPN resource

        * list of :class:`.IntentMap` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              All virtual-network objects that get created in the fabric

        * list of (:class:`.RoutingPolicy` object, :class:`.RoutingPolicyType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of references of routing policy objects. imported by user.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualNetwork` objects
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.InstanceIp` objects
        * list of :class:`.PhysicalRouter` objects
        * list of :class:`.PortTuple` objects
        * list of :class:`.LogicalRouter` objects
        * list of :class:`.FlowNode` objects
        * list of :class:`.FirewallRule` objects
        * list of :class:`.DataCenterInterconnect` objects
        * list of :class:`.Fabric` objects
        * list of :class:`.HostBasedService` objects
    """

    resource_type = 'virtual-network'
    object_type = 'virtual_network'

    prop_fields = set([u'ecmp_hashing_include_fields', u'virtual_network_category', u'virtual_network_properties', u'virtual_network_routed_properties', u'provider_properties', u'virtual_network_network_id', u'is_provider_network', u'port_security_enabled', u'fabric_snat', u'route_target_list', u'import_route_target_list', u'export_route_target_list', u'router_external', u'is_shared', u'external_ipam', u'flood_unknown_unicast', u'multi_policy_service_chains_enabled', u'address_allocation_mode', u'virtual_network_fat_flow_protocols', u'mac_learning_enabled', u'mac_limit_control', u'mac_move_control', u'mac_aging_time', u'pbb_evpn_enable', u'pbb_etree_enable', u'layer2_control_word', u'igmp_enable', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'security_logging_object_refs', 'qos_config_refs', u'network_ipam_refs', 'network_policy_refs', 'virtual_network_refs', u'route_table_refs', u'multicast_policy_refs', 'bgpvpn_refs', u'intent_map_refs', 'routing_policy_refs', u'tag_refs'])
    backref_fields = set(['virtual_network_back_refs', 'virtual_machine_interface_back_refs', u'instance_ip_back_refs', 'physical_router_back_refs', u'port_tuple_back_refs', 'logical_router_back_refs', 'flow_node_back_refs', 'firewall_rule_back_refs', u'data_center_interconnect_back_refs', 'fabric_back_refs', u'host_based_service_back_refs'])
    children_fields = set([u'access_control_lists', u'floating_ip_pools', u'alias_ip_pools', 'routing_instances', 'bridge_domains'])

    prop_field_types = {
        'ecmp_hashing_include_fields': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['ECMP hashing config at global level.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'EcmpHashingIncludeFields', 'restriction_type': None, 'required': 'optional'},
        'virtual_network_category': {'operations': 'CRUD', 'restrictions': [u'infra', u'tenant', u'internal', u'routed'], 'default': 'tenant', 'description': ['This attribute is to differentiate the infrastructure networks from the tenant and routed networks.', 'Infra-networks could be in-band network for management and control traffic'], 'simple_type': u'VirtualNetworkCategory', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'virtual_network_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Virtual network miscellaneous configurations.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VirtualNetworkType', 'restriction_type': None, 'required': 'optional'},
        'virtual_network_routed_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Attributes for routed virtual networks.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'VirtualNetworkRoutedPropertiesType', 'restriction_type': None, 'required': 'optional'},
        'provider_properties': {'operations': 'CRD', 'restrictions': None, 'default': None, 'description': ['Virtual network is provider network. Specifies VLAN tag and physical network name.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ProviderDetails', 'restriction_type': None, 'required': 'optional'},
        'virtual_network_network_id': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['System assigned unique 32 bit ID for every virtual network.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'system-only'},
        'is_provider_network': {'operations': 'R', 'restrictions': None, 'default': False, 'description': ['provider network status of the virtual-network.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'port_security_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': True, 'description': ['Port security status on the network'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'fabric_snat': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Provide connectivity to underlay network by port mapping'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that are used as both import and export for this virtual network.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'import_route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that are used as import for this virtual network.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'export_route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that are used as export for this virtual network.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'router_external': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['When true, this virtual network is openstack router external network.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'is_shared': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['When true, this virtual network is shared with all tenants.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'external_ipam': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['IP address assignment to VM is done statically, outside of (external to) Contrail Ipam. vCenter only', 'feature.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'flood_unknown_unicast': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['When true, packets with unknown unicast MAC address are flooded within the network. Default they are', 'dropped.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'multi_policy_service_chains_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Allow multiple service chains within same two networks based on network policy.', 'Current limitation is that both networks must reside within cluster, except when right most service', 'is NAT.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'address_allocation_mode': {'operations': 'CRUD', 'restrictions': [u'user-defined-subnet-preferred', u'user-defined-subnet-only', u'flat-subnet-preferred', u'flat-subnet-only'], 'default': None, 'description': ['Address allocation mode for virtual network.'], 'simple_type': u'AddressAllocationModeType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'virtual_network_fat_flow_protocols': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Fat flow configuration which is a list, will be applied to all the interfaces in the specified', 'virtual-network'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'FatFlowProtocols', 'restriction_type': None, 'required': 'optional'},
        'mac_learning_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Enable MAC learning on the network'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'mac_limit_control': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC limit control on the network'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MACLimitControlType', 'restriction_type': None, 'required': 'optional'},
        'mac_move_control': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC move control on the network'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MACMoveLimitControlType', 'restriction_type': None, 'required': 'optional'},
        'mac_aging_time': {'operations': 'CRUD', 'restrictions': [0, 86400], 'default': 300, 'description': ['MAC aging time on the network'], 'simple_type': u'MACAgingTime', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'optional'},
        'pbb_evpn_enable': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Enable/Disable PBB EVPN tunneling on the network'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'pbb_etree_enable': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Enable/Disable PBB ETREE mode on the network'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'layer2_control_word': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Enable/Disable adding control word to the Layer 2 encapsulation'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'igmp_enable': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['IGMP mode at Global level.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['security_logging_object_refs'] = ('security-logging-object', 'None', False, ['Reference to security logging object for this virtual network.'])
    ref_field_types['qos_config_refs'] = ('qos-config', 'None', False, ['Reference to QoS configuration for this virtual network.'])
    ref_field_types['network_ipam_refs'] = ('network-ipam', 'VnSubnetsType', False, ['Reference to network-ipam this network is using. It has list of subnets that are to be used as', 'property of the reference.'])
    ref_field_types['network_policy_refs'] = ('network-policy', 'VirtualNetworkPolicyType', False, ['Reference to network-policy attached to this network. It has sequence number to specify attachment', 'order.'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['Reference to a virtual network which is the provider network for the given virtual network. Traffic', 'forwarding happens in the routing instance of the provider network.'])
    ref_field_types['route_table_refs'] = ('route-table', 'None', False, ['Reference to route table attached to this virtual network.'])
    ref_field_types['multicast_policy_refs'] = ('multicast-policy', 'None', False, ['Reference to multicast policy. Each multicast policy has a list of           (S,G) Addresses.'])
    ref_field_types['bgpvpn_refs'] = ('bgpvpn', 'None', False, ['Back reference to virtual network associated to the BGP VPN resource'])
    ref_field_types['intent_map_refs'] = ('intent-map', 'None', False, ['All virtual-network objects that get created in the fabric'])
    ref_field_types['routing_policy_refs'] = ('routing-policy', 'RoutingPolicyType', False, ['List of references of routing policy objects. imported by user.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_network_back_refs'] = ('virtual-network', 'None', False)
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['instance_ip_back_refs'] = ('instance-ip', 'None', False)
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)
    backref_field_types['port_tuple_back_refs'] = ('port-tuple', 'None', False)
    backref_field_types['logical_router_back_refs'] = ('logical-router', 'LogicalRouterVirtualNetworkType', False)
    backref_field_types['flow_node_back_refs'] = ('flow-node', 'None', False)
    backref_field_types['firewall_rule_back_refs'] = ('firewall-rule', 'None', False)
    backref_field_types['data_center_interconnect_back_refs'] = ('data-center-interconnect', 'None', False)
    backref_field_types['fabric_back_refs'] = ('fabric', 'FabricNetworkTag', False)
    backref_field_types['host_based_service_back_refs'] = ('host-based-service', 'ServiceVirtualNetworkType', False)

    children_field_types = {}
    children_field_types['access_control_lists'] = ('access-control-list', True)
    children_field_types['floating_ip_pools'] = ('floating-ip-pool', False)
    children_field_types['alias_ip_pools'] = ('alias-ip-pool', False)
    children_field_types['routing_instances'] = ('routing-instance', True)
    children_field_types['bridge_domains'] = ('bridge-domain', False)

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['ecmp_hashing_include_fields'] = 'ecmp-hashing-include-fields'
    prop_field_metas['virtual_network_category'] = 'virtual-network-category'
    prop_field_metas['virtual_network_properties'] = 'virtual-network-properties'
    prop_field_metas['virtual_network_routed_properties'] = 'virtual-network-routed-properties'
    prop_field_metas['provider_properties'] = 'provider-properties'
    prop_field_metas['virtual_network_network_id'] = 'virtual-network-network-id'
    prop_field_metas['is_provider_network'] = 'is-provider-network'
    prop_field_metas['port_security_enabled'] = 'port-security-enabled'
    prop_field_metas['fabric_snat'] = 'fabric-snat'
    prop_field_metas['route_target_list'] = 'route-target-list'
    prop_field_metas['import_route_target_list'] = 'import-route-target-list'
    prop_field_metas['export_route_target_list'] = 'export-route-target-list'
    prop_field_metas['router_external'] = 'router-external'
    prop_field_metas['is_shared'] = 'is-shared'
    prop_field_metas['external_ipam'] = 'external-ipam'
    prop_field_metas['flood_unknown_unicast'] = 'flood-unknown-unicast'
    prop_field_metas['multi_policy_service_chains_enabled'] = 'multi-policy-service-chains-enabled'
    prop_field_metas['address_allocation_mode'] = 'address-allocation-mode'
    prop_field_metas['virtual_network_fat_flow_protocols'] = 'virtual-network-fat-flow-protocols'
    prop_field_metas['mac_learning_enabled'] = 'mac-learning-enabled'
    prop_field_metas['mac_limit_control'] = 'mac-limit-control'
    prop_field_metas['mac_move_control'] = 'mac-move-control'
    prop_field_metas['mac_aging_time'] = 'mac-aging-time'
    prop_field_metas['pbb_evpn_enable'] = 'pbb-evpn-enable'
    prop_field_metas['pbb_etree_enable'] = 'pbb-etree-enable'
    prop_field_metas['layer2_control_word'] = 'layer2-control-word'
    prop_field_metas['igmp_enable'] = 'igmp-enable'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['security_logging_object_refs'] = 'virtual-network-security-logging-object'
    ref_field_metas['qos_config_refs'] = 'virtual-network-qos-config'
    ref_field_metas['network_ipam_refs'] = 'virtual-network-network-ipam'
    ref_field_metas['network_policy_refs'] = 'virtual-network-network-policy'
    ref_field_metas['virtual_network_refs'] = 'virtual-network-provider-network'
    ref_field_metas['route_table_refs'] = 'virtual-network-route-table'
    ref_field_metas['multicast_policy_refs'] = 'virtual-network-multicast-policy'
    ref_field_metas['bgpvpn_refs'] = 'bgpvpn-network'
    ref_field_metas['intent_map_refs'] = 'virtual-network-intent-map'
    ref_field_metas['routing_policy_refs'] = 'virtual-network-routing-policy'
    ref_field_metas['tag_refs'] = 'virtual-network-tag'

    children_field_metas = {}
    children_field_metas['access_control_lists'] = 'virtual-network-access-control-list'
    children_field_metas['floating_ip_pools'] = 'virtual-network-floating-ip-pool'
    children_field_metas['alias_ip_pools'] = 'virtual-network-alias-ip-pool'
    children_field_metas['routing_instances'] = 'virtual-network-routing-instance'
    children_field_metas['bridge_domains'] = 'virtual-network-bridge-domain'

    prop_list_fields = set([u'virtual_network_fat_flow_protocols'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['virtual_network_fat_flow_protocols'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, ecmp_hashing_include_fields=None, virtual_network_category='tenant', virtual_network_properties=None, virtual_network_routed_properties=None, provider_properties=None, virtual_network_network_id=None, is_provider_network=False, port_security_enabled=True, fabric_snat=False, route_target_list=None, import_route_target_list=None, export_route_target_list=None, router_external=None, is_shared=None, external_ipam=None, flood_unknown_unicast=False, multi_policy_service_chains_enabled=None, address_allocation_mode=None, virtual_network_fat_flow_protocols=None, mac_learning_enabled=False, mac_limit_control=None, mac_move_control=None, mac_aging_time=300, pbb_evpn_enable=False, pbb_etree_enable=False, layer2_control_word=False, igmp_enable=False, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-network'
        if not name:
            name = u'default-virtual-network'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if ecmp_hashing_include_fields is not None:
            self._ecmp_hashing_include_fields = ecmp_hashing_include_fields
        if virtual_network_category is not None:
            self._virtual_network_category = virtual_network_category
        if virtual_network_properties is not None:
            self._virtual_network_properties = virtual_network_properties
        if virtual_network_routed_properties is not None:
            self._virtual_network_routed_properties = virtual_network_routed_properties
        if provider_properties is not None:
            self._provider_properties = provider_properties
        if virtual_network_network_id is not None:
            self._virtual_network_network_id = virtual_network_network_id
        if is_provider_network is not None:
            self._is_provider_network = is_provider_network
        if port_security_enabled is not None:
            self._port_security_enabled = port_security_enabled
        if fabric_snat is not None:
            self._fabric_snat = fabric_snat
        if route_target_list is not None:
            self._route_target_list = route_target_list
        if import_route_target_list is not None:
            self._import_route_target_list = import_route_target_list
        if export_route_target_list is not None:
            self._export_route_target_list = export_route_target_list
        if router_external is not None:
            self._router_external = router_external
        if is_shared is not None:
            self._is_shared = is_shared
        if external_ipam is not None:
            self._external_ipam = external_ipam
        if flood_unknown_unicast is not None:
            self._flood_unknown_unicast = flood_unknown_unicast
        if multi_policy_service_chains_enabled is not None:
            self._multi_policy_service_chains_enabled = multi_policy_service_chains_enabled
        if address_allocation_mode is not None:
            self._address_allocation_mode = address_allocation_mode
        if virtual_network_fat_flow_protocols is not None:
            self._virtual_network_fat_flow_protocols = virtual_network_fat_flow_protocols
        if mac_learning_enabled is not None:
            self._mac_learning_enabled = mac_learning_enabled
        if mac_limit_control is not None:
            self._mac_limit_control = mac_limit_control
        if mac_move_control is not None:
            self._mac_move_control = mac_move_control
        if mac_aging_time is not None:
            self._mac_aging_time = mac_aging_time
        if pbb_evpn_enable is not None:
            self._pbb_evpn_enable = pbb_evpn_enable
        if pbb_etree_enable is not None:
            self._pbb_etree_enable = pbb_etree_enable
        if layer2_control_word is not None:
            self._layer2_control_word = layer2_control_word
        if igmp_enable is not None:
            self._igmp_enable = igmp_enable
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-network)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-network in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-network as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of virtual-network's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of virtual-network's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def ecmp_hashing_include_fields(self):
        """Get ecmp-hashing-include-fields for virtual-network.
        
        :returns: EcmpHashingIncludeFields object
        
        """
        return getattr(self, '_ecmp_hashing_include_fields', None)
    # end ecmp_hashing_include_fields

    @ecmp_hashing_include_fields.setter
    def ecmp_hashing_include_fields(self, ecmp_hashing_include_fields):
        """Set ecmp-hashing-include-fields for virtual-network.
        
        :param ecmp_hashing_include_fields: EcmpHashingIncludeFields object
        
        """
        self._ecmp_hashing_include_fields = ecmp_hashing_include_fields
    # end ecmp_hashing_include_fields

    def set_ecmp_hashing_include_fields(self, value):
        self.ecmp_hashing_include_fields = value
    # end set_ecmp_hashing_include_fields

    def get_ecmp_hashing_include_fields(self):
        return self.ecmp_hashing_include_fields
    # end get_ecmp_hashing_include_fields

    @property
    def virtual_network_category(self):
        """Get virtual-network-category for virtual-network.
        
        :returns: VirtualNetworkCategory object
        
        """
        return getattr(self, '_virtual_network_category', None)
    # end virtual_network_category

    @virtual_network_category.setter
    def virtual_network_category(self, virtual_network_category):
        """Set virtual-network-category for virtual-network.
        
        :param virtual_network_category: VirtualNetworkCategory object
        
        """
        self._virtual_network_category = virtual_network_category
    # end virtual_network_category

    def set_virtual_network_category(self, value):
        self.virtual_network_category = value
    # end set_virtual_network_category

    def get_virtual_network_category(self):
        return self.virtual_network_category
    # end get_virtual_network_category

    @property
    def virtual_network_properties(self):
        """Get virtual-network-properties for virtual-network.
        
        :returns: VirtualNetworkType object
        
        """
        return getattr(self, '_virtual_network_properties', None)
    # end virtual_network_properties

    @virtual_network_properties.setter
    def virtual_network_properties(self, virtual_network_properties):
        """Set virtual-network-properties for virtual-network.
        
        :param virtual_network_properties: VirtualNetworkType object
        
        """
        self._virtual_network_properties = virtual_network_properties
    # end virtual_network_properties

    def set_virtual_network_properties(self, value):
        self.virtual_network_properties = value
    # end set_virtual_network_properties

    def get_virtual_network_properties(self):
        return self.virtual_network_properties
    # end get_virtual_network_properties

    @property
    def virtual_network_routed_properties(self):
        """Get virtual-network-routed-properties for virtual-network.
        
        :returns: VirtualNetworkRoutedPropertiesType object
        
        """
        return getattr(self, '_virtual_network_routed_properties', None)
    # end virtual_network_routed_properties

    @virtual_network_routed_properties.setter
    def virtual_network_routed_properties(self, virtual_network_routed_properties):
        """Set virtual-network-routed-properties for virtual-network.
        
        :param virtual_network_routed_properties: VirtualNetworkRoutedPropertiesType object
        
        """
        self._virtual_network_routed_properties = virtual_network_routed_properties
    # end virtual_network_routed_properties

    def set_virtual_network_routed_properties(self, value):
        self.virtual_network_routed_properties = value
    # end set_virtual_network_routed_properties

    def get_virtual_network_routed_properties(self):
        return self.virtual_network_routed_properties
    # end get_virtual_network_routed_properties

    @property
    def provider_properties(self):
        """Get provider-properties for virtual-network.
        
        :returns: ProviderDetails object
        
        """
        return getattr(self, '_provider_properties', None)
    # end provider_properties

    @provider_properties.setter
    def provider_properties(self, provider_properties):
        """Set provider-properties for virtual-network.
        
        :param provider_properties: ProviderDetails object
        
        """
        self._provider_properties = provider_properties
    # end provider_properties

    def set_provider_properties(self, value):
        self.provider_properties = value
    # end set_provider_properties

    def get_provider_properties(self):
        return self.provider_properties
    # end get_provider_properties

    @property
    def virtual_network_network_id(self):
        """Get virtual-network-network-id for virtual-network.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_virtual_network_network_id', None)
    # end virtual_network_network_id

    @virtual_network_network_id.setter
    def virtual_network_network_id(self, virtual_network_network_id):
        """Set virtual-network-network-id for virtual-network.
        
        :param virtual_network_network_id: xsd:integer object
        
        """
        self._virtual_network_network_id = virtual_network_network_id
    # end virtual_network_network_id

    def set_virtual_network_network_id(self, value):
        self.virtual_network_network_id = value
    # end set_virtual_network_network_id

    def get_virtual_network_network_id(self):
        return self.virtual_network_network_id
    # end get_virtual_network_network_id

    @property
    def is_provider_network(self):
        """Get is-provider-network for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_is_provider_network', None)
    # end is_provider_network

    @is_provider_network.setter
    def is_provider_network(self, is_provider_network):
        """Set is-provider-network for virtual-network.
        
        :param is_provider_network: xsd:boolean object
        
        """
        self._is_provider_network = is_provider_network
    # end is_provider_network

    def set_is_provider_network(self, value):
        self.is_provider_network = value
    # end set_is_provider_network

    def get_is_provider_network(self):
        return self.is_provider_network
    # end get_is_provider_network

    @property
    def port_security_enabled(self):
        """Get port-security-enabled for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_port_security_enabled', None)
    # end port_security_enabled

    @port_security_enabled.setter
    def port_security_enabled(self, port_security_enabled):
        """Set port-security-enabled for virtual-network.
        
        :param port_security_enabled: xsd:boolean object
        
        """
        self._port_security_enabled = port_security_enabled
    # end port_security_enabled

    def set_port_security_enabled(self, value):
        self.port_security_enabled = value
    # end set_port_security_enabled

    def get_port_security_enabled(self):
        return self.port_security_enabled
    # end get_port_security_enabled

    @property
    def fabric_snat(self):
        """Get fabric-snat for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_fabric_snat', None)
    # end fabric_snat

    @fabric_snat.setter
    def fabric_snat(self, fabric_snat):
        """Set fabric-snat for virtual-network.
        
        :param fabric_snat: xsd:boolean object
        
        """
        self._fabric_snat = fabric_snat
    # end fabric_snat

    def set_fabric_snat(self, value):
        self.fabric_snat = value
    # end set_fabric_snat

    def get_fabric_snat(self):
        return self.fabric_snat
    # end get_fabric_snat

    @property
    def route_target_list(self):
        """Get route-target-list for virtual-network.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_route_target_list', None)
    # end route_target_list

    @route_target_list.setter
    def route_target_list(self, route_target_list):
        """Set route-target-list for virtual-network.
        
        :param route_target_list: RouteTargetList object
        
        """
        self._route_target_list = route_target_list
    # end route_target_list

    def set_route_target_list(self, value):
        self.route_target_list = value
    # end set_route_target_list

    def get_route_target_list(self):
        return self.route_target_list
    # end get_route_target_list

    @property
    def import_route_target_list(self):
        """Get import-route-target-list for virtual-network.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_import_route_target_list', None)
    # end import_route_target_list

    @import_route_target_list.setter
    def import_route_target_list(self, import_route_target_list):
        """Set import-route-target-list for virtual-network.
        
        :param import_route_target_list: RouteTargetList object
        
        """
        self._import_route_target_list = import_route_target_list
    # end import_route_target_list

    def set_import_route_target_list(self, value):
        self.import_route_target_list = value
    # end set_import_route_target_list

    def get_import_route_target_list(self):
        return self.import_route_target_list
    # end get_import_route_target_list

    @property
    def export_route_target_list(self):
        """Get export-route-target-list for virtual-network.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_export_route_target_list', None)
    # end export_route_target_list

    @export_route_target_list.setter
    def export_route_target_list(self, export_route_target_list):
        """Set export-route-target-list for virtual-network.
        
        :param export_route_target_list: RouteTargetList object
        
        """
        self._export_route_target_list = export_route_target_list
    # end export_route_target_list

    def set_export_route_target_list(self, value):
        self.export_route_target_list = value
    # end set_export_route_target_list

    def get_export_route_target_list(self):
        return self.export_route_target_list
    # end get_export_route_target_list

    @property
    def router_external(self):
        """Get router-external for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_router_external', None)
    # end router_external

    @router_external.setter
    def router_external(self, router_external):
        """Set router-external for virtual-network.
        
        :param router_external: xsd:boolean object
        
        """
        self._router_external = router_external
    # end router_external

    def set_router_external(self, value):
        self.router_external = value
    # end set_router_external

    def get_router_external(self):
        return self.router_external
    # end get_router_external

    @property
    def is_shared(self):
        """Get is-shared for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_is_shared', None)
    # end is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Set is-shared for virtual-network.
        
        :param is_shared: xsd:boolean object
        
        """
        self._is_shared = is_shared
    # end is_shared

    def set_is_shared(self, value):
        self.is_shared = value
    # end set_is_shared

    def get_is_shared(self):
        return self.is_shared
    # end get_is_shared

    @property
    def external_ipam(self):
        """Get external-ipam for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_external_ipam', None)
    # end external_ipam

    @external_ipam.setter
    def external_ipam(self, external_ipam):
        """Set external-ipam for virtual-network.
        
        :param external_ipam: xsd:boolean object
        
        """
        self._external_ipam = external_ipam
    # end external_ipam

    def set_external_ipam(self, value):
        self.external_ipam = value
    # end set_external_ipam

    def get_external_ipam(self):
        return self.external_ipam
    # end get_external_ipam

    @property
    def flood_unknown_unicast(self):
        """Get flood-unknown-unicast for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_flood_unknown_unicast', None)
    # end flood_unknown_unicast

    @flood_unknown_unicast.setter
    def flood_unknown_unicast(self, flood_unknown_unicast):
        """Set flood-unknown-unicast for virtual-network.
        
        :param flood_unknown_unicast: xsd:boolean object
        
        """
        self._flood_unknown_unicast = flood_unknown_unicast
    # end flood_unknown_unicast

    def set_flood_unknown_unicast(self, value):
        self.flood_unknown_unicast = value
    # end set_flood_unknown_unicast

    def get_flood_unknown_unicast(self):
        return self.flood_unknown_unicast
    # end get_flood_unknown_unicast

    @property
    def multi_policy_service_chains_enabled(self):
        """Get multi-policy-service-chains-enabled for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_multi_policy_service_chains_enabled', None)
    # end multi_policy_service_chains_enabled

    @multi_policy_service_chains_enabled.setter
    def multi_policy_service_chains_enabled(self, multi_policy_service_chains_enabled):
        """Set multi-policy-service-chains-enabled for virtual-network.
        
        :param multi_policy_service_chains_enabled: xsd:boolean object
        
        """
        self._multi_policy_service_chains_enabled = multi_policy_service_chains_enabled
    # end multi_policy_service_chains_enabled

    def set_multi_policy_service_chains_enabled(self, value):
        self.multi_policy_service_chains_enabled = value
    # end set_multi_policy_service_chains_enabled

    def get_multi_policy_service_chains_enabled(self):
        return self.multi_policy_service_chains_enabled
    # end get_multi_policy_service_chains_enabled

    @property
    def address_allocation_mode(self):
        """Get address-allocation-mode for virtual-network.
        
        :returns: AddressAllocationModeType object
        
        """
        return getattr(self, '_address_allocation_mode', None)
    # end address_allocation_mode

    @address_allocation_mode.setter
    def address_allocation_mode(self, address_allocation_mode):
        """Set address-allocation-mode for virtual-network.
        
        :param address_allocation_mode: AddressAllocationModeType object
        
        """
        self._address_allocation_mode = address_allocation_mode
    # end address_allocation_mode

    def set_address_allocation_mode(self, value):
        self.address_allocation_mode = value
    # end set_address_allocation_mode

    def get_address_allocation_mode(self):
        return self.address_allocation_mode
    # end get_address_allocation_mode

    @property
    def virtual_network_fat_flow_protocols(self):
        """Get virtual-network-fat-flow-protocols for virtual-network.
        
        :returns: FatFlowProtocols object
        
        """
        return getattr(self, '_virtual_network_fat_flow_protocols', None)
    # end virtual_network_fat_flow_protocols

    @virtual_network_fat_flow_protocols.setter
    def virtual_network_fat_flow_protocols(self, virtual_network_fat_flow_protocols):
        """Set virtual-network-fat-flow-protocols for virtual-network.
        
        :param virtual_network_fat_flow_protocols: FatFlowProtocols object
        
        """
        self._virtual_network_fat_flow_protocols = virtual_network_fat_flow_protocols
    # end virtual_network_fat_flow_protocols

    def set_virtual_network_fat_flow_protocols(self, value):
        self.virtual_network_fat_flow_protocols = value
    # end set_virtual_network_fat_flow_protocols

    def get_virtual_network_fat_flow_protocols(self):
        return self.virtual_network_fat_flow_protocols
    # end get_virtual_network_fat_flow_protocols

    @property
    def mac_learning_enabled(self):
        """Get mac-learning-enabled for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_mac_learning_enabled', None)
    # end mac_learning_enabled

    @mac_learning_enabled.setter
    def mac_learning_enabled(self, mac_learning_enabled):
        """Set mac-learning-enabled for virtual-network.
        
        :param mac_learning_enabled: xsd:boolean object
        
        """
        self._mac_learning_enabled = mac_learning_enabled
    # end mac_learning_enabled

    def set_mac_learning_enabled(self, value):
        self.mac_learning_enabled = value
    # end set_mac_learning_enabled

    def get_mac_learning_enabled(self):
        return self.mac_learning_enabled
    # end get_mac_learning_enabled

    @property
    def mac_limit_control(self):
        """Get mac-limit-control for virtual-network.
        
        :returns: MACLimitControlType object
        
        """
        return getattr(self, '_mac_limit_control', None)
    # end mac_limit_control

    @mac_limit_control.setter
    def mac_limit_control(self, mac_limit_control):
        """Set mac-limit-control for virtual-network.
        
        :param mac_limit_control: MACLimitControlType object
        
        """
        self._mac_limit_control = mac_limit_control
    # end mac_limit_control

    def set_mac_limit_control(self, value):
        self.mac_limit_control = value
    # end set_mac_limit_control

    def get_mac_limit_control(self):
        return self.mac_limit_control
    # end get_mac_limit_control

    @property
    def mac_move_control(self):
        """Get mac-move-control for virtual-network.
        
        :returns: MACMoveLimitControlType object
        
        """
        return getattr(self, '_mac_move_control', None)
    # end mac_move_control

    @mac_move_control.setter
    def mac_move_control(self, mac_move_control):
        """Set mac-move-control for virtual-network.
        
        :param mac_move_control: MACMoveLimitControlType object
        
        """
        self._mac_move_control = mac_move_control
    # end mac_move_control

    def set_mac_move_control(self, value):
        self.mac_move_control = value
    # end set_mac_move_control

    def get_mac_move_control(self):
        return self.mac_move_control
    # end get_mac_move_control

    @property
    def mac_aging_time(self):
        """Get mac-aging-time for virtual-network.
        
        :returns: MACAgingTime object
        
        """
        return getattr(self, '_mac_aging_time', None)
    # end mac_aging_time

    @mac_aging_time.setter
    def mac_aging_time(self, mac_aging_time):
        """Set mac-aging-time for virtual-network.
        
        :param mac_aging_time: MACAgingTime object
        
        """
        self._mac_aging_time = mac_aging_time
    # end mac_aging_time

    def set_mac_aging_time(self, value):
        self.mac_aging_time = value
    # end set_mac_aging_time

    def get_mac_aging_time(self):
        return self.mac_aging_time
    # end get_mac_aging_time

    @property
    def pbb_evpn_enable(self):
        """Get pbb-evpn-enable for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_pbb_evpn_enable', None)
    # end pbb_evpn_enable

    @pbb_evpn_enable.setter
    def pbb_evpn_enable(self, pbb_evpn_enable):
        """Set pbb-evpn-enable for virtual-network.
        
        :param pbb_evpn_enable: xsd:boolean object
        
        """
        self._pbb_evpn_enable = pbb_evpn_enable
    # end pbb_evpn_enable

    def set_pbb_evpn_enable(self, value):
        self.pbb_evpn_enable = value
    # end set_pbb_evpn_enable

    def get_pbb_evpn_enable(self):
        return self.pbb_evpn_enable
    # end get_pbb_evpn_enable

    @property
    def pbb_etree_enable(self):
        """Get pbb-etree-enable for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_pbb_etree_enable', None)
    # end pbb_etree_enable

    @pbb_etree_enable.setter
    def pbb_etree_enable(self, pbb_etree_enable):
        """Set pbb-etree-enable for virtual-network.
        
        :param pbb_etree_enable: xsd:boolean object
        
        """
        self._pbb_etree_enable = pbb_etree_enable
    # end pbb_etree_enable

    def set_pbb_etree_enable(self, value):
        self.pbb_etree_enable = value
    # end set_pbb_etree_enable

    def get_pbb_etree_enable(self):
        return self.pbb_etree_enable
    # end get_pbb_etree_enable

    @property
    def layer2_control_word(self):
        """Get layer2-control-word for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_layer2_control_word', None)
    # end layer2_control_word

    @layer2_control_word.setter
    def layer2_control_word(self, layer2_control_word):
        """Set layer2-control-word for virtual-network.
        
        :param layer2_control_word: xsd:boolean object
        
        """
        self._layer2_control_word = layer2_control_word
    # end layer2_control_word

    def set_layer2_control_word(self, value):
        self.layer2_control_word = value
    # end set_layer2_control_word

    def get_layer2_control_word(self):
        return self.layer2_control_word
    # end get_layer2_control_word

    @property
    def igmp_enable(self):
        """Get igmp-enable for virtual-network.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_igmp_enable', None)
    # end igmp_enable

    @igmp_enable.setter
    def igmp_enable(self, igmp_enable):
        """Set igmp-enable for virtual-network.
        
        :param igmp_enable: xsd:boolean object
        
        """
        self._igmp_enable = igmp_enable
    # end igmp_enable

    def set_igmp_enable(self, value):
        self.igmp_enable = value
    # end set_igmp_enable

    def get_igmp_enable(self):
        return self.igmp_enable
    # end get_igmp_enable

    @property
    def id_perms(self):
        """Get id-perms for virtual-network.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-network.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-network.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-network.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-network.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-network.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-network.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-network.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_ecmp_hashing_include_fields'):
            self._serialize_field_to_json(serialized, field_names, 'ecmp_hashing_include_fields')
        if hasattr(self, '_virtual_network_category'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_category')
        if hasattr(self, '_virtual_network_properties'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_properties')
        if hasattr(self, '_virtual_network_routed_properties'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_routed_properties')
        if hasattr(self, '_provider_properties'):
            self._serialize_field_to_json(serialized, field_names, 'provider_properties')
        if hasattr(self, '_virtual_network_network_id'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_network_id')
        if hasattr(self, '_is_provider_network'):
            self._serialize_field_to_json(serialized, field_names, 'is_provider_network')
        if hasattr(self, '_port_security_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'port_security_enabled')
        if hasattr(self, '_fabric_snat'):
            self._serialize_field_to_json(serialized, field_names, 'fabric_snat')
        if hasattr(self, '_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'route_target_list')
        if hasattr(self, '_import_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'import_route_target_list')
        if hasattr(self, '_export_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'export_route_target_list')
        if hasattr(self, '_router_external'):
            self._serialize_field_to_json(serialized, field_names, 'router_external')
        if hasattr(self, '_is_shared'):
            self._serialize_field_to_json(serialized, field_names, 'is_shared')
        if hasattr(self, '_external_ipam'):
            self._serialize_field_to_json(serialized, field_names, 'external_ipam')
        if hasattr(self, '_flood_unknown_unicast'):
            self._serialize_field_to_json(serialized, field_names, 'flood_unknown_unicast')
        if hasattr(self, '_multi_policy_service_chains_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'multi_policy_service_chains_enabled')
        if hasattr(self, '_address_allocation_mode'):
            self._serialize_field_to_json(serialized, field_names, 'address_allocation_mode')
        if hasattr(self, '_virtual_network_fat_flow_protocols'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_fat_flow_protocols')
        if hasattr(self, '_mac_learning_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'mac_learning_enabled')
        if hasattr(self, '_mac_limit_control'):
            self._serialize_field_to_json(serialized, field_names, 'mac_limit_control')
        if hasattr(self, '_mac_move_control'):
            self._serialize_field_to_json(serialized, field_names, 'mac_move_control')
        if hasattr(self, '_mac_aging_time'):
            self._serialize_field_to_json(serialized, field_names, 'mac_aging_time')
        if hasattr(self, '_pbb_evpn_enable'):
            self._serialize_field_to_json(serialized, field_names, 'pbb_evpn_enable')
        if hasattr(self, '_pbb_etree_enable'):
            self._serialize_field_to_json(serialized, field_names, 'pbb_etree_enable')
        if hasattr(self, '_layer2_control_word'):
            self._serialize_field_to_json(serialized, field_names, 'layer2_control_word')
        if hasattr(self, '_igmp_enable'):
            self._serialize_field_to_json(serialized, field_names, 'igmp_enable')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'security_logging_object_refs'):
            self._serialize_field_to_json(serialized, field_names, 'security_logging_object_refs')
        if hasattr(self, 'qos_config_refs'):
            self._serialize_field_to_json(serialized, field_names, 'qos_config_refs')
        if hasattr(self, 'network_ipam_refs'):
            self._serialize_field_to_json(serialized, field_names, 'network_ipam_refs')
        if hasattr(self, 'network_policy_refs'):
            self._serialize_field_to_json(serialized, field_names, 'network_policy_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'route_table_refs'):
            self._serialize_field_to_json(serialized, field_names, 'route_table_refs')
        if hasattr(self, 'multicast_policy_refs'):
            self._serialize_field_to_json(serialized, field_names, 'multicast_policy_refs')
        if hasattr(self, 'bgpvpn_refs'):
            self._serialize_field_to_json(serialized, field_names, 'bgpvpn_refs')
        if hasattr(self, 'intent_map_refs'):
            self._serialize_field_to_json(serialized, field_names, 'intent_map_refs')
        if hasattr(self, 'routing_policy_refs'):
            self._serialize_field_to_json(serialized, field_names, 'routing_policy_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_access_control_lists(self):
        return getattr(self, 'access_control_lists', None)
    # end get_access_control_lists

    def get_floating_ip_pools(self):
        return getattr(self, 'floating_ip_pools', None)
    # end get_floating_ip_pools

    def get_alias_ip_pools(self):
        return getattr(self, 'alias_ip_pools', None)
    # end get_alias_ip_pools

    def get_routing_instances(self):
        return getattr(self, 'routing_instances', None)
    # end get_routing_instances

    def get_bridge_domains(self):
        return getattr(self, 'bridge_domains', None)
    # end get_bridge_domains

    def set_security_logging_object(self, ref_obj):
        """Set security-logging-object for virtual-network.
        
        :param ref_obj: SecurityLoggingObject object
        
        """
        self.security_logging_object_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.security_logging_object_refs[0]['uuid'] = ref_obj.uuid

    # end set_security_logging_object

    def add_security_logging_object(self, ref_obj):
        """Add security-logging-object to virtual-network.
        
        :param ref_obj: SecurityLoggingObject object
        
        """
        refs = getattr(self, 'security_logging_object_refs', [])
        if not refs:
            self.security_logging_object_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.security_logging_object_refs.append(ref_info)
    # end add_security_logging_object

    def del_security_logging_object(self, ref_obj):
        refs = self.get_security_logging_object_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.security_logging_object_refs.remove(ref)
                return
    # end del_security_logging_object

    def set_security_logging_object_list(self, ref_obj_list):
        """Set security-logging-object list for virtual-network.
        
        :param ref_obj_list: list of SecurityLoggingObject object
        
        """
        self.security_logging_object_refs = ref_obj_list
    # end set_security_logging_object_list

    def get_security_logging_object_refs(self):
        """Return security-logging-object list for virtual-network.
        
        :returns: list of <SecurityLoggingObject>
        
        """
        return getattr(self, 'security_logging_object_refs', None)
    # end get_security_logging_object_refs

    def set_qos_config(self, ref_obj):
        """Set qos-config for virtual-network.
        
        :param ref_obj: QosConfig object
        
        """
        self.qos_config_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.qos_config_refs[0]['uuid'] = ref_obj.uuid

    # end set_qos_config

    def add_qos_config(self, ref_obj):
        """Add qos-config to virtual-network.
        
        :param ref_obj: QosConfig object
        
        """
        refs = getattr(self, 'qos_config_refs', [])
        if not refs:
            self.qos_config_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.qos_config_refs.append(ref_info)
    # end add_qos_config

    def del_qos_config(self, ref_obj):
        refs = self.get_qos_config_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.qos_config_refs.remove(ref)
                return
    # end del_qos_config

    def set_qos_config_list(self, ref_obj_list):
        """Set qos-config list for virtual-network.
        
        :param ref_obj_list: list of QosConfig object
        
        """
        self.qos_config_refs = ref_obj_list
    # end set_qos_config_list

    def get_qos_config_refs(self):
        """Return qos-config list for virtual-network.
        
        :returns: list of <QosConfig>
        
        """
        return getattr(self, 'qos_config_refs', None)
    # end get_qos_config_refs

    def set_network_ipam(self, ref_obj, ref_data=None):
        """Set network-ipam for virtual-network.
        
        :param ref_obj: NetworkIpam object
        :param ref_data: VnSubnetsType object
        
        """
        self.network_ipam_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.network_ipam_refs[0]['uuid'] = ref_obj.uuid

    # end set_network_ipam

    def add_network_ipam(self, ref_obj, ref_data=None):
        """Add network-ipam to virtual-network.
        
        :param ref_obj: NetworkIpam object
        :param ref_data: VnSubnetsType object
        
        """
        refs = getattr(self, 'network_ipam_refs', [])
        if not refs:
            self.network_ipam_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.network_ipam_refs.append(ref_info)
    # end add_network_ipam

    def del_network_ipam(self, ref_obj):
        refs = self.get_network_ipam_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.network_ipam_refs.remove(ref)
                return
    # end del_network_ipam

    def set_network_ipam_list(self, ref_obj_list, ref_data_list=None):
        """Set network-ipam list for virtual-network.
        
        :param ref_obj_list: list of NetworkIpam object
        :param ref_data_list: list of VnSubnetsType object
        
        """
        self.network_ipam_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_network_ipam_list

    def get_network_ipam_refs(self):
        """Return network-ipam list for virtual-network.
        
        :returns: list of tuple <NetworkIpam, VnSubnetsType>
        
        """
        return getattr(self, 'network_ipam_refs', None)
    # end get_network_ipam_refs

    def set_network_policy(self, ref_obj, ref_data=None):
        """Set network-policy for virtual-network.
        
        :param ref_obj: NetworkPolicy object
        :param ref_data: VirtualNetworkPolicyType object
        
        """
        self.network_policy_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.network_policy_refs[0]['uuid'] = ref_obj.uuid

    # end set_network_policy

    def add_network_policy(self, ref_obj, ref_data=None):
        """Add network-policy to virtual-network.
        
        :param ref_obj: NetworkPolicy object
        :param ref_data: VirtualNetworkPolicyType object
        
        """
        refs = getattr(self, 'network_policy_refs', [])
        if not refs:
            self.network_policy_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.network_policy_refs.append(ref_info)
    # end add_network_policy

    def del_network_policy(self, ref_obj):
        refs = self.get_network_policy_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.network_policy_refs.remove(ref)
                return
    # end del_network_policy

    def set_network_policy_list(self, ref_obj_list, ref_data_list=None):
        """Set network-policy list for virtual-network.
        
        :param ref_obj_list: list of NetworkPolicy object
        :param ref_data_list: list of VirtualNetworkPolicyType object
        
        """
        self.network_policy_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_network_policy_list

    def get_network_policy_refs(self):
        """Return network-policy list for virtual-network.
        
        :returns: list of tuple <NetworkPolicy, VirtualNetworkPolicyType>
        
        """
        return getattr(self, 'network_policy_refs', None)
    # end get_network_policy_refs

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for virtual-network.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to virtual-network.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for virtual-network.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for virtual-network.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_route_table(self, ref_obj):
        """Set route-table for virtual-network.
        
        :param ref_obj: RouteTable object
        
        """
        self.route_table_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.route_table_refs[0]['uuid'] = ref_obj.uuid

    # end set_route_table

    def add_route_table(self, ref_obj):
        """Add route-table to virtual-network.
        
        :param ref_obj: RouteTable object
        
        """
        refs = getattr(self, 'route_table_refs', [])
        if not refs:
            self.route_table_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.route_table_refs.append(ref_info)
    # end add_route_table

    def del_route_table(self, ref_obj):
        refs = self.get_route_table_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.route_table_refs.remove(ref)
                return
    # end del_route_table

    def set_route_table_list(self, ref_obj_list):
        """Set route-table list for virtual-network.
        
        :param ref_obj_list: list of RouteTable object
        
        """
        self.route_table_refs = ref_obj_list
    # end set_route_table_list

    def get_route_table_refs(self):
        """Return route-table list for virtual-network.
        
        :returns: list of <RouteTable>
        
        """
        return getattr(self, 'route_table_refs', None)
    # end get_route_table_refs

    def set_multicast_policy(self, ref_obj):
        """Set multicast-policy for virtual-network.
        
        :param ref_obj: MulticastPolicy object
        
        """
        self.multicast_policy_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.multicast_policy_refs[0]['uuid'] = ref_obj.uuid

    # end set_multicast_policy

    def add_multicast_policy(self, ref_obj):
        """Add multicast-policy to virtual-network.
        
        :param ref_obj: MulticastPolicy object
        
        """
        refs = getattr(self, 'multicast_policy_refs', [])
        if not refs:
            self.multicast_policy_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.multicast_policy_refs.append(ref_info)
    # end add_multicast_policy

    def del_multicast_policy(self, ref_obj):
        refs = self.get_multicast_policy_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.multicast_policy_refs.remove(ref)
                return
    # end del_multicast_policy

    def set_multicast_policy_list(self, ref_obj_list):
        """Set multicast-policy list for virtual-network.
        
        :param ref_obj_list: list of MulticastPolicy object
        
        """
        self.multicast_policy_refs = ref_obj_list
    # end set_multicast_policy_list

    def get_multicast_policy_refs(self):
        """Return multicast-policy list for virtual-network.
        
        :returns: list of <MulticastPolicy>
        
        """
        return getattr(self, 'multicast_policy_refs', None)
    # end get_multicast_policy_refs

    def set_bgpvpn(self, ref_obj):
        """Set bgpvpn for virtual-network.
        
        :param ref_obj: Bgpvpn object
        
        """
        self.bgpvpn_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.bgpvpn_refs[0]['uuid'] = ref_obj.uuid

    # end set_bgpvpn

    def add_bgpvpn(self, ref_obj):
        """Add bgpvpn to virtual-network.
        
        :param ref_obj: Bgpvpn object
        
        """
        refs = getattr(self, 'bgpvpn_refs', [])
        if not refs:
            self.bgpvpn_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.bgpvpn_refs.append(ref_info)
    # end add_bgpvpn

    def del_bgpvpn(self, ref_obj):
        refs = self.get_bgpvpn_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.bgpvpn_refs.remove(ref)
                return
    # end del_bgpvpn

    def set_bgpvpn_list(self, ref_obj_list):
        """Set bgpvpn list for virtual-network.
        
        :param ref_obj_list: list of Bgpvpn object
        
        """
        self.bgpvpn_refs = ref_obj_list
    # end set_bgpvpn_list

    def get_bgpvpn_refs(self):
        """Return bgpvpn list for virtual-network.
        
        :returns: list of <Bgpvpn>
        
        """
        return getattr(self, 'bgpvpn_refs', None)
    # end get_bgpvpn_refs

    def set_intent_map(self, ref_obj):
        """Set intent-map for virtual-network.
        
        :param ref_obj: IntentMap object
        
        """
        self.intent_map_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.intent_map_refs[0]['uuid'] = ref_obj.uuid

    # end set_intent_map

    def add_intent_map(self, ref_obj):
        """Add intent-map to virtual-network.
        
        :param ref_obj: IntentMap object
        
        """
        refs = getattr(self, 'intent_map_refs', [])
        if not refs:
            self.intent_map_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.intent_map_refs.append(ref_info)
    # end add_intent_map

    def del_intent_map(self, ref_obj):
        refs = self.get_intent_map_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.intent_map_refs.remove(ref)
                return
    # end del_intent_map

    def set_intent_map_list(self, ref_obj_list):
        """Set intent-map list for virtual-network.
        
        :param ref_obj_list: list of IntentMap object
        
        """
        self.intent_map_refs = ref_obj_list
    # end set_intent_map_list

    def get_intent_map_refs(self):
        """Return intent-map list for virtual-network.
        
        :returns: list of <IntentMap>
        
        """
        return getattr(self, 'intent_map_refs', None)
    # end get_intent_map_refs

    def set_routing_policy(self, ref_obj, ref_data=None):
        """Set routing-policy for virtual-network.
        
        :param ref_obj: RoutingPolicy object
        :param ref_data: RoutingPolicyType object
        
        """
        self.routing_policy_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.routing_policy_refs[0]['uuid'] = ref_obj.uuid

    # end set_routing_policy

    def add_routing_policy(self, ref_obj, ref_data=None):
        """Add routing-policy to virtual-network.
        
        :param ref_obj: RoutingPolicy object
        :param ref_data: RoutingPolicyType object
        
        """
        refs = getattr(self, 'routing_policy_refs', [])
        if not refs:
            self.routing_policy_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.routing_policy_refs.append(ref_info)
    # end add_routing_policy

    def del_routing_policy(self, ref_obj):
        refs = self.get_routing_policy_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.routing_policy_refs.remove(ref)
                return
    # end del_routing_policy

    def set_routing_policy_list(self, ref_obj_list, ref_data_list=None):
        """Set routing-policy list for virtual-network.
        
        :param ref_obj_list: list of RoutingPolicy object
        :param ref_data_list: list of RoutingPolicyType object
        
        """
        self.routing_policy_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_routing_policy_list

    def get_routing_policy_refs(self):
        """Return routing-policy list for virtual-network.
        
        :returns: list of tuple <RoutingPolicy, RoutingPolicyType>
        
        """
        return getattr(self, 'routing_policy_refs', None)
    # end get_routing_policy_refs

    def set_tag(self, ref_obj):
        """Set tag for virtual-network.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-network.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-network.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-network.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_network_back_refs(self):
        """Return list of all virtual-networks using this virtual-network"""
        return getattr(self, 'virtual_network_back_refs', None)
    # end get_virtual_network_back_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this virtual-network"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_instance_ip_back_refs(self):
        """Return list of all instance-ips using this virtual-network"""
        return getattr(self, 'instance_ip_back_refs', None)
    # end get_instance_ip_back_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this virtual-network"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def get_port_tuple_back_refs(self):
        """Return list of all port-tuples using this virtual-network"""
        return getattr(self, 'port_tuple_back_refs', None)
    # end get_port_tuple_back_refs

    def get_logical_router_back_refs(self):
        """Return list of all logical-routers using this virtual-network"""
        return getattr(self, 'logical_router_back_refs', None)
    # end get_logical_router_back_refs

    def get_flow_node_back_refs(self):
        """Return list of all flow-nodes using this virtual-network"""
        return getattr(self, 'flow_node_back_refs', None)
    # end get_flow_node_back_refs

    def get_firewall_rule_back_refs(self):
        """Return list of all firewall-rules using this virtual-network"""
        return getattr(self, 'firewall_rule_back_refs', None)
    # end get_firewall_rule_back_refs

    def get_data_center_interconnect_back_refs(self):
        """Return list of all data-center-interconnects using this virtual-network"""
        return getattr(self, 'data_center_interconnect_back_refs', None)
    # end get_data_center_interconnect_back_refs

    def get_fabric_back_refs(self):
        """Return list of all fabrics using this virtual-network"""
        return getattr(self, 'fabric_back_refs', None)
    # end get_fabric_back_refs

    def get_host_based_service_back_refs(self):
        """Return list of all host-based-services using this virtual-network"""
        return getattr(self, 'host_based_service_back_refs', None)
    # end get_host_based_service_back_refs

    def dump(self):
        """Display virtual-network object in compact form."""
        print('------------ virtual-network ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P ecmp_hashing_include_fields = ', self.get_ecmp_hashing_include_fields())
        print('P virtual_network_category = ', self.get_virtual_network_category())
        print('P virtual_network_properties = ', self.get_virtual_network_properties())
        print('P virtual_network_routed_properties = ', self.get_virtual_network_routed_properties())
        print('P provider_properties = ', self.get_provider_properties())
        print('P virtual_network_network_id = ', self.get_virtual_network_network_id())
        print('P is_provider_network = ', self.get_is_provider_network())
        print('P port_security_enabled = ', self.get_port_security_enabled())
        print('P fabric_snat = ', self.get_fabric_snat())
        print('P route_target_list = ', self.get_route_target_list())
        print('P import_route_target_list = ', self.get_import_route_target_list())
        print('P export_route_target_list = ', self.get_export_route_target_list())
        print('P router_external = ', self.get_router_external())
        print('P is_shared = ', self.get_is_shared())
        print('P external_ipam = ', self.get_external_ipam())
        print('P flood_unknown_unicast = ', self.get_flood_unknown_unicast())
        print('P multi_policy_service_chains_enabled = ', self.get_multi_policy_service_chains_enabled())
        print('P address_allocation_mode = ', self.get_address_allocation_mode())
        print('P virtual_network_fat_flow_protocols = ', self.get_virtual_network_fat_flow_protocols())
        print('P mac_learning_enabled = ', self.get_mac_learning_enabled())
        print('P mac_limit_control = ', self.get_mac_limit_control())
        print('P mac_move_control = ', self.get_mac_move_control())
        print('P mac_aging_time = ', self.get_mac_aging_time())
        print('P pbb_evpn_enable = ', self.get_pbb_evpn_enable())
        print('P pbb_etree_enable = ', self.get_pbb_etree_enable())
        print('P layer2_control_word = ', self.get_layer2_control_word())
        print('P igmp_enable = ', self.get_igmp_enable())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF security_logging_object = ', self.get_security_logging_object_refs())
        print('REF qos_config = ', self.get_qos_config_refs())
        print('REF network_ipam = ', self.get_network_ipam_refs())
        print('REF network_policy = ', self.get_network_policy_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('HAS access_control_list = ', self.get_access_control_lists())
        print('HAS floating_ip_pool = ', self.get_floating_ip_pools())
        print('HAS alias_ip_pool = ', self.get_alias_ip_pools())
        print('HAS routing_instance = ', self.get_routing_instances())
        print('REF route_table = ', self.get_route_table_refs())
        print('HAS bridge_domain = ', self.get_bridge_domains())
        print('REF multicast_policy = ', self.get_multicast_policy_refs())
        print('REF bgpvpn = ', self.get_bgpvpn_refs())
        print('REF intent_map = ', self.get_intent_map_refs())
        print('REF routing_policy = ', self.get_routing_policy_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_network = ', self.get_virtual_network_back_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK instance_ip = ', self.get_instance_ip_back_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
        print('BCK port_tuple = ', self.get_port_tuple_back_refs())
        print('BCK logical_router = ', self.get_logical_router_back_refs())
        print('BCK flow_node = ', self.get_flow_node_back_refs())
        print('BCK firewall_rule = ', self.get_firewall_rule_back_refs())
        print('BCK data_center_interconnect = ', self.get_data_center_interconnect_back_refs())
        print('BCK fabric = ', self.get_fabric_back_refs())
        print('BCK host_based_service = ', self.get_host_based_service_back_refs())
    # end dump

# end class VirtualNetwork

class VirtualPortGroup(object):
    """
    When parent is fabric:
        List of virtual port groups in this fabric.
    When parent is project:
        List of virtual port groups/trunk ports in this project.


    Created By:
        User when parent is :class:`.Fabric`
        User when parent is :class:`.Project`

    Child of:
        :class:`.Fabric` object OR
        :class:`.Project` object

    Properties:
        * virtual_port_group_lacp_enabled
            Type: bool

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Flag to turn on or off Link Aggregation Control Protocol (LACP) on this link aggregation group.

        * virtual_port_group_trunk_port_id
            Type: str

            Created By: User (required)

            Operations Allowed: CR

            Description:

              id of the port that enables multi valn trunking.

        * virtual_port_group_user_created
            Type: bool

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Flag to be set to True when its externally created and False when created internally. Default is set

              to True

        * virtual_port_group_type
            Type: str, *one-of* [u'access', u'routed']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Type of Virtual port group. It can be either access i.e L2 connectivity or routed.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.PhysicalInterface` object, :class:`.VpgInterfaceParametersType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              All the physical interfaces that belong to this link aggregation group. The physical interface could

              belong to the same or different physical router

        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of virtual machine interfaces that are part of this virtual port group

        * list of :class:`.SecurityGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Interface ACL, automatically generated by system based on security groups attached to this virtual

              port group.

        * list of :class:`.PortProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Port profiles attached to this virtual port group

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'virtual-port-group'
    object_type = 'virtual_port_group'

    prop_fields = set([u'virtual_port_group_lacp_enabled', u'virtual_port_group_trunk_port_id', u'virtual_port_group_user_created', u'virtual_port_group_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['physical_interface_refs', 'virtual_machine_interface_refs', 'security_group_refs', u'port_profile_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'virtual_port_group_lacp_enabled': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Flag to turn on or off Link Aggregation Control Protocol (LACP) on this link aggregation group.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'required'},
        'virtual_port_group_trunk_port_id': {'operations': 'CR', 'restrictions': None, 'default': None, 'description': ['id of the port that enables multi valn trunking.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'virtual_port_group_user_created': {'operations': 'CRUD', 'restrictions': None, 'default': True, 'description': ['Flag to be set to True when its externally created and False when created internally. Default is set', 'to True'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'optional'},
        'virtual_port_group_type': {'operations': 'CRUD', 'restrictions': [u'access', u'routed'], 'default': 'access', 'description': ['Type of Virtual port group. It can be either access i.e L2 connectivity or routed.'], 'simple_type': u'VpgType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['physical_interface_refs'] = ('physical-interface', 'VpgInterfaceParametersType', False, ['All the physical interfaces that belong to this link aggregation group. The physical interface could', 'belong to the same or different physical router'])
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['list of virtual machine interfaces that are part of this virtual port group'])
    ref_field_types['security_group_refs'] = ('security-group', 'None', False, ['Interface ACL, automatically generated by system based on security groups attached to this virtual', 'port group.'])
    ref_field_types['port_profile_refs'] = ('port-profile', 'None', False, ['Port profiles attached to this virtual port group'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['fabric', 'project']

    prop_field_metas = {}
    prop_field_metas['virtual_port_group_lacp_enabled'] = 'virtual-port-group-lacp-enabled'
    prop_field_metas['virtual_port_group_trunk_port_id'] = 'virtual-port-group-trunk-port-id'
    prop_field_metas['virtual_port_group_user_created'] = 'virtual-port-group-user-created'
    prop_field_metas['virtual_port_group_type'] = 'virtual-port-group-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['physical_interface_refs'] = 'virtual-port-group-physical-interface'
    ref_field_metas['virtual_machine_interface_refs'] = 'virtual-port-group-virtual-machine-interface'
    ref_field_metas['security_group_refs'] = 'virtual-port-group-security-group'
    ref_field_metas['port_profile_refs'] = 'virtual-port-group-port-profile'
    ref_field_metas['tag_refs'] = 'virtual-port-group-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, virtual_port_group_lacp_enabled=None, virtual_port_group_trunk_port_id=None, virtual_port_group_user_created=True, virtual_port_group_type='access', id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-port-group'
        if not name:
            name = u'default-virtual-port-group'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("['fabric', 'project']")

        # property fields
        if virtual_port_group_lacp_enabled is not None:
            self._virtual_port_group_lacp_enabled = virtual_port_group_lacp_enabled
        if virtual_port_group_trunk_port_id is not None:
            self._virtual_port_group_trunk_port_id = virtual_port_group_trunk_port_id
        if virtual_port_group_user_created is not None:
            self._virtual_port_group_user_created = virtual_port_group_user_created
        if virtual_port_group_type is not None:
            self._virtual_port_group_type = virtual_port_group_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-port-group)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-port-group in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-port-group as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of virtual-port-group's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of virtual-port-group's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def virtual_port_group_lacp_enabled(self):
        """Get virtual-port-group-lacp-enabled for virtual-port-group.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_virtual_port_group_lacp_enabled', None)
    # end virtual_port_group_lacp_enabled

    @virtual_port_group_lacp_enabled.setter
    def virtual_port_group_lacp_enabled(self, virtual_port_group_lacp_enabled):
        """Set virtual-port-group-lacp-enabled for virtual-port-group.
        
        :param virtual_port_group_lacp_enabled: xsd:boolean object
        
        """
        self._virtual_port_group_lacp_enabled = virtual_port_group_lacp_enabled
    # end virtual_port_group_lacp_enabled

    def set_virtual_port_group_lacp_enabled(self, value):
        self.virtual_port_group_lacp_enabled = value
    # end set_virtual_port_group_lacp_enabled

    def get_virtual_port_group_lacp_enabled(self):
        return self.virtual_port_group_lacp_enabled
    # end get_virtual_port_group_lacp_enabled

    @property
    def virtual_port_group_trunk_port_id(self):
        """Get virtual-port-group-trunk-port-id for virtual-port-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_virtual_port_group_trunk_port_id', None)
    # end virtual_port_group_trunk_port_id

    @virtual_port_group_trunk_port_id.setter
    def virtual_port_group_trunk_port_id(self, virtual_port_group_trunk_port_id):
        """Set virtual-port-group-trunk-port-id for virtual-port-group.
        
        :param virtual_port_group_trunk_port_id: xsd:string object
        
        """
        self._virtual_port_group_trunk_port_id = virtual_port_group_trunk_port_id
    # end virtual_port_group_trunk_port_id

    def set_virtual_port_group_trunk_port_id(self, value):
        self.virtual_port_group_trunk_port_id = value
    # end set_virtual_port_group_trunk_port_id

    def get_virtual_port_group_trunk_port_id(self):
        return self.virtual_port_group_trunk_port_id
    # end get_virtual_port_group_trunk_port_id

    @property
    def virtual_port_group_user_created(self):
        """Get virtual-port-group-user-created for virtual-port-group.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_virtual_port_group_user_created', None)
    # end virtual_port_group_user_created

    @virtual_port_group_user_created.setter
    def virtual_port_group_user_created(self, virtual_port_group_user_created):
        """Set virtual-port-group-user-created for virtual-port-group.
        
        :param virtual_port_group_user_created: xsd:boolean object
        
        """
        self._virtual_port_group_user_created = virtual_port_group_user_created
    # end virtual_port_group_user_created

    def set_virtual_port_group_user_created(self, value):
        self.virtual_port_group_user_created = value
    # end set_virtual_port_group_user_created

    def get_virtual_port_group_user_created(self):
        return self.virtual_port_group_user_created
    # end get_virtual_port_group_user_created

    @property
    def virtual_port_group_type(self):
        """Get virtual-port-group-type for virtual-port-group.
        
        :returns: VpgType object
        
        """
        return getattr(self, '_virtual_port_group_type', None)
    # end virtual_port_group_type

    @virtual_port_group_type.setter
    def virtual_port_group_type(self, virtual_port_group_type):
        """Set virtual-port-group-type for virtual-port-group.
        
        :param virtual_port_group_type: VpgType object
        
        """
        self._virtual_port_group_type = virtual_port_group_type
    # end virtual_port_group_type

    def set_virtual_port_group_type(self, value):
        self.virtual_port_group_type = value
    # end set_virtual_port_group_type

    def get_virtual_port_group_type(self):
        return self.virtual_port_group_type
    # end get_virtual_port_group_type

    @property
    def id_perms(self):
        """Get id-perms for virtual-port-group.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-port-group.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-port-group.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-port-group.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-port-group.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-port-group.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-port-group.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-port-group.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_virtual_port_group_lacp_enabled'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_port_group_lacp_enabled')
        if hasattr(self, '_virtual_port_group_trunk_port_id'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_port_group_trunk_port_id')
        if hasattr(self, '_virtual_port_group_user_created'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_port_group_user_created')
        if hasattr(self, '_virtual_port_group_type'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_port_group_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'physical_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_refs')
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'security_group_refs'):
            self._serialize_field_to_json(serialized, field_names, 'security_group_refs')
        if hasattr(self, 'port_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'port_profile_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_physical_interface(self, ref_obj, ref_data=None):
        """Set physical-interface for virtual-port-group.
        
        :param ref_obj: PhysicalInterface object
        :param ref_data: VpgInterfaceParametersType object
        
        """
        self.physical_interface_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.physical_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_interface

    def add_physical_interface(self, ref_obj, ref_data=None):
        """Add physical-interface to virtual-port-group.
        
        :param ref_obj: PhysicalInterface object
        :param ref_data: VpgInterfaceParametersType object
        
        """
        refs = getattr(self, 'physical_interface_refs', [])
        if not refs:
            self.physical_interface_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_interface_refs.append(ref_info)
    # end add_physical_interface

    def del_physical_interface(self, ref_obj):
        refs = self.get_physical_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_interface_refs.remove(ref)
                return
    # end del_physical_interface

    def set_physical_interface_list(self, ref_obj_list, ref_data_list=None):
        """Set physical-interface list for virtual-port-group.
        
        :param ref_obj_list: list of PhysicalInterface object
        :param ref_data_list: list of VpgInterfaceParametersType object
        
        """
        self.physical_interface_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_physical_interface_list

    def get_physical_interface_refs(self):
        """Return physical-interface list for virtual-port-group.
        
        :returns: list of tuple <PhysicalInterface, VpgInterfaceParametersType>
        
        """
        return getattr(self, 'physical_interface_refs', None)
    # end get_physical_interface_refs

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for virtual-port-group.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to virtual-port-group.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for virtual-port-group.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for virtual-port-group.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_security_group(self, ref_obj):
        """Set security-group for virtual-port-group.
        
        :param ref_obj: SecurityGroup object
        
        """
        self.security_group_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.security_group_refs[0]['uuid'] = ref_obj.uuid

    # end set_security_group

    def add_security_group(self, ref_obj):
        """Add security-group to virtual-port-group.
        
        :param ref_obj: SecurityGroup object
        
        """
        refs = getattr(self, 'security_group_refs', [])
        if not refs:
            self.security_group_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.security_group_refs.append(ref_info)
    # end add_security_group

    def del_security_group(self, ref_obj):
        refs = self.get_security_group_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.security_group_refs.remove(ref)
                return
    # end del_security_group

    def set_security_group_list(self, ref_obj_list):
        """Set security-group list for virtual-port-group.
        
        :param ref_obj_list: list of SecurityGroup object
        
        """
        self.security_group_refs = ref_obj_list
    # end set_security_group_list

    def get_security_group_refs(self):
        """Return security-group list for virtual-port-group.
        
        :returns: list of <SecurityGroup>
        
        """
        return getattr(self, 'security_group_refs', None)
    # end get_security_group_refs

    def set_port_profile(self, ref_obj):
        """Set port-profile for virtual-port-group.
        
        :param ref_obj: PortProfile object
        
        """
        self.port_profile_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.port_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_port_profile

    def add_port_profile(self, ref_obj):
        """Add port-profile to virtual-port-group.
        
        :param ref_obj: PortProfile object
        
        """
        refs = getattr(self, 'port_profile_refs', [])
        if not refs:
            self.port_profile_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.port_profile_refs.append(ref_info)
    # end add_port_profile

    def del_port_profile(self, ref_obj):
        refs = self.get_port_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.port_profile_refs.remove(ref)
                return
    # end del_port_profile

    def set_port_profile_list(self, ref_obj_list):
        """Set port-profile list for virtual-port-group.
        
        :param ref_obj_list: list of PortProfile object
        
        """
        self.port_profile_refs = ref_obj_list
    # end set_port_profile_list

    def get_port_profile_refs(self):
        """Return port-profile list for virtual-port-group.
        
        :returns: list of <PortProfile>
        
        """
        return getattr(self, 'port_profile_refs', None)
    # end get_port_profile_refs

    def set_tag(self, ref_obj):
        """Set tag for virtual-port-group.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-port-group.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-port-group.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-port-group.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display virtual-port-group object in compact form."""
        print('------------ virtual-port-group ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P virtual_port_group_lacp_enabled = ', self.get_virtual_port_group_lacp_enabled())
        print('P virtual_port_group_trunk_port_id = ', self.get_virtual_port_group_trunk_port_id())
        print('P virtual_port_group_user_created = ', self.get_virtual_port_group_user_created())
        print('P virtual_port_group_type = ', self.get_virtual_port_group_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF physical_interface = ', self.get_physical_interface_refs())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF security_group = ', self.get_security_group_refs())
        print('REF port_profile = ', self.get_port_profile_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class VirtualPortGroup

class ServiceAppliance(object):
    """
    Service appliance is a member in service appliance set (e.g. Loadbalancer, Firewall provider).By
    default system will create "ha-proxy" based service appliance.

    Created By:
        User

    Child of:
        :class:`.ServiceApplianceSet` object

    Properties:
        * service_appliance_user_credentials
            Type: :class:`.UserCredentials`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Authentication credentials for driver to access service appliance.

        * service_appliance_ip_address
            Type: str, *one-of* xsd:string

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Management Ip address of the service-appliance.

        * service_appliance_virtualization_type
            Type: str, *one-of* [u'virtual-machine', u'network-namespace', u'vrouter-instance', u'physical-device']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Service virtualization type decides how individual service instances are instantiated

        * service_appliance_properties
            Type: :class:`.KeyValuePairs`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              List of Key:Value pairs used by the provider driver of this service appliance.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.PhysicalInterface` object, :class:`.ServiceApplianceInterfaceType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to physical interface that can be used as (service interface type)left, right, management

              OR other.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'service-appliance'
    object_type = 'service_appliance'

    prop_fields = set([u'service_appliance_user_credentials', u'service_appliance_ip_address', u'service_appliance_virtualization_type', u'service_appliance_properties', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['physical_interface_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'service_appliance_user_credentials': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Authentication credentials for driver to access service appliance.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'UserCredentials', 'restriction_type': None, 'required': 'optional'},
        'service_appliance_ip_address': {'operations': 'CRUD', 'restrictions': [], 'default': None, 'description': ['Management Ip address of the service-appliance.'], 'simple_type': u'IpAddressType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'required'},
        'service_appliance_virtualization_type': {'operations': 'CRUD', 'restrictions': [u'virtual-machine', u'network-namespace', u'vrouter-instance', u'physical-device'], 'default': None, 'description': ['Service virtualization type decides how individual service instances are instantiated'], 'simple_type': u'ServiceVirtualizationType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'service_appliance_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of Key:Value pairs used by the provider driver of this service appliance.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['physical_interface_refs'] = ('physical-interface', 'ServiceApplianceInterfaceType', False, ['Reference to physical interface that can be used as (service interface type)left, right, management', 'OR other.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'service-appliance-set']

    prop_field_metas = {}
    prop_field_metas['service_appliance_user_credentials'] = 'service-appliance-user-credentials'
    prop_field_metas['service_appliance_ip_address'] = 'service-appliance-ip-address'
    prop_field_metas['service_appliance_virtualization_type'] = 'service-appliance-virtualization-type'
    prop_field_metas['service_appliance_properties'] = 'service-appliance-properties'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['physical_interface_refs'] = 'service-appliance-interface'
    ref_field_metas['tag_refs'] = 'service-appliance-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, service_appliance_user_credentials=None, service_appliance_ip_address=None, service_appliance_virtualization_type=None, service_appliance_properties=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-appliance'
        if not name:
            name = u'default-service-appliance'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'service-appliance-set'
            self.fq_name = ['default-global-system-config', u'default-service-appliance-set']
            self.fq_name.append(name)


        # property fields
        if service_appliance_user_credentials is not None:
            self._service_appliance_user_credentials = service_appliance_user_credentials
        if service_appliance_ip_address is not None:
            self._service_appliance_ip_address = service_appliance_ip_address
        if service_appliance_virtualization_type is not None:
            self._service_appliance_virtualization_type = service_appliance_virtualization_type
        if service_appliance_properties is not None:
            self._service_appliance_properties = service_appliance_properties
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-appliance)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-appliance in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-appliance as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of service-appliance's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of service-appliance's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def service_appliance_user_credentials(self):
        """Get service-appliance-user-credentials for service-appliance.
        
        :returns: UserCredentials object
        
        """
        return getattr(self, '_service_appliance_user_credentials', None)
    # end service_appliance_user_credentials

    @service_appliance_user_credentials.setter
    def service_appliance_user_credentials(self, service_appliance_user_credentials):
        """Set service-appliance-user-credentials for service-appliance.
        
        :param service_appliance_user_credentials: UserCredentials object
        
        """
        self._service_appliance_user_credentials = service_appliance_user_credentials
    # end service_appliance_user_credentials

    def set_service_appliance_user_credentials(self, value):
        self.service_appliance_user_credentials = value
    # end set_service_appliance_user_credentials

    def get_service_appliance_user_credentials(self):
        return self.service_appliance_user_credentials
    # end get_service_appliance_user_credentials

    @property
    def service_appliance_ip_address(self):
        """Get service-appliance-ip-address for service-appliance.
        
        :returns: IpAddressType object
        
        """
        return getattr(self, '_service_appliance_ip_address', None)
    # end service_appliance_ip_address

    @service_appliance_ip_address.setter
    def service_appliance_ip_address(self, service_appliance_ip_address):
        """Set service-appliance-ip-address for service-appliance.
        
        :param service_appliance_ip_address: IpAddressType object
        
        """
        self._service_appliance_ip_address = service_appliance_ip_address
    # end service_appliance_ip_address

    def set_service_appliance_ip_address(self, value):
        self.service_appliance_ip_address = value
    # end set_service_appliance_ip_address

    def get_service_appliance_ip_address(self):
        return self.service_appliance_ip_address
    # end get_service_appliance_ip_address

    @property
    def service_appliance_virtualization_type(self):
        """Get service-appliance-virtualization-type for service-appliance.
        
        :returns: ServiceVirtualizationType object
        
        """
        return getattr(self, '_service_appliance_virtualization_type', None)
    # end service_appliance_virtualization_type

    @service_appliance_virtualization_type.setter
    def service_appliance_virtualization_type(self, service_appliance_virtualization_type):
        """Set service-appliance-virtualization-type for service-appliance.
        
        :param service_appliance_virtualization_type: ServiceVirtualizationType object
        
        """
        self._service_appliance_virtualization_type = service_appliance_virtualization_type
    # end service_appliance_virtualization_type

    def set_service_appliance_virtualization_type(self, value):
        self.service_appliance_virtualization_type = value
    # end set_service_appliance_virtualization_type

    def get_service_appliance_virtualization_type(self):
        return self.service_appliance_virtualization_type
    # end get_service_appliance_virtualization_type

    @property
    def service_appliance_properties(self):
        """Get service-appliance-properties for service-appliance.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_service_appliance_properties', None)
    # end service_appliance_properties

    @service_appliance_properties.setter
    def service_appliance_properties(self, service_appliance_properties):
        """Set service-appliance-properties for service-appliance.
        
        :param service_appliance_properties: KeyValuePairs object
        
        """
        self._service_appliance_properties = service_appliance_properties
    # end service_appliance_properties

    def set_service_appliance_properties(self, value):
        self.service_appliance_properties = value
    # end set_service_appliance_properties

    def get_service_appliance_properties(self):
        return self.service_appliance_properties
    # end get_service_appliance_properties

    @property
    def id_perms(self):
        """Get id-perms for service-appliance.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-appliance.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-appliance.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-appliance.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-appliance.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-appliance.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-appliance.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-appliance.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_service_appliance_user_credentials'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_user_credentials')
        if hasattr(self, '_service_appliance_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_ip_address')
        if hasattr(self, '_service_appliance_virtualization_type'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_virtualization_type')
        if hasattr(self, '_service_appliance_properties'):
            self._serialize_field_to_json(serialized, field_names, 'service_appliance_properties')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'physical_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_physical_interface(self, ref_obj, ref_data=None):
        """Set physical-interface for service-appliance.
        
        :param ref_obj: PhysicalInterface object
        :param ref_data: ServiceApplianceInterfaceType object
        
        """
        self.physical_interface_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.physical_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_interface

    def add_physical_interface(self, ref_obj, ref_data=None):
        """Add physical-interface to service-appliance.
        
        :param ref_obj: PhysicalInterface object
        :param ref_data: ServiceApplianceInterfaceType object
        
        """
        refs = getattr(self, 'physical_interface_refs', [])
        if not refs:
            self.physical_interface_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_interface_refs.append(ref_info)
    # end add_physical_interface

    def del_physical_interface(self, ref_obj):
        refs = self.get_physical_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_interface_refs.remove(ref)
                return
    # end del_physical_interface

    def set_physical_interface_list(self, ref_obj_list, ref_data_list=None):
        """Set physical-interface list for service-appliance.
        
        :param ref_obj_list: list of PhysicalInterface object
        :param ref_data_list: list of ServiceApplianceInterfaceType object
        
        """
        self.physical_interface_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_physical_interface_list

    def get_physical_interface_refs(self):
        """Return physical-interface list for service-appliance.
        
        :returns: list of tuple <PhysicalInterface, ServiceApplianceInterfaceType>
        
        """
        return getattr(self, 'physical_interface_refs', None)
    # end get_physical_interface_refs

    def set_tag(self, ref_obj):
        """Set tag for service-appliance.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-appliance.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-appliance.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-appliance.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display service-appliance object in compact form."""
        print('------------ service-appliance ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P service_appliance_user_credentials = ', self.get_service_appliance_user_credentials())
        print('P service_appliance_ip_address = ', self.get_service_appliance_ip_address())
        print('P service_appliance_virtualization_type = ', self.get_service_appliance_virtualization_type())
        print('P service_appliance_properties = ', self.get_service_appliance_properties())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF physical_interface = ', self.get_physical_interface_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class ServiceAppliance

class Namespace(object):
    """
    Namespace is unique networking namespace within this domain. If namespace is not present then
    default namespace of default project is used.

    Created By:
        User

    Child of:
        :class:`.Domain` object

    Properties:
        * namespace_cidr
            Type: :class:`.SubnetType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              All networks in this namespace belong to this list of Prefixes. Not implemented.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Project` objects
    """

    resource_type = 'namespace'
    object_type = 'namespace'

    prop_fields = set([u'namespace_cidr', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['project_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'namespace_cidr': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['All networks in this namespace belong to this list of Prefixes. Not implemented.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'SubnetType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['project_back_refs'] = ('project', 'SubnetType', False)

    children_field_types = {}

    parent_types = [u'domain']

    prop_field_metas = {}
    prop_field_metas['namespace_cidr'] = 'namespace-cidr'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'namespace-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, namespace_cidr=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'namespace'
        if not name:
            name = u'default-namespace'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'domain'
            self.fq_name = [u'default-domain']
            self.fq_name.append(name)


        # property fields
        if namespace_cidr is not None:
            self._namespace_cidr = namespace_cidr
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (namespace)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of namespace in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of namespace as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of namespace's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of namespace's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def namespace_cidr(self):
        """Get namespace-cidr for namespace.
        
        :returns: SubnetType object
        
        """
        return getattr(self, '_namespace_cidr', None)
    # end namespace_cidr

    @namespace_cidr.setter
    def namespace_cidr(self, namespace_cidr):
        """Set namespace-cidr for namespace.
        
        :param namespace_cidr: SubnetType object
        
        """
        self._namespace_cidr = namespace_cidr
    # end namespace_cidr

    def set_namespace_cidr(self, value):
        self.namespace_cidr = value
    # end set_namespace_cidr

    def get_namespace_cidr(self):
        return self.namespace_cidr
    # end get_namespace_cidr

    @property
    def id_perms(self):
        """Get id-perms for namespace.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for namespace.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for namespace.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for namespace.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for namespace.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for namespace.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for namespace.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for namespace.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_namespace_cidr'):
            self._serialize_field_to_json(serialized, field_names, 'namespace_cidr')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for namespace.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to namespace.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for namespace.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for namespace.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_project_back_refs(self):
        """Return list of all projects using this namespace"""
        return getattr(self, 'project_back_refs', None)
    # end get_project_back_refs

    def dump(self):
        """Display namespace object in compact form."""
        print('------------ namespace ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P namespace_cidr = ', self.get_namespace_cidr())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK project = ', self.get_project_back_refs())
    # end dump

# end class Namespace

class Feature(object):
    """
A granual networking feature supported by Fabric Manager

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Feature` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              list of features this feature is dependent on.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Feature` objects
        * list of :class:`.RoleDefinition` objects
    """

    resource_type = 'feature'
    object_type = 'feature'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'feature_refs', u'tag_refs'])
    backref_fields = set([u'feature_back_refs', 'role_definition_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['feature_refs'] = ('feature', 'None', False, ['list of features this feature is dependent on.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['feature_back_refs'] = ('feature', 'None', False)
    backref_field_types['role_definition_back_refs'] = ('role-definition', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['feature_refs'] = 'feature-feature'
    ref_field_metas['tag_refs'] = 'feature-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'feature'
        if not name:
            name = u'default-feature'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (feature)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of feature in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of feature as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of feature's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of feature's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for feature.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for feature.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for feature.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for feature.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for feature.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for feature.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for feature.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for feature.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'feature_refs'):
            self._serialize_field_to_json(serialized, field_names, 'feature_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_feature(self, ref_obj):
        """Set feature for feature.
        
        :param ref_obj: Feature object
        
        """
        self.feature_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.feature_refs[0]['uuid'] = ref_obj.uuid

    # end set_feature

    def add_feature(self, ref_obj):
        """Add feature to feature.
        
        :param ref_obj: Feature object
        
        """
        refs = getattr(self, 'feature_refs', [])
        if not refs:
            self.feature_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.feature_refs.append(ref_info)
    # end add_feature

    def del_feature(self, ref_obj):
        refs = self.get_feature_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.feature_refs.remove(ref)
                return
    # end del_feature

    def set_feature_list(self, ref_obj_list):
        """Set feature list for feature.
        
        :param ref_obj_list: list of Feature object
        
        """
        self.feature_refs = ref_obj_list
    # end set_feature_list

    def get_feature_refs(self):
        """Return feature list for feature.
        
        :returns: list of <Feature>
        
        """
        return getattr(self, 'feature_refs', None)
    # end get_feature_refs

    def set_tag(self, ref_obj):
        """Set tag for feature.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to feature.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for feature.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for feature.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_feature_back_refs(self):
        """Return list of all features using this feature"""
        return getattr(self, 'feature_back_refs', None)
    # end get_feature_back_refs

    def get_role_definition_back_refs(self):
        """Return list of all role-definitions using this feature"""
        return getattr(self, 'role_definition_back_refs', None)
    # end get_role_definition_back_refs

    def dump(self):
        """Display feature object in compact form."""
        print('------------ feature ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF feature = ', self.get_feature_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK feature = ', self.get_feature_back_refs())
        print('BCK role_definition = ', self.get_role_definition_back_refs())
    # end dump

# end class Feature

class StormControlProfile(object):
    """
Storm control profile definition

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * storm_control_parameters
            Type: :class:`.StormControlParameters`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Parameters for the storm control profile, such as bandwidth percentage, actions, traffic type,

              receovery timeout etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PortProfile` objects
    """

    resource_type = 'storm-control-profile'
    object_type = 'storm_control_profile'

    prop_fields = set([u'storm_control_parameters', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([u'port_profile_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'storm_control_parameters': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Parameters for the storm control profile, such as bandwidth percentage, actions, traffic type,', 'receovery timeout etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'StormControlParameters', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['port_profile_back_refs'] = ('port-profile', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['storm_control_parameters'] = 'storm-control-parameters'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'storm-control-profile-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, storm_control_parameters=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'storm-control-profile'
        if not name:
            name = u'default-storm-control-profile'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if storm_control_parameters is not None:
            self._storm_control_parameters = storm_control_parameters
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (storm-control-profile)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of storm-control-profile in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of storm-control-profile as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of storm-control-profile's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of storm-control-profile's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def storm_control_parameters(self):
        """Get storm-control-parameters for storm-control-profile.
        
        :returns: StormControlParameters object
        
        """
        return getattr(self, '_storm_control_parameters', None)
    # end storm_control_parameters

    @storm_control_parameters.setter
    def storm_control_parameters(self, storm_control_parameters):
        """Set storm-control-parameters for storm-control-profile.
        
        :param storm_control_parameters: StormControlParameters object
        
        """
        self._storm_control_parameters = storm_control_parameters
    # end storm_control_parameters

    def set_storm_control_parameters(self, value):
        self.storm_control_parameters = value
    # end set_storm_control_parameters

    def get_storm_control_parameters(self):
        return self.storm_control_parameters
    # end get_storm_control_parameters

    @property
    def id_perms(self):
        """Get id-perms for storm-control-profile.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for storm-control-profile.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for storm-control-profile.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for storm-control-profile.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for storm-control-profile.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for storm-control-profile.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for storm-control-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for storm-control-profile.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_storm_control_parameters'):
            self._serialize_field_to_json(serialized, field_names, 'storm_control_parameters')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for storm-control-profile.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to storm-control-profile.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for storm-control-profile.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for storm-control-profile.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_port_profile_back_refs(self):
        """Return list of all port-profiles using this storm-control-profile"""
        return getattr(self, 'port_profile_back_refs', None)
    # end get_port_profile_back_refs

    def dump(self):
        """Display storm-control-profile object in compact form."""
        print('------------ storm-control-profile ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P storm_control_parameters = ', self.get_storm_control_parameters())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
        print('BCK port_profile = ', self.get_port_profile_back_refs())
    # end dump

# end class StormControlProfile

class DeviceImage(object):
    """
    list of device image info for the images that get uploaded to the system.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * device_image_vendor_name
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Vendor name for device image. It is used by device manager during device image upgrade to match the

              PRouters vendor name

        * device_image_device_family
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Device family name for device image. It is used by device manager during device image upgrade to

              match the family name of the PRouter

        * device_image_supported_platforms
            Type: :class:`.DevicePlatformListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of device platforms that this image can be installed on. It is used by device manager during

              device image upgrade validate the PRouters product_name property. If this property is not specified,

              then this image can be installed on all platforms of the device family

        * device_image_os_version
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              OS version string on the device where this image is installed. This version string should match the

              PRouters operational state PRouterUVE.os_version attribute if the image is successfully installed on

              the PRouter

        * device_image_file_uri
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              file uri for the device image uploaded to the image server.

        * device_image_size
            Type: int

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              file size of the device image that was uploaded to the image server.

        * device_image_md5
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              md5 checksum of the image file that was uploaded to the image server.

        * device_image_sha1
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              sha1 checksum of the image file that was uploaded to the image server.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Hardware` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              linking the hardware that is associated to image

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.PhysicalRouter` objects
    """

    resource_type = 'device-image'
    object_type = 'device_image'

    prop_fields = set([u'device_image_vendor_name', u'device_image_device_family', u'device_image_supported_platforms', u'device_image_os_version', u'device_image_file_uri', u'device_image_size', u'device_image_md5', u'device_image_sha1', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'hardware_refs', u'tag_refs'])
    backref_fields = set(['physical_router_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'device_image_vendor_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Vendor name for device image. It is used by device manager during device image upgrade to match the', 'PRouters vendor name'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'device_image_device_family': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Device family name for device image. It is used by device manager during device image upgrade to', 'match the family name of the PRouter'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'device_image_supported_platforms': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of device platforms that this image can be installed on. It is used by device manager during', 'device image upgrade validate the PRouters product_name property. If this property is not specified,', 'then this image can be installed on all platforms of the device family'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DevicePlatformListType', 'restriction_type': None, 'required': 'optional'},
        'device_image_os_version': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['OS version string on the device where this image is installed. This version string should match the', 'PRouters operational state PRouterUVE.os_version attribute if the image is successfully installed on', 'the PRouter'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'device_image_file_uri': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['file uri for the device image uploaded to the image server.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'device_image_size': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['file size of the device image that was uploaded to the image server.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': None, 'required': 'optional'},
        'device_image_md5': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['md5 checksum of the image file that was uploaded to the image server.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'device_image_sha1': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['sha1 checksum of the image file that was uploaded to the image server.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['hardware_refs'] = ('hardware', 'None', False, ['linking the hardware that is associated to image'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['physical_router_back_refs'] = ('physical-router', 'None', False)

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['device_image_vendor_name'] = 'device-image-vendor-name'
    prop_field_metas['device_image_device_family'] = 'device-image-device-family'
    prop_field_metas['device_image_supported_platforms'] = 'device-image-supported-platforms'
    prop_field_metas['device_image_os_version'] = 'device-image-os-version'
    prop_field_metas['device_image_file_uri'] = 'device-image-file-uri'
    prop_field_metas['device_image_size'] = 'device-image-size'
    prop_field_metas['device_image_md5'] = 'device-image-md5'
    prop_field_metas['device_image_sha1'] = 'device-image-sha1'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['hardware_refs'] = 'device-image-hardware'
    ref_field_metas['tag_refs'] = 'device-image-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, device_image_vendor_name=None, device_image_device_family=None, device_image_supported_platforms=None, device_image_os_version=None, device_image_file_uri=None, device_image_size=None, device_image_md5=None, device_image_sha1=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'device-image'
        if not name:
            name = u'default-device-image'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if device_image_vendor_name is not None:
            self._device_image_vendor_name = device_image_vendor_name
        if device_image_device_family is not None:
            self._device_image_device_family = device_image_device_family
        if device_image_supported_platforms is not None:
            self._device_image_supported_platforms = device_image_supported_platforms
        if device_image_os_version is not None:
            self._device_image_os_version = device_image_os_version
        if device_image_file_uri is not None:
            self._device_image_file_uri = device_image_file_uri
        if device_image_size is not None:
            self._device_image_size = device_image_size
        if device_image_md5 is not None:
            self._device_image_md5 = device_image_md5
        if device_image_sha1 is not None:
            self._device_image_sha1 = device_image_sha1
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (device-image)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of device-image in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of device-image as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of device-image's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of device-image's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def device_image_vendor_name(self):
        """Get device-image-vendor-name for device-image.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_image_vendor_name', None)
    # end device_image_vendor_name

    @device_image_vendor_name.setter
    def device_image_vendor_name(self, device_image_vendor_name):
        """Set device-image-vendor-name for device-image.
        
        :param device_image_vendor_name: xsd:string object
        
        """
        self._device_image_vendor_name = device_image_vendor_name
    # end device_image_vendor_name

    def set_device_image_vendor_name(self, value):
        self.device_image_vendor_name = value
    # end set_device_image_vendor_name

    def get_device_image_vendor_name(self):
        return self.device_image_vendor_name
    # end get_device_image_vendor_name

    @property
    def device_image_device_family(self):
        """Get device-image-device-family for device-image.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_image_device_family', None)
    # end device_image_device_family

    @device_image_device_family.setter
    def device_image_device_family(self, device_image_device_family):
        """Set device-image-device-family for device-image.
        
        :param device_image_device_family: xsd:string object
        
        """
        self._device_image_device_family = device_image_device_family
    # end device_image_device_family

    def set_device_image_device_family(self, value):
        self.device_image_device_family = value
    # end set_device_image_device_family

    def get_device_image_device_family(self):
        return self.device_image_device_family
    # end get_device_image_device_family

    @property
    def device_image_supported_platforms(self):
        """Get device-image-supported-platforms for device-image.
        
        :returns: DevicePlatformListType object
        
        """
        return getattr(self, '_device_image_supported_platforms', None)
    # end device_image_supported_platforms

    @device_image_supported_platforms.setter
    def device_image_supported_platforms(self, device_image_supported_platforms):
        """Set device-image-supported-platforms for device-image.
        
        :param device_image_supported_platforms: DevicePlatformListType object
        
        """
        self._device_image_supported_platforms = device_image_supported_platforms
    # end device_image_supported_platforms

    def set_device_image_supported_platforms(self, value):
        self.device_image_supported_platforms = value
    # end set_device_image_supported_platforms

    def get_device_image_supported_platforms(self):
        return self.device_image_supported_platforms
    # end get_device_image_supported_platforms

    @property
    def device_image_os_version(self):
        """Get device-image-os-version for device-image.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_image_os_version', None)
    # end device_image_os_version

    @device_image_os_version.setter
    def device_image_os_version(self, device_image_os_version):
        """Set device-image-os-version for device-image.
        
        :param device_image_os_version: xsd:string object
        
        """
        self._device_image_os_version = device_image_os_version
    # end device_image_os_version

    def set_device_image_os_version(self, value):
        self.device_image_os_version = value
    # end set_device_image_os_version

    def get_device_image_os_version(self):
        return self.device_image_os_version
    # end get_device_image_os_version

    @property
    def device_image_file_uri(self):
        """Get device-image-file-uri for device-image.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_image_file_uri', None)
    # end device_image_file_uri

    @device_image_file_uri.setter
    def device_image_file_uri(self, device_image_file_uri):
        """Set device-image-file-uri for device-image.
        
        :param device_image_file_uri: xsd:string object
        
        """
        self._device_image_file_uri = device_image_file_uri
    # end device_image_file_uri

    def set_device_image_file_uri(self, value):
        self.device_image_file_uri = value
    # end set_device_image_file_uri

    def get_device_image_file_uri(self):
        return self.device_image_file_uri
    # end get_device_image_file_uri

    @property
    def device_image_size(self):
        """Get device-image-size for device-image.
        
        :returns: xsd:integer object
        
        """
        return getattr(self, '_device_image_size', None)
    # end device_image_size

    @device_image_size.setter
    def device_image_size(self, device_image_size):
        """Set device-image-size for device-image.
        
        :param device_image_size: xsd:integer object
        
        """
        self._device_image_size = device_image_size
    # end device_image_size

    def set_device_image_size(self, value):
        self.device_image_size = value
    # end set_device_image_size

    def get_device_image_size(self):
        return self.device_image_size
    # end get_device_image_size

    @property
    def device_image_md5(self):
        """Get device-image-md5 for device-image.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_image_md5', None)
    # end device_image_md5

    @device_image_md5.setter
    def device_image_md5(self, device_image_md5):
        """Set device-image-md5 for device-image.
        
        :param device_image_md5: xsd:string object
        
        """
        self._device_image_md5 = device_image_md5
    # end device_image_md5

    def set_device_image_md5(self, value):
        self.device_image_md5 = value
    # end set_device_image_md5

    def get_device_image_md5(self):
        return self.device_image_md5
    # end get_device_image_md5

    @property
    def device_image_sha1(self):
        """Get device-image-sha1 for device-image.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_device_image_sha1', None)
    # end device_image_sha1

    @device_image_sha1.setter
    def device_image_sha1(self, device_image_sha1):
        """Set device-image-sha1 for device-image.
        
        :param device_image_sha1: xsd:string object
        
        """
        self._device_image_sha1 = device_image_sha1
    # end device_image_sha1

    def set_device_image_sha1(self, value):
        self.device_image_sha1 = value
    # end set_device_image_sha1

    def get_device_image_sha1(self):
        return self.device_image_sha1
    # end get_device_image_sha1

    @property
    def id_perms(self):
        """Get id-perms for device-image.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for device-image.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for device-image.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for device-image.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for device-image.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for device-image.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for device-image.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for device-image.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_device_image_vendor_name'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_vendor_name')
        if hasattr(self, '_device_image_device_family'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_device_family')
        if hasattr(self, '_device_image_supported_platforms'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_supported_platforms')
        if hasattr(self, '_device_image_os_version'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_os_version')
        if hasattr(self, '_device_image_file_uri'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_file_uri')
        if hasattr(self, '_device_image_size'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_size')
        if hasattr(self, '_device_image_md5'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_md5')
        if hasattr(self, '_device_image_sha1'):
            self._serialize_field_to_json(serialized, field_names, 'device_image_sha1')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'hardware_refs'):
            self._serialize_field_to_json(serialized, field_names, 'hardware_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_hardware(self, ref_obj):
        """Set hardware for device-image.
        
        :param ref_obj: Hardware object
        
        """
        self.hardware_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.hardware_refs[0]['uuid'] = ref_obj.uuid

    # end set_hardware

    def add_hardware(self, ref_obj):
        """Add hardware to device-image.
        
        :param ref_obj: Hardware object
        
        """
        refs = getattr(self, 'hardware_refs', [])
        if not refs:
            self.hardware_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.hardware_refs.append(ref_info)
    # end add_hardware

    def del_hardware(self, ref_obj):
        refs = self.get_hardware_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.hardware_refs.remove(ref)
                return
    # end del_hardware

    def set_hardware_list(self, ref_obj_list):
        """Set hardware list for device-image.
        
        :param ref_obj_list: list of Hardware object
        
        """
        self.hardware_refs = ref_obj_list
    # end set_hardware_list

    def get_hardware_refs(self):
        """Return hardware list for device-image.
        
        :returns: list of <Hardware>
        
        """
        return getattr(self, 'hardware_refs', None)
    # end get_hardware_refs

    def set_tag(self, ref_obj):
        """Set tag for device-image.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to device-image.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for device-image.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for device-image.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_physical_router_back_refs(self):
        """Return list of all physical-routers using this device-image"""
        return getattr(self, 'physical_router_back_refs', None)
    # end get_physical_router_back_refs

    def dump(self):
        """Display device-image object in compact form."""
        print('------------ device-image ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P device_image_vendor_name = ', self.get_device_image_vendor_name())
        print('P device_image_device_family = ', self.get_device_image_device_family())
        print('P device_image_supported_platforms = ', self.get_device_image_supported_platforms())
        print('P device_image_os_version = ', self.get_device_image_os_version())
        print('P device_image_file_uri = ', self.get_device_image_file_uri())
        print('P device_image_size = ', self.get_device_image_size())
        print('P device_image_md5 = ', self.get_device_image_md5())
        print('P device_image_sha1 = ', self.get_device_image_sha1())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF hardware = ', self.get_hardware_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK physical_router = ', self.get_physical_router_back_refs())
    # end dump

# end class DeviceImage

class PhysicalInterface(object):
    """
    Physical interfaces on physical routers.

    Created By:
        User

    Child of:
        :class:`.PhysicalRouter` object

    Properties:
        * ethernet_segment_identifier
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Ethernet Segment Id configured for the Physical Interface. In a multihomed environment, user should

              configure the peer Physical interface with the same ESI.

        * physical_interface_type
            Type: str, *one-of* [u'regular', u'lag', u'service', u'fabric', u'access']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Physical interface type that can be either regular/LAG/service/fabric/access link.

        * physical_interface_mac_addresses
            Type: :class:`.MacAddressesType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              MAC addresses on this physical interface.

        * physical_interface_port_id
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              port id of this physical interface. This port id is used in LLDP to identify a physical port on the

              peering device

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.LogicalInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Logical interfaces on physical interface on physical routers.


    References to:
        * list of :class:`.PhysicalInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to the other physical interface that is connected to this  physical interface.

        * list of :class:`.Port` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              This link represents physical connection from access port of a switch to the server port

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.ServiceAppliance` objects
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.PhysicalInterface` objects
        * list of :class:`.LinkAggregationGroup` objects
        * list of :class:`.VirtualPortGroup` objects
    """

    resource_type = 'physical-interface'
    object_type = 'physical_interface'

    prop_fields = set([u'ethernet_segment_identifier', u'physical_interface_type', u'physical_interface_mac_addresses', u'physical_interface_port_id', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['physical_interface_refs', u'port_refs', u'tag_refs'])
    backref_fields = set([u'service_appliance_back_refs', 'virtual_machine_interface_back_refs', 'physical_interface_back_refs', 'link_aggregation_group_back_refs', u'virtual_port_group_back_refs'])
    children_fields = set(['logical_interfaces'])

    prop_field_types = {
        'ethernet_segment_identifier': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Ethernet Segment Id configured for the Physical Interface. In a multihomed environment, user should', 'configure the peer Physical interface with the same ESI.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'physical_interface_type': {'operations': 'CRUD', 'restrictions': [u'regular', u'lag', u'service', u'fabric', u'access'], 'default': None, 'description': ['Physical interface type that can be either regular/LAG/service/fabric/access link.'], 'simple_type': u'PhysicalInterfaceType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'physical_interface_mac_addresses': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['MAC addresses on this physical interface.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'MacAddressesType', 'restriction_type': None, 'required': 'optional'},
        'physical_interface_port_id': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['port id of this physical interface. This port id is used in LLDP to identify a physical port on the', 'peering device'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['physical_interface_refs'] = ('physical-interface', 'None', False, ['Reference to the other physical interface that is connected to this  physical interface.'])
    ref_field_types['port_refs'] = ('port', 'None', False, ['This link represents physical connection from access port of a switch to the server port'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['service_appliance_back_refs'] = ('service-appliance', 'ServiceApplianceInterfaceType', False)
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['physical_interface_back_refs'] = ('physical-interface', 'None', False)
    backref_field_types['link_aggregation_group_back_refs'] = ('link-aggregation-group', 'None', False)
    backref_field_types['virtual_port_group_back_refs'] = ('virtual-port-group', 'VpgInterfaceParametersType', False)

    children_field_types = {}
    children_field_types['logical_interfaces'] = ('logical-interface', False)

    parent_types = ['physical-router']

    prop_field_metas = {}
    prop_field_metas['ethernet_segment_identifier'] = 'ethernet-segment-identifier'
    prop_field_metas['physical_interface_type'] = 'physical-interface-type'
    prop_field_metas['physical_interface_mac_addresses'] = 'physical-interface-mac-addresses'
    prop_field_metas['physical_interface_port_id'] = 'physical-interface-port-id'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['physical_interface_refs'] = 'physical-interface-connection'
    ref_field_metas['port_refs'] = 'physical-interface-port'
    ref_field_metas['tag_refs'] = 'physical-interface-tag'

    children_field_metas = {}
    children_field_metas['logical_interfaces'] = 'physical-interface-logical-interface'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, ethernet_segment_identifier=None, physical_interface_type=None, physical_interface_mac_addresses=None, physical_interface_port_id=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'physical-interface'
        if not name:
            name = u'default-physical-interface'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'physical-router'
            self.fq_name = ['default-global-system-config', 'default-physical-router']
            self.fq_name.append(name)


        # property fields
        if ethernet_segment_identifier is not None:
            self._ethernet_segment_identifier = ethernet_segment_identifier
        if physical_interface_type is not None:
            self._physical_interface_type = physical_interface_type
        if physical_interface_mac_addresses is not None:
            self._physical_interface_mac_addresses = physical_interface_mac_addresses
        if physical_interface_port_id is not None:
            self._physical_interface_port_id = physical_interface_port_id
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (physical-interface)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of physical-interface in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of physical-interface as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of physical-interface's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of physical-interface's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def ethernet_segment_identifier(self):
        """Get ethernet-segment-identifier for physical-interface.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_ethernet_segment_identifier', None)
    # end ethernet_segment_identifier

    @ethernet_segment_identifier.setter
    def ethernet_segment_identifier(self, ethernet_segment_identifier):
        """Set ethernet-segment-identifier for physical-interface.
        
        :param ethernet_segment_identifier: xsd:string object
        
        """
        self._ethernet_segment_identifier = ethernet_segment_identifier
    # end ethernet_segment_identifier

    def set_ethernet_segment_identifier(self, value):
        self.ethernet_segment_identifier = value
    # end set_ethernet_segment_identifier

    def get_ethernet_segment_identifier(self):
        return self.ethernet_segment_identifier
    # end get_ethernet_segment_identifier

    @property
    def physical_interface_type(self):
        """Get physical-interface-type for physical-interface.
        
        :returns: PhysicalInterfaceType object
        
        """
        return getattr(self, '_physical_interface_type', None)
    # end physical_interface_type

    @physical_interface_type.setter
    def physical_interface_type(self, physical_interface_type):
        """Set physical-interface-type for physical-interface.
        
        :param physical_interface_type: PhysicalInterfaceType object
        
        """
        self._physical_interface_type = physical_interface_type
    # end physical_interface_type

    def set_physical_interface_type(self, value):
        self.physical_interface_type = value
    # end set_physical_interface_type

    def get_physical_interface_type(self):
        return self.physical_interface_type
    # end get_physical_interface_type

    @property
    def physical_interface_mac_addresses(self):
        """Get physical-interface-mac-addresses for physical-interface.
        
        :returns: MacAddressesType object
        
        """
        return getattr(self, '_physical_interface_mac_addresses', None)
    # end physical_interface_mac_addresses

    @physical_interface_mac_addresses.setter
    def physical_interface_mac_addresses(self, physical_interface_mac_addresses):
        """Set physical-interface-mac-addresses for physical-interface.
        
        :param physical_interface_mac_addresses: MacAddressesType object
        
        """
        self._physical_interface_mac_addresses = physical_interface_mac_addresses
    # end physical_interface_mac_addresses

    def set_physical_interface_mac_addresses(self, value):
        self.physical_interface_mac_addresses = value
    # end set_physical_interface_mac_addresses

    def get_physical_interface_mac_addresses(self):
        return self.physical_interface_mac_addresses
    # end get_physical_interface_mac_addresses

    @property
    def physical_interface_port_id(self):
        """Get physical-interface-port-id for physical-interface.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_physical_interface_port_id', None)
    # end physical_interface_port_id

    @physical_interface_port_id.setter
    def physical_interface_port_id(self, physical_interface_port_id):
        """Set physical-interface-port-id for physical-interface.
        
        :param physical_interface_port_id: xsd:string object
        
        """
        self._physical_interface_port_id = physical_interface_port_id
    # end physical_interface_port_id

    def set_physical_interface_port_id(self, value):
        self.physical_interface_port_id = value
    # end set_physical_interface_port_id

    def get_physical_interface_port_id(self):
        return self.physical_interface_port_id
    # end get_physical_interface_port_id

    @property
    def id_perms(self):
        """Get id-perms for physical-interface.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for physical-interface.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for physical-interface.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for physical-interface.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for physical-interface.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for physical-interface.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for physical-interface.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for physical-interface.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_ethernet_segment_identifier'):
            self._serialize_field_to_json(serialized, field_names, 'ethernet_segment_identifier')
        if hasattr(self, '_physical_interface_type'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_type')
        if hasattr(self, '_physical_interface_mac_addresses'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_mac_addresses')
        if hasattr(self, '_physical_interface_port_id'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_port_id')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'physical_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'physical_interface_refs')
        if hasattr(self, 'port_refs'):
            self._serialize_field_to_json(serialized, field_names, 'port_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_logical_interfaces(self):
        return getattr(self, 'logical_interfaces', None)
    # end get_logical_interfaces

    def set_physical_interface(self, ref_obj):
        """Set physical-interface for physical-interface.
        
        :param ref_obj: PhysicalInterface object
        
        """
        self.physical_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.physical_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_physical_interface

    def add_physical_interface(self, ref_obj):
        """Add physical-interface to physical-interface.
        
        :param ref_obj: PhysicalInterface object
        
        """
        refs = getattr(self, 'physical_interface_refs', [])
        if not refs:
            self.physical_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.physical_interface_refs.append(ref_info)
    # end add_physical_interface

    def del_physical_interface(self, ref_obj):
        refs = self.get_physical_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.physical_interface_refs.remove(ref)
                return
    # end del_physical_interface

    def set_physical_interface_list(self, ref_obj_list):
        """Set physical-interface list for physical-interface.
        
        :param ref_obj_list: list of PhysicalInterface object
        
        """
        self.physical_interface_refs = ref_obj_list
    # end set_physical_interface_list

    def get_physical_interface_refs(self):
        """Return physical-interface list for physical-interface.
        
        :returns: list of <PhysicalInterface>
        
        """
        return getattr(self, 'physical_interface_refs', None)
    # end get_physical_interface_refs

    def set_port(self, ref_obj):
        """Set port for physical-interface.
        
        :param ref_obj: Port object
        
        """
        self.port_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.port_refs[0]['uuid'] = ref_obj.uuid

    # end set_port

    def add_port(self, ref_obj):
        """Add port to physical-interface.
        
        :param ref_obj: Port object
        
        """
        refs = getattr(self, 'port_refs', [])
        if not refs:
            self.port_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.port_refs.append(ref_info)
    # end add_port

    def del_port(self, ref_obj):
        refs = self.get_port_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.port_refs.remove(ref)
                return
    # end del_port

    def set_port_list(self, ref_obj_list):
        """Set port list for physical-interface.
        
        :param ref_obj_list: list of Port object
        
        """
        self.port_refs = ref_obj_list
    # end set_port_list

    def get_port_refs(self):
        """Return port list for physical-interface.
        
        :returns: list of <Port>
        
        """
        return getattr(self, 'port_refs', None)
    # end get_port_refs

    def set_tag(self, ref_obj):
        """Set tag for physical-interface.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to physical-interface.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for physical-interface.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for physical-interface.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_service_appliance_back_refs(self):
        """Return list of all service-appliances using this physical-interface"""
        return getattr(self, 'service_appliance_back_refs', None)
    # end get_service_appliance_back_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this physical-interface"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_physical_interface_back_refs(self):
        """Return list of all physical-interfaces using this physical-interface"""
        return getattr(self, 'physical_interface_back_refs', None)
    # end get_physical_interface_back_refs

    def get_link_aggregation_group_back_refs(self):
        """Return list of all link-aggregation-groups using this physical-interface"""
        return getattr(self, 'link_aggregation_group_back_refs', None)
    # end get_link_aggregation_group_back_refs

    def get_virtual_port_group_back_refs(self):
        """Return list of all virtual-port-groups using this physical-interface"""
        return getattr(self, 'virtual_port_group_back_refs', None)
    # end get_virtual_port_group_back_refs

    def dump(self):
        """Display physical-interface object in compact form."""
        print('------------ physical-interface ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P ethernet_segment_identifier = ', self.get_ethernet_segment_identifier())
        print('P physical_interface_type = ', self.get_physical_interface_type())
        print('P physical_interface_mac_addresses = ', self.get_physical_interface_mac_addresses())
        print('P physical_interface_port_id = ', self.get_physical_interface_port_id())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF physical_interface = ', self.get_physical_interface_refs())
        print('HAS logical_interface = ', self.get_logical_interfaces())
        print('REF port = ', self.get_port_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK service_appliance = ', self.get_service_appliance_back_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK physical_interface = ', self.get_physical_interface_back_refs())
        print('BCK link_aggregation_group = ', self.get_link_aggregation_group_back_refs())
        print('BCK virtual_port_group = ', self.get_virtual_port_group_back_refs())
    # end dump

# end class PhysicalInterface

class AccessControlList(object):
    """
    When parent is virtual-network:
        Virtual network access control list are automatically derived from all the network policies attached
        to virtual network.
    When parent is security-group:
        port access control list is  automatically derived from all the security groups attached to port.


    Created By:
        System when parent is :class:`.VirtualNetwork`
        System when parent is :class:`.SecurityGroup`

    Child of:
        :class:`.VirtualNetwork` object OR
        :class:`.SecurityGroup` object

    Properties:
        * access_control_list_entries
            Type: :class:`.AclEntriesType`

            Created By: System

            Operations Allowed: CRUD

            Description:

              Automatically generated by system based on security groups or network policies.

        * access_control_list_hash
            Type: int

            Created By: System

            Operations Allowed: CRUD

            Description:

              A hash value of all the access-control-list-entries in this ACL objects automatically generated by

              system.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'access-control-list'
    object_type = 'access_control_list'

    prop_fields = set([u'access_control_list_entries', u'access_control_list_hash', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'access_control_list_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Automatically generated by system based on security groups or network policies.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'AclEntriesType', 'restriction_type': None, 'required': 'system-only'},
        'access_control_list_hash': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['A hash value of all the access-control-list-entries in this ACL objects automatically generated by', 'system.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'unsignedLong', 'restriction_type': None, 'required': 'system-only'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['virtual-network', 'security-group']

    prop_field_metas = {}
    prop_field_metas['access_control_list_entries'] = 'access-control-list-entries'
    prop_field_metas['access_control_list_hash'] = 'access-control-list-hash'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'access-control-list-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, access_control_list_entries=None, access_control_list_hash=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'access-control-list'
        if not name:
            name = u'default-access-control-list'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("['virtual-network', 'security-group']")

        # property fields
        if access_control_list_entries is not None:
            self._access_control_list_entries = access_control_list_entries
        if access_control_list_hash is not None:
            self._access_control_list_hash = access_control_list_hash
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (access-control-list)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of access-control-list in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of access-control-list as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of access-control-list's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of access-control-list's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def access_control_list_entries(self):
        """Get access-control-list-entries for access-control-list.
        
        :returns: AclEntriesType object
        
        """
        return getattr(self, '_access_control_list_entries', None)
    # end access_control_list_entries

    @access_control_list_entries.setter
    def access_control_list_entries(self, access_control_list_entries):
        """Set access-control-list-entries for access-control-list.
        
        :param access_control_list_entries: AclEntriesType object
        
        """
        self._access_control_list_entries = access_control_list_entries
    # end access_control_list_entries

    def set_access_control_list_entries(self, value):
        self.access_control_list_entries = value
    # end set_access_control_list_entries

    def get_access_control_list_entries(self):
        return self.access_control_list_entries
    # end get_access_control_list_entries

    @property
    def access_control_list_hash(self):
        """Get access-control-list-hash for access-control-list.
        
        :returns: xsd:unsignedLong object
        
        """
        return getattr(self, '_access_control_list_hash', None)
    # end access_control_list_hash

    @access_control_list_hash.setter
    def access_control_list_hash(self, access_control_list_hash):
        """Set access-control-list-hash for access-control-list.
        
        :param access_control_list_hash: xsd:unsignedLong object
        
        """
        self._access_control_list_hash = access_control_list_hash
    # end access_control_list_hash

    def set_access_control_list_hash(self, value):
        self.access_control_list_hash = value
    # end set_access_control_list_hash

    def get_access_control_list_hash(self):
        return self.access_control_list_hash
    # end get_access_control_list_hash

    @property
    def id_perms(self):
        """Get id-perms for access-control-list.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for access-control-list.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for access-control-list.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for access-control-list.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for access-control-list.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for access-control-list.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for access-control-list.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for access-control-list.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_access_control_list_entries'):
            self._serialize_field_to_json(serialized, field_names, 'access_control_list_entries')
        if hasattr(self, '_access_control_list_hash'):
            self._serialize_field_to_json(serialized, field_names, 'access_control_list_hash')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for access-control-list.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to access-control-list.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for access-control-list.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for access-control-list.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display access-control-list object in compact form."""
        print('------------ access-control-list ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P access_control_list_entries = ', self.get_access_control_list_entries())
        print('P access_control_list_hash = ', self.get_access_control_list_hash())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class AccessControlList

class Node(object):
    """
    Parent of this node resource.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * node_type
            Type: str, *one-of* [u'private', u'baremetal', u'esxi', u'ovs-compute', u'sriov-compute']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Type of machine resource

        * esxi_info
            Type: :class:`.ESXIHostInfo`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Details of the ESXI host

        * ip_address
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              IP Address of the Management interface

        * hostname
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Fully qualified host name

        * bms_info
            Type: :class:`.BaremetalServerInfo`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Details of the baremetal server

        * mac_address
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Provisioning Interface MAC Address

        * disk_partition
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Comma seperated disk partition to use.

        * interface_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Name of the Management interface

        * cloud_info
            Type: :class:`.CloudInstanceInfo`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Information related to cloud

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.Port` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Parent of this port.

        * list of :class:`.PortGroup` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Parent of this port group.


    References to:
        * list of :class:`.NodeProfile` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to matching node-profile object for this node

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'node'
    object_type = 'node'

    prop_fields = set([u'node_type', u'esxi_info', u'ip_address', u'hostname', u'bms_info', u'mac_address', u'disk_partition', u'interface_name', u'cloud_info', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'node_profile_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([u'ports', u'port_groups'])

    prop_field_types = {
        'node_type': {'operations': 'CRUD', 'restrictions': [u'private', u'baremetal', u'esxi', u'ovs-compute', u'sriov-compute'], 'default': None, 'description': ['Type of machine resource'], 'simple_type': u'NodeType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'esxi_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Details of the ESXI host'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ESXIHostInfo', 'restriction_type': None, 'required': 'optional'},
        'ip_address': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['IP Address of the Management interface'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'hostname': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Fully qualified host name'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'bms_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Details of the baremetal server'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'BaremetalServerInfo', 'restriction_type': None, 'required': 'optional'},
        'mac_address': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Provisioning Interface MAC Address'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'disk_partition': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Comma seperated disk partition to use.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'interface_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Name of the Management interface'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'},
        'cloud_info': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Information related to cloud'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'CloudInstanceInfo', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['node_profile_refs'] = ('node-profile', 'None', False, ['Reference to matching node-profile object for this node'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}
    children_field_types['ports'] = ('port', False)
    children_field_types['port_groups'] = ('port-group', False)

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['node_type'] = 'node_type'
    prop_field_metas['esxi_info'] = 'esxi-info'
    prop_field_metas['ip_address'] = 'ip-address'
    prop_field_metas['hostname'] = 'hostname'
    prop_field_metas['bms_info'] = 'bms-info'
    prop_field_metas['mac_address'] = 'mac-address'
    prop_field_metas['disk_partition'] = 'disk-partition'
    prop_field_metas['interface_name'] = 'interface-name'
    prop_field_metas['cloud_info'] = 'cloud-info'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['node_profile_refs'] = 'node-node-profile'
    ref_field_metas['tag_refs'] = 'node-tag'

    children_field_metas = {}
    children_field_metas['ports'] = 'node-port'
    children_field_metas['port_groups'] = 'node-port-group'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, node_type=None, esxi_info=None, ip_address=None, hostname=None, bms_info=None, mac_address=None, disk_partition=None, interface_name=None, cloud_info=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'node'
        if not name:
            name = u'default-node'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if node_type is not None:
            self._node_type = node_type
        if esxi_info is not None:
            self._esxi_info = esxi_info
        if ip_address is not None:
            self._ip_address = ip_address
        if hostname is not None:
            self._hostname = hostname
        if bms_info is not None:
            self._bms_info = bms_info
        if mac_address is not None:
            self._mac_address = mac_address
        if disk_partition is not None:
            self._disk_partition = disk_partition
        if interface_name is not None:
            self._interface_name = interface_name
        if cloud_info is not None:
            self._cloud_info = cloud_info
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (node)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of node in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of node as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of node's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of node's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def node_type(self):
        """Get node_type for node.
        
        :returns: NodeType object
        
        """
        return getattr(self, '_node_type', None)
    # end node_type

    @node_type.setter
    def node_type(self, node_type):
        """Set node_type for node.
        
        :param node_type: NodeType object
        
        """
        self._node_type = node_type
    # end node_type

    def set_node_type(self, value):
        self.node_type = value
    # end set_node_type

    def get_node_type(self):
        return self.node_type
    # end get_node_type

    @property
    def esxi_info(self):
        """Get esxi-info for node.
        
        :returns: ESXIHostInfo object
        
        """
        return getattr(self, '_esxi_info', None)
    # end esxi_info

    @esxi_info.setter
    def esxi_info(self, esxi_info):
        """Set esxi-info for node.
        
        :param esxi_info: ESXIHostInfo object
        
        """
        self._esxi_info = esxi_info
    # end esxi_info

    def set_esxi_info(self, value):
        self.esxi_info = value
    # end set_esxi_info

    def get_esxi_info(self):
        return self.esxi_info
    # end get_esxi_info

    @property
    def ip_address(self):
        """Get ip-address for node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_ip_address', None)
    # end ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Set ip-address for node.
        
        :param ip_address: xsd:string object
        
        """
        self._ip_address = ip_address
    # end ip_address

    def set_ip_address(self, value):
        self.ip_address = value
    # end set_ip_address

    def get_ip_address(self):
        return self.ip_address
    # end get_ip_address

    @property
    def hostname(self):
        """Get hostname for node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_hostname', None)
    # end hostname

    @hostname.setter
    def hostname(self, hostname):
        """Set hostname for node.
        
        :param hostname: xsd:string object
        
        """
        self._hostname = hostname
    # end hostname

    def set_hostname(self, value):
        self.hostname = value
    # end set_hostname

    def get_hostname(self):
        return self.hostname
    # end get_hostname

    @property
    def bms_info(self):
        """Get bms-info for node.
        
        :returns: BaremetalServerInfo object
        
        """
        return getattr(self, '_bms_info', None)
    # end bms_info

    @bms_info.setter
    def bms_info(self, bms_info):
        """Set bms-info for node.
        
        :param bms_info: BaremetalServerInfo object
        
        """
        self._bms_info = bms_info
    # end bms_info

    def set_bms_info(self, value):
        self.bms_info = value
    # end set_bms_info

    def get_bms_info(self):
        return self.bms_info
    # end get_bms_info

    @property
    def mac_address(self):
        """Get mac-address for node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_mac_address', None)
    # end mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Set mac-address for node.
        
        :param mac_address: xsd:string object
        
        """
        self._mac_address = mac_address
    # end mac_address

    def set_mac_address(self, value):
        self.mac_address = value
    # end set_mac_address

    def get_mac_address(self):
        return self.mac_address
    # end get_mac_address

    @property
    def disk_partition(self):
        """Get disk-partition for node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_disk_partition', None)
    # end disk_partition

    @disk_partition.setter
    def disk_partition(self, disk_partition):
        """Set disk-partition for node.
        
        :param disk_partition: xsd:string object
        
        """
        self._disk_partition = disk_partition
    # end disk_partition

    def set_disk_partition(self, value):
        self.disk_partition = value
    # end set_disk_partition

    def get_disk_partition(self):
        return self.disk_partition
    # end get_disk_partition

    @property
    def interface_name(self):
        """Get interface-name for node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_interface_name', None)
    # end interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Set interface-name for node.
        
        :param interface_name: xsd:string object
        
        """
        self._interface_name = interface_name
    # end interface_name

    def set_interface_name(self, value):
        self.interface_name = value
    # end set_interface_name

    def get_interface_name(self):
        return self.interface_name
    # end get_interface_name

    @property
    def cloud_info(self):
        """Get cloud-info for node.
        
        :returns: CloudInstanceInfo object
        
        """
        return getattr(self, '_cloud_info', None)
    # end cloud_info

    @cloud_info.setter
    def cloud_info(self, cloud_info):
        """Set cloud-info for node.
        
        :param cloud_info: CloudInstanceInfo object
        
        """
        self._cloud_info = cloud_info
    # end cloud_info

    def set_cloud_info(self, value):
        self.cloud_info = value
    # end set_cloud_info

    def get_cloud_info(self):
        return self.cloud_info
    # end get_cloud_info

    @property
    def id_perms(self):
        """Get id-perms for node.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for node.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for node.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for node.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for node.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for node.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for node.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for node.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_node_type'):
            self._serialize_field_to_json(serialized, field_names, 'node_type')
        if hasattr(self, '_esxi_info'):
            self._serialize_field_to_json(serialized, field_names, 'esxi_info')
        if hasattr(self, '_ip_address'):
            self._serialize_field_to_json(serialized, field_names, 'ip_address')
        if hasattr(self, '_hostname'):
            self._serialize_field_to_json(serialized, field_names, 'hostname')
        if hasattr(self, '_bms_info'):
            self._serialize_field_to_json(serialized, field_names, 'bms_info')
        if hasattr(self, '_mac_address'):
            self._serialize_field_to_json(serialized, field_names, 'mac_address')
        if hasattr(self, '_disk_partition'):
            self._serialize_field_to_json(serialized, field_names, 'disk_partition')
        if hasattr(self, '_interface_name'):
            self._serialize_field_to_json(serialized, field_names, 'interface_name')
        if hasattr(self, '_cloud_info'):
            self._serialize_field_to_json(serialized, field_names, 'cloud_info')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'node_profile_refs'):
            self._serialize_field_to_json(serialized, field_names, 'node_profile_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_ports(self):
        return getattr(self, 'ports', None)
    # end get_ports

    def get_port_groups(self):
        return getattr(self, 'port_groups', None)
    # end get_port_groups

    def set_node_profile(self, ref_obj):
        """Set node-profile for node.
        
        :param ref_obj: NodeProfile object
        
        """
        self.node_profile_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.node_profile_refs[0]['uuid'] = ref_obj.uuid

    # end set_node_profile

    def add_node_profile(self, ref_obj):
        """Add node-profile to node.
        
        :param ref_obj: NodeProfile object
        
        """
        refs = getattr(self, 'node_profile_refs', [])
        if not refs:
            self.node_profile_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.node_profile_refs.append(ref_info)
    # end add_node_profile

    def del_node_profile(self, ref_obj):
        refs = self.get_node_profile_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.node_profile_refs.remove(ref)
                return
    # end del_node_profile

    def set_node_profile_list(self, ref_obj_list):
        """Set node-profile list for node.
        
        :param ref_obj_list: list of NodeProfile object
        
        """
        self.node_profile_refs = ref_obj_list
    # end set_node_profile_list

    def get_node_profile_refs(self):
        """Return node-profile list for node.
        
        :returns: list of <NodeProfile>
        
        """
        return getattr(self, 'node_profile_refs', None)
    # end get_node_profile_refs

    def set_tag(self, ref_obj):
        """Set tag for node.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to node.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for node.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for node.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display node object in compact form."""
        print('------------ node ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P node_type = ', self.get_node_type())
        print('P esxi_info = ', self.get_esxi_info())
        print('P ip_address = ', self.get_ip_address())
        print('P hostname = ', self.get_hostname())
        print('P bms_info = ', self.get_bms_info())
        print('P mac_address = ', self.get_mac_address())
        print('P disk_partition = ', self.get_disk_partition())
        print('P interface_name = ', self.get_interface_name())
        print('P cloud_info = ', self.get_cloud_info())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF node_profile = ', self.get_node_profile_refs())
        print('HAS port = ', self.get_ports())
        print('HAS port_group = ', self.get_port_groups())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class Node

class CustomerAttachment(object):
    """


    Created By:

    Properties:
        * attachment_address
            Type: :class:`.AttachmentAddressType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Not in Use.

        * list of :class:`.FloatingIp` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Not in Use.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'customer-attachment'
    object_type = 'customer_attachment'

    prop_fields = set([u'attachment_address', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_machine_interface_refs', u'floating_ip_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'attachment_address': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': [], 'simple_type': None, 'is_complex': True, 'xsd_type': u'AttachmentAddressType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_machine_interface_refs'] = ('virtual-machine-interface', 'None', False, ['Not in Use.'])
    ref_field_types['floating_ip_refs'] = ('floating-ip', 'None', False, ['Not in Use.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['attachment_address'] = 'attachment-address'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_machine_interface_refs'] = 'customer-attachment-virtual-machine-interface'
    ref_field_metas['floating_ip_refs'] = 'customer-attachment-floating-ip'
    ref_field_metas['tag_refs'] = 'customer-attachment-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, attachment_address=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'customer-attachment'
        if not name:
            name = u'default-customer-attachment'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if attachment_address is not None:
            self._attachment_address = attachment_address
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (customer-attachment)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of customer-attachment in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of customer-attachment as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def attachment_address(self):
        """Get attachment-address for customer-attachment.
        
        :returns: AttachmentAddressType object
        
        """
        return getattr(self, '_attachment_address', None)
    # end attachment_address

    @attachment_address.setter
    def attachment_address(self, attachment_address):
        """Set attachment-address for customer-attachment.
        
        :param attachment_address: AttachmentAddressType object
        
        """
        self._attachment_address = attachment_address
    # end attachment_address

    def set_attachment_address(self, value):
        self.attachment_address = value
    # end set_attachment_address

    def get_attachment_address(self):
        return self.attachment_address
    # end get_attachment_address

    @property
    def id_perms(self):
        """Get id-perms for customer-attachment.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for customer-attachment.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for customer-attachment.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for customer-attachment.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for customer-attachment.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for customer-attachment.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for customer-attachment.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for customer-attachment.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_attachment_address'):
            self._serialize_field_to_json(serialized, field_names, 'attachment_address')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_machine_interface_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_machine_interface_refs')
        if hasattr(self, 'floating_ip_refs'):
            self._serialize_field_to_json(serialized, field_names, 'floating_ip_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_machine_interface(self, ref_obj):
        """Set virtual-machine-interface for customer-attachment.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_machine_interface_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_machine_interface

    def add_virtual_machine_interface(self, ref_obj):
        """Add virtual-machine-interface to customer-attachment.
        
        :param ref_obj: VirtualMachineInterface object
        
        """
        refs = getattr(self, 'virtual_machine_interface_refs', [])
        if not refs:
            self.virtual_machine_interface_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_machine_interface_refs.append(ref_info)
    # end add_virtual_machine_interface

    def del_virtual_machine_interface(self, ref_obj):
        refs = self.get_virtual_machine_interface_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_machine_interface_refs.remove(ref)
                return
    # end del_virtual_machine_interface

    def set_virtual_machine_interface_list(self, ref_obj_list):
        """Set virtual-machine-interface list for customer-attachment.
        
        :param ref_obj_list: list of VirtualMachineInterface object
        
        """
        self.virtual_machine_interface_refs = ref_obj_list
    # end set_virtual_machine_interface_list

    def get_virtual_machine_interface_refs(self):
        """Return virtual-machine-interface list for customer-attachment.
        
        :returns: list of <VirtualMachineInterface>
        
        """
        return getattr(self, 'virtual_machine_interface_refs', None)
    # end get_virtual_machine_interface_refs

    def set_floating_ip(self, ref_obj):
        """Set floating-ip for customer-attachment.
        
        :param ref_obj: FloatingIp object
        
        """
        self.floating_ip_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.floating_ip_refs[0]['uuid'] = ref_obj.uuid

    # end set_floating_ip

    def add_floating_ip(self, ref_obj):
        """Add floating-ip to customer-attachment.
        
        :param ref_obj: FloatingIp object
        
        """
        refs = getattr(self, 'floating_ip_refs', [])
        if not refs:
            self.floating_ip_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.floating_ip_refs.append(ref_info)
    # end add_floating_ip

    def del_floating_ip(self, ref_obj):
        refs = self.get_floating_ip_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.floating_ip_refs.remove(ref)
                return
    # end del_floating_ip

    def set_floating_ip_list(self, ref_obj_list):
        """Set floating-ip list for customer-attachment.
        
        :param ref_obj_list: list of FloatingIp object
        
        """
        self.floating_ip_refs = ref_obj_list
    # end set_floating_ip_list

    def get_floating_ip_refs(self):
        """Return floating-ip list for customer-attachment.
        
        :returns: list of <FloatingIp>
        
        """
        return getattr(self, 'floating_ip_refs', None)
    # end get_floating_ip_refs

    def set_tag(self, ref_obj):
        """Set tag for customer-attachment.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to customer-attachment.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for customer-attachment.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for customer-attachment.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display customer-attachment object in compact form."""
        print('------------ customer-attachment ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P attachment_address = ', self.get_attachment_address())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_machine_interface = ', self.get_virtual_machine_interface_refs())
        print('REF floating_ip = ', self.get_floating_ip_refs())
        print('HAS routing_instance = ', self.get_routing_instances())
        print('HAS provider_attachment = ', self.get_provider_attachments())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class CustomerAttachment

class StructuredSyslogSlaProfile(object):
    """
mapping sla-profile to sla params

    Created By:
        User

    Child of:
        :class:`.StructuredSyslogConfig` object

    Properties:
        * structured_syslog_sla_params
            Type: str

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              The sla                                   params like sampling %age and

              traffic type

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'structured-syslog-sla-profile'
    object_type = 'structured_syslog_sla_profile'

    prop_fields = set([u'structured_syslog_sla_params', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'structured_syslog_sla_params': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['The sla                                   params like sampling %age and', 'traffic type'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'structured-syslog-config']

    prop_field_metas = {}
    prop_field_metas['structured_syslog_sla_params'] = 'structured-syslog-sla-params'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'structured-syslog-sla-profile-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, structured_syslog_sla_params=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'structured-syslog-sla-profile'
        if not name:
            name = u'default-structured-syslog-sla-profile'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            raise AmbiguousParentError("Ambiguous parents [u'global-analytics-config', 'project']")


        # property fields
        if structured_syslog_sla_params is not None:
            self._structured_syslog_sla_params = structured_syslog_sla_params
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (structured-syslog-sla-profile)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of structured-syslog-sla-profile in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of structured-syslog-sla-profile as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of structured-syslog-sla-profile's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of structured-syslog-sla-profile's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def structured_syslog_sla_params(self):
        """Get structured-syslog-sla-params for structured-syslog-sla-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_structured_syslog_sla_params', None)
    # end structured_syslog_sla_params

    @structured_syslog_sla_params.setter
    def structured_syslog_sla_params(self, structured_syslog_sla_params):
        """Set structured-syslog-sla-params for structured-syslog-sla-profile.
        
        :param structured_syslog_sla_params: xsd:string object
        
        """
        self._structured_syslog_sla_params = structured_syslog_sla_params
    # end structured_syslog_sla_params

    def set_structured_syslog_sla_params(self, value):
        self.structured_syslog_sla_params = value
    # end set_structured_syslog_sla_params

    def get_structured_syslog_sla_params(self):
        return self.structured_syslog_sla_params
    # end get_structured_syslog_sla_params

    @property
    def id_perms(self):
        """Get id-perms for structured-syslog-sla-profile.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for structured-syslog-sla-profile.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for structured-syslog-sla-profile.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for structured-syslog-sla-profile.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for structured-syslog-sla-profile.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for structured-syslog-sla-profile.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for structured-syslog-sla-profile.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for structured-syslog-sla-profile.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_structured_syslog_sla_params'):
            self._serialize_field_to_json(serialized, field_names, 'structured_syslog_sla_params')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for structured-syslog-sla-profile.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to structured-syslog-sla-profile.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for structured-syslog-sla-profile.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for structured-syslog-sla-profile.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display structured-syslog-sla-profile object in compact form."""
        print('------------ structured-syslog-sla-profile ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P structured_syslog_sla_params = ', self.get_structured_syslog_sla_params())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class StructuredSyslogSlaProfile

class HostBasedService(object):
    """
    Project level host based service.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * host_based_service_type
            Type: str, *one-of* [u'firewall']

            Created By: User (optional)

            Operations Allowed: CR

            Description:

              Defines which host based service type is used, cannot not be updated.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.VirtualNetwork` object, :class:`.ServiceVirtualNetworkType` attribute)
            Created By: User (optional)

            Operations Allowed: R

            Description:

              Reference to virtual network attached to the HBS tagged mangement, left, right, other*. only one ref

              per tag type.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'host-based-service'
    object_type = 'host_based_service'

    prop_fields = set([u'host_based_service_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['virtual_network_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'host_based_service_type': {'operations': 'CR', 'restrictions': [u'firewall'], 'default': 'firewall', 'description': ['Defines which host based service type is used, cannot not be updated.'], 'simple_type': u'HostBasedServiceType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'ServiceVirtualNetworkType', False, ['Reference to virtual network attached to the HBS tagged mangement, left, right, other*. only one ref', 'per tag type.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['host_based_service_type'] = 'host-based-service-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['virtual_network_refs'] = 'host-based-service-virtual-network'
    ref_field_metas['tag_refs'] = 'host-based-service-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, host_based_service_type='firewall', id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'host-based-service'
        if not name:
            name = u'default-host-based-service'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if host_based_service_type is not None:
            self._host_based_service_type = host_based_service_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (host-based-service)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of host-based-service in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of host-based-service as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of host-based-service's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of host-based-service's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def host_based_service_type(self):
        """Get host-based-service-type for host-based-service.
        
        :returns: HostBasedServiceType object
        
        """
        return getattr(self, '_host_based_service_type', None)
    # end host_based_service_type

    @host_based_service_type.setter
    def host_based_service_type(self, host_based_service_type):
        """Set host-based-service-type for host-based-service.
        
        :param host_based_service_type: HostBasedServiceType object
        
        """
        self._host_based_service_type = host_based_service_type
    # end host_based_service_type

    def set_host_based_service_type(self, value):
        self.host_based_service_type = value
    # end set_host_based_service_type

    def get_host_based_service_type(self):
        return self.host_based_service_type
    # end get_host_based_service_type

    @property
    def id_perms(self):
        """Get id-perms for host-based-service.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for host-based-service.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for host-based-service.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for host-based-service.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for host-based-service.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for host-based-service.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for host-based-service.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for host-based-service.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_host_based_service_type'):
            self._serialize_field_to_json(serialized, field_names, 'host_based_service_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_virtual_network(self, ref_obj, ref_data=None):
        """Set virtual-network for host-based-service.
        
        :param ref_obj: VirtualNetwork object
        :param ref_data: ServiceVirtualNetworkType object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj, ref_data=None):
        """Add virtual-network to host-based-service.
        
        :param ref_obj: VirtualNetwork object
        :param ref_data: ServiceVirtualNetworkType object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list, ref_data_list=None):
        """Set virtual-network list for host-based-service.
        
        :param ref_obj_list: list of VirtualNetwork object
        :param ref_data_list: list of ServiceVirtualNetworkType object
        
        """
        self.virtual_network_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for host-based-service.
        
        :returns: list of tuple <VirtualNetwork, ServiceVirtualNetworkType>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_tag(self, ref_obj):
        """Set tag for host-based-service.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to host-based-service.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for host-based-service.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for host-based-service.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display host-based-service object in compact form."""
        print('------------ host-based-service ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P host_based_service_type = ', self.get_host_based_service_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class HostBasedService

class VirtualMachine(object):
    """


    Created By:

    Properties:
        * server_type
            Type: str, *one-of* [u'virtual-server', u'baremetal-server', u'container']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              An enumeration value specifying the server type.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.VirtualMachineInterface` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              References to child interfaces this virtual machine has, this is DEPRECATED.


    References to:
        * list of :class:`.ServiceInstance` objects
            Created By: System

            Operations Allowed: CRUD

            Description:

              Reference to the service instance of this virtual machine.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.VirtualRouter` objects
    """

    resource_type = 'virtual-machine'
    object_type = 'virtual_machine'

    prop_fields = set([u'server_type', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_instance_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs', 'virtual_router_back_refs'])
    children_fields = set(['virtual_machine_interfaces'])

    prop_field_types = {
        'server_type': {'operations': 'CRUD', 'restrictions': [u'virtual-server', u'baremetal-server', u'container'], 'default': 'virtual-server', 'description': ['An enumeration value specifying the server type.'], 'simple_type': u'ServerType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_instance_refs'] = ('service-instance', 'None', True, ['Reference to the service instance of this virtual machine.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['virtual_router_back_refs'] = ('virtual-router', 'None', False)

    children_field_types = {}
    children_field_types['virtual_machine_interfaces'] = ('virtual-machine-interface', False)

    parent_types = ['config-root']

    prop_field_metas = {}
    prop_field_metas['server_type'] = 'server-type'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_instance_refs'] = 'virtual-machine-service-instance'
    ref_field_metas['tag_refs'] = 'virtual-machine-tag'

    children_field_metas = {}
    children_field_metas['virtual_machine_interfaces'] = 'virtual-machine-virtual-machine-interface'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, server_type='virtual-server', id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'virtual-machine'
        if not name:
            name = u'default-virtual-machine'
        self.name = name
        self._uuid = None
        self.fq_name = [name]

        # property fields
        if server_type is not None:
            self._server_type = server_type
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (virtual-machine)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of virtual-machine in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of virtual-machine as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def server_type(self):
        """Get server-type for virtual-machine.
        
        :returns: ServerType object
        
        """
        return getattr(self, '_server_type', None)
    # end server_type

    @server_type.setter
    def server_type(self, server_type):
        """Set server-type for virtual-machine.
        
        :param server_type: ServerType object
        
        """
        self._server_type = server_type
    # end server_type

    def set_server_type(self, value):
        self.server_type = value
    # end set_server_type

    def get_server_type(self):
        return self.server_type
    # end get_server_type

    @property
    def id_perms(self):
        """Get id-perms for virtual-machine.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for virtual-machine.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for virtual-machine.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for virtual-machine.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for virtual-machine.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for virtual-machine.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for virtual-machine.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for virtual-machine.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_server_type'):
            self._serialize_field_to_json(serialized, field_names, 'server_type')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_virtual_machine_interfaces(self):
        return getattr(self, 'virtual_machine_interfaces', None)
    # end get_virtual_machine_interfaces

    def set_service_instance(self, ref_obj):
        """Set service-instance for virtual-machine.
        
        :param ref_obj: ServiceInstance object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj):
        """Add service-instance to virtual-machine.
        
        :param ref_obj: ServiceInstance object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list):
        """Set service-instance list for virtual-machine.
        
        :param ref_obj_list: list of ServiceInstance object
        
        """
        self.service_instance_refs = ref_obj_list
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for virtual-machine.
        
        :returns: list of <ServiceInstance>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_tag(self, ref_obj):
        """Set tag for virtual-machine.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to virtual-machine.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for virtual-machine.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for virtual-machine.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this virtual-machine"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_virtual_router_back_refs(self):
        """Return list of all virtual-routers using this virtual-machine"""
        return getattr(self, 'virtual_router_back_refs', None)
    # end get_virtual_router_back_refs

    def dump(self):
        """Display virtual-machine object in compact form."""
        print('------------ virtual-machine ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        print('P server_type = ', self.get_server_type())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS virtual_machine_interface = ', self.get_virtual_machine_interfaces())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK virtual_router = ', self.get_virtual_router_back_refs())
    # end dump

# end class VirtualMachine

class InterfaceRouteTable(object):
    """
    Interface route table is mechanism to add static routes pointing to this interface.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * interface_route_table_routes
            Type: :class:`.RouteTableType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Interface route table used same structure as route table, however the next hop field is irrelevant.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.ServiceInstance` object, :class:`.ServiceInterfaceTag` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to interface route table attached to (service instance, interface), This is used to add

              interface static routes to service instance interface.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
    """

    resource_type = 'interface-route-table'
    object_type = 'interface_route_table'

    prop_fields = set([u'interface_route_table_routes', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_instance_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'interface_route_table_routes': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Interface route table used same structure as route table, however the next hop field is irrelevant.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTableType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_instance_refs'] = ('service-instance', 'ServiceInterfaceTag', True, ['Reference to interface route table attached to (service instance, interface), This is used to add', 'interface static routes to service instance interface.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['interface_route_table_routes'] = 'interface-route-table-routes'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_instance_refs'] = 'interface-route-table-service-instance'
    ref_field_metas['tag_refs'] = 'interface-route-table-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, interface_route_table_routes=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'interface-route-table'
        if not name:
            name = u'default-interface-route-table'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if interface_route_table_routes is not None:
            self._interface_route_table_routes = interface_route_table_routes
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (interface-route-table)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of interface-route-table in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of interface-route-table as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of interface-route-table's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of interface-route-table's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def interface_route_table_routes(self):
        """Get interface-route-table-routes for interface-route-table.
        
        :returns: RouteTableType object
        
        """
        return getattr(self, '_interface_route_table_routes', None)
    # end interface_route_table_routes

    @interface_route_table_routes.setter
    def interface_route_table_routes(self, interface_route_table_routes):
        """Set interface-route-table-routes for interface-route-table.
        
        :param interface_route_table_routes: RouteTableType object
        
        """
        self._interface_route_table_routes = interface_route_table_routes
    # end interface_route_table_routes

    def set_interface_route_table_routes(self, value):
        self.interface_route_table_routes = value
    # end set_interface_route_table_routes

    def get_interface_route_table_routes(self):
        return self.interface_route_table_routes
    # end get_interface_route_table_routes

    @property
    def id_perms(self):
        """Get id-perms for interface-route-table.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for interface-route-table.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for interface-route-table.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for interface-route-table.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for interface-route-table.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for interface-route-table.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for interface-route-table.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for interface-route-table.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_interface_route_table_routes'):
            self._serialize_field_to_json(serialized, field_names, 'interface_route_table_routes')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_instance(self, ref_obj, ref_data=None):
        """Set service-instance for interface-route-table.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: ServiceInterfaceTag object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj, ref_data=None):
        """Add service-instance to interface-route-table.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: ServiceInterfaceTag object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list, ref_data_list=None):
        """Set service-instance list for interface-route-table.
        
        :param ref_obj_list: list of ServiceInstance object
        :param ref_data_list: list of ServiceInterfaceTag object
        
        """
        self.service_instance_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for interface-route-table.
        
        :returns: list of tuple <ServiceInstance, ServiceInterfaceTag>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_tag(self, ref_obj):
        """Set tag for interface-route-table.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to interface-route-table.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for interface-route-table.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for interface-route-table.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this interface-route-table"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def dump(self):
        """Display interface-route-table object in compact form."""
        print('------------ interface-route-table ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P interface_route_table_routes = ', self.get_interface_route_table_routes())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
    # end dump

# end class InterfaceRouteTable

class LoadbalancerMember(object):
    """
    Configuration object representing each member of load balancer pool.

    Created By:
        User

    Child of:
        :class:`.LoadbalancerPool` object

    Properties:
        * loadbalancer_member_properties
            Type: :class:`.LoadbalancerMemberType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Member configuration like ip address, destination port, weight etc.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'loadbalancer-member'
    object_type = 'loadbalancer_member'

    prop_fields = set([u'loadbalancer_member_properties', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'loadbalancer_member_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Member configuration like ip address, destination port, weight etc.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'LoadbalancerMemberType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'loadbalancer-pool']

    prop_field_metas = {}
    prop_field_metas['loadbalancer_member_properties'] = 'loadbalancer-member-properties'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'loadbalancer-member-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, loadbalancer_member_properties=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'loadbalancer-member'
        if not name:
            name = u'default-loadbalancer-member'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'loadbalancer-pool'
            self.fq_name = [u'default-domain', 'default-project', u'default-loadbalancer-pool']
            self.fq_name.append(name)


        # property fields
        if loadbalancer_member_properties is not None:
            self._loadbalancer_member_properties = loadbalancer_member_properties
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (loadbalancer-member)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of loadbalancer-member in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of loadbalancer-member as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of loadbalancer-member's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of loadbalancer-member's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def loadbalancer_member_properties(self):
        """Get loadbalancer-member-properties for loadbalancer-member.
        
        :returns: LoadbalancerMemberType object
        
        """
        return getattr(self, '_loadbalancer_member_properties', None)
    # end loadbalancer_member_properties

    @loadbalancer_member_properties.setter
    def loadbalancer_member_properties(self, loadbalancer_member_properties):
        """Set loadbalancer-member-properties for loadbalancer-member.
        
        :param loadbalancer_member_properties: LoadbalancerMemberType object
        
        """
        self._loadbalancer_member_properties = loadbalancer_member_properties
    # end loadbalancer_member_properties

    def set_loadbalancer_member_properties(self, value):
        self.loadbalancer_member_properties = value
    # end set_loadbalancer_member_properties

    def get_loadbalancer_member_properties(self):
        return self.loadbalancer_member_properties
    # end get_loadbalancer_member_properties

    @property
    def id_perms(self):
        """Get id-perms for loadbalancer-member.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for loadbalancer-member.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for loadbalancer-member.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for loadbalancer-member.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for loadbalancer-member.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for loadbalancer-member.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for loadbalancer-member.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for loadbalancer-member.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_loadbalancer_member_properties'):
            self._serialize_field_to_json(serialized, field_names, 'loadbalancer_member_properties')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for loadbalancer-member.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to loadbalancer-member.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for loadbalancer-member.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for loadbalancer-member.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display loadbalancer-member object in compact form."""
        print('------------ loadbalancer-member ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P loadbalancer_member_properties = ', self.get_loadbalancer_member_properties())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class LoadbalancerMember

class ServiceHealthCheck(object):
    """
    Service health check is a keepalive mechanism for the virtual machine interface. Liveliness of the
    interface is determined based on configuration in the service health check. It is mainly designed
    for service instance interfaces. However it will work with any interface which present on contrail
    vrouter.

    Created By:
        User

    Child of:
        :class:`.Project` object

    Properties:
        * service_health_check_properties
            Type: :class:`.ServiceHealthCheckType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Service health check has following fields.

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of (:class:`.ServiceInstance` object, :class:`.ServiceInterfaceTag` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Reference to service instance using this service health check.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.BgpAsAService` objects
    """

    resource_type = 'service-health-check'
    object_type = 'service_health_check'

    prop_fields = set([u'service_health_check_properties', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'service_instance_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs', 'bgp_as_a_service_back_refs'])
    children_fields = set([])

    prop_field_types = {
        'service_health_check_properties': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Service health check has following fields.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ServiceHealthCheckType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['service_instance_refs'] = ('service-instance', 'ServiceInterfaceTag', True, ['Reference to service instance using this service health check.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'None', False)
    backref_field_types['bgp_as_a_service_back_refs'] = ('bgp-as-a-service', 'None', False)

    children_field_types = {}

    parent_types = ['project']

    prop_field_metas = {}
    prop_field_metas['service_health_check_properties'] = 'service-health-check-properties'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['service_instance_refs'] = 'service-health-check-service-instance'
    ref_field_metas['tag_refs'] = 'service-health-check-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, service_health_check_properties=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'service-health-check'
        if not name:
            name = u'default-service-health-check'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'project'
            self.fq_name = [u'default-domain', 'default-project']
            self.fq_name.append(name)


        # property fields
        if service_health_check_properties is not None:
            self._service_health_check_properties = service_health_check_properties
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (service-health-check)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of service-health-check in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of service-health-check as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of service-health-check's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of service-health-check's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def service_health_check_properties(self):
        """Get service-health-check-properties for service-health-check.
        
        :returns: ServiceHealthCheckType object
        
        """
        return getattr(self, '_service_health_check_properties', None)
    # end service_health_check_properties

    @service_health_check_properties.setter
    def service_health_check_properties(self, service_health_check_properties):
        """Set service-health-check-properties for service-health-check.
        
        :param service_health_check_properties: ServiceHealthCheckType object
        
        """
        self._service_health_check_properties = service_health_check_properties
    # end service_health_check_properties

    def set_service_health_check_properties(self, value):
        self.service_health_check_properties = value
    # end set_service_health_check_properties

    def get_service_health_check_properties(self):
        return self.service_health_check_properties
    # end get_service_health_check_properties

    @property
    def id_perms(self):
        """Get id-perms for service-health-check.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for service-health-check.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for service-health-check.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for service-health-check.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for service-health-check.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for service-health-check.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for service-health-check.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for service-health-check.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_service_health_check_properties'):
            self._serialize_field_to_json(serialized, field_names, 'service_health_check_properties')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'service_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'service_instance_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_service_instance(self, ref_obj, ref_data=None):
        """Set service-instance for service-health-check.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: ServiceInterfaceTag object
        
        """
        self.service_instance_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.service_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_service_instance

    def add_service_instance(self, ref_obj, ref_data=None):
        """Add service-instance to service-health-check.
        
        :param ref_obj: ServiceInstance object
        :param ref_data: ServiceInterfaceTag object
        
        """
        refs = getattr(self, 'service_instance_refs', [])
        if not refs:
            self.service_instance_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.service_instance_refs.append(ref_info)
    # end add_service_instance

    def del_service_instance(self, ref_obj):
        refs = self.get_service_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.service_instance_refs.remove(ref)
                return
    # end del_service_instance

    def set_service_instance_list(self, ref_obj_list, ref_data_list=None):
        """Set service-instance list for service-health-check.
        
        :param ref_obj_list: list of ServiceInstance object
        :param ref_data_list: list of ServiceInterfaceTag object
        
        """
        self.service_instance_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_service_instance_list

    def get_service_instance_refs(self):
        """Return service-instance list for service-health-check.
        
        :returns: list of tuple <ServiceInstance, ServiceInterfaceTag>
        
        """
        return getattr(self, 'service_instance_refs', None)
    # end get_service_instance_refs

    def set_tag(self, ref_obj):
        """Set tag for service-health-check.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to service-health-check.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for service-health-check.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for service-health-check.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this service-health-check"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_bgp_as_a_service_back_refs(self):
        """Return list of all bgp-as-a-services using this service-health-check"""
        return getattr(self, 'bgp_as_a_service_back_refs', None)
    # end get_bgp_as_a_service_back_refs

    def dump(self):
        """Display service-health-check object in compact form."""
        print('------------ service-health-check ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P service_health_check_properties = ', self.get_service_health_check_properties())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF service_instance = ', self.get_service_instance_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK bgp_as_a_service = ', self.get_bgp_as_a_service_back_refs())
    # end dump

# end class ServiceHealthCheck

class Alarm(object):
    """
    When parent is global-system-config:
        List of alarms that are applicable to objects anchored under global-system-config.
    When parent is project:
        List of alarms that are applicable to objects anchored under the project.


    Created By:
        User when parent is :class:`.GlobalSystemConfig`
        User when parent is :class:`.Project`

    Child of:
        :class:`.GlobalSystemConfig` object OR
        :class:`.Project` object

    Properties:
        * uve_keys
            Type: :class:`.UveKeysType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              List of UVE tables or UVE objects where this alarm config should be applied. For example, rules

              based on NodeStatus UVE can be applied to multiple object types or specific uve objects such as

              analytics-node, config-node, control-node:<hostname>, etc.,

        * alarm_severity
            Type: int, *within* [0, 2]

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              Severity level for the alarm.

        * alarm_rules
            Type: :class:`.AlarmOrList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Rules based on the UVE attributes specified as OR-of-ANDs of AlarmExpression template. Example:

              "alarm_rules": {"or_list": [{"and_list": [{AlarmExpression1}, {AlarmExpression2}, ...]},

              {"and_list": [{AlarmExpression3}, {AlarmExpression4}, ...]}]}

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'alarm'
    object_type = 'alarm'

    prop_fields = set([u'uve_keys', u'alarm_severity', u'alarm_rules', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'uve_keys': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of UVE tables or UVE objects where this alarm config should be applied. For example, rules', 'based on NodeStatus UVE can be applied to multiple object types or specific uve objects such as', 'analytics-node, config-node, control-node:<hostname>, etc.,'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'UveKeysType', 'restriction_type': None, 'required': 'required'},
        'alarm_severity': {'operations': 'CRUD', 'restrictions': [0, 2], 'default': None, 'description': ['Severity level for the alarm.'], 'simple_type': u'AlarmSeverity', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'required'},
        'alarm_rules': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Rules based on the UVE attributes specified as OR-of-ANDs of AlarmExpression template. Example:', '"alarm_rules": {"or_list": [{"and_list": [{AlarmExpression1}, {AlarmExpression2}, ...]},', '{"and_list": [{AlarmExpression3}, {AlarmExpression4}, ...]}]}'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'AlarmOrList', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config', 'project']

    prop_field_metas = {}
    prop_field_metas['uve_keys'] = 'uve-keys'
    prop_field_metas['alarm_severity'] = 'alarm-severity'
    prop_field_metas['alarm_rules'] = 'alarm-rules'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'alarm-tag'

    children_field_metas = {}

    prop_list_fields = set([u'alarm_rules'])

    prop_list_field_has_wrappers = {}
    prop_list_field_has_wrappers['alarm_rules'] = True

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, uve_keys=None, alarm_severity=None, alarm_rules=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'alarm'
        if not name:
            name = u'default-alarm'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("['global-system-config', 'project']")

        # property fields
        if uve_keys is not None:
            self._uve_keys = uve_keys
        if alarm_severity is not None:
            self._alarm_severity = alarm_severity
        if alarm_rules is not None:
            self._alarm_rules = alarm_rules
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (alarm)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of alarm in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of alarm as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of alarm's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of alarm's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def uve_keys(self):
        """Get uve-keys for alarm.
        
        :returns: UveKeysType object
        
        """
        return getattr(self, '_uve_keys', None)
    # end uve_keys

    @uve_keys.setter
    def uve_keys(self, uve_keys):
        """Set uve-keys for alarm.
        
        :param uve_keys: UveKeysType object
        
        """
        self._uve_keys = uve_keys
    # end uve_keys

    def set_uve_keys(self, value):
        self.uve_keys = value
    # end set_uve_keys

    def get_uve_keys(self):
        return self.uve_keys
    # end get_uve_keys

    @property
    def alarm_severity(self):
        """Get alarm-severity for alarm.
        
        :returns: AlarmSeverity object
        
        """
        return getattr(self, '_alarm_severity', None)
    # end alarm_severity

    @alarm_severity.setter
    def alarm_severity(self, alarm_severity):
        """Set alarm-severity for alarm.
        
        :param alarm_severity: AlarmSeverity object
        
        """
        self._alarm_severity = alarm_severity
    # end alarm_severity

    def set_alarm_severity(self, value):
        self.alarm_severity = value
    # end set_alarm_severity

    def get_alarm_severity(self):
        return self.alarm_severity
    # end get_alarm_severity

    @property
    def alarm_rules(self):
        """Get alarm-rules for alarm.
        
        :returns: AlarmOrList object
        
        """
        return getattr(self, '_alarm_rules', None)
    # end alarm_rules

    @alarm_rules.setter
    def alarm_rules(self, alarm_rules):
        """Set alarm-rules for alarm.
        
        :param alarm_rules: AlarmOrList object
        
        """
        self._alarm_rules = alarm_rules
    # end alarm_rules

    def set_alarm_rules(self, value):
        self.alarm_rules = value
    # end set_alarm_rules

    def get_alarm_rules(self):
        return self.alarm_rules
    # end get_alarm_rules

    @property
    def id_perms(self):
        """Get id-perms for alarm.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for alarm.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for alarm.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for alarm.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for alarm.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for alarm.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for alarm.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for alarm.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_uve_keys'):
            self._serialize_field_to_json(serialized, field_names, 'uve_keys')
        if hasattr(self, '_alarm_severity'):
            self._serialize_field_to_json(serialized, field_names, 'alarm_severity')
        if hasattr(self, '_alarm_rules'):
            self._serialize_field_to_json(serialized, field_names, 'alarm_rules')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for alarm.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to alarm.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for alarm.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for alarm.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display alarm object in compact form."""
        print('------------ alarm ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P uve_keys = ', self.get_uve_keys())
        print('P alarm_severity = ', self.get_alarm_severity())
        print('P alarm_rules = ', self.get_alarm_rules())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class Alarm

class ApiAccessList(object):
    """
    When parent is domain:
        API access list is list of rules that define role based access to each API and its properties at
        domain level.
    When parent is project:
        API access list is list of rules that define role based access to each API and its properties at
        project level.
    When parent is global-system-config:
        Global API access list applicable to all domain and projects


    Created By:
        User when parent is :class:`.Domain`
        User when parent is :class:`.Project`
        User when parent is :class:`.GlobalSystemConfig`

    Child of:
        :class:`.Domain` object OR
        :class:`.Project` object OR
        :class:`.GlobalSystemConfig` object

    Properties:
        * api_access_list_entries
            Type: :class:`.RbacRuleEntriesType`

            Created By: User (required)

            Operations Allowed: CRUD

            Description:

              List of rules e.g network.* => admin:CRUD (admin can perform all ops on networks).

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'api-access-list'
    object_type = 'api_access_list'

    prop_fields = set([u'api_access_list_entries', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'api_access_list_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of rules e.g network.* => admin:CRUD (admin can perform all ops on networks).'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RbacRuleEntriesType', 'restriction_type': None, 'required': 'required'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = [u'domain', 'project', 'global-system-config']

    prop_field_metas = {}
    prop_field_metas['api_access_list_entries'] = 'api-access-list-entries'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'api-access-list-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, api_access_list_entries=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'api-access-list'
        if not name:
            name = u'default-api-access-list'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            # if obj constructed from within server, ignore if parent not specified
            if not kwargs['parent_type']:
                raise AmbiguousParentError("[u'domain', 'project', 'global-system-config']")

        # property fields
        if api_access_list_entries is not None:
            self._api_access_list_entries = api_access_list_entries
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (api-access-list)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of api-access-list in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of api-access-list as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of api-access-list's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of api-access-list's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def api_access_list_entries(self):
        """Get api-access-list-entries for api-access-list.
        
        :returns: RbacRuleEntriesType object
        
        """
        return getattr(self, '_api_access_list_entries', None)
    # end api_access_list_entries

    @api_access_list_entries.setter
    def api_access_list_entries(self, api_access_list_entries):
        """Set api-access-list-entries for api-access-list.
        
        :param api_access_list_entries: RbacRuleEntriesType object
        
        """
        self._api_access_list_entries = api_access_list_entries
    # end api_access_list_entries

    def set_api_access_list_entries(self, value):
        self.api_access_list_entries = value
    # end set_api_access_list_entries

    def get_api_access_list_entries(self):
        return self.api_access_list_entries
    # end get_api_access_list_entries

    @property
    def id_perms(self):
        """Get id-perms for api-access-list.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for api-access-list.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for api-access-list.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for api-access-list.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for api-access-list.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for api-access-list.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for api-access-list.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for api-access-list.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_api_access_list_entries'):
            self._serialize_field_to_json(serialized, field_names, 'api_access_list_entries')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_tag(self, ref_obj):
        """Set tag for api-access-list.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to api-access-list.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for api-access-list.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for api-access-list.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display api-access-list object in compact form."""
        print('------------ api-access-list ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P api_access_list_entries = ', self.get_api_access_list_entries())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class ApiAccessList

class RoutingInstance(object):
    """
    List of references of routing instances for this virtual network, routing instances are internal to
    the system.

    Created By:
        System

    Child of:
        :class:`.VirtualNetwork` object

    Properties:
        * service_chain_information
            Type: :class:`.ServiceChainInfo`

            Created By: System

            Operations Allowed: CRUD

            Description:

              Internal service chaining information, should not be modified.

        * ipv6_service_chain_information
            Type: :class:`.ServiceChainInfo`

            Created By: System

            Operations Allowed: CRUD

            Description:

              Internal service chaining information, should not be modified.

        * evpn_service_chain_information
            Type: :class:`.ServiceChainInfo`

            Created By: System

            Operations Allowed: CRUD

            Description:

              Internal service chaining information, should not be modified.

        * evpn_ipv6_service_chain_information
            Type: :class:`.ServiceChainInfo`

            Created By: System

            Operations Allowed: CRUD

            Description:

              Internal service chaining information, should not be modified.

        * routing_instance_is_default
            Type: bool

            Created By: System

            Operations Allowed: CRUD

            Description:

              Internal service chaining information, should not be modified.

        * routing_instance_has_pnf
            Type: bool

            Created By: System

            Operations Allowed: CRUD

            Description:

              Internal service chaining information, should not be modified.

        * static_route_entries
            Type: :class:`.StaticRouteEntriesType`

            Created By: System

            Operations Allowed: CRUD

            Description:

              Internal service chaining information, should not be modified.

        * routing_instance_fabric_snat
            Type: bool

            Created By: System

            Operations Allowed: CRUD

            Description:

              Provide connectivity to underlay network by port mapping trafficwith source IP of compute node

        * default_ce_protocol
            Type: :class:`.DefaultProtocolType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.BgpRouter` objects
            Created By: User (optionalCRUD)

            Operations Allowed: BGP router object represent configuration of BGP peers. All the BGP peers involved in contrail system are under default routing instance of the default virtual network.

            Description:


    References to:
        * list of (:class:`.RoutingInstance` object, :class:`.ConnectionType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * list of (:class:`.RouteTarget` object, :class:`.InstanceTargetType` attribute)
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.VirtualMachineInterface` objects
        * list of :class:`.RouteAggregate` objects
        * list of :class:`.RoutingPolicy` objects
        * list of :class:`.RoutingInstance` objects
    """

    resource_type = 'routing-instance'
    object_type = 'routing_instance'

    prop_fields = set([u'service_chain_information', u'ipv6_service_chain_information', u'evpn_service_chain_information', u'evpn_ipv6_service_chain_information', u'routing_instance_is_default', u'routing_instance_has_pnf', u'static_route_entries', u'routing_instance_fabric_snat', u'default_ce_protocol', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['routing_instance_refs', 'route_target_refs', u'tag_refs'])
    backref_fields = set(['virtual_machine_interface_back_refs', 'route_aggregate_back_refs', 'routing_policy_back_refs', 'routing_instance_back_refs'])
    children_fields = set(['bgp_routers'])

    prop_field_types = {
        'service_chain_information': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Internal service chaining information, should not be modified.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ServiceChainInfo', 'restriction_type': None, 'required': 'system-only'},
        'ipv6_service_chain_information': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Internal service chaining information, should not be modified.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ServiceChainInfo', 'restriction_type': None, 'required': 'system-only'},
        'evpn_service_chain_information': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Internal service chaining information, should not be modified.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ServiceChainInfo', 'restriction_type': None, 'required': 'system-only'},
        'evpn_ipv6_service_chain_information': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Internal service chaining information, should not be modified.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'ServiceChainInfo', 'restriction_type': None, 'required': 'system-only'},
        'routing_instance_is_default': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Internal service chaining information, should not be modified.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'system-only'},
        'routing_instance_has_pnf': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Internal service chaining information, should not be modified.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'system-only'},
        'static_route_entries': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Internal service chaining information, should not be modified.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'StaticRouteEntriesType', 'restriction_type': None, 'required': 'system-only'},
        'routing_instance_fabric_snat': {'operations': 'CRUD', 'restrictions': None, 'default': False, 'description': ['Provide connectivity to underlay network by port mapping trafficwith source IP of compute node'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'boolean', 'restriction_type': None, 'required': 'system-only'},
        'default_ce_protocol': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': [], 'simple_type': None, 'is_complex': True, 'xsd_type': u'DefaultProtocolType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['routing_instance_refs'] = ('routing-instance', 'ConnectionType', False, [])
    ref_field_types['route_target_refs'] = ('route-target', 'InstanceTargetType', False, [])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['virtual_machine_interface_back_refs'] = ('virtual-machine-interface', 'PolicyBasedForwardingRuleType', False)
    backref_field_types['route_aggregate_back_refs'] = ('route-aggregate', 'None', False)
    backref_field_types['routing_policy_back_refs'] = ('routing-policy', 'RoutingPolicyType', False)
    backref_field_types['routing_instance_back_refs'] = ('routing-instance', 'ConnectionType', False)

    children_field_types = {}
    children_field_types['bgp_routers'] = ('bgp-router', False)

    parent_types = ['virtual-network']

    prop_field_metas = {}
    prop_field_metas['service_chain_information'] = 'service-chain-information'
    prop_field_metas['ipv6_service_chain_information'] = 'ipv6-service-chain-information'
    prop_field_metas['evpn_service_chain_information'] = 'evpn-service-chain-information'
    prop_field_metas['evpn_ipv6_service_chain_information'] = 'evpn-ipv6-service-chain-information'
    prop_field_metas['routing_instance_is_default'] = 'routing-instance-is-default'
    prop_field_metas['routing_instance_has_pnf'] = 'routing-instance-has-pnf'
    prop_field_metas['static_route_entries'] = 'static-route-entries'
    prop_field_metas['routing_instance_fabric_snat'] = 'routing-instance-fabric-snat'
    prop_field_metas['default_ce_protocol'] = 'default-ce-protocol'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['routing_instance_refs'] = 'connection'
    ref_field_metas['route_target_refs'] = 'instance-target'
    ref_field_metas['tag_refs'] = 'routing-instance-tag'

    children_field_metas = {}
    children_field_metas['bgp_routers'] = 'instance-bgp-router'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, service_chain_information=None, ipv6_service_chain_information=None, evpn_service_chain_information=None, evpn_ipv6_service_chain_information=None, routing_instance_is_default=False, routing_instance_has_pnf=False, static_route_entries=None, routing_instance_fabric_snat=False, default_ce_protocol=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'routing-instance'
        if not name:
            name = u'default-routing-instance'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'virtual-network'
            self.fq_name = [u'default-domain', 'default-project', 'default-virtual-network']
            self.fq_name.append(name)


        # property fields
        if service_chain_information is not None:
            self._service_chain_information = service_chain_information
        if ipv6_service_chain_information is not None:
            self._ipv6_service_chain_information = ipv6_service_chain_information
        if evpn_service_chain_information is not None:
            self._evpn_service_chain_information = evpn_service_chain_information
        if evpn_ipv6_service_chain_information is not None:
            self._evpn_ipv6_service_chain_information = evpn_ipv6_service_chain_information
        if routing_instance_is_default is not None:
            self._routing_instance_is_default = routing_instance_is_default
        if routing_instance_has_pnf is not None:
            self._routing_instance_has_pnf = routing_instance_has_pnf
        if static_route_entries is not None:
            self._static_route_entries = static_route_entries
        if routing_instance_fabric_snat is not None:
            self._routing_instance_fabric_snat = routing_instance_fabric_snat
        if default_ce_protocol is not None:
            self._default_ce_protocol = default_ce_protocol
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (routing-instance)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of routing-instance in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of routing-instance as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of routing-instance's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of routing-instance's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def service_chain_information(self):
        """Get service-chain-information for routing-instance.
        
        :returns: ServiceChainInfo object
        
        """
        return getattr(self, '_service_chain_information', None)
    # end service_chain_information

    @service_chain_information.setter
    def service_chain_information(self, service_chain_information):
        """Set service-chain-information for routing-instance.
        
        :param service_chain_information: ServiceChainInfo object
        
        """
        self._service_chain_information = service_chain_information
    # end service_chain_information

    def set_service_chain_information(self, value):
        self.service_chain_information = value
    # end set_service_chain_information

    def get_service_chain_information(self):
        return self.service_chain_information
    # end get_service_chain_information

    @property
    def ipv6_service_chain_information(self):
        """Get ipv6-service-chain-information for routing-instance.
        
        :returns: ServiceChainInfo object
        
        """
        return getattr(self, '_ipv6_service_chain_information', None)
    # end ipv6_service_chain_information

    @ipv6_service_chain_information.setter
    def ipv6_service_chain_information(self, ipv6_service_chain_information):
        """Set ipv6-service-chain-information for routing-instance.
        
        :param ipv6_service_chain_information: ServiceChainInfo object
        
        """
        self._ipv6_service_chain_information = ipv6_service_chain_information
    # end ipv6_service_chain_information

    def set_ipv6_service_chain_information(self, value):
        self.ipv6_service_chain_information = value
    # end set_ipv6_service_chain_information

    def get_ipv6_service_chain_information(self):
        return self.ipv6_service_chain_information
    # end get_ipv6_service_chain_information

    @property
    def evpn_service_chain_information(self):
        """Get evpn-service-chain-information for routing-instance.
        
        :returns: ServiceChainInfo object
        
        """
        return getattr(self, '_evpn_service_chain_information', None)
    # end evpn_service_chain_information

    @evpn_service_chain_information.setter
    def evpn_service_chain_information(self, evpn_service_chain_information):
        """Set evpn-service-chain-information for routing-instance.
        
        :param evpn_service_chain_information: ServiceChainInfo object
        
        """
        self._evpn_service_chain_information = evpn_service_chain_information
    # end evpn_service_chain_information

    def set_evpn_service_chain_information(self, value):
        self.evpn_service_chain_information = value
    # end set_evpn_service_chain_information

    def get_evpn_service_chain_information(self):
        return self.evpn_service_chain_information
    # end get_evpn_service_chain_information

    @property
    def evpn_ipv6_service_chain_information(self):
        """Get evpn-ipv6-service-chain-information for routing-instance.
        
        :returns: ServiceChainInfo object
        
        """
        return getattr(self, '_evpn_ipv6_service_chain_information', None)
    # end evpn_ipv6_service_chain_information

    @evpn_ipv6_service_chain_information.setter
    def evpn_ipv6_service_chain_information(self, evpn_ipv6_service_chain_information):
        """Set evpn-ipv6-service-chain-information for routing-instance.
        
        :param evpn_ipv6_service_chain_information: ServiceChainInfo object
        
        """
        self._evpn_ipv6_service_chain_information = evpn_ipv6_service_chain_information
    # end evpn_ipv6_service_chain_information

    def set_evpn_ipv6_service_chain_information(self, value):
        self.evpn_ipv6_service_chain_information = value
    # end set_evpn_ipv6_service_chain_information

    def get_evpn_ipv6_service_chain_information(self):
        return self.evpn_ipv6_service_chain_information
    # end get_evpn_ipv6_service_chain_information

    @property
    def routing_instance_is_default(self):
        """Get routing-instance-is-default for routing-instance.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_routing_instance_is_default', None)
    # end routing_instance_is_default

    @routing_instance_is_default.setter
    def routing_instance_is_default(self, routing_instance_is_default):
        """Set routing-instance-is-default for routing-instance.
        
        :param routing_instance_is_default: xsd:boolean object
        
        """
        self._routing_instance_is_default = routing_instance_is_default
    # end routing_instance_is_default

    def set_routing_instance_is_default(self, value):
        self.routing_instance_is_default = value
    # end set_routing_instance_is_default

    def get_routing_instance_is_default(self):
        return self.routing_instance_is_default
    # end get_routing_instance_is_default

    @property
    def routing_instance_has_pnf(self):
        """Get routing-instance-has-pnf for routing-instance.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_routing_instance_has_pnf', None)
    # end routing_instance_has_pnf

    @routing_instance_has_pnf.setter
    def routing_instance_has_pnf(self, routing_instance_has_pnf):
        """Set routing-instance-has-pnf for routing-instance.
        
        :param routing_instance_has_pnf: xsd:boolean object
        
        """
        self._routing_instance_has_pnf = routing_instance_has_pnf
    # end routing_instance_has_pnf

    def set_routing_instance_has_pnf(self, value):
        self.routing_instance_has_pnf = value
    # end set_routing_instance_has_pnf

    def get_routing_instance_has_pnf(self):
        return self.routing_instance_has_pnf
    # end get_routing_instance_has_pnf

    @property
    def static_route_entries(self):
        """Get static-route-entries for routing-instance.
        
        :returns: StaticRouteEntriesType object
        
        """
        return getattr(self, '_static_route_entries', None)
    # end static_route_entries

    @static_route_entries.setter
    def static_route_entries(self, static_route_entries):
        """Set static-route-entries for routing-instance.
        
        :param static_route_entries: StaticRouteEntriesType object
        
        """
        self._static_route_entries = static_route_entries
    # end static_route_entries

    def set_static_route_entries(self, value):
        self.static_route_entries = value
    # end set_static_route_entries

    def get_static_route_entries(self):
        return self.static_route_entries
    # end get_static_route_entries

    @property
    def routing_instance_fabric_snat(self):
        """Get routing-instance-fabric-snat for routing-instance.
        
        :returns: xsd:boolean object
        
        """
        return getattr(self, '_routing_instance_fabric_snat', None)
    # end routing_instance_fabric_snat

    @routing_instance_fabric_snat.setter
    def routing_instance_fabric_snat(self, routing_instance_fabric_snat):
        """Set routing-instance-fabric-snat for routing-instance.
        
        :param routing_instance_fabric_snat: xsd:boolean object
        
        """
        self._routing_instance_fabric_snat = routing_instance_fabric_snat
    # end routing_instance_fabric_snat

    def set_routing_instance_fabric_snat(self, value):
        self.routing_instance_fabric_snat = value
    # end set_routing_instance_fabric_snat

    def get_routing_instance_fabric_snat(self):
        return self.routing_instance_fabric_snat
    # end get_routing_instance_fabric_snat

    @property
    def default_ce_protocol(self):
        """Get default-ce-protocol for routing-instance.
        
        :returns: DefaultProtocolType object
        
        """
        return getattr(self, '_default_ce_protocol', None)
    # end default_ce_protocol

    @default_ce_protocol.setter
    def default_ce_protocol(self, default_ce_protocol):
        """Set default-ce-protocol for routing-instance.
        
        :param default_ce_protocol: DefaultProtocolType object
        
        """
        self._default_ce_protocol = default_ce_protocol
    # end default_ce_protocol

    def set_default_ce_protocol(self, value):
        self.default_ce_protocol = value
    # end set_default_ce_protocol

    def get_default_ce_protocol(self):
        return self.default_ce_protocol
    # end get_default_ce_protocol

    @property
    def id_perms(self):
        """Get id-perms for routing-instance.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for routing-instance.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for routing-instance.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for routing-instance.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for routing-instance.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for routing-instance.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for routing-instance.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for routing-instance.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_service_chain_information'):
            self._serialize_field_to_json(serialized, field_names, 'service_chain_information')
        if hasattr(self, '_ipv6_service_chain_information'):
            self._serialize_field_to_json(serialized, field_names, 'ipv6_service_chain_information')
        if hasattr(self, '_evpn_service_chain_information'):
            self._serialize_field_to_json(serialized, field_names, 'evpn_service_chain_information')
        if hasattr(self, '_evpn_ipv6_service_chain_information'):
            self._serialize_field_to_json(serialized, field_names, 'evpn_ipv6_service_chain_information')
        if hasattr(self, '_routing_instance_is_default'):
            self._serialize_field_to_json(serialized, field_names, 'routing_instance_is_default')
        if hasattr(self, '_routing_instance_has_pnf'):
            self._serialize_field_to_json(serialized, field_names, 'routing_instance_has_pnf')
        if hasattr(self, '_static_route_entries'):
            self._serialize_field_to_json(serialized, field_names, 'static_route_entries')
        if hasattr(self, '_routing_instance_fabric_snat'):
            self._serialize_field_to_json(serialized, field_names, 'routing_instance_fabric_snat')
        if hasattr(self, '_default_ce_protocol'):
            self._serialize_field_to_json(serialized, field_names, 'default_ce_protocol')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'routing_instance_refs'):
            self._serialize_field_to_json(serialized, field_names, 'routing_instance_refs')
        if hasattr(self, 'route_target_refs'):
            self._serialize_field_to_json(serialized, field_names, 'route_target_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_bgp_routers(self):
        return getattr(self, 'bgp_routers', None)
    # end get_bgp_routers

    def set_routing_instance(self, ref_obj, ref_data=None):
        """Set routing-instance for routing-instance.
        
        :param ref_obj: RoutingInstance object
        :param ref_data: ConnectionType object
        
        """
        self.routing_instance_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.routing_instance_refs[0]['uuid'] = ref_obj.uuid

    # end set_routing_instance

    def add_routing_instance(self, ref_obj, ref_data=None):
        """Add routing-instance to routing-instance.
        
        :param ref_obj: RoutingInstance object
        :param ref_data: ConnectionType object
        
        """
        refs = getattr(self, 'routing_instance_refs', [])
        if not refs:
            self.routing_instance_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.routing_instance_refs.append(ref_info)
    # end add_routing_instance

    def del_routing_instance(self, ref_obj):
        refs = self.get_routing_instance_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.routing_instance_refs.remove(ref)
                return
    # end del_routing_instance

    def set_routing_instance_list(self, ref_obj_list, ref_data_list=None):
        """Set routing-instance list for routing-instance.
        
        :param ref_obj_list: list of RoutingInstance object
        :param ref_data_list: list of ConnectionType object
        
        """
        self.routing_instance_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_routing_instance_list

    def get_routing_instance_refs(self):
        """Return routing-instance list for routing-instance.
        
        :returns: list of tuple <RoutingInstance, ConnectionType>
        
        """
        return getattr(self, 'routing_instance_refs', None)
    # end get_routing_instance_refs

    def set_route_target(self, ref_obj, ref_data=None):
        """Set route-target for routing-instance.
        
        :param ref_obj: RouteTarget object
        :param ref_data: InstanceTargetType object
        
        """
        self.route_target_refs = [{'to':ref_obj.get_fq_name(), 'attr':ref_data}]
        if ref_obj.uuid:
            self.route_target_refs[0]['uuid'] = ref_obj.uuid

    # end set_route_target

    def add_route_target(self, ref_obj, ref_data=None):
        """Add route-target to routing-instance.
        
        :param ref_obj: RouteTarget object
        :param ref_data: InstanceTargetType object
        
        """
        refs = getattr(self, 'route_target_refs', [])
        if not refs:
            self.route_target_refs = []

        # check if ref already exists
        # update any attr with it
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                if ref_data:
                    ref['attr'] = ref_data
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name(), 'attr':ref_data}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.route_target_refs.append(ref_info)
    # end add_route_target

    def del_route_target(self, ref_obj):
        refs = self.get_route_target_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.route_target_refs.remove(ref)
                return
    # end del_route_target

    def set_route_target_list(self, ref_obj_list, ref_data_list=None):
        """Set route-target list for routing-instance.
        
        :param ref_obj_list: list of RouteTarget object
        :param ref_data_list: list of InstanceTargetType object
        
        """
        self.route_target_refs = [{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]
    # end set_route_target_list

    def get_route_target_refs(self):
        """Return route-target list for routing-instance.
        
        :returns: list of tuple <RouteTarget, InstanceTargetType>
        
        """
        return getattr(self, 'route_target_refs', None)
    # end get_route_target_refs

    def set_tag(self, ref_obj):
        """Set tag for routing-instance.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to routing-instance.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for routing-instance.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for routing-instance.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_virtual_machine_interface_back_refs(self):
        """Return list of all virtual-machine-interfaces using this routing-instance"""
        return getattr(self, 'virtual_machine_interface_back_refs', None)
    # end get_virtual_machine_interface_back_refs

    def get_route_aggregate_back_refs(self):
        """Return list of all route-aggregates using this routing-instance"""
        return getattr(self, 'route_aggregate_back_refs', None)
    # end get_route_aggregate_back_refs

    def get_routing_policy_back_refs(self):
        """Return list of all routing-policys using this routing-instance"""
        return getattr(self, 'routing_policy_back_refs', None)
    # end get_routing_policy_back_refs

    def get_routing_instance_back_refs(self):
        """Return list of all routing-instances using this routing-instance"""
        return getattr(self, 'routing_instance_back_refs', None)
    # end get_routing_instance_back_refs

    def dump(self):
        """Display routing-instance object in compact form."""
        print('------------ routing-instance ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P service_chain_information = ', self.get_service_chain_information())
        print('P ipv6_service_chain_information = ', self.get_ipv6_service_chain_information())
        print('P evpn_service_chain_information = ', self.get_evpn_service_chain_information())
        print('P evpn_ipv6_service_chain_information = ', self.get_evpn_ipv6_service_chain_information())
        print('P routing_instance_is_default = ', self.get_routing_instance_is_default())
        print('P routing_instance_has_pnf = ', self.get_routing_instance_has_pnf())
        print('P static_route_entries = ', self.get_static_route_entries())
        print('P routing_instance_fabric_snat = ', self.get_routing_instance_fabric_snat())
        print('P default_ce_protocol = ', self.get_default_ce_protocol())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS bgp_router = ', self.get_bgp_routers())
        print('REF routing_instance = ', self.get_routing_instance_refs())
        print('REF route_target = ', self.get_route_target_refs())
        print('REF tag = ', self.get_tag_refs())
        print('BCK virtual_machine_interface = ', self.get_virtual_machine_interface_back_refs())
        print('BCK route_aggregate = ', self.get_route_aggregate_back_refs())
        print('BCK routing_policy = ', self.get_routing_policy_back_refs())
        print('BCK routing_instance = ', self.get_routing_instance_back_refs())
    # end dump

# end class RoutingInstance

class AliasIpPool(object):
    """
    Alias ip pool is set of addresses that are carved out of a given network. Ip(s) from this set can be
    assigned to virtual-machine-interface so that they become members of this network

    Created By:
        User

    Child of:
        :class:`.VirtualNetwork` object

    Properties:
        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:
        * list of :class:`.AliasIp` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              alias ip is a ip that can be assigned to virtual-machine-interface(VMI), By doing so VMI can now be

              part of the alias ip network. packets originating with alias-ip as the source-ip belongs to alias-

              ip-network


    References to:
        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
        * list of :class:`.Project` objects
    """

    resource_type = 'alias-ip-pool'
    object_type = 'alias_ip_pool'

    prop_fields = set([u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set([u'tag_refs'])
    backref_fields = set(['project_back_refs'])
    children_fields = set([u'alias_ips'])

    prop_field_types = {
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}
    backref_field_types['project_back_refs'] = ('project', 'None', False)

    children_field_types = {}
    children_field_types['alias_ips'] = ('alias-ip', False)

    parent_types = ['virtual-network']

    prop_field_metas = {}
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['tag_refs'] = 'alias-ip-pool-tag'

    children_field_metas = {}
    children_field_metas['alias_ips'] = 'alias-ip-pool-alias-ip'

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'alias-ip-pool'
        if not name:
            name = u'default-alias-ip-pool'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'virtual-network'
            self.fq_name = [u'default-domain', 'default-project', 'default-virtual-network']
            self.fq_name.append(name)


        # property fields
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (alias-ip-pool)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of alias-ip-pool in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of alias-ip-pool as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of alias-ip-pool's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of alias-ip-pool's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def id_perms(self):
        """Get id-perms for alias-ip-pool.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for alias-ip-pool.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for alias-ip-pool.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for alias-ip-pool.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for alias-ip-pool.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for alias-ip-pool.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for alias-ip-pool.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for alias-ip-pool.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def get_alias_ips(self):
        return getattr(self, 'alias_ips', None)
    # end get_alias_ips

    def set_tag(self, ref_obj):
        """Set tag for alias-ip-pool.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to alias-ip-pool.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for alias-ip-pool.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for alias-ip-pool.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def get_project_back_refs(self):
        """Return list of all projects using this alias-ip-pool"""
        return getattr(self, 'project_back_refs', None)
    # end get_project_back_refs

    def dump(self):
        """Display alias-ip-pool object in compact form."""
        print('------------ alias-ip-pool ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('HAS alias_ip = ', self.get_alias_ips())
        print('REF tag = ', self.get_tag_refs())
        print('BCK project = ', self.get_project_back_refs())
    # end dump

# end class AliasIpPool

class DataCenterInterconnect(object):
    """
    List of DCI Objects in the system. Each DCI represents an interconnect of Multiple Fabrics or
    interconnect of LRs in same fabric.

    Created By:
        User

    Child of:
        :class:`.GlobalSystemConfig` object

    Properties:
        * data_center_interconnect_bgp_hold_time
            Type: int, *within* [0, 65535]

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              BGP hold time in seconds [0-65535], Max time to detect liveliness to peer. Value 0 will result in

              default value of 90 seconds.

        * data_center_interconnect_mode
            Type: str, *one-of* [u'l3']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Data center interconnect mode one of L2 stretch or L3

        * data_center_interconnect_bgp_address_families
            Type: :class:`.AddressFamilies`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              BGP address families supported by BGP router.

        * data_center_interconnect_configured_route_target_list
            Type: :class:`.RouteTargetList`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of route targets that represent this logical router, all virtual networks connected to this DCI

              will have this as their route target list.

        * data_center_interconnect_type
            Type: str, *one-of* [u'inter_fabric', u'intra_fabric']

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Defines type of DCI, inter-fabric is across two fabric. intra-fabric is single fabric.

        * destination_physical_router_list
            Type: :class:`.LogicalRouterPRListType`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              holds List of physical router uuid of destination LR(s) in intra-fabric type DCI object

        * id_perms
            Type: :class:`.IdPermsType`

            Created By: System

            Operations Allowed: R

            Description:

              System maintained identity, time  and permissions data.

        * perms2
            Type: :class:`.PermType2`

            Created By: System

            Operations Allowed: R

            Description:

              Permissions data for role based access.

        * annotations
            Type: :class:`.KeyValuePairs`

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Dictionary of arbitrary (key, value) on a resource.

        * display_name
            Type: str

            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Display name user configured string(name) that can be updated any time. Used as openstack name.


    Children:

    References to:
        * list of :class:`.LogicalRouter` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              List of LRs one from each fabric participating in the DCI, each LR belongs to different fabric

        * list of :class:`.VirtualNetwork` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              reference to auto created internal virtual network, used for connecting different data centers for

              DCI type inter-fabric. For intra-fabric type DCI, if user does not provided any DCI-routing-policy

              then this refs holds list of tenant virtual networks refs provided and selected by users. this refs

              will be list of tenant VN which existed in source LR for intra-fabric type DCI. routes will be leak

              only for this list of VNs subnets in intra-fabric DCI.

        * list of :class:`.RoutingPolicy` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Used only if DCI-type is intra-fabric. it stores the List of routing policies for this DCI to be

              used as import policies between logical routers. if any single or more routing policy defined in

              this property then DCI-virtual-network-refs property value will be ignored for route leaks route-

              filter.

        * list of :class:`.Tag` objects
            Created By: User (optional)

            Operations Allowed: CRUD

            Description:

              Tag attached to an object - has a type and value


    Referred by:
    """

    resource_type = 'data-center-interconnect'
    object_type = 'data_center_interconnect'

    prop_fields = set([u'data_center_interconnect_bgp_hold_time', u'data_center_interconnect_mode', u'data_center_interconnect_bgp_address_families', u'data_center_interconnect_configured_route_target_list', u'data_center_interconnect_type', u'destination_physical_router_list', u'id_perms', u'perms2', u'annotations', u'display_name'])
    ref_fields = set(['logical_router_refs', 'virtual_network_refs', 'routing_policy_refs', u'tag_refs'])
    backref_fields = set([])
    children_fields = set([])

    prop_field_types = {
        'data_center_interconnect_bgp_hold_time': {'operations': 'CRUD', 'restrictions': [0, 65535], 'default': None, 'description': ['BGP hold time in seconds [0-65535], Max time to detect liveliness to peer. Value 0 will result in', 'default value of 90 seconds.'], 'simple_type': u'BgpHoldTime', 'is_complex': False, 'xsd_type': u'integer', 'restriction_type': 'range', 'required': 'optional'},
        'data_center_interconnect_mode': {'operations': 'CRUD', 'restrictions': [u'l3'], 'default': None, 'description': ['Data center interconnect mode one of L2 stretch or L3'], 'simple_type': u'DataCenterInterconnectModes', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'data_center_interconnect_bgp_address_families': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['BGP address families supported by BGP router.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'AddressFamilies', 'restriction_type': None, 'required': 'optional'},
        'data_center_interconnect_configured_route_target_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['List of route targets that represent this logical router, all virtual networks connected to this DCI', 'will have this as their route target list.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'RouteTargetList', 'restriction_type': None, 'required': 'optional'},
        'data_center_interconnect_type': {'operations': 'CRUD', 'restrictions': [u'inter_fabric', u'intra_fabric'], 'default': None, 'description': ['Defines type of DCI, inter-fabric is across two fabric. intra-fabric is single fabric.'], 'simple_type': u'DataCenterInterConnectType', 'is_complex': False, 'xsd_type': u'string', 'restriction_type': 'enum', 'required': 'optional'},
        'destination_physical_router_list': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['holds List of physical router uuid of destination LR(s) in intra-fabric type DCI object'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'LogicalRouterPRListType', 'restriction_type': None, 'required': 'optional'},
        'id_perms': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['System maintained identity, time  and permissions data.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'IdPermsType', 'restriction_type': None, 'required': 'system-only'},
        'perms2': {'operations': 'R', 'restrictions': None, 'default': None, 'description': ['Permissions data for role based access.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'PermType2', 'restriction_type': None, 'required': 'system-only'},
        'annotations': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Dictionary of arbitrary (key, value) on a resource.'], 'simple_type': None, 'is_complex': True, 'xsd_type': u'KeyValuePairs', 'restriction_type': None, 'required': 'optional'},
        'display_name': {'operations': 'CRUD', 'restrictions': None, 'default': None, 'description': ['Display name user configured string(name) that can be updated any time. Used as openstack name.'], 'simple_type': None, 'is_complex': False, 'xsd_type': u'string', 'restriction_type': None, 'required': 'optional'}
    }


    ref_field_types = {}
    ref_field_types['logical_router_refs'] = ('logical-router', 'None', False, ['List of LRs one from each fabric participating in the DCI, each LR belongs to different fabric'])
    ref_field_types['virtual_network_refs'] = ('virtual-network', 'None', False, ['reference to auto created internal virtual network, used for connecting different data centers for', 'DCI type inter-fabric. For intra-fabric type DCI, if user does not provided any DCI-routing-policy', 'then this refs holds list of tenant virtual networks refs provided and selected by users. this refs', 'will be list of tenant VN which existed in source LR for intra-fabric type DCI. routes will be leak', 'only for this list of VNs subnets in intra-fabric DCI.'])
    ref_field_types['routing_policy_refs'] = ('routing-policy', 'None', False, ['Used only if DCI-type is intra-fabric. it stores the List of routing policies for this DCI to be', 'used as import policies between logical routers. if any single or more routing policy defined in', 'this property then DCI-virtual-network-refs property value will be ignored for route leaks route-', 'filter.'])
    ref_field_types['tag_refs'] = ('tag', 'None', False, ['Tag attached to an object - has a type and value'])

    backref_field_types = {}

    children_field_types = {}

    parent_types = ['global-system-config']

    prop_field_metas = {}
    prop_field_metas['data_center_interconnect_bgp_hold_time'] = 'data-center-interconnect-bgp-hold-time'
    prop_field_metas['data_center_interconnect_mode'] = 'data-center-interconnect-mode'
    prop_field_metas['data_center_interconnect_bgp_address_families'] = 'data-center-interconnect-bgp-address-families'
    prop_field_metas['data_center_interconnect_configured_route_target_list'] = 'data-center-interconnect-configured-route-target-list'
    prop_field_metas['data_center_interconnect_type'] = 'data-center-interconnect-type'
    prop_field_metas['destination_physical_router_list'] = 'destination-physical-router-list'
    prop_field_metas['id_perms'] = 'id-perms'
    prop_field_metas['perms2'] = 'perms2'
    prop_field_metas['annotations'] = 'annotations'
    prop_field_metas['display_name'] = 'display-name'

    ref_field_metas = {}
    ref_field_metas['logical_router_refs'] = 'data-center-interconnect-logical-router'
    ref_field_metas['virtual_network_refs'] = 'data-center-interconnect-virtual-network'
    ref_field_metas['routing_policy_refs'] = 'data-center-interconnect-routing-policy'
    ref_field_metas['tag_refs'] = 'data-center-interconnect-tag'

    children_field_metas = {}

    prop_list_fields = set([])

    prop_list_field_has_wrappers = {}

    prop_map_fields = set([u'annotations'])

    prop_map_field_has_wrappers = {}
    prop_map_field_has_wrappers['annotations'] = True

    prop_map_field_key_names = {}
    prop_map_field_key_names['annotations'] = 'key'

    def __init__(self, name = None, parent_obj = None, data_center_interconnect_bgp_hold_time=None, data_center_interconnect_mode=None, data_center_interconnect_bgp_address_families=None, data_center_interconnect_configured_route_target_list=None, data_center_interconnect_type=None, destination_physical_router_list=None, id_perms=None, perms2=None, annotations=None, display_name=None, *args, **kwargs):
        # type-independent fields
        self._type = 'data-center-interconnect'
        if not name:
            name = u'default-data-center-interconnect'
        self.name = name
        self._uuid = None
        # Determine parent type and fq_name
        kwargs_parent_type = kwargs.get('parent_type', None)
        kwargs_fq_name = kwargs.get('fq_name', None)
        if parent_obj:
            self.parent_type = parent_obj._type
            # copy parent's fq_name
            self.fq_name = list(parent_obj.fq_name)
            self.fq_name.append(name)
        elif kwargs_parent_type and kwargs_fq_name:
            self.parent_type = kwargs_parent_type
            self.fq_name = kwargs_fq_name
        else: # No parent obj specified
            self.parent_type = 'global-system-config'
            self.fq_name = ['default-global-system-config']
            self.fq_name.append(name)


        # property fields
        if data_center_interconnect_bgp_hold_time is not None:
            self._data_center_interconnect_bgp_hold_time = data_center_interconnect_bgp_hold_time
        if data_center_interconnect_mode is not None:
            self._data_center_interconnect_mode = data_center_interconnect_mode
        if data_center_interconnect_bgp_address_families is not None:
            self._data_center_interconnect_bgp_address_families = data_center_interconnect_bgp_address_families
        if data_center_interconnect_configured_route_target_list is not None:
            self._data_center_interconnect_configured_route_target_list = data_center_interconnect_configured_route_target_list
        if data_center_interconnect_type is not None:
            self._data_center_interconnect_type = data_center_interconnect_type
        if destination_physical_router_list is not None:
            self._destination_physical_router_list = destination_physical_router_list
        if id_perms is not None:
            self._id_perms = id_perms
        if perms2 is not None:
            self._perms2 = perms2
        if annotations is not None:
            self._annotations = annotations
        if display_name is not None:
            self._display_name = display_name
    # end __init__

    def get_type(self):
        """Return object type (data-center-interconnect)."""
        return self._type
    # end get_type

    def get_fq_name(self):
        """Return FQN of data-center-interconnect in list form."""
        return self.fq_name
    # end get_fq_name

    def get_fq_name_str(self):
        """Return FQN of data-center-interconnect as colon delimited string."""
        return ':'.join(self.fq_name)
    # end get_fq_name_str

    @property
    def parent_name(self):
        return self.fq_name[:-1][-1]
    # end parent_name

    def get_parent_fq_name(self):
        """Return FQN of data-center-interconnect's parent in list form."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return self.fq_name[:-1]
    # end get_parent_fq_name

    def get_parent_fq_name_str(self):
        """Return FQN of data-center-interconnect's parent as colon delimted string."""
        if not hasattr(self, 'parent_type'):
            # child of config-root
            return None

        return ':'.join(self.fq_name[:-1])
    # end get_parent_fq_name_str

    @property
    def uuid(self):
        return getattr(self, '_uuid', None)
    # end uuid

    @uuid.setter
    def uuid(self, uuid_val):
        self._uuid = uuid_val
    # end uuid

    def set_uuid(self, uuid_val):
        self.uuid = uuid_val
    # end set_uuid

    def get_uuid(self):
        return self.uuid
    # end get_uuid

    @property
    def data_center_interconnect_bgp_hold_time(self):
        """Get data-center-interconnect-bgp-hold-time for data-center-interconnect.
        
        :returns: BgpHoldTime object
        
        """
        return getattr(self, '_data_center_interconnect_bgp_hold_time', None)
    # end data_center_interconnect_bgp_hold_time

    @data_center_interconnect_bgp_hold_time.setter
    def data_center_interconnect_bgp_hold_time(self, data_center_interconnect_bgp_hold_time):
        """Set data-center-interconnect-bgp-hold-time for data-center-interconnect.
        
        :param data_center_interconnect_bgp_hold_time: BgpHoldTime object
        
        """
        self._data_center_interconnect_bgp_hold_time = data_center_interconnect_bgp_hold_time
    # end data_center_interconnect_bgp_hold_time

    def set_data_center_interconnect_bgp_hold_time(self, value):
        self.data_center_interconnect_bgp_hold_time = value
    # end set_data_center_interconnect_bgp_hold_time

    def get_data_center_interconnect_bgp_hold_time(self):
        return self.data_center_interconnect_bgp_hold_time
    # end get_data_center_interconnect_bgp_hold_time

    @property
    def data_center_interconnect_mode(self):
        """Get data-center-interconnect-mode for data-center-interconnect.
        
        :returns: DataCenterInterconnectModes object
        
        """
        return getattr(self, '_data_center_interconnect_mode', None)
    # end data_center_interconnect_mode

    @data_center_interconnect_mode.setter
    def data_center_interconnect_mode(self, data_center_interconnect_mode):
        """Set data-center-interconnect-mode for data-center-interconnect.
        
        :param data_center_interconnect_mode: DataCenterInterconnectModes object
        
        """
        self._data_center_interconnect_mode = data_center_interconnect_mode
    # end data_center_interconnect_mode

    def set_data_center_interconnect_mode(self, value):
        self.data_center_interconnect_mode = value
    # end set_data_center_interconnect_mode

    def get_data_center_interconnect_mode(self):
        return self.data_center_interconnect_mode
    # end get_data_center_interconnect_mode

    @property
    def data_center_interconnect_bgp_address_families(self):
        """Get data-center-interconnect-bgp-address-families for data-center-interconnect.
        
        :returns: AddressFamilies object
        
        """
        return getattr(self, '_data_center_interconnect_bgp_address_families', None)
    # end data_center_interconnect_bgp_address_families

    @data_center_interconnect_bgp_address_families.setter
    def data_center_interconnect_bgp_address_families(self, data_center_interconnect_bgp_address_families):
        """Set data-center-interconnect-bgp-address-families for data-center-interconnect.
        
        :param data_center_interconnect_bgp_address_families: AddressFamilies object
        
        """
        self._data_center_interconnect_bgp_address_families = data_center_interconnect_bgp_address_families
    # end data_center_interconnect_bgp_address_families

    def set_data_center_interconnect_bgp_address_families(self, value):
        self.data_center_interconnect_bgp_address_families = value
    # end set_data_center_interconnect_bgp_address_families

    def get_data_center_interconnect_bgp_address_families(self):
        return self.data_center_interconnect_bgp_address_families
    # end get_data_center_interconnect_bgp_address_families

    @property
    def data_center_interconnect_configured_route_target_list(self):
        """Get data-center-interconnect-configured-route-target-list for data-center-interconnect.
        
        :returns: RouteTargetList object
        
        """
        return getattr(self, '_data_center_interconnect_configured_route_target_list', None)
    # end data_center_interconnect_configured_route_target_list

    @data_center_interconnect_configured_route_target_list.setter
    def data_center_interconnect_configured_route_target_list(self, data_center_interconnect_configured_route_target_list):
        """Set data-center-interconnect-configured-route-target-list for data-center-interconnect.
        
        :param data_center_interconnect_configured_route_target_list: RouteTargetList object
        
        """
        self._data_center_interconnect_configured_route_target_list = data_center_interconnect_configured_route_target_list
    # end data_center_interconnect_configured_route_target_list

    def set_data_center_interconnect_configured_route_target_list(self, value):
        self.data_center_interconnect_configured_route_target_list = value
    # end set_data_center_interconnect_configured_route_target_list

    def get_data_center_interconnect_configured_route_target_list(self):
        return self.data_center_interconnect_configured_route_target_list
    # end get_data_center_interconnect_configured_route_target_list

    @property
    def data_center_interconnect_type(self):
        """Get data-center-interconnect-type for data-center-interconnect.
        
        :returns: DataCenterInterConnectType object
        
        """
        return getattr(self, '_data_center_interconnect_type', None)
    # end data_center_interconnect_type

    @data_center_interconnect_type.setter
    def data_center_interconnect_type(self, data_center_interconnect_type):
        """Set data-center-interconnect-type for data-center-interconnect.
        
        :param data_center_interconnect_type: DataCenterInterConnectType object
        
        """
        self._data_center_interconnect_type = data_center_interconnect_type
    # end data_center_interconnect_type

    def set_data_center_interconnect_type(self, value):
        self.data_center_interconnect_type = value
    # end set_data_center_interconnect_type

    def get_data_center_interconnect_type(self):
        return self.data_center_interconnect_type
    # end get_data_center_interconnect_type

    @property
    def destination_physical_router_list(self):
        """Get destination-physical-router-list for data-center-interconnect.
        
        :returns: LogicalRouterPRListType object
        
        """
        return getattr(self, '_destination_physical_router_list', None)
    # end destination_physical_router_list

    @destination_physical_router_list.setter
    def destination_physical_router_list(self, destination_physical_router_list):
        """Set destination-physical-router-list for data-center-interconnect.
        
        :param destination_physical_router_list: LogicalRouterPRListType object
        
        """
        self._destination_physical_router_list = destination_physical_router_list
    # end destination_physical_router_list

    def set_destination_physical_router_list(self, value):
        self.destination_physical_router_list = value
    # end set_destination_physical_router_list

    def get_destination_physical_router_list(self):
        return self.destination_physical_router_list
    # end get_destination_physical_router_list

    @property
    def id_perms(self):
        """Get id-perms for data-center-interconnect.
        
        :returns: IdPermsType object
        
        """
        return getattr(self, '_id_perms', None)
    # end id_perms

    @id_perms.setter
    def id_perms(self, id_perms):
        """Set id-perms for data-center-interconnect.
        
        :param id_perms: IdPermsType object
        
        """
        self._id_perms = id_perms
    # end id_perms

    def set_id_perms(self, value):
        self.id_perms = value
    # end set_id_perms

    def get_id_perms(self):
        return self.id_perms
    # end get_id_perms

    @property
    def perms2(self):
        """Get perms2 for data-center-interconnect.
        
        :returns: PermType2 object
        
        """
        return getattr(self, '_perms2', None)
    # end perms2

    @perms2.setter
    def perms2(self, perms2):
        """Set perms2 for data-center-interconnect.
        
        :param perms2: PermType2 object
        
        """
        self._perms2 = perms2
    # end perms2

    def set_perms2(self, value):
        self.perms2 = value
    # end set_perms2

    def get_perms2(self):
        return self.perms2
    # end get_perms2

    @property
    def annotations(self):
        """Get annotations for data-center-interconnect.
        
        :returns: KeyValuePairs object
        
        """
        return getattr(self, '_annotations', None)
    # end annotations

    @annotations.setter
    def annotations(self, annotations):
        """Set annotations for data-center-interconnect.
        
        :param annotations: KeyValuePairs object
        
        """
        self._annotations = annotations
    # end annotations

    def set_annotations(self, value):
        self.annotations = value
    # end set_annotations

    def get_annotations(self):
        return self.annotations
    # end get_annotations

    @property
    def display_name(self):
        """Get display-name for data-center-interconnect.
        
        :returns: xsd:string object
        
        """
        return getattr(self, '_display_name', None)
    # end display_name

    @display_name.setter
    def display_name(self, display_name):
        """Set display-name for data-center-interconnect.
        
        :param display_name: xsd:string object
        
        """
        self._display_name = display_name
    # end display_name

    def set_display_name(self, value):
        self.display_name = value
    # end set_display_name

    def get_display_name(self):
        return self.display_name
    # end get_display_name

    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):
        if fields_to_serialize is None: # all fields are serialized
            serialized[field_name] = getattr(self, field_name)
        elif field_name in fields_to_serialize:
            serialized[field_name] = getattr(self, field_name)
    # end _serialize_field_to_json

    def serialize_to_json(self, field_names = None):
        serialized = {}

        # serialize common fields
        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')
        self._serialize_field_to_json(serialized, field_names, 'fq_name')
        if hasattr(self, 'parent_type'):
            self._serialize_field_to_json(serialized, field_names, 'parent_type')
        if hasattr(self, 'parent_uuid'):
            self._serialize_field_to_json(serialized, field_names, 'parent_uuid')

        # serialize property fields
        if hasattr(self, '_data_center_interconnect_bgp_hold_time'):
            self._serialize_field_to_json(serialized, field_names, 'data_center_interconnect_bgp_hold_time')
        if hasattr(self, '_data_center_interconnect_mode'):
            self._serialize_field_to_json(serialized, field_names, 'data_center_interconnect_mode')
        if hasattr(self, '_data_center_interconnect_bgp_address_families'):
            self._serialize_field_to_json(serialized, field_names, 'data_center_interconnect_bgp_address_families')
        if hasattr(self, '_data_center_interconnect_configured_route_target_list'):
            self._serialize_field_to_json(serialized, field_names, 'data_center_interconnect_configured_route_target_list')
        if hasattr(self, '_data_center_interconnect_type'):
            self._serialize_field_to_json(serialized, field_names, 'data_center_interconnect_type')
        if hasattr(self, '_destination_physical_router_list'):
            self._serialize_field_to_json(serialized, field_names, 'destination_physical_router_list')
        if hasattr(self, '_id_perms'):
            self._serialize_field_to_json(serialized, field_names, 'id_perms')
        if hasattr(self, '_perms2'):
            self._serialize_field_to_json(serialized, field_names, 'perms2')
        if hasattr(self, '_annotations'):
            self._serialize_field_to_json(serialized, field_names, 'annotations')
        if hasattr(self, '_display_name'):
            self._serialize_field_to_json(serialized, field_names, 'display_name')

        # serialize reference fields
        if hasattr(self, 'logical_router_refs'):
            self._serialize_field_to_json(serialized, field_names, 'logical_router_refs')
        if hasattr(self, 'virtual_network_refs'):
            self._serialize_field_to_json(serialized, field_names, 'virtual_network_refs')
        if hasattr(self, 'routing_policy_refs'):
            self._serialize_field_to_json(serialized, field_names, 'routing_policy_refs')
        if hasattr(self, 'tag_refs'):
            self._serialize_field_to_json(serialized, field_names, 'tag_refs')
        return serialized
    # end serialize_to_json

    def set_logical_router(self, ref_obj):
        """Set logical-router for data-center-interconnect.
        
        :param ref_obj: LogicalRouter object
        
        """
        self.logical_router_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.logical_router_refs[0]['uuid'] = ref_obj.uuid

    # end set_logical_router

    def add_logical_router(self, ref_obj):
        """Add logical-router to data-center-interconnect.
        
        :param ref_obj: LogicalRouter object
        
        """
        refs = getattr(self, 'logical_router_refs', [])
        if not refs:
            self.logical_router_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.logical_router_refs.append(ref_info)
    # end add_logical_router

    def del_logical_router(self, ref_obj):
        refs = self.get_logical_router_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.logical_router_refs.remove(ref)
                return
    # end del_logical_router

    def set_logical_router_list(self, ref_obj_list):
        """Set logical-router list for data-center-interconnect.
        
        :param ref_obj_list: list of LogicalRouter object
        
        """
        self.logical_router_refs = ref_obj_list
    # end set_logical_router_list

    def get_logical_router_refs(self):
        """Return logical-router list for data-center-interconnect.
        
        :returns: list of <LogicalRouter>
        
        """
        return getattr(self, 'logical_router_refs', None)
    # end get_logical_router_refs

    def set_virtual_network(self, ref_obj):
        """Set virtual-network for data-center-interconnect.
        
        :param ref_obj: VirtualNetwork object
        
        """
        self.virtual_network_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.virtual_network_refs[0]['uuid'] = ref_obj.uuid

    # end set_virtual_network

    def add_virtual_network(self, ref_obj):
        """Add virtual-network to data-center-interconnect.
        
        :param ref_obj: VirtualNetwork object
        
        """
        refs = getattr(self, 'virtual_network_refs', [])
        if not refs:
            self.virtual_network_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.virtual_network_refs.append(ref_info)
    # end add_virtual_network

    def del_virtual_network(self, ref_obj):
        refs = self.get_virtual_network_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.virtual_network_refs.remove(ref)
                return
    # end del_virtual_network

    def set_virtual_network_list(self, ref_obj_list):
        """Set virtual-network list for data-center-interconnect.
        
        :param ref_obj_list: list of VirtualNetwork object
        
        """
        self.virtual_network_refs = ref_obj_list
    # end set_virtual_network_list

    def get_virtual_network_refs(self):
        """Return virtual-network list for data-center-interconnect.
        
        :returns: list of <VirtualNetwork>
        
        """
        return getattr(self, 'virtual_network_refs', None)
    # end get_virtual_network_refs

    def set_routing_policy(self, ref_obj):
        """Set routing-policy for data-center-interconnect.
        
        :param ref_obj: RoutingPolicy object
        
        """
        self.routing_policy_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.routing_policy_refs[0]['uuid'] = ref_obj.uuid

    # end set_routing_policy

    def add_routing_policy(self, ref_obj):
        """Add routing-policy to data-center-interconnect.
        
        :param ref_obj: RoutingPolicy object
        
        """
        refs = getattr(self, 'routing_policy_refs', [])
        if not refs:
            self.routing_policy_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.routing_policy_refs.append(ref_info)
    # end add_routing_policy

    def del_routing_policy(self, ref_obj):
        refs = self.get_routing_policy_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.routing_policy_refs.remove(ref)
                return
    # end del_routing_policy

    def set_routing_policy_list(self, ref_obj_list):
        """Set routing-policy list for data-center-interconnect.
        
        :param ref_obj_list: list of RoutingPolicy object
        
        """
        self.routing_policy_refs = ref_obj_list
    # end set_routing_policy_list

    def get_routing_policy_refs(self):
        """Return routing-policy list for data-center-interconnect.
        
        :returns: list of <RoutingPolicy>
        
        """
        return getattr(self, 'routing_policy_refs', None)
    # end get_routing_policy_refs

    def set_tag(self, ref_obj):
        """Set tag for data-center-interconnect.
        
        :param ref_obj: Tag object
        
        """
        self.tag_refs = [{'to':ref_obj.get_fq_name()}]
        if ref_obj.uuid:
            self.tag_refs[0]['uuid'] = ref_obj.uuid

    # end set_tag

    def add_tag(self, ref_obj):
        """Add tag to data-center-interconnect.
        
        :param ref_obj: Tag object
        
        """
        refs = getattr(self, 'tag_refs', [])
        if not refs:
            self.tag_refs = []

        # check if ref already exists
        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                return

        # ref didn't exist before
        ref_info = {'to':ref_obj.get_fq_name()}
        if ref_obj.uuid:
            ref_info['uuid'] = ref_obj.uuid

        self.tag_refs.append(ref_info)
    # end add_tag

    def del_tag(self, ref_obj):
        refs = self.get_tag_refs()
        if not refs:
            return

        for ref in refs:
            if ref['to'] == ref_obj.get_fq_name():
                self.tag_refs.remove(ref)
                return
    # end del_tag

    def set_tag_list(self, ref_obj_list):
        """Set tag list for data-center-interconnect.
        
        :param ref_obj_list: list of Tag object
        
        """
        self.tag_refs = ref_obj_list
    # end set_tag_list

    def get_tag_refs(self):
        """Return tag list for data-center-interconnect.
        
        :returns: list of <Tag>
        
        """
        return getattr(self, 'tag_refs', None)
    # end get_tag_refs

    def dump(self):
        """Display data-center-interconnect object in compact form."""
        print('------------ data-center-interconnect ------------')
        print('Name = ', self.get_fq_name())
        print('Uuid = ', self.uuid)
        if hasattr(self, 'parent_type'): # non config-root children
            print('Parent Type = ', self.parent_type)
        print('P data_center_interconnect_bgp_hold_time = ', self.get_data_center_interconnect_bgp_hold_time())
        print('P data_center_interconnect_mode = ', self.get_data_center_interconnect_mode())
        print('P data_center_interconnect_bgp_address_families = ', self.get_data_center_interconnect_bgp_address_families())
        print('P data_center_interconnect_configured_route_target_list = ', self.get_data_center_interconnect_configured_route_target_list())
        print('P data_center_interconnect_type = ', self.get_data_center_interconnect_type())
        print('P destination_physical_router_list = ', self.get_destination_physical_router_list())
        print('P id_perms = ', self.get_id_perms())
        print('P perms2 = ', self.get_perms2())
        print('P annotations = ', self.get_annotations())
        print('P display_name = ', self.get_display_name())
        print('REF logical_router = ', self.get_logical_router_refs())
        print('REF virtual_network = ', self.get_virtual_network_refs())
        print('REF routing_policy = ', self.get_routing_policy_refs())
        print('REF tag = ', self.get_tag_refs())
    # end dump

# end class DataCenterInterconnect

