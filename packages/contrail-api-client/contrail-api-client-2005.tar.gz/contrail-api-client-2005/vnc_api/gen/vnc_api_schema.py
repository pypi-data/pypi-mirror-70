
# AUTO-GENERATED file from IFMapApiGenerator. Do Not Edit!

import pydot

def generate_schema_graph():
    graph = pydot.Dot(graph_type='digraph')

    # Generate node definitions and add to graph
    service_endpoint_node = pydot.Node('service-endpoint')
    graph.add_node(service_endpoint_node)
    instance_ip_node = pydot.Node('instance-ip')
    graph.add_node(instance_ip_node)
    service_appliance_set_node = pydot.Node('service-appliance-set')
    graph.add_node(service_appliance_set_node)
    route_target_node = pydot.Node('route-target')
    graph.add_node(route_target_node)
    loadbalancer_listener_node = pydot.Node('loadbalancer-listener')
    graph.add_node(loadbalancer_listener_node)
    floating_ip_pool_node = pydot.Node('floating-ip-pool')
    graph.add_node(floating_ip_pool_node)
    physical_router_node = pydot.Node('physical-router')
    graph.add_node(physical_router_node)
    config_root_node = pydot.Node('config-root')
    graph.add_node(config_root_node)
    service_template_node = pydot.Node('service-template')
    graph.add_node(service_template_node)
    hardware_inventory_node = pydot.Node('hardware-inventory')
    graph.add_node(hardware_inventory_node)
    firewall_policy_node = pydot.Node('firewall-policy')
    graph.add_node(firewall_policy_node)
    route_table_node = pydot.Node('route-table')
    graph.add_node(route_table_node)
    provider_attachment_node = pydot.Node('provider-attachment')
    graph.add_node(provider_attachment_node)
    overlay_role_node = pydot.Node('overlay-role')
    graph.add_node(overlay_role_node)
    multicast_policy_node = pydot.Node('multicast-policy')
    graph.add_node(multicast_policy_node)
    network_device_config_node = pydot.Node('network-device-config')
    graph.add_node(network_device_config_node)
    virtual_DNS_record_node = pydot.Node('virtual-DNS-record')
    graph.add_node(virtual_DNS_record_node)
    control_node_zone_node = pydot.Node('control-node-zone')
    graph.add_node(control_node_zone_node)
    dsa_rule_node = pydot.Node('dsa-rule')
    graph.add_node(dsa_rule_node)
    structured_syslog_config_node = pydot.Node('structured-syslog-config')
    graph.add_node(structured_syslog_config_node)
    discovery_service_assignment_node = pydot.Node('discovery-service-assignment')
    graph.add_node(discovery_service_assignment_node)
    logical_interface_node = pydot.Node('logical-interface')
    graph.add_node(logical_interface_node)
    flow_node_node = pydot.Node('flow-node')
    graph.add_node(flow_node_node)
    port_group_node = pydot.Node('port-group')
    graph.add_node(port_group_node)
    route_aggregate_node = pydot.Node('route-aggregate')
    graph.add_node(route_aggregate_node)
    logical_router_node = pydot.Node('logical-router')
    graph.add_node(logical_router_node)
    domain_node = pydot.Node('domain')
    graph.add_node(domain_node)
    structured_syslog_hostname_record_node = pydot.Node('structured-syslog-hostname-record')
    graph.add_node(structured_syslog_hostname_record_node)
    service_instance_node = pydot.Node('service-instance')
    graph.add_node(service_instance_node)
    node_profile_node = pydot.Node('node-profile')
    graph.add_node(node_profile_node)
    bridge_domain_node = pydot.Node('bridge-domain')
    graph.add_node(bridge_domain_node)
    alias_ip_node = pydot.Node('alias-ip')
    graph.add_node(alias_ip_node)
    webui_node_node = pydot.Node('webui-node')
    graph.add_node(webui_node_node)
    port_node = pydot.Node('port')
    graph.add_node(port_node)
    bgp_as_a_service_node = pydot.Node('bgp-as-a-service')
    graph.add_node(bgp_as_a_service_node)
    subnet_node = pydot.Node('subnet')
    graph.add_node(subnet_node)
    global_system_config_node = pydot.Node('global-system-config')
    graph.add_node(global_system_config_node)
    sub_cluster_node = pydot.Node('sub-cluster')
    graph.add_node(sub_cluster_node)
    forwarding_class_node = pydot.Node('forwarding-class')
    graph.add_node(forwarding_class_node)
    service_group_node = pydot.Node('service-group')
    graph.add_node(service_group_node)
    global_analytics_config_node = pydot.Node('global-analytics-config')
    graph.add_node(global_analytics_config_node)
    address_group_node = pydot.Node('address-group')
    graph.add_node(address_group_node)
    application_policy_set_node = pydot.Node('application-policy-set')
    graph.add_node(application_policy_set_node)
    virtual_ip_node = pydot.Node('virtual-ip')
    graph.add_node(virtual_ip_node)
    intent_map_node = pydot.Node('intent-map')
    graph.add_node(intent_map_node)
    port_tuple_node = pydot.Node('port-tuple')
    graph.add_node(port_tuple_node)
    analytics_alarm_node_node = pydot.Node('analytics-alarm-node')
    graph.add_node(analytics_alarm_node_node)
    qos_queue_node = pydot.Node('qos-queue')
    graph.add_node(qos_queue_node)
    physical_role_node = pydot.Node('physical-role')
    graph.add_node(physical_role_node)
    card_node = pydot.Node('card')
    graph.add_node(card_node)
    security_logging_object_node = pydot.Node('security-logging-object')
    graph.add_node(security_logging_object_node)
    qos_config_node = pydot.Node('qos-config')
    graph.add_node(qos_config_node)
    analytics_snmp_node_node = pydot.Node('analytics-snmp-node')
    graph.add_node(analytics_snmp_node_node)
    virtual_machine_interface_node = pydot.Node('virtual-machine-interface')
    graph.add_node(virtual_machine_interface_node)
    cli_config_node = pydot.Node('cli-config')
    graph.add_node(cli_config_node)
    service_object_node = pydot.Node('service-object')
    graph.add_node(service_object_node)
    feature_flag_node = pydot.Node('feature-flag')
    graph.add_node(feature_flag_node)
    loadbalancer_node = pydot.Node('loadbalancer')
    graph.add_node(loadbalancer_node)
    peering_policy_node = pydot.Node('peering-policy')
    graph.add_node(peering_policy_node)
    structured_syslog_application_record_node = pydot.Node('structured-syslog-application-record')
    graph.add_node(structured_syslog_application_record_node)
    global_vrouter_config_node = pydot.Node('global-vrouter-config')
    graph.add_node(global_vrouter_config_node)
    floating_ip_node = pydot.Node('floating-ip')
    graph.add_node(floating_ip_node)
    link_aggregation_group_node = pydot.Node('link-aggregation-group')
    graph.add_node(link_aggregation_group_node)
    virtual_router_node = pydot.Node('virtual-router')
    graph.add_node(virtual_router_node)
    port_profile_node = pydot.Node('port-profile')
    graph.add_node(port_profile_node)
    policy_management_node = pydot.Node('policy-management')
    graph.add_node(policy_management_node)
    e2_service_provider_node = pydot.Node('e2-service-provider')
    graph.add_node(e2_service_provider_node)
    fabric_node = pydot.Node('fabric')
    graph.add_node(fabric_node)
    job_template_node = pydot.Node('job-template')
    graph.add_node(job_template_node)
    routing_policy_node = pydot.Node('routing-policy')
    graph.add_node(routing_policy_node)
    role_config_node = pydot.Node('role-config')
    graph.add_node(role_config_node)
    tag_type_node = pydot.Node('tag-type')
    graph.add_node(tag_type_node)
    structured_syslog_message_node = pydot.Node('structured-syslog-message')
    graph.add_node(structured_syslog_message_node)
    loadbalancer_pool_node = pydot.Node('loadbalancer-pool')
    graph.add_node(loadbalancer_pool_node)
    device_chassis_node = pydot.Node('device-chassis')
    graph.add_node(device_chassis_node)
    global_qos_config_node = pydot.Node('global-qos-config')
    graph.add_node(global_qos_config_node)
    analytics_node_node = pydot.Node('analytics-node')
    graph.add_node(analytics_node_node)
    virtual_DNS_node = pydot.Node('virtual-DNS')
    graph.add_node(virtual_DNS_node)
    config_database_node_node = pydot.Node('config-database-node')
    graph.add_node(config_database_node_node)
    config_node_node = pydot.Node('config-node')
    graph.add_node(config_node_node)
    device_functional_group_node = pydot.Node('device-functional-group')
    graph.add_node(device_functional_group_node)
    firewall_rule_node = pydot.Node('firewall-rule')
    graph.add_node(firewall_rule_node)
    bgpvpn_node = pydot.Node('bgpvpn')
    graph.add_node(bgpvpn_node)
    role_definition_node = pydot.Node('role-definition')
    graph.add_node(role_definition_node)
    service_connection_module_node = pydot.Node('service-connection-module')
    graph.add_node(service_connection_module_node)
    security_group_node = pydot.Node('security-group')
    graph.add_node(security_group_node)
    database_node_node = pydot.Node('database-node')
    graph.add_node(database_node_node)
    loadbalancer_healthmonitor_node = pydot.Node('loadbalancer-healthmonitor')
    graph.add_node(loadbalancer_healthmonitor_node)
    devicemgr_node_node = pydot.Node('devicemgr-node')
    graph.add_node(devicemgr_node_node)
    project_node = pydot.Node('project')
    graph.add_node(project_node)
    fabric_namespace_node = pydot.Node('fabric-namespace')
    graph.add_node(fabric_namespace_node)
    network_ipam_node = pydot.Node('network-ipam')
    graph.add_node(network_ipam_node)
    network_policy_node = pydot.Node('network-policy')
    graph.add_node(network_policy_node)
    sflow_profile_node = pydot.Node('sflow-profile')
    graph.add_node(sflow_profile_node)
    hardware_node = pydot.Node('hardware')
    graph.add_node(hardware_node)
    tag_node = pydot.Node('tag')
    graph.add_node(tag_node)
    feature_config_node = pydot.Node('feature-config')
    graph.add_node(feature_config_node)
    telemetry_profile_node = pydot.Node('telemetry-profile')
    graph.add_node(telemetry_profile_node)
    bgp_router_node = pydot.Node('bgp-router')
    graph.add_node(bgp_router_node)
    virtual_network_node = pydot.Node('virtual-network')
    graph.add_node(virtual_network_node)
    virtual_port_group_node = pydot.Node('virtual-port-group')
    graph.add_node(virtual_port_group_node)
    service_appliance_node = pydot.Node('service-appliance')
    graph.add_node(service_appliance_node)
    namespace_node = pydot.Node('namespace')
    graph.add_node(namespace_node)
    feature_node = pydot.Node('feature')
    graph.add_node(feature_node)
    storm_control_profile_node = pydot.Node('storm-control-profile')
    graph.add_node(storm_control_profile_node)
    device_image_node = pydot.Node('device-image')
    graph.add_node(device_image_node)
    physical_interface_node = pydot.Node('physical-interface')
    graph.add_node(physical_interface_node)
    access_control_list_node = pydot.Node('access-control-list')
    graph.add_node(access_control_list_node)
    node_node = pydot.Node('node')
    graph.add_node(node_node)
    customer_attachment_node = pydot.Node('customer-attachment')
    graph.add_node(customer_attachment_node)
    structured_syslog_sla_profile_node = pydot.Node('structured-syslog-sla-profile')
    graph.add_node(structured_syslog_sla_profile_node)
    host_based_service_node = pydot.Node('host-based-service')
    graph.add_node(host_based_service_node)
    virtual_machine_node = pydot.Node('virtual-machine')
    graph.add_node(virtual_machine_node)
    interface_route_table_node = pydot.Node('interface-route-table')
    graph.add_node(interface_route_table_node)
    loadbalancer_member_node = pydot.Node('loadbalancer-member')
    graph.add_node(loadbalancer_member_node)
    service_health_check_node = pydot.Node('service-health-check')
    graph.add_node(service_health_check_node)
    alarm_node = pydot.Node('alarm')
    graph.add_node(alarm_node)
    api_access_list_node = pydot.Node('api-access-list')
    graph.add_node(api_access_list_node)
    routing_instance_node = pydot.Node('routing-instance')
    graph.add_node(routing_instance_node)
    alias_ip_pool_node = pydot.Node('alias-ip-pool')
    graph.add_node(alias_ip_pool_node)
    data_center_interconnect_node = pydot.Node('data-center-interconnect')
    graph.add_node(data_center_interconnect_node)

    # Generate edge definitions and add to graph
    graph.add_edge(pydot.Edge(service_endpoint_node, service_connection_module_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_endpoint_node, physical_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_endpoint_node, service_object_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_endpoint_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, network_ipam_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, physical_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, virtual_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, logical_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, flow_node_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(instance_ip_node, floating_ip_node, color = 'red'))
    graph.add_edge(pydot.Edge(instance_ip_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_appliance_set_node, service_appliance_node, color = 'red'))
    graph.add_edge(pydot.Edge(service_appliance_set_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(route_target_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_listener_node, loadbalancer_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_listener_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(floating_ip_pool_node, floating_ip_node, color = 'red'))
    graph.add_edge(pydot.Edge(floating_ip_pool_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, virtual_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, bgp_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, intent_map_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, fabric_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, node_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, device_functional_group_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, device_chassis_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, device_image_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, link_aggregation_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(physical_router_node, physical_role_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, overlay_role_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, hardware_inventory_node, color = 'red'))
    graph.add_edge(pydot.Edge(physical_router_node, cli_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(physical_router_node, physical_interface_node, color = 'red'))
    graph.add_edge(pydot.Edge(physical_router_node, logical_interface_node, color = 'red'))
    graph.add_edge(pydot.Edge(physical_router_node, telemetry_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_router_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(config_root_node, global_system_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(config_root_node, domain_node, color = 'red'))
    graph.add_edge(pydot.Edge(config_root_node, policy_management_node, color = 'red'))
    graph.add_edge(pydot.Edge(config_root_node, tag_node, color = 'red'))
    graph.add_edge(pydot.Edge(config_root_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_template_node, service_appliance_set_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_template_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(hardware_inventory_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_policy_node, firewall_rule_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_policy_node, security_logging_object_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_policy_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(route_table_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(provider_attachment_node, virtual_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(provider_attachment_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(overlay_role_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(multicast_policy_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(network_device_config_node, physical_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(network_device_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_DNS_record_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(control_node_zone_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(dsa_rule_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(structured_syslog_config_node, structured_syslog_message_node, color = 'red'))
    graph.add_edge(pydot.Edge(structured_syslog_config_node, structured_syslog_hostname_record_node, color = 'red'))
    graph.add_edge(pydot.Edge(structured_syslog_config_node, structured_syslog_application_record_node, color = 'red'))
    graph.add_edge(pydot.Edge(structured_syslog_config_node, structured_syslog_sla_profile_node, color = 'red'))
    graph.add_edge(pydot.Edge(structured_syslog_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(discovery_service_assignment_node, dsa_rule_node, color = 'red'))
    graph.add_edge(pydot.Edge(discovery_service_assignment_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_interface_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_interface_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(flow_node_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(flow_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_group_node, port_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_group_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(route_aggregate_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(route_aggregate_node, routing_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(route_aggregate_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, route_target_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, route_table_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, physical_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, bgpvpn_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(logical_router_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(domain_node, project_node, color = 'red'))
    graph.add_edge(pydot.Edge(domain_node, namespace_node, color = 'red'))
    graph.add_edge(pydot.Edge(domain_node, service_template_node, color = 'red'))
    graph.add_edge(pydot.Edge(domain_node, virtual_DNS_node, color = 'red'))
    graph.add_edge(pydot.Edge(domain_node, api_access_list_node, color = 'red'))
    graph.add_edge(pydot.Edge(domain_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(structured_syslog_hostname_record_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_instance_node, service_template_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_instance_node, instance_ip_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_instance_node, port_tuple_node, color = 'red'))
    graph.add_edge(pydot.Edge(service_instance_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(node_profile_node, job_template_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(node_profile_node, hardware_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(node_profile_node, role_definition_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(node_profile_node, role_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(node_profile_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bridge_domain_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(alias_ip_node, project_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(alias_ip_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(alias_ip_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(webui_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_as_a_service_node, control_node_zone_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_as_a_service_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_as_a_service_node, service_health_check_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_as_a_service_node, bgp_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_as_a_service_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(subnet_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(subnet_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(global_system_config_node, feature_flag_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, bgp_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(global_system_config_node, control_node_zone_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, global_vrouter_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, global_qos_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, virtual_router_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, config_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, analytics_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, flow_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, devicemgr_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, database_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, webui_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, config_database_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, analytics_alarm_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, analytics_snmp_node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, service_appliance_set_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, api_access_list_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, alarm_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, job_template_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, data_center_interconnect_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, intent_map_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, fabric_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, node_profile_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, physical_router_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, device_image_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, node_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, feature_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, physical_role_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, overlay_role_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, role_definition_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, global_analytics_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_system_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(sub_cluster_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(forwarding_class_node, qos_queue_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(forwarding_class_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_group_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(global_analytics_config_node, structured_syslog_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_analytics_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(address_group_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(application_policy_set_node, firewall_policy_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(application_policy_set_node, global_vrouter_config_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(application_policy_set_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_ip_node, loadbalancer_pool_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_ip_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_ip_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(intent_map_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_tuple_node, logical_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_tuple_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_tuple_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(analytics_alarm_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(qos_queue_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_role_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(card_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(security_logging_object_node, network_policy_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(security_logging_object_node, security_group_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(security_logging_object_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(qos_config_node, global_system_config_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(qos_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(analytics_snmp_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, security_logging_object_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, qos_config_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, security_group_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, virtual_machine_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, routing_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, bgp_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, port_tuple_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, service_health_check_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, interface_route_table_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, physical_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, bridge_domain_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, service_endpoint_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, port_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_interface_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(cli_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_object_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(feature_flag_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_node, service_appliance_set_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(peering_policy_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(structured_syslog_application_record_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(global_vrouter_config_node, security_logging_object_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_vrouter_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(floating_ip_node, project_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(floating_ip_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(floating_ip_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(link_aggregation_group_node, physical_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(link_aggregation_group_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(link_aggregation_group_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_router_node, network_ipam_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_router_node, virtual_machine_interface_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_router_node, sub_cluster_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_router_node, virtual_machine_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_router_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_profile_node, storm_control_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(port_profile_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(policy_management_node, service_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(policy_management_node, address_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(policy_management_node, firewall_rule_node, color = 'red'))
    graph.add_edge(pydot.Edge(policy_management_node, firewall_policy_node, color = 'red'))
    graph.add_edge(pydot.Edge(policy_management_node, application_policy_set_node, color = 'red'))
    graph.add_edge(pydot.Edge(policy_management_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(e2_service_provider_node, peering_policy_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(e2_service_provider_node, physical_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(e2_service_provider_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(fabric_node, intent_map_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(fabric_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(fabric_node, fabric_namespace_node, color = 'red'))
    graph.add_edge(pydot.Edge(fabric_node, node_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(fabric_node, virtual_port_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(fabric_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(job_template_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(routing_policy_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(routing_policy_node, routing_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(routing_policy_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(role_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(tag_type_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(structured_syslog_message_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_pool_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_pool_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_pool_node, loadbalancer_listener_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_pool_node, service_appliance_set_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_pool_node, loadbalancer_member_node, color = 'red'))
    graph.add_edge(pydot.Edge(loadbalancer_pool_node, loadbalancer_healthmonitor_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_pool_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(device_chassis_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(global_qos_config_node, qos_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_qos_config_node, forwarding_class_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_qos_config_node, qos_queue_node, color = 'red'))
    graph.add_edge(pydot.Edge(global_qos_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(analytics_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_DNS_node, virtual_DNS_record_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_DNS_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(config_database_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(config_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(device_functional_group_node, physical_role_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(device_functional_group_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_rule_node, service_group_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_rule_node, address_group_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_rule_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_rule_node, security_logging_object_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(firewall_rule_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgpvpn_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(role_definition_node, feature_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(role_definition_node, physical_role_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(role_definition_node, overlay_role_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(role_definition_node, feature_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(role_definition_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_connection_module_node, service_object_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_connection_module_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(security_group_node, access_control_list_node, color = 'red'))
    graph.add_edge(pydot.Edge(security_group_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(database_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_healthmonitor_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(devicemgr_node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(project_node, security_logging_object_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, namespace_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(project_node, security_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, virtual_network_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, qos_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, network_ipam_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, network_policy_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, virtual_machine_interface_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, floating_ip_pool_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(project_node, alias_ip_pool_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(project_node, bgp_as_a_service_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, routing_policy_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, route_aggregate_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, service_instance_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, service_health_check_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, route_table_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, interface_route_table_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, logical_router_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, api_access_list_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, multicast_policy_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, loadbalancer_pool_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, loadbalancer_healthmonitor_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, virtual_ip_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, loadbalancer_listener_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, loadbalancer_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, bgpvpn_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, alarm_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, policy_management_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, service_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, address_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, firewall_rule_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, firewall_policy_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, application_policy_set_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, application_policy_set_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(project_node, tag_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, device_functional_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, virtual_port_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, telemetry_profile_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, sflow_profile_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, storm_control_profile_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, port_profile_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, host_based_service_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, structured_syslog_config_node, color = 'red'))
    graph.add_edge(pydot.Edge(project_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(fabric_namespace_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(network_ipam_node, virtual_DNS_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(network_ipam_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(network_policy_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(sflow_profile_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(hardware_node, card_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(hardware_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(tag_node, tag_type_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(tag_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(feature_config_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(telemetry_profile_node, sflow_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(telemetry_profile_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_router_node, control_node_zone_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_router_node, sub_cluster_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_router_node, bgp_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(bgp_router_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, security_logging_object_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, qos_config_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, network_ipam_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, network_policy_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, access_control_list_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_network_node, floating_ip_pool_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_network_node, alias_ip_pool_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_network_node, routing_instance_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_network_node, route_table_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, bridge_domain_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_network_node, multicast_policy_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, bgpvpn_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, intent_map_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, routing_policy_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_network_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_port_group_node, physical_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_port_group_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_port_group_node, security_group_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_port_group_node, port_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_port_group_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_appliance_node, physical_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_appliance_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(namespace_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(feature_node, feature_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(feature_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(storm_control_profile_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(device_image_node, hardware_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(device_image_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_interface_node, physical_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_interface_node, logical_interface_node, color = 'red'))
    graph.add_edge(pydot.Edge(physical_interface_node, port_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(physical_interface_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(access_control_list_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(node_node, node_profile_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(node_node, port_node, color = 'red'))
    graph.add_edge(pydot.Edge(node_node, port_group_node, color = 'red'))
    graph.add_edge(pydot.Edge(node_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(customer_attachment_node, virtual_machine_interface_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(customer_attachment_node, floating_ip_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(customer_attachment_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(structured_syslog_sla_profile_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(host_based_service_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(host_based_service_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_node, virtual_machine_interface_node, color = 'red'))
    graph.add_edge(pydot.Edge(virtual_machine_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(virtual_machine_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(interface_route_table_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(interface_route_table_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(loadbalancer_member_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_health_check_node, service_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(service_health_check_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(alarm_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(api_access_list_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(routing_instance_node, bgp_router_node, color = 'red'))
    graph.add_edge(pydot.Edge(routing_instance_node, routing_instance_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(routing_instance_node, route_target_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(routing_instance_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(alias_ip_pool_node, alias_ip_node, color = 'red'))
    graph.add_edge(pydot.Edge(alias_ip_pool_node, tag_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(data_center_interconnect_node, logical_router_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(data_center_interconnect_node, virtual_network_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(data_center_interconnect_node, routing_policy_node, color = 'blue', constraint = False))
    graph.add_edge(pydot.Edge(data_center_interconnect_node, tag_node, color = 'blue', constraint = False))

    return graph
# end generate_schema_graph

def write_schema_graph(graph, filename):
    graph.write_xdot(filename)
# end write_schema_graph

