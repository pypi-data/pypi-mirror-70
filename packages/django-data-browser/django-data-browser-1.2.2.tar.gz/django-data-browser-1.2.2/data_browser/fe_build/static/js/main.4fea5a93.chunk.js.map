{"version":3,"sources":["Components.js","Query.js","App.js","serviceWorker.js","index.js"],"names":["Link","props","type","className","onClick","children","FilterValue","lookup","onChange","value","step","Filter","path","this","prettyPath","index","query","fieldType","getFieldType","getField","removeFilter","addField","join","e","setFilterLookup","target","sortedLookups","map","lookupName","key","replace","setFilterValue","lookups","errorMessage","React","Component","Filters","filters","filter","filterErrors","Toggle","state","isToggleOn","setState","handleClick","bind","title","Field","modelField","prettyName","concrete","addFilter","model","AllFields","modelFields","getModelFields","sortedFields","fieldName","fields","concat","ResultsHead","field","removeField","toggleSort","dsc","priority","asc","null","sort","length","ResultsCell","dangerouslySetInnerHTML","__html","String","ResultsBody","results","row","rowIndex","cell","colIndex","Results","ModelSelector","setModel","sortedModels","Logo","version","QueryPage","saveUrl","getUrlForSave","id","href","getUrlForMedia","HomePage","savedViews","view","setQuery","name","description","getPartsForQuery","f","getUrlForQuery","baseUrl","media","parts","basePath","window","location","origin","controller","Query","config","slice","allModelFields","types","defaultLookup","defaultValue","newFields","push","newResults","splice","newSort","newFilters","getDefaultLookValue","adminUrl","model_name","queryString","URLSearchParams","toString","assert","require","App","initialState","url","abort","AbortController","fetch","signal","then","res","json","response","reload","reqState","history","replaceState","fetchResults","catch","onpopstate","queryChange","newState","request","pushState","deepEqual","console","log","Sentry","handleQueryChange","Boolean","hostname","match","djangoData","JSON","parse","document","getElementById","textContent","sentryDsn","dsn","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4fea5a93.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction Link(props) {\n  return (\n    <button\n      type=\"button\"\n      className={\"Link \" + (props.className || \"\")}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nfunction FilterValue(props) {\n  if (props.lookup.type === \"boolean\")\n    return (\n      <select\n        className=\"FilterValue\"\n        onChange={props.onChange}\n        value={props.value}\n      >\n        <option value={true}>true</option>\n        <option value={false}>false</option>\n      </select>\n    );\n  else if (props.lookup.type === \"number\")\n    return (\n      <input\n        className=\"FilterValue\"\n        type=\"number\"\n        step=\"0\"\n        value={props.value}\n        onChange={props.onChange}\n      />\n    );\n  else\n    return (\n      <input\n        className=\"FilterValue\"\n        type=\"text\"\n        value={props.value}\n        onChange={props.onChange}\n      />\n    );\n}\n\nclass Filter extends React.Component {\n  render() {\n    const path = this.props.path;\n    const prettyPath = this.props.prettyPath;\n    const index = this.props.index;\n    const lookup = this.props.lookup;\n    const query = this.props.query;\n    const fieldType = query.getFieldType(query.getField(path));\n    return (\n      <tr>\n        <td>\n          <Link onClick={() => query.removeFilter(index)}>✘</Link>{\" \"}\n          <Link onClick={() => query.addField(path, prettyPath)}>\n            {prettyPath.join(\" \")}\n          </Link>{\" \"}\n        </td>\n        <td>\n          <select\n            className=\"Lookup\"\n            value={lookup}\n            onChange={(e) => query.setFilterLookup(index, e.target.value)}\n          >\n            {fieldType.sortedLookups.map((lookupName) => (\n              <option key={lookupName} value={lookupName}>\n                {lookupName.replace(/_/g, \" \")}\n              </option>\n            ))}\n          </select>\n        </td>\n        <td>=</td>\n        <td>\n          <FilterValue\n            value={this.props.value}\n            onChange={(e) => query.setFilterValue(index, e.target.value)}\n            lookup={fieldType.lookups[lookup]}\n          />\n          {this.props.errorMessage ? <p>{this.props.errorMessage}</p> : \"\"}\n        </td>\n      </tr>\n    );\n  }\n}\n\nfunction Filters(props) {\n  return (\n    <form className=\"Filters\">\n      <table className=\"Flat\">\n        <tbody>\n          {props.filters.map((filter, index) => (\n            <Filter\n              query={props.query}\n              key={index}\n              index={index}\n              {...filter}\n              errorMessage={props.filterErrors[index]}\n            />\n          ))}\n        </tbody>\n      </table>\n    </form>\n  );\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: false };\n  }\n\n  handleClick() {\n    this.setState((state) => ({\n      isToggleOn: !state.isToggleOn,\n    }));\n  }\n\n  render() {\n    return (\n      <>\n        <td>\n          <Link className=\"ToggleLink\" onClick={this.handleClick.bind(this)}>\n            {this.state.isToggleOn ? \">\" : \"+\"}\n          </Link>\n        </td>\n        <td>\n          {this.props.title}\n          {this.state.isToggleOn && this.props.children}\n        </td>\n      </>\n    );\n  }\n}\n\nfunction Field(props) {\n  const modelField = props.modelField;\n  const title = modelField.type ? (\n    <Link onClick={() => props.query.addField(props.path, props.prettyPath)}>\n      {modelField.prettyName}\n    </Link>\n  ) : (\n    modelField.prettyName\n  );\n\n  return (\n    <tr>\n      <td>\n        {modelField.concrete && (\n          <Link\n            onClick={() => props.query.addFilter(props.path, props.prettyPath)}\n          >\n            Y\n          </Link>\n        )}\n      </td>\n\n      {modelField.model ? (\n        <Toggle title={title}>\n          <AllFields\n            query={props.query}\n            model={modelField.model}\n            path={props.path}\n            prettyPath={props.prettyPath}\n          />\n        </Toggle>\n      ) : (\n        <>\n          <td></td>\n          <td>{title}</td>\n        </>\n      )}\n    </tr>\n  );\n}\n\nfunction AllFields(props) {\n  const modelFields = props.query.getModelFields(props.model);\n  return (\n    <table>\n      <tbody>\n        {modelFields.sortedFields.map((fieldName) => {\n          const modelField = modelFields.fields[fieldName];\n          return (\n            <Field\n              key={fieldName}\n              query={props.query}\n              path={props.path.concat([fieldName])}\n              prettyPath={props.prettyPath.concat([modelField.prettyName])}\n              modelField={modelField}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction ResultsHead(props) {\n  return (\n    <thead>\n      <tr>\n        {props.fields.map((field, index) => {\n          const modelField = props.query.getField(field.path);\n          return (\n            <th key={index}>\n              <Link onClick={() => props.query.removeField(index)}>✘</Link>{\" \"}\n              {modelField.concrete ? (\n                <>\n                  <Link\n                    onClick={() =>\n                      props.query.addFilter(field.path, field.prettyPath)\n                    }\n                  >\n                    Y\n                  </Link>{\" \"}\n                  <Link onClick={() => props.query.toggleSort(index)}>\n                    {field.prettyPath.join(\" \")}\n                  </Link>{\" \"}\n                  {\n                    {\n                      dsc: `↑${field.priority}`,\n                      asc: `↓${field.priority}`,\n                      null: \"\",\n                    }[field.sort]\n                  }\n                </>\n              ) : (\n                field.prettyPath.join(\" \")\n              )}\n            </th>\n          );\n        })}\n        {!props.fields.length && <th>No fields selected</th>}\n      </tr>\n    </thead>\n  );\n}\n\nfunction ResultsCell(props) {\n  return (\n    <td className={props.modelField.type}>\n      {props.modelField.type === \"html\" && props.value ? (\n        <div dangerouslySetInnerHTML={{ __html: props.value }} />\n      ) : (\n        String(props.value)\n      )}\n    </td>\n  );\n}\n\nfunction ResultsBody(props) {\n  return (\n    <tbody>\n      {props.results.map((row, rowIndex) => (\n        <tr key={rowIndex}>\n          {row.map((cell, colIndex) => (\n            <ResultsCell\n              key={colIndex}\n              query={props.query}\n              value={cell}\n              modelField={props.query.getField(props.fields[colIndex].path)}\n            />\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nfunction Results(props) {\n  return (\n    <table className=\"Results\">\n      <ResultsHead query={props.query} fields={props.fields} />\n      <ResultsBody\n        query={props.query}\n        results={props.results}\n        fields={props.fields}\n      />\n    </table>\n  );\n}\n\nfunction ModelSelector(props) {\n  return (\n    <select\n      className=\"ModelSelector\"\n      onChange={(e) => props.query.setModel(e.target.value)}\n      value={props.model}\n    >\n      {props.sortedModels.map((model) => (\n        <option key={model}>{model}</option>\n      ))}\n    </select>\n  );\n}\n\nfunction Logo(props) {\n  return (\n    <div className=\"Logo\" onClick={() => props.query.setModel(\"\")}>\n      <span>DDB</span>\n      <span className=\"Version\">v{props.version}</span>\n    </div>\n  );\n}\n\nfunction QueryPage(props) {\n  const saveUrl = props.query.getUrlForSave();\n  return (\n    <div id=\"body\">\n      <Logo query={props.query} version={props.version} />\n      <ModelSelector\n        query={props.query}\n        sortedModels={props.sortedModels}\n        model={props.model}\n      />\n      <Filters\n        query={props.query}\n        filters={props.filters}\n        filterErrors={props.filterErrors}\n      />\n      <p>\n        Showing {props.results.length} results -{\" \"}\n        <a href={props.query.getUrlForMedia(\"csv\")}>Download as CSV</a> -{\" \"}\n        <a href={props.query.getUrlForMedia(\"json\")}>View as JSON</a>\n        {saveUrl && (\n          <>\n            {\" \"}\n            - <a href={saveUrl}>Save View</a>{\" \"}\n          </>\n        )}\n      </p>\n      <div className=\"MainSpace\">\n        <div className=\"FieldsList\">\n          <AllFields\n            query={props.query}\n            model={props.model}\n            path={[]}\n            prettyPath={[]}\n          />\n        </div>\n        <Results\n          query={props.query}\n          fields={props.fields}\n          results={props.results}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction HomePage(props) {\n  return (\n    <div id=\"body\">\n      <Logo query={props.query} version={props.version} />\n      <div className=\"Index\">\n        <div>\n          <h1>Models</h1>\n          <div>\n            {props.sortedModels.map((model) => (\n              <div key={model}>\n                <button\n                  className=\"Link\"\n                  onClick={() => props.query.setModel(model)}\n                >\n                  {model}\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div>\n          <h1>Saved Views</h1>\n          <div>\n            {props.savedViews.map((view, index) => (\n              <div key={index}>\n                <button\n                  className=\"Link\"\n                  onClick={() => props.query.setQuery(view.query)}\n                >\n                  {view.model} - {view.name}\n                </button>\n                <p>{view.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { HomePage, QueryPage };\n","function getPartsForQuery(query) {\n  return {\n    model: query.model,\n    fields: query.fields\n      .map(\n        (f) =>\n          f.path.join(\"__\") +\n          { asc: `+${f.priority}`, dsc: `-${f.priority}`, null: \"\" }[f.sort]\n      )\n      .join(\",\"),\n    query: query.filters\n      .map((f) => `${f.path.join(\"__\")}__${f.lookup}=${f.value}`)\n      .join(\"&\"),\n  };\n}\n\nfunction getUrlForQuery(baseUrl, query, media) {\n  const parts = getPartsForQuery(query);\n  const basePath = `${baseUrl}query/${parts.model}`;\n  return `${window.location.origin}${basePath}/${parts.fields}.${media}?${parts.query}`;\n}\n\nclass Query {\n  constructor(config, query, setQuery) {\n    this.config = config;\n    this.query = query;\n    this.setQuery = setQuery;\n  }\n\n  getField(path) {\n    const field = path.slice(-1);\n    let model = this.query.model;\n    for (const field of path.slice(0, -1)) {\n      model = this.config.allModelFields[model].fields[field].model;\n    }\n    return this.config.allModelFields[model].fields[field];\n  }\n\n  getFieldType(field) {\n    return this.config.types[field.type];\n  }\n\n  getModelFields(model) {\n    return this.config.allModelFields[model];\n  }\n\n  getDefaultLookValue(fieldType) {\n    return this.config.types[fieldType.lookups[fieldType.defaultLookup].type]\n      .defaultValue;\n  }\n\n  addField(path, prettyPath) {\n    const newFields = this.query.fields.slice();\n    newFields.push({\n      path: path,\n      prettyPath: prettyPath,\n      sort: null,\n      priority: null,\n    });\n    const newResults = this.query.results.map((row) => row.concat([\"\"]));\n    this.setQuery({ fields: newFields, results: newResults });\n  }\n\n  removeField(index) {\n    const newFields = this.query.fields.slice();\n    newFields.splice(index, 1);\n    const newResults = this.query.results.map((row) =>\n      row.slice(0, index).concat(row.slice(index + 1))\n    );\n    this.setQuery({ fields: newFields, results: newResults });\n  }\n\n  toggleSort(index) {\n    const field = this.query.fields[index];\n    const newSort = { asc: \"dsc\", dsc: null, null: \"asc\" }[field.sort];\n    let newFields = this.query.fields.slice();\n\n    if (field.sort) {\n      // move any later sort fields forward\n      newFields = newFields.map((f) => ({\n        ...f,\n        priority:\n          f.priority != null && f.priority > field.priority\n            ? f.priority - 1\n            : f.priority,\n      }));\n    }\n\n    if (newSort) {\n      // move all other fiels back and insert the updated one\n      newFields = newFields.map((f) => ({\n        ...f,\n        priority: f.priority != null ? f.priority + 1 : f.priority,\n      }));\n      newFields[index] = { ...field, sort: newSort, priority: 0 };\n    } else {\n      // blank the sort on the updated field\n      newFields[index] = { ...field, sort: null, priority: null };\n    }\n\n    this.setQuery({\n      fields: newFields,\n    });\n  }\n\n  addFilter(path, prettyPath) {\n    const fieldType = this.getFieldType(this.getField(path));\n    const newFilters = this.query.filters.slice();\n    newFilters.push({\n      path: path,\n      prettyPath: prettyPath,\n      lookup: fieldType.defaultLookup,\n      value: this.getDefaultLookValue(fieldType),\n    });\n    this.setQuery({ filters: newFilters });\n  }\n\n  removeFilter(index) {\n    const newFilters = this.query.filters.slice();\n    newFilters.splice(index, 1);\n    this.setQuery({ filters: newFilters });\n  }\n\n  setFilterValue(index, value) {\n    const newFilters = this.query.filters.slice();\n    newFilters[index] = { ...newFilters[index], value: value };\n    this.setQuery({ filters: newFilters });\n  }\n\n  setFilterLookup(index, lookup) {\n    const newFilters = this.query.filters.slice();\n    newFilters[index] = { ...newFilters[index], lookup: lookup };\n    this.setQuery({ filters: newFilters });\n  }\n\n  setModel(model) {\n    this.setQuery({\n      model: model,\n      fields: [],\n      filters: [],\n      results: [],\n    });\n  }\n\n  getUrlForSave() {\n    if (this.config.adminUrl === null) return null;\n    const parts = getPartsForQuery(this.query);\n    parts.model_name = parts.model;\n    const queryString = new URLSearchParams(parts).toString();\n    return `${window.location.origin}${this.config.adminUrl}?${queryString}`;\n  }\n\n  getUrlForMedia(media) {\n    return getUrlForQuery(this.config.baseUrl, this.query, media);\n  }\n}\n\nexport { Query, getPartsForQuery, getUrlForQuery };\n","import * as Sentry from \"@sentry/browser\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { HomePage, QueryPage } from \"./Components\";\nimport { Query, getUrlForQuery } from \"./Query\";\nconst assert = require(\"assert\");\nlet controller;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = props.initialState;\n  }\n\n  fetchResults(state) {\n    const url = getUrlForQuery(this.props.config.baseUrl, state, \"json\");\n\n    if (controller) controller.abort();\n    controller = new AbortController();\n\n    return fetch(url, { signal: controller.signal })\n      .then((res) => res.json())\n      .then((response) => {\n        if (response.version !== this.state.version)\n          window.location.reload(true);\n        delete response.version;\n        return response;\n      })\n      .then((response) => {\n        this.setState({\n          results: response.results,\n          filterErrors: response.filterErrors,\n        });\n        return response;\n      });\n  }\n\n  componentDidMount() {\n    const reqState = {\n      model: this.state.model,\n      fields: this.state.fields,\n      filters: this.state.filters,\n      results: [],\n      filterErrors: [],\n    };\n    window.history.replaceState(\n      reqState,\n      null,\n      getUrlForQuery(this.props.config.baseUrl, this.state, \"html\")\n    );\n    this.fetchResults(this.state).catch(() => null);\n    window.onpopstate = (e) => {\n      this.fetchResults(e.state).catch(() => null);\n      this.setState(e.state);\n    };\n  }\n\n  handleQueryChange(queryChange) {\n    this.setState(queryChange);\n    const newState = { ...this.state, ...queryChange };\n    const request = {\n      model: newState.model,\n      fields: newState.fields,\n      filters: newState.filters,\n      results: [],\n      filterErrors: [],\n    };\n    window.history.pushState(\n      request,\n      null,\n      getUrlForQuery(this.props.config.baseUrl, newState, \"html\")\n    );\n    this.fetchResults(newState)\n      .then((response) => {\n        response.results = [];\n        response.filterErrors = [];\n        assert.deepEqual(request, response);\n      })\n      .catch((e) => {\n        console.log(e);\n        Sentry.captureException(e);\n      });\n  }\n\n  render() {\n    const query = new Query(\n      this.props.config,\n      this.state,\n      this.handleQueryChange.bind(this)\n    );\n    if (this.state.model)\n      return (\n        <QueryPage\n          query={query}\n          sortedModels={this.props.config.sortedModels}\n          version={this.props.config.version}\n          {...this.state}\n        />\n      );\n    else\n      return (\n        <HomePage\n          query={query}\n          sortedModels={this.props.config.sortedModels}\n          savedViews={this.props.config.savedViews}\n          version={this.props.config.version}\n        />\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Sentry from \"@sentry/browser\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst djangoData = JSON.parse(document.getElementById(\"django-data\").textContent);\n\nif (djangoData.sentryDsn) {\n    Sentry.init({ dsn: djangoData.sentryDsn });\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App {...djangoData} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}