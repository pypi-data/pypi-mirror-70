{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["controller","assert","require","getAPIforWindow","location","window","htmlUrl","origin","pathname","slice","search","Link","props","type","className","onClick","children","Filter","event","newFilters","this","query","filters","splice","index","handleQueryChange","lookup","target","value","errorMessage","undefined","handleRemove","bind","name","onChange","handleLookupChange","getFieldType","lookups","map","key","handleValueChange","React","Component","Filters","filter","Toggle","state","isToggleOn","setState","handleClick","title","Fields","model_fields","fields","model","sorted_fields","field_name","field","types","concrete","push","path","newFields","sort","sorted_fks","fk_name","fk","fks","ResultsHead","asc","dsc","null","length","ResultsBody","data","row","cell","String","Results","Page","id","href","getUrlForQuery","saveLink","App","url","abort","AbortController","fetch","signal","then","res","json","result","error","fetchData","onpopstate","e","queryChange","newQuery","history","pushState","app","split","join","parts","getPartsForQuery","queryString","URLSearchParams","toString","adminUrl","media","basePath","baseUrl","getFkModel","getSaveUrl","Boolean","hostname","match","djangoData","JSON","parse","document","getElementById","textContent","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9fac9fec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nvar assert = require(\"assert\");\n\nlet controller;\n\nfunction getAPIforWindow() {\n  const location = window.location;\n  const htmlUrl = location.origin + location.pathname;\n  assert(htmlUrl.slice(-4) === \"html\");\n  const jsonUrl = htmlUrl.slice(0, -4) + \"json\";\n  return jsonUrl + location.search;\n}\n\nfunction Link(props) {\n  return (\n    <button\n      type=\"button\"\n      className={\"Link \" + (props.className || \"\")}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nclass Filter extends React.Component {\n  handleRemove(event) {\n    var newFilters = this.props.query.filters.slice();\n    newFilters.splice(this.props.index, 1);\n    this.props.handleQueryChange({ filters: newFilters });\n  }\n\n  handleLookupChange(event) {\n    var newFilters = this.props.query.filters.slice();\n    newFilters[this.props.index] = {\n      ...newFilters[this.props.index],\n      lookup: event.target.value,\n    };\n    this.props.handleQueryChange({ filters: newFilters });\n  }\n\n  handleValueChange(event) {\n    var newFilters = this.props.query.filters.slice();\n    newFilters[this.props.index] = {\n      ...newFilters[this.props.index],\n      value: event.target.value,\n    };\n    this.props.handleQueryChange({ filters: newFilters });\n  }\n\n  render() {\n    return (\n      <p className={this.props.errorMessage ? \"Error\" : undefined}>\n        <Link onClick={this.handleRemove.bind(this)}>âœ˜</Link> {this.props.name}{\" \"}\n        <select value={this.props.lookup} onChange={this.handleLookupChange.bind(this)}>\n          {this.props.getFieldType(this.props.name).lookups.map((lookup) => (\n            <option key={lookup.name} value={lookup.name}>\n              {lookup.name}\n            </option>\n          ))}\n        </select>{\" \"}\n        ={\" \"}\n        <input\n          type=\"text\"\n          name={`${this.props.name}__${this.props.lookup}`}\n          value={this.props.value}\n          onChange={this.handleValueChange.bind(this)}\n        />\n        {this.props.errorMessage}\n      </p>\n    );\n  }\n}\n\nfunction Filters(props) {\n  return (\n    <form className=\"Filters\">\n      {props.query.filters.map((filter, index) => (\n        <Filter\n          {...filter}\n          key={index}\n          index={index}\n          query={props.query}\n          handleQueryChange={props.handleQueryChange}\n          getFieldType={props.getFieldType}\n        />\n      ))}\n    </form>\n  );\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: false };\n  }\n\n  handleClick() {\n    this.setState((state) => ({\n      isToggleOn: !state.isToggleOn,\n    }));\n  }\n\n  render() {\n    if (this.state.isToggleOn) {\n      return (\n        <>\n          <Link className=\"ToggleLink\" onClick={this.handleClick.bind(this)}>\n            > {this.props.title}\n          </Link>\n          <div className=\"ToggleDiv\">{this.props.children}</div>\n        </>\n      );\n    } else {\n      return (\n        <Link className=\"ToggleLink\" onClick={this.handleClick.bind(this)}>\n          + {this.props.title}\n        </Link>\n      );\n    }\n  }\n}\n\nfunction Fields(props) {\n  const model_fields = props.fields[props.model];\n  return (\n    <ul className=\"FieldsList\">\n      {model_fields.sorted_fields.map((field_name) => {\n        const field = model_fields.fields[field_name];\n        function handleAddFilter() {\n          var newFilters = props.query.filters.slice();\n          newFilters.push({\n            errorMessage: null,\n            name: `${props.path}${field_name}`,\n            lookup: \"\",\n            value: \"\",\n          });\n          props.handleQueryChange({ filters: newFilters });\n        }\n\n        function handleAddField() {\n          var newFields = props.query.fields.slice();\n          newFields.push({\n            name: `${props.path}${field_name}`,\n            sort: null,\n            concrete: false,\n          });\n          props.handleQueryChange({ fields: newFields });\n        }\n\n        return (\n          <li key={field_name}>\n            {props.types[field.type].concrete ? (\n              <Link onClick={handleAddFilter}>Y</Link>\n            ) : (\n              <>&nbsp;&nbsp;</>\n            )}{\" \"}\n            <Link onClick={handleAddField}>{field_name}</Link>\n          </li>\n        );\n      })}\n      {model_fields.sorted_fks.map((fk_name) => {\n        const fk = model_fields.fks[fk_name];\n        return (\n          <li key={fk_name}>\n            <Toggle title={fk_name}>\n              <Fields\n                query={props.query}\n                handleQueryChange={props.handleQueryChange}\n                fields={props.fields}\n                model={fk.model}\n                path={`${props.path}${fk_name}__`}\n                types={props.types}\n              />\n            </Toggle>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction ResultsHead(props) {\n  return (\n    <thead>\n      <tr>\n        {props.query.fields.map((field, index) => {\n          function handleRemove() {\n            var newFields = props.query.fields.slice();\n            newFields.splice(index, 1);\n            props.handleQueryChange({\n              fields: newFields,\n            });\n          }\n\n          function handleAddFilter() {\n            var newFilters = props.query.filters.slice();\n            newFilters.push({\n              errorMessage: null,\n              name: field.name,\n              lookup: \"\",\n              value: \"\",\n            });\n            props.handleQueryChange({\n              filters: newFilters,\n            });\n          }\n\n          function handleToggleSort() {\n            var newFields = props.query.fields.slice();\n            newFields[index] = {\n              ...field,\n              sort: { asc: \"dsc\", dsc: null, null: \"asc\" }[field.sort],\n            };\n            props.handleQueryChange({\n              fields: newFields,\n            });\n          }\n\n          return (\n            <th key={field.name}>\n              <Link onClick={handleRemove}>âœ˜</Link>{\" \"}\n              {field.concrete ? (\n                <>\n                  <Link onClick={handleAddFilter}>Y</Link>{\" \"}\n                  <Link onClick={handleToggleSort}>{field.name}</Link>{\" \"}\n                  {{ dsc: \"â†‘\", asc: \"â†“\", null: \"\" }[field.sort]}\n                </>\n              ) : (\n                field.name\n              )}\n            </th>\n          );\n        })}\n        {!props.query.fields.length && <th>No fields selected</th>}\n      </tr>\n    </thead>\n  );\n}\n\nfunction ResultsBody(props) {\n  return (\n    <tbody>\n      {props.data.map((row, index) => (\n        <tr key={index}>\n          {row.map((cell, index) => (\n            <td key={index}>{String(cell)}</td>\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nfunction Results(props) {\n  return (\n    <table>\n      <ResultsHead query={props.query} handleQueryChange={props.handleQueryChange} />\n      <ResultsBody data={props.data} />\n    </table>\n  );\n}\n\nfunction Page(props) {\n  return (\n    <div id=\"body\">\n      <h1>{props.model}</h1>\n      <p>\n        <a href={props.getUrlForQuery(props.query, \"csv\")}>Download as CSV</a>\n      </p>\n      <p>\n        <a href={props.getUrlForQuery(props.query, \"json\")}>View as JSON</a>\n      </p>\n      <p>\n        <a href={props.saveLink}>Save View</a>\n      </p>\n\n      <Filters\n        query={props.query}\n        handleQueryChange={props.handleQueryChange}\n        getFieldType={props.getFieldType}\n      />\n\n      <p>Showing {props.data.length} results</p>\n      <div className=\"MainSpace\">\n        <div>\n          <Fields\n            query={props.query}\n            handleQueryChange={props.handleQueryChange}\n            fields={props.fields}\n            model={props.model}\n            path=\"\"\n            types={props.types}\n          />\n        </div>\n        <Results\n          query={props.query}\n          handleQueryChange={props.handleQueryChange}\n          data={props.data}\n        />\n      </div>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      query: { filters: [], fields: [] },\n    };\n  }\n\n  fetchData(url) {\n    if (controller) controller.abort();\n    controller = new AbortController();\n\n    fetch(url, { signal: controller.signal })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            data: result.data,\n            query: { fields: result.fields, filters: result.filters },\n          });\n        },\n        (error) => {\n          this.setState({\n            error,\n          });\n        }\n      );\n  }\n\n  componentDidMount() {\n    this.fetchData(getAPIforWindow());\n    window.onpopstate = (e) => {\n      this.fetchData(getAPIforWindow());\n    };\n  }\n\n  handleQueryChange(queryChange) {\n    const newQuery = { ...this.state.query, ...queryChange };\n    this.setState({ query: newQuery });\n    window.history.pushState(null, null, this.getUrlForQuery(newQuery, \"html\"));\n    this.fetchData(this.getUrlForQuery(newQuery, \"json\"));\n  }\n\n  getPartsForQuery(query) {\n    return {\n      app: this.props.model.split(\".\")[0],\n      model: this.props.model.split(\".\")[1],\n      fields: query.fields\n        .map((field) => ({ asc: \"+\", dsc: \"-\", null: \"\" }[field.sort] + field.name))\n        .join(\",\"),\n      query: query.filters\n        .map((filter) => `${filter.name}__${filter.lookup}=${filter.value}`)\n        .join(\"&\"),\n    };\n  }\n\n  getSaveUrl(query) {\n    const parts = this.getPartsForQuery(this.state.query);\n    const queryString = new URLSearchParams(parts).toString();\n    return `${window.location.origin}${this.props.adminUrl}?${queryString}`;\n  }\n\n  getUrlForQuery(query, media) {\n    const parts = this.getPartsForQuery(query);\n    const basePath = `${this.props.baseUrl}query/${parts.app}/${parts.model}`;\n    return `${window.location.origin}${basePath}/${parts.fields}.${media}?${parts.query}`;\n  }\n\n  getFieldType(path) {\n    const parts = path.split(\"__\");\n    const field = parts.slice(-1);\n    const model = this.getFkModel(parts.slice(0, -1).join(\"__\"));\n    const type = this.props.fields[model].fields[field][\"type\"];\n    return this.props.types[type];\n  }\n\n  getFkModel(path) {\n    var model = this.props.model;\n    if (path) {\n      for (const field of path.split(\"__\")) {\n        model = this.props.fields[model].fks[field][\"model\"];\n      }\n    }\n    return model;\n  }\n\n  render() {\n    return (\n      <Page\n        data={this.state.data}\n        query={this.state.query}\n        handleQueryChange={this.handleQueryChange.bind(this)}\n        model={this.props.model}\n        saveLink={this.getSaveUrl()}\n        getUrlForQuery={this.getUrlForQuery.bind(this)}\n        getFkModel={this.getFkModel.bind(this)}\n        getFieldType={this.getFieldType.bind(this)}\n        fields={this.props.fields}\n        types={this.props.types}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst djangoData = JSON.parse(document.getElementById(\"django-data\").textContent);\nReactDOM.render(\n    <React.StrictMode>\n        <App {...djangoData} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}