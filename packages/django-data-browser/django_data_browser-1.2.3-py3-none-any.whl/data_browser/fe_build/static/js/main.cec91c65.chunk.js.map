{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["assert","require","getAPIforWindow","location","window","html_url","origin","pathname","slice","search","getURLforQuery","query","media","fieldStr","fields","map","field","asc","dsc","null","sort","name","join","filterStr","filters","filter","lookup","value","parts","split","getBaseURL","Link","props","type","className","onClick","children","Filter","event","this","lookups","forEach","target","document","href","link","err_message","undefined","handleRemove","onChange","handleLookupChange","bind","key","React","Component","Filters","method","lightQuery","index","newFilters","splice","handleQueryChange","Toggle","state","isToggleOn","setState","handleClick","title","Fields","concrete","push","newFields","fks","fk","ResultsHead","length","ResultsBody","data","row","cell","Results","Page","id","model","save_link","all_fields","App","djangoData","JSON","parse","getElementById","textContent","url","fetch","then","res","json","result","error","fetchData","onpopstate","e","queryChange","newQuery","history","pushState","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qOAEIA,G,MAASC,EAAQ,KAErB,SAASC,IACP,IAAMC,EAAWC,OAAOD,SAClBE,EAAWF,EAASG,OAASH,EAASI,SAG5C,OAFAP,EAA8B,SAAvBK,EAASG,OAAO,IACNH,EAASG,MAAM,GAAI,GAAK,OACvBL,EAASM,OAS7B,SAASC,EAAeC,EAAOC,GAC7B,IAAMC,EAAWF,EAAMG,OACpBC,KAAI,SAACC,GAAD,MAAY,CAAEC,IAAK,IAAKC,IAAK,IAAKC,KAAM,IAAKH,EAAMI,MAAQJ,EAAMK,QACrEC,KAAK,KACFC,EAAYZ,EAAMa,QACrBT,KAAI,SAACU,GAAD,gBAAeA,EAAOJ,KAAtB,aAA+BI,EAAOC,OAAtC,YAAgDD,EAAOE,UAC3DL,KAAK,KACR,MAAM,GAAN,OAbF,WACE,IAAMnB,EAAWC,OAAOD,SAClByB,EAAQzB,EAASI,SAASsB,MAAM,KACtC,OAAO1B,EAASG,OAASsB,EAAMpB,MAAM,GAAI,GAAGc,KAAK,KAUvCQ,GAAV,YAA0BjB,EAA1B,YAAsCD,EAAtC,YAA+CW,GAGjD,SAASQ,EAAKC,GACZ,OACE,4BACEC,KAAK,SACLC,UAAW,SAAWF,EAAME,WAAa,IACzCC,QAASH,EAAMG,SAEdH,EAAMI,U,IAKPC,E,iLACeC,GACjBC,KAAKP,MAAMQ,QAAQC,SAAQ,SAACf,GACtBA,EAAOL,OAASiB,EAAMI,OAAOf,QAAOgB,SAASxC,SAASyC,KAAOlB,EAAOmB,W,+BAK1E,OACE,uBAAGX,UAAWK,KAAKP,MAAMP,OAAOqB,YAAc,aAAUC,GACtD,kBAAChB,EAAD,CAAMI,QAASI,KAAKP,MAAMgB,cAA1B,UADF,IACoDT,KAAKP,MAAMP,OAAOJ,KAAM,IAC1E,4BACEM,MAAOY,KAAKP,MAAMP,OAAOC,OACzBuB,SAAUV,KAAKW,mBAAmBC,KAAKZ,OAEtCA,KAAKP,MAAMQ,QAAQzB,KAAI,SAACW,GAAD,OACtB,4BAAQ0B,IAAK1B,EAAOL,KAAMM,MAAOD,EAAOL,MACrCK,EAAOL,UAGJ,IAXZ,IAYI,IACF,2BACEY,KAAK,OACLZ,KAAI,UAAKkB,KAAKP,MAAMP,OAAOJ,KAAvB,aAAgCkB,KAAKP,MAAMP,OAAOC,QACtDC,MAAOY,KAAKP,MAAMP,OAAOE,QAE1BY,KAAKP,MAAMP,OAAOqB,iB,GA3BNO,IAAMC,WAiC3B,SAASC,EAAQvB,GACf,OACE,0BAAME,UAAU,UAAUsB,OAAO,OAC9BxB,EAAMyB,WAAWjC,QAAQT,KAAI,SAACU,EAAQiC,GAAT,OAC5B,kBAAC,EAAD,CACEjC,OAAQA,EACRe,QAASR,EAAMrB,MAAMa,QAAQkC,GAAS1B,EAAMrB,MAAMa,QAAQkC,GAAOlB,QAAU,GAC3EY,IAAKM,EACLV,aAAc,WACZ,IAAIW,EAAa3B,EAAMyB,WAAWjC,QAAQhB,QAC1CmD,EAAWC,OAAOF,EAAO,GACzB1B,EAAM6B,kBAAkB,CACtBrC,QAASmC,UAKjB,2BACE,2BAAO1B,KAAK,a,IAMd6B,E,kDACJ,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IACD+B,MAAQ,CAAEC,YAAY,GAFV,E,0DAMjBzB,KAAK0B,UAAS,SAACF,GAAD,MAAY,CACxBC,YAAaD,EAAMC,iB,+BAKrB,OAAIzB,KAAKwB,MAAMC,WAEX,oCACE,kBAACjC,EAAD,CAAMG,UAAU,cAAcC,QAASI,KAAK2B,YAAYf,KAAKZ,OAA7D,KACKA,KAAKP,MAAMmC,OAEhB,yBAAKjC,UAAU,cAAcK,KAAKP,MAAMI,WAK1C,kBAACL,EAAD,CAAMG,UAAU,cAAcC,QAASI,KAAK2B,YAAYf,KAAKZ,OAA7D,KACKA,KAAKP,MAAMmC,W,GAzBHd,IAAMC,WAgC3B,SAASc,EAAOpC,GACd,OACE,wBAAIE,UAAU,eACXF,EAAMlB,OAAOC,KAAI,SAACC,GAsBjB,OACE,wBAAIoC,IAAKpC,EAAMK,MACZL,EAAMqD,SACL,kBAACtC,EAAD,CAAMI,QAxBZ,WACE,IAAIwB,EAAa3B,EAAMrB,MAAMa,QAAQhB,QACrCmD,EAAWW,KAAK,CACdxB,YAAa,KACbzB,KAAML,EAAMK,KACZK,OAAQ,GACRC,MAAO,KAETK,EAAM6B,kBAAkB,CAAErC,QAASmC,MAgB/B,KAEA,gDACC,IACH,kBAAC5B,EAAD,CAAMI,QAjBV,WACE,IAAIoC,EAAYvC,EAAMrB,MAAMG,OAAON,QACnC+D,EAAUD,KAAK,CACbjD,KAAML,EAAMK,KACZD,KAAM,KACNiD,UAAU,IAEZrC,EAAM6B,kBAAkB,CAAE/C,OAAQyD,MAUAvD,EAAMK,UAK3CW,EAAMwC,IAAIzD,KAAI,SAAC0D,GAAD,OACb,wBAAIrB,IAAKqB,EAAGpD,MACV,kBAAC,EAAD,CAAQ8C,MAAOM,EAAGpD,MAChB,kBAAC+C,EAAWK,SAQxB,SAASC,EAAY1C,GACnB,OACE,+BACE,4BACGA,EAAMrB,MAAMG,OAAOC,KAAI,SAACC,EAAO0C,GAiC9B,OACE,wBAAIN,IAAKpC,EAAMK,MACb,kBAACU,EAAD,CAAMI,QAlCV,WACE,IAAIoC,EAAYvC,EAAMrB,MAAMG,OAAON,QACnC+D,EAAUX,OAAOF,EAAO,GACxB1B,EAAM6B,kBAAkB,CACtB/C,OAAQyD,MA8BR,UAAsC,IACrCvD,EAAMqD,SACL,oCACE,kBAACtC,EAAD,CAAMI,QA7Bd,WACE,IAAIwB,EAAa3B,EAAMrB,MAAMa,QAAQhB,QACrCmD,EAAWW,KAAK,CACdxB,YAAa,KACbzB,KAAML,EAAMK,KACZK,OAAQ,GACRC,MAAO,KAETK,EAAM6B,kBAAkB,CACtBrC,QAASmC,MAoBL,KAAyC,IACzC,kBAAC5B,EAAD,CAAMI,QAjBd,WACE,IAAIoC,EAAYvC,EAAMrB,MAAMG,OAAON,QACnC+D,EAAUb,GAAV,eACK1C,EADL,CAEEI,KAAM,CAAEH,IAAK,MAAOC,IAAK,KAAMC,KAAM,OAAQH,EAAMI,QAErDY,EAAM6B,kBAAkB,CACtB/C,OAAQyD,MAU8BvD,EAAMK,MAAa,IACpD,CAAEH,IAAK,SAAKD,IAAK,SAAKE,KAAM,IAAKH,EAAMI,OAG1CJ,EAAMK,UAKZW,EAAMrB,MAAMG,OAAO6D,QAAU,oDAMvC,SAASC,EAAY5C,GACnB,OACE,+BACGA,EAAM6C,KAAK9D,KAAI,SAAC+D,EAAKpB,GAAN,OACd,wBAAIN,IAAKM,GACNoB,EAAI/D,KAAI,SAACgE,EAAMrB,GAAP,OACP,wBAAIN,IAAKM,GAAQqB,WAQ7B,SAASC,EAAQhD,GACf,OACE,+BACE,kBAAC0C,EAAD,CAAa/D,MAAOqB,EAAMrB,MAAOkD,kBAAmB7B,EAAM6B,oBAC1D,kBAACe,EAAD,CAAaC,KAAM7C,EAAM6C,QAK/B,SAASI,EAAKjD,GACZ,OACE,yBAAKkD,GAAG,QACN,4BAAKlD,EAAMrB,MAAMwE,OACjB,2BACE,uBAAGvC,KAAMlC,EAAesB,EAAMyB,WAAY,QAA1C,oBAEF,2BACE,uBAAGb,KAAMZ,EAAMrB,MAAMyE,WAArB,cAGF,kBAAC7B,EAAD,CACE5C,MAAOqB,EAAMrB,MACb8C,WAAYzB,EAAMyB,WAClBI,kBAAmB7B,EAAM6B,oBAG3B,sCAAY7B,EAAM6C,KAAKF,OAAvB,YACA,yBAAKzC,UAAU,cACb,6BACE,kBAACkC,EAAD,eACEzD,MAAOqB,EAAMyB,WACbI,kBAAmB7B,EAAM6B,mBACrB7B,EAAMqD,cAGd,kBAACL,EAAD,CACErE,MAAOqB,EAAMyB,WACbI,kBAAmB7B,EAAM6B,kBACzBgB,KAAM7C,EAAM6C,S,IAgEPS,E,kDAxDb,WAAYtD,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAMuD,EAAaC,KAAKC,MAAM9C,SAAS+C,eAAe,eAAeC,aAFpD,OAIjB,EAAK5B,MAAQ,CACXc,KAAM,GACNpB,WAAY,CAAEjC,QAAS,GAAIV,OAAQ,IACnCH,MAAO4E,EAAW5E,MAClB0E,WAAYE,EAAWF,YARR,E,sDAYTO,GAAM,IAAD,OACbC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,EAAKhC,SAAS,CACZY,KAAMoB,EAAOpB,KACbpB,WAAY,CAAE3C,OAAQmF,EAAOnF,OAAQU,QAASyE,EAAOzE,cAGzD,SAAC0E,GACC,EAAKjC,SAAS,CACZiC,e,0CAMW,IAAD,OAClB3D,KAAK4D,UAAUjG,KACfE,OAAOgG,WAAa,SAACC,GACnB,EAAKF,UAAUjG,Q,wCAIDoG,GAChB,IAAMC,EAAQ,eAAQhE,KAAKwB,MAAMN,WAAnB,GAAkC6C,GAChDlG,OAAOoG,QAAQC,UAAU,KAAM,KAAM/F,EAAe6F,EAAU,SAC9DhE,KAAK4D,UAAUzF,EAAe6F,EAAU,W,+BAIxC,OACE,kBAACtB,EAAD,CACEJ,KAAMtC,KAAKwB,MAAMc,KACjBpB,WAAYlB,KAAKwB,MAAMN,WACvB9C,MAAO4B,KAAKwB,MAAMpD,MAClB0E,WAAY9C,KAAKwB,MAAMsB,WACvBxB,kBAAmBtB,KAAKsB,kBAAkBV,KAAKZ,Y,GAnDrCc,IAAMC,WC1RJoD,QACW,cAA7BtG,OAAOD,SAASwG,UAEe,UAA7BvG,OAAOD,SAASwG,UAEhBvG,OAAOD,SAASwG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpE,SAAS+C,eAAe,SDyHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLoB,QAAQpB,MAAMA,EAAMqB,a","file":"static/js/main.cec91c65.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nvar assert = require(\"assert\");\n\nfunction getAPIforWindow() {\n  const location = window.location;\n  const html_url = location.origin + location.pathname;\n  assert(html_url.slice(-4) === \"html\");\n  const json_url = html_url.slice(0, -4) + \"json\";\n  return json_url + location.search;\n}\n\nfunction getBaseURL() {\n  const location = window.location;\n  const parts = location.pathname.split(\"/\");\n  return location.origin + parts.slice(0, -1).join(\"/\");\n}\n\nfunction getURLforQuery(query, media) {\n  const fieldStr = query.fields\n    .map((field) => ({ asc: \"+\", dsc: \"-\", null: \"\" }[field.sort] + field.name))\n    .join(\",\");\n  const filterStr = query.filters\n    .map((filter) => `${filter.name}__${filter.lookup}=${filter.value}`)\n    .join(\"&\");\n  return `${getBaseURL()}/${fieldStr}.${media}?${filterStr}`;\n}\n\nfunction Link(props) {\n  return (\n    <button\n      type=\"button\"\n      className={\"link \" + (props.className || \"\")}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nclass Filter extends React.Component {\n  handleLookupChange(event) {\n    this.props.lookups.forEach((lookup) => {\n      if (lookup.name === event.target.value) document.location.href = lookup.link;\n    });\n  }\n\n  render() {\n    return (\n      <p className={this.props.filter.err_message ? \"error\" : undefined}>\n        <Link onClick={this.props.handleRemove}>âœ˜</Link> {this.props.filter.name}{\" \"}\n        <select\n          value={this.props.filter.lookup}\n          onChange={this.handleLookupChange.bind(this)}\n        >\n          {this.props.lookups.map((lookup) => (\n            <option key={lookup.name} value={lookup.name}>\n              {lookup.name}\n            </option>\n          ))}\n        </select>{\" \"}\n        ={\" \"}\n        <input\n          type=\"text\"\n          name={`${this.props.filter.name}__${this.props.filter.lookup}`}\n          value={this.props.filter.value}\n        />\n        {this.props.filter.err_message}\n      </p>\n    );\n  }\n}\n\nfunction Filters(props) {\n  return (\n    <form className=\"filters\" method=\"get\">\n      {props.lightQuery.filters.map((filter, index) => (\n        <Filter\n          filter={filter}\n          lookups={props.query.filters[index] ? props.query.filters[index].lookups : []} // TODO cleanup after all_fields is flattened\n          key={index}\n          handleRemove={() => {\n            var newFilters = props.lightQuery.filters.slice();\n            newFilters.splice(index, 1);\n            props.handleQueryChange({\n              filters: newFilters,\n            });\n          }}\n        />\n      ))}\n      <p>\n        <input type=\"submit\" />\n      </p>\n    </form>\n  );\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: false };\n  }\n\n  handleClick() {\n    this.setState((state) => ({\n      isToggleOn: !state.isToggleOn,\n    }));\n  }\n\n  render() {\n    if (this.state.isToggleOn) {\n      return (\n        <>\n          <Link className=\"toggle_link\" onClick={this.handleClick.bind(this)}>\n            > {this.props.title}\n          </Link>\n          <div className=\"toggle_div\">{this.props.children}</div>\n        </>\n      );\n    } else {\n      return (\n        <Link className=\"toggle_link\" onClick={this.handleClick.bind(this)}>\n          + {this.props.title}\n        </Link>\n      );\n    }\n  }\n}\n\nfunction Fields(props) {\n  return (\n    <ul className=\"fields_list\">\n      {props.fields.map((field) => {\n        function handleAddFilter() {\n          var newFilters = props.query.filters.slice();\n          newFilters.push({\n            err_message: null,\n            name: field.name,\n            lookup: \"\",\n            value: \"\",\n          });\n          props.handleQueryChange({ filters: newFilters });\n        }\n\n        function handleAddField() {\n          var newFields = props.query.fields.slice();\n          newFields.push({\n            name: field.name,\n            sort: null,\n            concrete: false,\n          });\n          props.handleQueryChange({ fields: newFields });\n        }\n\n        return (\n          <li key={field.name}>\n            {field.concrete ? (\n              <Link onClick={handleAddFilter}>Y</Link>\n            ) : (\n              <>&nbsp;&nbsp;</>\n            )}{\" \"}\n            <Link onClick={handleAddField}>{field.name}</Link>\n          </li>\n        );\n      })}\n\n      {props.fks.map((fk) => (\n        <li key={fk.name}>\n          <Toggle title={fk.name}>\n            <Fields {...fk} />\n          </Toggle>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction ResultsHead(props) {\n  return (\n    <thead>\n      <tr>\n        {props.query.fields.map((field, index) => {\n          function handleRemove() {\n            var newFields = props.query.fields.slice();\n            newFields.splice(index, 1);\n            props.handleQueryChange({\n              fields: newFields,\n            });\n          }\n\n          function handleAddFilter() {\n            var newFilters = props.query.filters.slice();\n            newFilters.push({\n              err_message: null,\n              name: field.name,\n              lookup: \"\",\n              value: \"\",\n            });\n            props.handleQueryChange({\n              filters: newFilters,\n            });\n          }\n\n          function handleToggleSort() {\n            var newFields = props.query.fields.slice();\n            newFields[index] = {\n              ...field,\n              sort: { asc: \"dsc\", dsc: null, null: \"asc\" }[field.sort],\n            };\n            props.handleQueryChange({\n              fields: newFields,\n            });\n          }\n\n          return (\n            <th key={field.name}>\n              <Link onClick={handleRemove}>âœ˜</Link>{\" \"}\n              {field.concrete ? (\n                <>\n                  <Link onClick={handleAddFilter}>Y</Link>{\" \"}\n                  <Link onClick={handleToggleSort}>{field.name}</Link>{\" \"}\n                  {{ dsc: \"â†‘\", asc: \"â†“\", null: \"\" }[field.sort]}\n                </>\n              ) : (\n                field.name\n              )}\n            </th>\n          );\n        })}\n        {!props.query.fields.length && <th>No fields selected</th>}\n      </tr>\n    </thead>\n  );\n}\n\nfunction ResultsBody(props) {\n  return (\n    <tbody>\n      {props.data.map((row, index) => (\n        <tr key={index}>\n          {row.map((cell, index) => (\n            <td key={index}>{cell}</td>\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nfunction Results(props) {\n  return (\n    <table>\n      <ResultsHead query={props.query} handleQueryChange={props.handleQueryChange} />\n      <ResultsBody data={props.data} />\n    </table>\n  );\n}\n\nfunction Page(props) {\n  return (\n    <div id=\"body\">\n      <h1>{props.query.model}</h1>\n      <p>\n        <a href={getURLforQuery(props.lightQuery, \"csv\")}>Download as CSV</a>\n      </p>\n      <p>\n        <a href={props.query.save_link}>Save View</a>\n      </p>\n\n      <Filters\n        query={props.query}\n        lightQuery={props.lightQuery}\n        handleQueryChange={props.handleQueryChange}\n      />\n\n      <p>Showing {props.data.length} results</p>\n      <div className=\"main_space\">\n        <div>\n          <Fields\n            query={props.lightQuery}\n            handleQueryChange={props.handleQueryChange}\n            {...props.all_fields}\n          />\n        </div>\n        <Results\n          query={props.lightQuery}\n          handleQueryChange={props.handleQueryChange}\n          data={props.data}\n        />\n      </div>\n    </div>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const djangoData = JSON.parse(document.getElementById(\"django-data\").textContent);\n    // TODO all_fileds should really be a prop and this djangoData thing should be over in index.js\n    this.state = {\n      data: [],\n      lightQuery: { filters: [], fields: [] },\n      query: djangoData.query,\n      all_fields: djangoData.all_fields,\n    };\n  }\n\n  fetchData(url) {\n    fetch(url)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            data: result.data,\n            lightQuery: { fields: result.fields, filters: result.filters },\n          });\n        },\n        (error) => {\n          this.setState({\n            error,\n          });\n        }\n      );\n  }\n\n  componentDidMount() {\n    this.fetchData(getAPIforWindow());\n    window.onpopstate = (e) => {\n      this.fetchData(getAPIforWindow());\n    };\n  }\n\n  handleQueryChange(queryChange) {\n    const newQuery = { ...this.state.lightQuery, ...queryChange };\n    window.history.pushState(null, null, getURLforQuery(newQuery, \"html\"));\n    this.fetchData(getURLforQuery(newQuery, \"json\"));\n  }\n\n  render() {\n    return (\n      <Page\n        data={this.state.data}\n        lightQuery={this.state.lightQuery}\n        query={this.state.query}\n        all_fields={this.state.all_fields} // TODO this should be a prop\n        handleQueryChange={this.handleQueryChange.bind(this)}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}