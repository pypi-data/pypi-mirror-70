{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AddFilterLink","props","field","concrete","href","add_filter_link","Fields","fields","map","add_link","name","fks","fk","className","Page","id","query","model","csv_link","save_link","method","action","base_url","filters","filter","is_valid","remove_link","defaultValue","lookup","lookups","value","type","url_name","data","length","all_fields_nested","sort_fields","sort_field","sort_icon","toggle_sort_link","row","cell","App","django_data","JSON","parse","document","getElementById","textContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAGA,SAASA,EAAcC,GACrB,OAAIA,EAAMC,MAAMC,SACP,uBAAGC,KAAMH,EAAMC,MAAMG,iBAArB,KAEA,gDAIX,SAASC,EAAOL,GACd,OACE,oCACGA,EAAMM,OAAOC,KAAI,SAACN,GAAD,OAChB,oCACE,kBAACF,EAAD,CAAeE,MAAOA,IAAU,IAChC,uBAAGE,KAAMF,EAAMO,UAAWP,EAAMQ,MAChC,iCAIHT,EAAMU,IAAIH,KAAI,SAACI,GAAD,OACb,oCACE,4BAAQC,UAAU,oBAAlB,KAAwCD,EAAGF,MAC3C,yBAAKG,UAAU,cACb,kBAACP,EAAWM,SAQxB,SAASE,EAAKb,GACZ,OACE,yBAAKc,GAAG,QACN,4BAAKd,EAAMe,MAAMC,OACjB,2BACE,uBAAGb,KAAMH,EAAMe,MAAME,UAArB,oBAEF,2BACE,uBAAGd,KAAMH,EAAMe,MAAMG,WAArB,cAGF,0BAAMN,UAAU,UAAUO,OAAO,MAAMC,OAAQpB,EAAMe,MAAMM,UACxDrB,EAAMe,MAAMO,QAAQf,KAAI,SAACgB,GAAD,OACvB,uBAAGX,WAAYW,EAAOC,UAAY,SAChC,uBAAGrB,KAAMoB,EAAOE,aAAhB,UADF,IACsCF,EAAOd,KAAM,IACjD,4BAAQiB,aAAcH,EAAOI,QAC1BJ,EAAOK,QAAQrB,KAAI,SAACoB,GAAD,OAClB,4BAAQE,MAAOF,EAAOlB,MAAOkB,EAAOlB,UAE9B,IANZ,KAOI,2BAAOqB,KAAK,OAAOrB,KAAMc,EAAOQ,SAAUF,MAAON,EAAOM,YAG9D,2BACE,2BAAOC,KAAK,YAEd,sCAAY9B,EAAMgC,KAAKC,OAAvB,aAGF,yBAAKrB,UAAU,cACb,6BACE,kBAACP,EAAWL,EAAMe,MAAMmB,oBAE1B,+BACE,4BACGlC,EAAMe,MAAMoB,YAAY5B,KAAI,SAAC6B,GAAgB,IACpCnC,EAAqBmC,EAArBnC,MAAOoC,EAAcD,EAAdC,UACf,OACE,4BACE,uBAAGlC,KAAMF,EAAMwB,aAAf,UAAkC,IACjCxB,EAAMC,SACL,oCACE,uBAAGC,KAAMF,EAAMG,iBAAf,KAAsC,IACtC,uBAAGD,KAAMF,EAAMqC,kBAAmBrC,EAAMQ,MAAU,IACjD4B,GAGHpC,EAAMQ,UAKZT,EAAMe,MAAMoB,YAAYF,QAAU,mDAErCjC,EAAMgC,KAAKzB,KAAI,SAACgC,GAAD,OACd,4BACGA,EAAIhC,KAAI,SAACiC,GAAD,OACP,4BAAKA,aAiBNC,MAPf,WACE,IAAIC,EAAcC,KAAKC,MACrBC,SAASC,eAAe,eAAeC,aAEzC,OAAO,kBAAClC,EAAS6B,IC7FCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASC,eAAe,SDyHpB,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2891db8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction AddFilterLink(props) {\n  if (props.field.concrete) {\n    return <a href={props.field.add_filter_link}>Y</a>;\n  } else {\n    return <>&nbsp;&nbsp;</>;\n  }\n}\n\nfunction Fields(props) {\n  return (\n    <>\n      {props.fields.map((field) => (\n        <>\n          <AddFilterLink field={field} />{\" \"}\n          <a href={field.add_link}>{field.name}</a>\n          <br />\n        </>\n      ))}\n\n      {props.fks.map((fk) => (\n        <>\n          <button className=\"link toggle_link\">+ {fk.name}</button>\n          <div className=\"toggle_div\">\n            <Fields {...fk} />\n          </div>\n        </>\n      ))}\n    </>\n  );\n}\n\nfunction Page(props) {\n  return (\n    <div id=\"body\">\n      <h1>{props.query.model}</h1>\n      <p>\n        <a href={props.query.csv_link}>Download as CSV</a>\n      </p>\n      <p>\n        <a href={props.query.save_link}>Save View</a>\n      </p>\n\n      <form className=\"filters\" method=\"get\" action={props.query.base_url}>\n        {props.query.filters.map((filter) => (\n          <p className={!filter.is_valid && \"error\"}>\n            <a href={filter.remove_link}>✘</a> {filter.name}{\" \"}\n            <select defaultValue={filter.lookup}>\n              {filter.lookups.map((lookup) => (\n                <option value={lookup.name}>{lookup.name}</option>\n              ))}\n            </select>{\" \"}\n            = <input type=\"text\" name={filter.url_name} value={filter.value} />\n          </p>\n        ))}\n        <p>\n          <input type=\"submit\" />\n        </p>\n        <p>Showing {props.data.length} results</p>\n      </form>\n\n      <div className=\"main_space\">\n        <div>\n          <Fields {...props.query.all_fields_nested} />\n        </div>\n        <table>\n          <tr>\n            {props.query.sort_fields.map((sort_field) => {\n              const { field, sort_icon } = sort_field;\n              return (\n                <th>\n                  <a href={field.remove_link}>✘</a>{\" \"}\n                  {field.concrete ? (\n                    <>\n                      <a href={field.add_filter_link}>Y</a>{\" \"}\n                      <a href={field.toggle_sort_link}>{field.name}</a>{\" \"}\n                      {sort_icon}\n                    </>\n                  ) : (\n                    field.name\n                  )}\n                </th>\n              );\n            })}\n            {!props.query.sort_fields.length && <th>No fields selected</th>}\n          </tr>\n          {props.data.map((row) => (\n            <tr>\n              {row.map((cell) => (\n                <td>{cell}</td>\n              ))}\n            </tr>\n          ))}\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  var django_data = JSON.parse(\n    document.getElementById(\"django-data\").textContent\n  );\n  return <Page {...django_data} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}