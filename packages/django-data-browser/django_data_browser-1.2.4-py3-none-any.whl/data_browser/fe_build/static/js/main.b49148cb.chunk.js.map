{"version":3,"sources":["Components.js","Query.js","App.js","serviceWorker.js","index.js"],"names":["Link","props","type","className","onClick","children","FilterValue","lookup","onChange","value","step","name","path","Filter","this","propsy","index","query","fieldType","getFieldType","removeFilter","addField","e","setFilterLookup","target","sortedLookups","map","lookupName","key","replace","setFilterValue","lookups","errorMessage","React","Component","Filters","filters","filter","Toggle","state","isToggleOn","setState","handleClick","bind","title","Fields","modelFields","getModelFields","model","sorted_fks","fk_name","fk","fks","sorted_fields","field_name","modelField","fields","concrete","addFilter","ResultsHead","field","getField","removeField","toggleSort","dsc","priority","asc","null","sort","length","ResultsCell","dangerouslySetInnerHTML","__html","String","ResultsBody","data","row","row_index","cell","col_index","Results","ModelSelector","setModel","sortedModels","Logo","QueryPage","id","href","getUrlForMedia","getUrlForSave","HomePage","getPartsForQuery","f","join","getUrlForQuery","baseUrl","media","parts","basePath","window","location","origin","controller","Query","config","handleQueryChange","split","slice","allModelFields","types","defaultLookup","defaultValue","newFields","push","newData","concat","splice","newSort","newFilters","getDefaultLookValue","queryString","URLSearchParams","toString","adminUrl","App","initialState","url","abort","AbortController","fetch","signal","then","res","json","result","error","reqState","history","replaceState","fetchData","onpopstate","queryChange","newState","pushState","Boolean","hostname","match","djangoData","JSON","parse","document","getElementById","textContent","sentryDsn","Sentry","dsn","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b49148cb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction Link(props) {\n  return (\n    <button\n      type=\"button\"\n      className={\"Link \" + (props.className || \"\")}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nfunction FilterValue(props) {\n  if (props.lookup.type === \"boolean\")\n    return (\n      <select className=\"FilterValue\" onChange={props.onChange} value={props.value}>\n        <option value={true}>true</option>\n        <option value={false}>false</option>\n      </select>\n    );\n  else if (props.lookup.type === \"number\")\n    return (\n      <input\n        className=\"FilterValue\"\n        type=\"number\"\n        step=\"0\"\n        name={props.path}\n        value={props.value}\n        onChange={props.onChange}\n      />\n    );\n  else\n    return (\n      <input\n        className=\"FilterValue\"\n        type=\"text\"\n        name={props.path}\n        value={props.value}\n        onChange={props.onChange}\n      />\n    );\n}\n\nclass Filter extends React.Component {\n  render() {\n    const path = this.propsy.path;\n    const index = this.props.index;\n    const lookup = this.props.lookup;\n    const query = this.props.query;\n    const fieldType = this.props.query.getFieldType(path);\n    return (\n      <tr>\n        <td>\n          <Link onClick={() => query.removeFilter(index)}>✘</Link>{\" \"}\n          <Link onClick={() => query.addField(path)}>{path}</Link>{\" \"}\n        </td>\n        <td>\n          <select\n            className=\"Lookup\"\n            value={lookup}\n            onChange={(e) => query.setFilterLookup(index, e.target.value)}\n          >\n            {fieldType.sortedLookups.map((lookupName) => (\n              <option key={lookupName} value={lookupName}>\n                {lookupName.replace(\"_\", \" \")}\n              </option>\n            ))}\n          </select>\n        </td>\n        <td>=</td>\n        <td>\n          <FilterValue\n            name={`${path}__${lookup}`}\n            value={this.props.value}\n            onChange={(e) => query.setFilterValue(index, e.target.value)}\n            lookup={fieldType.lookups[lookup]}\n          />\n          {this.props.errorMessage}\n        </td>\n      </tr>\n    );\n  }\n}\n\nfunction Filters(props) {\n  return (\n    <form className=\"Filters\">\n      <table className=\"Flat\">\n        <tbody>\n          {props.filters.map((filter, index) => (\n            <Filter query={props.query} key={index} index={index} {...filter} />\n          ))}\n        </tbody>\n      </table>\n    </form>\n  );\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: false };\n  }\n\n  handleClick() {\n    this.setState((state) => ({\n      isToggleOn: !state.isToggleOn,\n    }));\n  }\n\n  render() {\n    if (this.state.isToggleOn)\n      return (\n        <>\n          <Link className=\"ToggleLink\" onClick={this.handleClick.bind(this)}>\n            > {this.props.title}\n          </Link>\n          <div className=\"ToggleDiv\">{this.props.children}</div>\n        </>\n      );\n    else\n      return (\n        <Link className=\"ToggleLink\" onClick={this.handleClick.bind(this)}>\n          + {this.props.title}\n        </Link>\n      );\n  }\n}\n\nfunction Fields(props) {\n  const modelFields = props.query.getModelFields(props.model);\n  return (\n    <ul className=\"FieldsList\">\n      {modelFields.sorted_fks.map((fk_name) => {\n        const fk = modelFields.fks[fk_name];\n        return (\n          <li key={fk_name}>\n            <Toggle title={fk_name}>\n              <Fields\n                query={props.query}\n                model={fk.model}\n                path={`${props.path}${fk_name}__`}\n              />\n            </Toggle>\n          </li>\n        );\n      })}\n      {modelFields.sorted_fields.map((field_name) => {\n        const modelField = modelFields.fields[field_name];\n        return (\n          <li key={field_name}>\n            {modelField.concrete ? (\n              <Link onClick={() => props.query.addFilter(`${props.path}${field_name}`)}>\n                Y\n              </Link>\n            ) : (\n              <>&nbsp;&nbsp;</>\n            )}{\" \"}\n            <Link onClick={() => props.query.addField(`${props.path}${field_name}`)}>\n              {field_name}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction ResultsHead(props) {\n  return (\n    <thead>\n      <tr>\n        {props.fields.map((field, index) => {\n          const modelField = props.query.getField(field.path);\n          return (\n            <th key={index}>\n              <Link onClick={() => props.query.removeField(index)}>✘</Link>{\" \"}\n              {modelField.concrete ? (\n                <>\n                  <Link onClick={() => props.query.addFilter(field.path)}>Y</Link>{\" \"}\n                  <Link onClick={() => props.query.toggleSort(index)}>\n                    {field.path}\n                  </Link>{\" \"}\n                  {\n                    { dsc: `↑${field.priority}`, asc: `↓${field.priority}`, null: \"\" }[\n                      field.sort\n                    ]\n                  }\n                </>\n              ) : (\n                field.path\n              )}\n            </th>\n          );\n        })}\n        {!props.fields.length && <th>No fields selected</th>}\n      </tr>\n    </thead>\n  );\n}\n\nfunction ResultsCell(props) {\n  if (props.modelField.type === \"html\")\n    return <div dangerouslySetInnerHTML={{ __html: props.value }} />;\n  else return String(props.value);\n}\n\nfunction ResultsBody(props) {\n  return (\n    <tbody>\n      {props.data.map((row, row_index) => (\n        <tr key={row_index}>\n          {row.map((cell, col_index) => (\n            <td key={col_index}>\n              <ResultsCell\n                query={props.query}\n                value={cell}\n                modelField={props.query.getField(props.fields[col_index].path)}\n              />\n            </td>\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nfunction Results(props) {\n  return (\n    <table>\n      <ResultsHead query={props.query} fields={props.fields} />\n      <ResultsBody query={props.query} data={props.data} fields={props.fields} />\n    </table>\n  );\n}\n\nfunction ModelSelector(props) {\n  return (\n    <select\n      className=\"ModelSelector\"\n      onChange={(e) => props.query.setModel(e.target.value)}\n      value={props.model}\n    >\n      {props.sortedModels.map((model) => (\n        <option key={model}>{model}</option>\n      ))}\n    </select>\n  );\n}\n\nfunction Logo(props) {\n  return (\n    <div className=\"Logo\" onClick={() => props.query.setModel(\"\")}>\n      DDB\n    </div>\n  );\n}\n\nfunction QueryPage(props) {\n  return (\n    <div id=\"body\">\n      <Logo query={props.query} />\n      <ModelSelector\n        query={props.query}\n        sortedModels={props.sortedModels}\n        model={props.model}\n      />\n      <Filters query={props.query} filters={props.filters} />\n      <p>\n        Showing {props.data.length} results -{\" \"}\n        <a href={props.query.getUrlForMedia(\"csv\")}>Download as CSV</a> -{\" \"}\n        <a href={props.query.getUrlForMedia(\"json\")}>View as JSON</a> -{\" \"}\n        <a href={props.query.getUrlForSave()}>Save View</a>\n      </p>\n      <div className=\"MainSpace\">\n        <div>\n          <Fields query={props.query} model={props.model} path=\"\" />\n        </div>\n        <Results query={props.query} fields={props.fields} data={props.data} />\n      </div>\n    </div>\n  );\n}\n\nfunction HomePage(props) {\n  return (\n    <div id=\"body\">\n      <Logo query={props.query} />\n      <div className=\"Index\">\n        <div>\n          <h1>Models</h1>\n          <div className=\"ModelList\">\n            {props.sortedModels.map((model) => (\n              <div key={model}>\n                <button className=\"Link\" onClick={() => props.query.setModel(model)}>\n                  {model}\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div>\n          <h1>Saved Views</h1>\n          <div className=\"ModelList\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { HomePage, QueryPage };\n","function getPartsForQuery(query) {\r\n  return {\r\n    model: query.model,\r\n    fields: query.fields\r\n      .map(\r\n        (f) =>\r\n          f.path + { asc: `+${f.priority}`, dsc: `-${f.priority}`, null: \"\" }[f.sort]\r\n      )\r\n      .join(\",\"),\r\n    query: query.filters.map((f) => `${f.path}__${f.lookup}=${f.value}`).join(\"&\"),\r\n  };\r\n}\r\n\r\nfunction getUrlForQuery(baseUrl, query, media) {\r\n  const parts = getPartsForQuery(query);\r\n  const basePath = `${baseUrl}query/${parts.model}`;\r\n  return `${window.location.origin}${basePath}/${parts.fields}.${media}?${parts.query}`;\r\n}\r\n\r\nclass Query {\r\n  constructor(config, query, handleQueryChange) {\r\n    this.config = config;\r\n    this.query = query;\r\n    this.handleQueryChange = handleQueryChange;\r\n  }\r\n\r\n  getField(path) {\r\n    const parts = path.split(\"__\");\r\n    const field = parts.slice(-1);\r\n    let model = this.query.model;\r\n    for (const field of parts.slice(0, -1)) {\r\n      model = this.config.allModelFields[model].fks[field].model;\r\n    }\r\n    return this.config.allModelFields[model].fields[field];\r\n  }\r\n\r\n  getFieldType(path) {\r\n    return this.config.types[this.getField(path).type];\r\n  }\r\n\r\n  getModelFields(model) {\r\n    return this.config.allModelFields[model];\r\n  }\r\n\r\n  getDefaultLookValue(fieldType) {\r\n    return this.config.types[fieldType.lookups[fieldType.defaultLookup].type]\r\n      .defaultValue;\r\n  }\r\n\r\n  addField(path) {\r\n    const newFields = this.query.fields.slice();\r\n    newFields.push({ path: path, sort: null });\r\n    const newData = this.query.data.map((row) => row.concat([\"\"]));\r\n    this.handleQueryChange({ fields: newFields, data: newData });\r\n  }\r\n\r\n  removeField(index) {\r\n    const newFields = this.query.fields.slice();\r\n    newFields.splice(index, 1);\r\n    const newData = this.query.data.map((row) =>\r\n      row.slice(0, index).concat(row.slice(index + 1))\r\n    );\r\n    this.handleQueryChange({ fields: newFields, data: newData });\r\n  }\r\n\r\n  toggleSort(index) {\r\n    const field = this.query.fields[index];\r\n    const newSort = { asc: \"dsc\", dsc: null, null: \"asc\" }[field.sort];\r\n    let newFields = this.query.fields.slice();\r\n\r\n    if (field.sort) {\r\n      // move any later sort fields forward\r\n      newFields = newFields.map((f) => ({\r\n        ...f,\r\n        priority:\r\n          f.priority != null && f.priority > field.priority\r\n            ? f.priority - 1\r\n            : f.priority,\r\n      }));\r\n    }\r\n\r\n    if (newSort) {\r\n      // move all other fiels back and insert the updated one\r\n      newFields = newFields.map((f) => ({\r\n        ...f,\r\n        priority: f.priority != null ? f.priority + 1 : f.priority,\r\n      }));\r\n      newFields[index] = { ...field, sort: newSort, priority: 0 };\r\n    } else {\r\n      // blank the sort on the updated field\r\n      newFields[index] = { ...field, sort: null, priority: null };\r\n    }\r\n\r\n    this.handleQueryChange({\r\n      fields: newFields,\r\n    });\r\n  }\r\n\r\n  addFilter(path) {\r\n    const fieldType = this.getFieldType(path);\r\n    const newFilters = this.query.filters.slice();\r\n    newFilters.push({\r\n      errorMessage: null,\r\n      path: path,\r\n      lookup: fieldType.defaultLookup,\r\n      value: this.getDefaultLookValue(fieldType),\r\n    });\r\n    this.handleQueryChange({ filters: newFilters });\r\n  }\r\n\r\n  removeFilter(index) {\r\n    const newFilters = this.query.filters.slice();\r\n    newFilters.splice(index, 1);\r\n    this.handleQueryChange({ filters: newFilters });\r\n  }\r\n\r\n  setFilterValue(index, value) {\r\n    const newFilters = this.query.filters.slice();\r\n    newFilters[index] = { ...newFilters[index], value: value };\r\n    this.handleQueryChange({ filters: newFilters });\r\n  }\r\n\r\n  setFilterLookup(index, lookup) {\r\n    const newFilters = this.query.filters.slice();\r\n    newFilters[index] = { ...newFilters[index], lookup: lookup };\r\n    this.handleQueryChange({ filters: newFilters });\r\n  }\r\n\r\n  setModel(model) {\r\n    this.handleQueryChange({\r\n      model: model,\r\n      fields: [],\r\n      filters: [],\r\n      data: [],\r\n    });\r\n  }\r\n\r\n  getUrlForSave() {\r\n    const parts = getPartsForQuery(this.query);\r\n    const queryString = new URLSearchParams(parts).toString();\r\n    return `${window.location.origin}${this.config.adminUrl}?${queryString}`;\r\n  }\r\n\r\n  getUrlForMedia(media) {\r\n    return getUrlForQuery(this.config.baseUrl, this.query, media);\r\n  }\r\n}\r\n\r\nexport { Query, getPartsForQuery, getUrlForQuery };\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { HomePage, QueryPage } from \"./Components\";\nimport { Query, getUrlForQuery } from \"./Query\";\nlet controller;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = props.initialState;\n  }\n\n  fetchData(state) {\n    const url = getUrlForQuery(this.props.config.baseUrl, state, \"json\");\n\n    if (controller) controller.abort();\n    controller = new AbortController();\n\n    fetch(url, { signal: controller.signal })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState(result);\n        },\n        (error) => {\n          this.setState({ error });\n        }\n      );\n  }\n\n  componentDidMount() {\n    const reqState = {\n      model: this.state.model,\n      fields: this.state.fields,\n      filters: this.state.filters,\n      data: [],\n    };\n    window.history.replaceState(\n      reqState,\n      null,\n      getUrlForQuery(this.props.config.baseUrl, this.state, \"html\")\n    );\n    this.fetchData(this.state);\n    window.onpopstate = (e) => {\n      this.fetchData(e.state);\n      this.setState(e.state);\n    };\n  }\n\n  handleQueryChange(queryChange) {\n    const newState = { ...this.state, ...queryChange };\n    this.setState(queryChange);\n    const reqState = {\n      model: newState.model,\n      fields: newState.fields,\n      filters: newState.filters,\n      data: [],\n    };\n    window.history.pushState(\n      reqState,\n      null,\n      getUrlForQuery(this.props.config.baseUrl, newState, \"html\")\n    );\n    this.fetchData(newState);\n  }\n\n  render() {\n    const query = new Query(\n      this.props.config,\n      this.state,\n      this.handleQueryChange.bind(this)\n    );\n    if (this.state.model)\n      return (\n        <QueryPage\n          query={query}\n          sortedModels={this.props.config.sortedModels}\n          {...this.state}\n        />\n      );\n    else\n      return <HomePage query={query} sortedModels={this.props.config.sortedModels} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Sentry from \"@sentry/browser\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst djangoData = JSON.parse(document.getElementById(\"django-data\").textContent);\n\nif (djangoData.sentryDsn) {\n    Sentry.init({ dsn: djangoData.sentryDsn });\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App {...djangoData} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}