{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Filter","props","className","filter","is_valid","undefined","href","remove_link","name","defaultValue","lookup","lookups","map","key","value","type","url_name","err_message","AddFilter","field","concrete","add_filter_link","Toggle","state","isToggleOn","this","setState","onClick","handleClick","bind","title","style","display","children","React","Component","Fields","fields","add_link","fks","fk","Page","id","query","model","csv_link","save_link","method","action","base_url","filters","index","data","length","all_fields_nested","sort_fields","sort_field","sort_icon","toggle_sort_link","row","cell","App","django_data","JSON","parse","document","getElementById","textContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c770a19c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction Filter(props) {\n  return (\n    <p className={!props.filter.is_valid ? \"error\" : undefined}>\n      <a href={props.filter.remove_link}>✘</a> {props.filter.name}{\" \"}\n      <select defaultValue={props.filter.lookup}>\n        {props.filter.lookups.map((lookup) => (\n          <option key={lookup.name} value={lookup.name}>\n            {lookup.name}\n          </option>\n        ))}\n      </select>{\" \"}\n      ={\" \"}\n      <input\n        type=\"text\"\n        name={props.filter.url_name}\n        defaultValue={props.filter.value}\n      />\n      {!props.filter.is_valid && props.filter.err_message}\n    </p>\n  );\n}\n\nfunction AddFilter(props) {\n  if (props.field.concrete) {\n    return <a href={props.field.add_filter_link}>Y</a>;\n  } else {\n    return <>&nbsp;&nbsp;</>;\n  }\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: false };\n  }\n\n  handleClick() {\n    this.setState((state) => ({\n      isToggleOn: !state.isToggleOn,\n    }));\n  }\n\n  render() {\n    return (\n      <>\n        <button className=\"link toggle_link\" onClick={this.handleClick.bind(this)}>\n          + {this.props.title}\n        </button>\n        <div\n          className=\"toggle_div\"\n          style={{ display: this.state.isToggleOn ? \"block\" : \"none\" }}\n        >\n          {this.props.children}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction Fields(props) {\n  return (\n    <ul className=\"fields_list\">\n      {props.fields.map((field) => (\n        <li key={field.name}>\n          <AddFilter field={field} /> <a href={field.add_link}>{field.name}</a>\n        </li>\n      ))}\n\n      {props.fks.map((fk) => (\n        <li key={fk.name}>\n          <Toggle title={fk.name}>\n            <Fields {...fk} />\n          </Toggle>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Page(props) {\n  return (\n    <div id=\"body\">\n      <h1>{props.query.model}</h1>\n      <p>\n        <a href={props.query.csv_link}>Download as CSV</a>\n      </p>\n      <p>\n        <a href={props.query.save_link}>Save View</a>\n      </p>\n\n      <form className=\"filters\" method=\"get\" action={props.query.base_url}>\n        {props.query.filters.map((filter, index) => (\n          <Filter filter={filter} key={index} />\n        ))}\n        <p>\n          <input type=\"submit\" />\n        </p>\n        <p>Showing {props.data.length} results</p>\n      </form>\n\n      <div className=\"main_space\">\n        <div>\n          <Fields {...props.query.all_fields_nested} />\n        </div>\n        <table>\n          <thead>\n            <tr>\n              {props.query.sort_fields.map((sort_field) => {\n                const { field, sort_icon } = sort_field;\n                return (\n                  <th key={field.name}>\n                    <a href={field.remove_link}>✘</a>{\" \"}\n                    {field.concrete ? (\n                      <>\n                        <a href={field.add_filter_link}>Y</a>{\" \"}\n                        <a href={field.toggle_sort_link}>{field.name}</a> {sort_icon}\n                      </>\n                    ) : (\n                      field.name\n                    )}\n                  </th>\n                );\n              })}\n              {!props.query.sort_fields.length && <th>No fields selected</th>}\n            </tr>\n          </thead>\n          <tbody>\n            {props.data.map((row, index) => (\n              <tr key={index}>\n                {row.map((cell, index) => (\n                  <td key={props.query.sort_fields[index].field.name}>{cell}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  var django_data = JSON.parse(document.getElementById(\"django-data\").textContent);\n  return <Page {...django_data} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}