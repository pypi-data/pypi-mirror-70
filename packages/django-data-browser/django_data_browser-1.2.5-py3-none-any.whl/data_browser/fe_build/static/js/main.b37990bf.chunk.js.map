{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Filter","event","this","props","filter","lookups","forEach","lookup","name","target","value","document","location","href","link","className","is_valid","undefined","remove_link","defaultValue","onChange","handleLookupChange","bind","map","key","type","url_name","err_message","React","Component","AddFilter","field","concrete","add_filter_link","Toggle","state","isToggleOn","setState","onClick","handleClick","title","style","display","children","Fields","fields","add_link","fks","fk","Page","id","query","model","csv_link","save_link","method","action","base_url","filters","index","data","length","all_fields_nested","sort_fields","sort_field","sort_icon","toggle_sort_link","row","cell","App","django_data","JSON","parse","getElementById","textContent","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b37990bf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass Filter extends React.Component {\n  handleLookupChange(event) {\n    this.props.filter.lookups.forEach((lookup) => {\n      if (lookup.name === event.target.value) document.location.href = lookup.link;\n    });\n  }\n\n  render() {\n    return (\n      <p className={!this.props.filter.is_valid ? \"error\" : undefined}>\n        <a href={this.props.filter.remove_link}>✘</a> {this.props.filter.name}{\" \"}\n        <select\n          defaultValue={this.props.filter.lookup}\n          onChange={this.handleLookupChange.bind(this)}\n        >\n          {this.props.filter.lookups.map((lookup) => (\n            <option key={lookup.name} value={lookup.name}>\n              {lookup.name}\n            </option>\n          ))}\n        </select>{\" \"}\n        ={\" \"}\n        <input\n          type=\"text\"\n          name={this.props.filter.url_name}\n          defaultValue={this.props.filter.value}\n        />\n        {!this.props.filter.is_valid && this.props.filter.err_message}\n      </p>\n    );\n  }\n}\n\nfunction AddFilter(props) {\n  if (props.field.concrete) {\n    return <a href={props.field.add_filter_link}>Y</a>;\n  } else {\n    return <>&nbsp;&nbsp;</>;\n  }\n}\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: false };\n  }\n\n  handleClick() {\n    this.setState((state) => ({\n      isToggleOn: !state.isToggleOn,\n    }));\n  }\n\n  render() {\n    return (\n      <>\n        <button className=\"link toggle_link\" onClick={this.handleClick.bind(this)}>\n          + {this.props.title}\n        </button>\n        <div\n          className=\"toggle_div\"\n          style={{ display: this.state.isToggleOn ? \"block\" : \"none\" }}\n        >\n          {this.props.children}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction Fields(props) {\n  return (\n    <ul className=\"fields_list\">\n      {props.fields.map((field) => (\n        <li key={field.name}>\n          <AddFilter field={field} /> <a href={field.add_link}>{field.name}</a>\n        </li>\n      ))}\n\n      {props.fks.map((fk) => (\n        <li key={fk.name}>\n          <Toggle title={fk.name}>\n            <Fields {...fk} />\n          </Toggle>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Page(props) {\n  return (\n    <div id=\"body\">\n      <h1>{props.query.model}</h1>\n      <p>\n        <a href={props.query.csv_link}>Download as CSV</a>\n      </p>\n      <p>\n        <a href={props.query.save_link}>Save View</a>\n      </p>\n\n      <form className=\"filters\" method=\"get\" action={props.query.base_url}>\n        {props.query.filters.map((filter, index) => (\n          <Filter filter={filter} key={index} />\n        ))}\n        <p>\n          <input type=\"submit\" />\n        </p>\n        <p>Showing {props.data.length} results</p>\n      </form>\n\n      <div className=\"main_space\">\n        <div>\n          <Fields {...props.query.all_fields_nested} />\n        </div>\n        <table>\n          <thead>\n            <tr>\n              {props.query.sort_fields.map((sort_field) => {\n                const { field, sort_icon } = sort_field;\n                return (\n                  <th key={field.name}>\n                    <a href={field.remove_link}>✘</a>{\" \"}\n                    {field.concrete ? (\n                      <>\n                        <a href={field.add_filter_link}>Y</a>{\" \"}\n                        <a href={field.toggle_sort_link}>{field.name}</a> {sort_icon}\n                      </>\n                    ) : (\n                      field.name\n                    )}\n                  </th>\n                );\n              })}\n              {!props.query.sort_fields.length && <th>No fields selected</th>}\n            </tr>\n          </thead>\n          <tbody>\n            {props.data.map((row, index) => (\n              <tr key={index}>\n                {row.map((cell, index) => (\n                  <td key={props.query.sort_fields[index].field.name}>{cell}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  var django_data = JSON.parse(document.getElementById(\"django-data\").textContent);\n  return <Page {...django_data} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}