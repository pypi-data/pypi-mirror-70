# coding: utf-8

"""
    Esper SDK

    Python client library for Esper Manage APIs. You can find out more about Esper at [https://shoonya.io](https://shoonya.io).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@esper.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceCommandResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'url': 'str',
        'enterprise': 'str',
        'device': 'str',
        'command': 'str',
        'state': 'str',
        'issued_by': 'str',
        'command_args': 'object',
        'details': 'object',
        'created_on': 'datetime',
        'updated_on': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'enterprise': 'enterprise',
        'device': 'device',
        'command': 'command',
        'state': 'state',
        'issued_by': 'issued_by',
        'command_args': 'command_args',
        'details': 'details',
        'created_on': 'created_on',
        'updated_on': 'updated_on'
    }

    def __init__(self, id=None, url=None, enterprise=None, device=None, command=None, state=None, issued_by=None, command_args=None, details=None, created_on=None, updated_on=None):  # noqa: E501
        """DeviceCommandResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._url = None
        self._enterprise = None
        self._device = None
        self._command = None
        self._state = None
        self._issued_by = None
        self._command_args = None
        self._details = None
        self._created_on = None
        self._updated_on = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if enterprise is not None:
            self.enterprise = enterprise
        if device is not None:
            self.device = device
        if command is not None:
            self.command = command
        if state is not None:
            self.state = state
        if issued_by is not None:
            self.issued_by = issued_by
        if command_args is not None:
            self.command_args = command_args
        if details is not None:
            self.details = details
        if created_on is not None:
            self.created_on = created_on
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def id(self):
        """Gets the id of this DeviceCommandResponse.  # noqa: E501


        :return: The id of this DeviceCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceCommandResponse.


        :param id: The id of this DeviceCommandResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this DeviceCommandResponse.  # noqa: E501


        :return: The url of this DeviceCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DeviceCommandResponse.


        :param url: The url of this DeviceCommandResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def enterprise(self):
        """Gets the enterprise of this DeviceCommandResponse.  # noqa: E501


        :return: The enterprise of this DeviceCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this DeviceCommandResponse.


        :param enterprise: The enterprise of this DeviceCommandResponse.  # noqa: E501
        :type: str
        """

        self._enterprise = enterprise

    @property
    def device(self):
        """Gets the device of this DeviceCommandResponse.  # noqa: E501


        :return: The device of this DeviceCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DeviceCommandResponse.


        :param device: The device of this DeviceCommandResponse.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def command(self):
        """Gets the command of this DeviceCommandResponse.  # noqa: E501


        :return: The command of this DeviceCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this DeviceCommandResponse.


        :param command: The command of this DeviceCommandResponse.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def state(self):
        """Gets the state of this DeviceCommandResponse.  # noqa: E501


        :return: The state of this DeviceCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeviceCommandResponse.


        :param state: The state of this DeviceCommandResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def issued_by(self):
        """Gets the issued_by of this DeviceCommandResponse.  # noqa: E501


        :return: The issued_by of this DeviceCommandResponse.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this DeviceCommandResponse.


        :param issued_by: The issued_by of this DeviceCommandResponse.  # noqa: E501
        :type: str
        """

        self._issued_by = issued_by

    @property
    def command_args(self):
        """Gets the command_args of this DeviceCommandResponse.  # noqa: E501


        :return: The command_args of this DeviceCommandResponse.  # noqa: E501
        :rtype: object
        """
        return self._command_args

    @command_args.setter
    def command_args(self, command_args):
        """Sets the command_args of this DeviceCommandResponse.


        :param command_args: The command_args of this DeviceCommandResponse.  # noqa: E501
        :type: object
        """

        self._command_args = command_args

    @property
    def details(self):
        """Gets the details of this DeviceCommandResponse.  # noqa: E501


        :return: The details of this DeviceCommandResponse.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DeviceCommandResponse.


        :param details: The details of this DeviceCommandResponse.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def created_on(self):
        """Gets the created_on of this DeviceCommandResponse.  # noqa: E501


        :return: The created_on of this DeviceCommandResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this DeviceCommandResponse.


        :param created_on: The created_on of this DeviceCommandResponse.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """Gets the updated_on of this DeviceCommandResponse.  # noqa: E501


        :return: The updated_on of this DeviceCommandResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this DeviceCommandResponse.


        :param updated_on: The updated_on of this DeviceCommandResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCommandResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCommandResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
