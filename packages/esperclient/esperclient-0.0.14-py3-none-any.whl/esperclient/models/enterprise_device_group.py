# coding: utf-8

"""
Esper Manage API

OpenAPI spec version: 1.0.0
Contact: developer@esper.io
---------------------------------------------------------

Copyright 2019 Shoonya Enterprises Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""



import pprint
import re  # noqa: F401

import six

from esperclient.models.device_status_tiles import DeviceStatusTiles  # noqa: F401,E501


class EnterpriseDeviceGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'device_ids': 'list[str]',
        'device_tiles': 'list[DeviceStatusTiles]',
        'device_count': 'int',
        'name': 'str',
        'created_on': 'datetime',
        'enterprise': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device_ids': 'device_ids',
        'device_tiles': 'device_tiles',
        'device_count': 'device_count',
        'name': 'name',
        'created_on': 'created_on',
        'enterprise': 'enterprise'
    }

    def __init__(self, id=None, device_ids=None, device_tiles=None, device_count=None, name=None, created_on=None, enterprise=None):  # noqa: E501
        """EnterpriseDeviceGroup - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device_ids = None
        self._device_tiles = None
        self._device_count = None
        self._name = None
        self._created_on = None
        self._enterprise = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device_ids is not None:
            self.device_ids = device_ids
        if device_tiles is not None:
            self.device_tiles = device_tiles
        if device_count is not None:
            self.device_count = device_count
        self.name = name
        if created_on is not None:
            self.created_on = created_on
        self.enterprise = enterprise

    @property
    def id(self):
        """Gets the id of this EnterpriseDeviceGroup.  # noqa: E501


        :return: The id of this EnterpriseDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnterpriseDeviceGroup.


        :param id: The id of this EnterpriseDeviceGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device_ids(self):
        """Gets the device_ids of this EnterpriseDeviceGroup.  # noqa: E501


        :return: The device_ids of this EnterpriseDeviceGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this EnterpriseDeviceGroup.


        :param device_ids: The device_ids of this EnterpriseDeviceGroup.  # noqa: E501
        :type: list[str]
        """

        self._device_ids = device_ids

    @property
    def device_tiles(self):
        """Gets the device_tiles of this EnterpriseDeviceGroup.  # noqa: E501


        :return: The device_tiles of this EnterpriseDeviceGroup.  # noqa: E501
        :rtype: list[DeviceStatusTiles]
        """
        return self._device_tiles

    @device_tiles.setter
    def device_tiles(self, device_tiles):
        """Sets the device_tiles of this EnterpriseDeviceGroup.


        :param device_tiles: The device_tiles of this EnterpriseDeviceGroup.  # noqa: E501
        :type: list[DeviceStatusTiles]
        """

        self._device_tiles = device_tiles

    @property
    def device_count(self):
        """Gets the device_count of this EnterpriseDeviceGroup.  # noqa: E501


        :return: The device_count of this EnterpriseDeviceGroup.  # noqa: E501
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this EnterpriseDeviceGroup.


        :param device_count: The device_count of this EnterpriseDeviceGroup.  # noqa: E501
        :type: int
        """

        self._device_count = device_count

    @property
    def name(self):
        """Gets the name of this EnterpriseDeviceGroup.  # noqa: E501


        :return: The name of this EnterpriseDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnterpriseDeviceGroup.


        :param name: The name of this EnterpriseDeviceGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def created_on(self):
        """Gets the created_on of this EnterpriseDeviceGroup.  # noqa: E501


        :return: The created_on of this EnterpriseDeviceGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this EnterpriseDeviceGroup.


        :param created_on: The created_on of this EnterpriseDeviceGroup.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def enterprise(self):
        """Gets the enterprise of this EnterpriseDeviceGroup.  # noqa: E501


        :return: The enterprise of this EnterpriseDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this EnterpriseDeviceGroup.


        :param enterprise: The enterprise of this EnterpriseDeviceGroup.  # noqa: E501
        :type: str
        """
        if enterprise is None:
            raise ValueError("Invalid value for `enterprise`, must not be `None`")  # noqa: E501

        self._enterprise = enterprise

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterpriseDeviceGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterpriseDeviceGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
