from typing import Any, Optional, List, Dict, Union, Tuple, Iterator


def __pyx_unpickle_ExplicitIndexer(__pyx_type, long__pyx_checksum, __pyx_state) -> Any: ...

class ExplicitIndexer:
    __pyx_vtable__: Any = ...
    def __init__(self,
                 ngrams: List[str],
                 min_n: int = 3,
                 max_n: int = 6,
                 ngram_index: Optional[Dict[str, int]] = None): ...
    @property
    def ngram_index(self) -> Dict[str, int]: ...
    @property
    def ngrams(self) -> List[str]: ...
    @property
    def upper_bound(self) -> int: ...
    @property
    def min_n(self) -> int: ...
    @property
    def max_n(self) -> int: ...
    def subword_indices(self, word: str, offset: int = 0, bracket: bool = True, with_ngrams: bool = False)\
            -> List[Union[int, Tuple[str, int]]]: ...
    def __call__(self, *args, **kwargs) -> Optional[int]: ...
    def __getitem__(self, ngram: str) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __contains__(self, item) -> bool: ...
    def __repr__(self) -> str: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
