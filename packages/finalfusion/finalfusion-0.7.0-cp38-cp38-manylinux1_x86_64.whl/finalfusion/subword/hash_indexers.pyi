from typing import Any, List, Tuple, Union


def __pyx_unpickle_FastTextIndexer(__pyx_type, long__pyx_checksum, __pyx_state) -> Any: ...
def __pyx_unpickle_FinalfusionHashIndexer(__pyx_type, long__pyx_checksum, __pyx_state) -> Any: ...

class FastTextIndexer:
    __pyx_vtable__: Any = ...
    def __init__(self, n_buckets: int = 2_000_000, min_n: int = 3, max_n: int = 6): ...
    def subword_indices(self, word: str, offset: int = 0, bracket: bool = True, with_ngrams: bool = False)\
            -> List[Union[int, Tuple[str, int]]]: ...
    @property
    def upper_bound(self) -> int: ...
    @property
    def min_n(self) -> int: ...
    @property
    def max_n(self) -> int: ...
    @property
    def n_buckets(self) -> int: ...
    def __call__(self, ngram: str) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FinalfusionHashIndexer:
    __pyx_vtable__: Any = ...
    def __init__(self, bucket_exp: int = 21, min_n: int = 3, max_n: int = 6): ...
    def subword_indices(self, word: str, offset: int = 0, bracket: bool = True, with_ngrams: bool = False)\
            -> List[Union[int, Tuple[str, int]]]: ...
    @property
    def upper_bound(self) -> int: ...
    @property
    def min_n(self) -> int: ...
    @property
    def max_n(self) -> int: ...
    @property
    def buckets_exp(self) -> int: ...
    def __call__(self, ngram: str) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
