# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['iex_parser']

package_data = \
{'': ['*']}

install_requires = \
['scapy>=2.4,<3.0']

entry_points = \
{'console_scripts': ['iex-to-csv = iex_parser.iex_to_csv:iex_to_csv',
                     'iex-to-json = iex_parser.iex_to_json:iex_to_json']}

setup_kwargs = {
    'name': 'iex-parser',
    'version': '1.6.0',
    'description': 'Parser for IEX data files',
    'long_description': '# iex_parser\n\nParser for IEX pcap DEEP (1.0) and TOPS (1.5, 1.6) files.\n\n## Overview\n\nAt the time of writing the IEX exchange provides two file downloads for\nhistorical data: DEEP and TOPS. This data is provided as a `pcap` file\nwhich is a dump of the network activity.\n\nThis package provides an API for extracting the data from these files.\n\n## Installation\n\nInstall from PyPi.\n\n```bash\npip install iex_parser\n```\n\n## Example\n\nThe following code processes the TOPS sample file downloaded from IEX. Note the\nfile doesn\'t have to be unzipped. For version 1.6 use `TOPS_1_6`, for 1.5 use\n`TOPS_1_5`.\n\n```python\nfrom iex_parser import Parser, TOPS_1_6\n\nTOPS_SAMPLE_DATA_FILE = \'data_feeds_20180127_20180127_IEXTP1_TOPS1.6.pcap.gz\'\n\nwith Parser(TOPS_SAMPLE_DATA_FILE, TOPS_1_6) as reader:\n    for message in reader:\n        print(message)\n```\nThe result looks like this:\n\n```python\n{\'type\': \'trading_status\', \'status\': b\'T\', \'timestamp\': datetime.datetime(2018, 1, 27, 15, 23, 40, 490473, tzinfo=datetime.timezone.utc), \'symbol\': b\'SPEM\', \'reason\': b\'\'}\n{\'type\': \'trading_status\', \'status\': b\'H\', \'timestamp\': datetime.datetime(2018, 1, 27, 15, 23, 42, 95642, tzinfo=datetime.timezone.utc), \'symbol\': b\'INCO\', \'reason\': b\'NA\'}\n{\'type\': \'trading_status\', \'status\': b\'H\', \'timestamp\': datetime.datetime(2018, 1, 27, 15, 23, 42, 852349, tzinfo=datetime.timezone.utc), \'symbol\': b\'CHSCN\', \'reason\': b\'NA\'}\n{\'type\': \'price_level_update\', \'side\': b\'S\', \'flags\': 1, \'timestamp\': datetime.datetime(2018, 1, 27, 15, 23, 44, 856983, tzinfo=datetime.timezone.utc), \'symbol\': b\'ATLO\', \'size\': 8755, \'price\': Decimal(\'38.95\')}\n{\'type\': \'price_level_update\', \'side\': b\'S\', \'flags\': 0, \'timestamp\': datetime.datetime(2018, 1, 27, 15, 23, 44, 856983, tzinfo=datetime.timezone.utc), \'symbol\': b\'ATLO\', \'size\': 37222, \'price\': Decimal(\'48\')}\n{\'type\': \'price_level_update\', \'side\': b\'S\', \'flags\': 1, \'timestamp\': datetime.datetime(2018, 1, 27, 15, 23, 44, 856987, tzinfo=datetime.timezone.utc), \'symbol\': b\'ATLO\', \'size\': 8958, \'price\': Decimal(\'38.95\')}\n{\'type\': \'price_level_update\', \'side\': b\'S\', \'flags\': 0, \'timestamp\': datetime.datetime(2018, 1, 27, 15, 23, 44, 856987, tzinfo=datetime.timezone.utc), \'symbol\': b\'ATLO\', \'size\': 37019, \'price\': Decimal(\'48\')}\n```\n\nThe following code processes the DEEP sample file downloaded from IEX.\n\n```python\nfrom iex_parser import Parser, DEEP_1_0\n\nDEEP_SAMPLE_DATA_FILE = \'data_feeds_20180127_20180127_IEXTP1_DEEP1.0.pcap.gz\'\n\nwith Parser(DEEP_SAMPLE_DATA_FILE, DEEP_1_0) as reader:\n    for message in reader:\n        print(message)\n```\n\n## Speed\n\nBecause the data is distributed as a dump of network packets, there are a lot of "empty" \npackets. These take time to read and slow the delivery of the real data. To handle this\nthe packets are read on a separate python thread and queued. The size of the queue is an\noptional parameter to the `Parser`, and has been set by experimentation to 25000.\n\nThe main question I get is: can it go any faster?\n\nThe short answer is no. However the reason for the slowness is the time spent\nreading and skipping network data in the `pcap` file.\n\nThe solution is to convert the downloaded `pcap` files into `csv` or `JSON`.\n\n## Command line tools\n\nThere are command line tools that takes a downloaded file and converts it\nto csv files or a JSON file.\n\n### iex-to-csv\n\n```bash\n$ iex-to-csv -i <input-file> -o <output-folder> [-s] [-t <ticker> ...] [-c]\n```\n\nThe input file must be as downloaded from IEX. This `-s` flag can be used to\nsuppress the progress printing. The `-t` flag can be used to select specific\ntickers. The `-c` flag cause the ordinal to be reset when the timestamp changes,\nrather than monotonically increasing. A file for every message type is produced.\n\nFor example:\n\n```bash\n$ iex-to-csv -i ~/data/raw/data_feeds_20200305_20200305_IEXTP1_DEEP1.0.pcap.gz -o ~/data/csv\n```\n\n\n### iex-to-json\n\n```bash\n$ iex-to-json -i <input-file> -o <output-path> [-s] [-t <ticker> ...]\n```\n\nThe input file must be as downloaded from IEX. This `-s` flag can be used to\nsuppress the progress printing. The `-t` flag can be used to select specific\ntickers. A single file is produced containing a JSON message per line.\n\nFor example:\n\n```bash\n$ iex-to-json -i ~/data/raw/data_feeds_20200305_20200305_IEXTP1_DEEP1.0.pcap.gz -o ~/data/json/\n```\n\nThere is a helper function to load this data:\n\n```python\nfrom pathlib import Path\nfrom iex_parser.iex_to_json import load_json\n\nINPUT_FILENAME = Path(\'data_feeds_20200305_20200305_IEXTP1_DEEP1.0.json.gz\')\n\nfor obj in load_json(INPUT_FILENAME):\n    if obj[\'type\'] == \'trade_report\':\n        print(obj)\n```\n\n## Messages\n\nThe messages are returned as dictionaries.\n\n### Security Directive\n\n```python\n{\n    \'type\': \'security_directive\',\n    \'flags\': int,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'round_lot_size\': int,\n    \'adjusted_poc_close\': decimal.Decimal,\n    \'luld_tier\': int\n}\n```\n\n### Trading Status\n\n```python\n{\n    \'type\': \'trading_status\',\n    \'status\': bytes,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'reason\': bytes\n}\n```\n\n### Operational Halt\n\n```python\n{\n    \'type\': \'operational_halt\',\n    \'halt_status\': bytes,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes\n}\n```\n\n### Short Sale Price Test Status\n\n```python\n{\n    \'type\': \'short_sale_price_test_status\',\n    \'status\': int,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'detail\': bytes\n}\n```\n\n### Quote Update\n\n```python\n{\n    \'type\': \'quote_update\',\n    \'flags\': int,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'bid_size\': int,\n    \'bid_price\': decimal.Decimal,\n    \'ask_size\': int,\n    \'ask_price\': decimal.Decimal\n}\n```\n\n### Trade Report\n\n```python\n{\n    \'type\': \'trade_report\',\n    \'flags\': int,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'size\': int,\n    \'price\': decimal.Decimal,\n    \'trade_id\': int\n}\n```\n\n### Official Price\n\n```python\n{\n    \'type\': \'official_price\',\n    \'price_type\': bytes,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'price\': deccimal.Decimal\n}\n```\n\n### Trade Break\n\n```python\n{\n    \'type\': \'trade_break\',\n    \'flags\': int,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'size\': int,\n    \'price\': decimal.Decimal,\n    \'trade_id\': int\n}\n```\n\n### Auction Information\n\n```python\n{\n    \'type\': \'auction_information\',\n    \'auction_type\': bytes,\n    \'timestamp\': decimal.Decimal,\n    \'symbol\': bytes,\n    \'paired_shares\': int,\n    \'reference_price\': decimal.Decmal,\n    \'indicative_clearing_price\': decimal.Decimal,\n    \'imbalance_shares\': int,\n    \'imbalance_side\': bytes,\n    \'extension_number\': int,\n    \'scheduled_auction_time\': datetime.datetime,\n    \'auction_book_clearing_price\': decimal.Decimal,\n    \'collar_reference_price\': decimal.Decimal,\n    \'lower_auction_collar_price\': decimal.Decimal,\n    \'upper_auction_collar_price\': decimal.Decimal\n}\n```\n\n### Price Level Update\n\n```python\n{\n    \'type\': \'price_level_update\',\n    \'side\': bytes,\n    \'flags\': int,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes,\n    \'size\': int,\n    \'price\': decimal.Decimal\n}\n```\n\n### Secrity Event\n\n```python\n{\n    \'type\': \'security_event\',\n    \'security_event\': bytes,\n    \'timestamp\': datetime.datetime,\n    \'symbol\': bytes\n}\n```\n',
    'author': 'Rob Blackbourn',
    'author_email': 'rob.blackbourn@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/rob-blackbourn/iex_parser',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
