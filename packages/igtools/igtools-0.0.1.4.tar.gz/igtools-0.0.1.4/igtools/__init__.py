####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("27a11e9ebfd6ad64bcf071bfe31f0eaebeb1f07cb5d1f8fba09e9333d2423eb8a9e7a4752bf9875d47ef1bc65bff1a0f88f3d96cd6c7920d57a41fff178c9c8abcb17252e5519c45b6ad29d9e145b0a4dd13cc698af50fab4ae004bbec5c4828ceedac1dae1e95be0c34734687dc78e67cd403f2c0f53288628d8204c085966d57dd97c6bea99666af5849f98dd099afd8d94bb28db32282d8830ed80c37ff6f043485fbcbd2f51e78d35a46fafbe9e9414fe906ae667672bc360f0cc8335557788a86ca7ab44df6434e73a7b646b32c479e290ec8970131a8d4cb7d621b6cfd8ac9fd31b72229196f0623c56f574e9550a406d7dd07a5534b7bc077fe457844292f840b00d216e5a61e89a8c649d70a4db5d52f058a4699188ecc3f935e150ce8bfa84c03e367bda52c306da5f9d2c2b5457e6b5fad778b5705562fcd1ea83e3ee9bbd34d1c2ea63ba6477ec6b5cc6504c133f702b8475743bd896195bfe5e9c40ec8c10283b40719bcff84a697d49f19a56893f4bd61d174e2fc9d4f0209e81d32d916872be4d9c8e78e83c54c8c9673d4565289d7211cbb42d2954087ee8d2323971c90b3a2d66630ca7689281bc8f8ef2f28110533b627f3147adfea49d84dcad41ab329db94430106b73d7a072884acde8d0a46417df72e8a77d0f535946899b976eb812ab9b29603af4da4c68d11b4820773d73d0e14fb89e5503e0878706ed8af81e5395dd7df1a8f0e5c964ee4f40dce8e93ad1513a78bc8af49364547873f8a8335c1bad22c1768e6a778a40da00c0b364c8ac1377f84e1918e3d09803dc82c7397fa253c994865978661a0e109310b23628a9791d203ea164456f1bd3c48458591ef8465e372c27190ad9ab27f6b7ed472f07cc95e324705b38d94f828a90f0200d6115a36ae712d0b4d52487651e4828e1fe501e083cf502a53a735b983a5d348a11e9943d697e8a6d24664a663af310f05cbbf6550c6c5280bfd2849e958389380f992e40284fc634ce25fb0666938ac4ce163261a9dc0ef2bbb3aa46cad6e2c01f230bc2c7bf8953c5be2a50aed3e859a64655a35320eb81e37977247c1eb90261d65844e5c1241294a8fa853a19f3c61d4f46099ba82b7b87ec9f2a31532b7b91d4c846d98bb1de1d5f42905ed496357859c24d2f9466645029b02800b20b72a7efffd3c7883b39d0e80bc0df8fc79f4510cf3c010eefd3060969cf478d25e13368968427b821993a4fb929fec553f6f3204574f2b2608ce871d90ba8c52e8e119a7aafe9ec1a299857dabe00c651494824a28a06a4571e46880cc169670d996822a27d35b003bbe67da4aaa6e143a86a84b60dfb1c5a12fbba4adbf8a321f6ad512276d09290d37da7fc5168e3066f904ea7532080ab38bcab4a274ba58d6c736de0640b8c9f1008dba4b0dc40e0a83f2ed68f103691dd4f33c809744c55be2721dc42f661cf5b4f2a50ecafc25c2d33e386cd90f1d6d320edd325a1bb2d7092466ce835a7df8fa118c28d6b11627b4e025c083afb7115cbb14bbcc8641b3ba8f59dbfd859e6420668fb7e70396392cea38c8c457d32af9f807967649b1403cc846fd40bdb880c887a0baed56aba2a40d494260df910f8543105aa0019c4fd6bf21091f0a34353f952f1655bdcc2886e986011bfc218c3417776a3cc311f3c793c09a3e3d1d052bc2bff06abfca1335af0aab1871df7a875d3c8056918f057aa341289273ab539a3f604ec4f2bed07baa4426123b4e208b6543e5a4cea9a724c12fcf5222fc5aee4d3f842e1ceb85110fccf4c5a38190d28e125258dd758b0fc5ad20603e81a7bfc7e5ca3efd2d2bb7800b506c02350c0cd6394d04a9ffda97502a573b3d5c9aa376525b20ef517880a24f52ec4a3bd813fde283856b9876e0ac54308aa09ad2a7c08568de55cb3f3ef78294e29fd48c797e7d10d0abcd05504f7f601653c0e535d847d73c97200b9a401ee19073e8feb981b04a3edc949de025aa558fb36edb2c3ffded43add053d14974d940249cdfd135e5bd2c3f9f7a944691e1310abe401ce8ba2fe76b53f52170bef76ab7705e2217d0999e407f2efaf26dddff537d52ce7c3d43b650c2a78e8363595d4468b6ccaadeb43d34e1e24a6bd1f3f600f18542cbad421680ad8ed75fe0ff21f7183c9ab077e7c56a56b509593377a9b9d0cca316315478dbf38d4c4a706054e6b12b2f58ce9aad7d54b04dada24e861d2cb31bc8d649c38d1e97f276e32d50654517db9145e701f5461aeeb72110a05616ade6ebf690c3f6cb862d4f55da6906720d070e0d3c812f12073a1dc6a6c6fdf488c6b85d8dc721ee46f0fc809e80c4063052d602b89330c5c821b9f71cfbf999ba92f7732e0d4003f3d7508fe0062c9117d52ffad41b28b21b5590010b470f709ef277ce71491ff6f30ba5551870bc8e70efb30847e7a057675e7e6b39ae945cd12bdf47952ae814896bd9eced9f19e9bc3254cb5ee6e2fd05bf4c1152d4da56a98b7e8d7e37b7d5c3951c7690695349cf297219fbf15a4ad200c2082c7908bb471070e2a9240a8c7c51fd88e838bdd460e729081886709014aae50e8a172c0c03017033518250b05ae9b3be661909346be9baf3ca4f74196b50a136b10a6fa15b0c1fd34da614eab241138502e511d6892cd53d8a4d44a4a77f635c92e96ae97b670fabead15447591e8f3d98a83bee49c39d1b2588335c35db3274082d788712ae0718b6647e85c06b48da43347df321c2ba6e2e1cde605376d9e3ad387c37b5ab79702c470a8be5d11ad196f58a1a2fb9d1df1ef78cc4c89229b763b89ee392a3400c75ae0532f6cf0254bf95a9d96828f02b134fc0689c89baa8ef232317fc2912118b7f8be2a835adbd892ffaabaf||12|104",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
