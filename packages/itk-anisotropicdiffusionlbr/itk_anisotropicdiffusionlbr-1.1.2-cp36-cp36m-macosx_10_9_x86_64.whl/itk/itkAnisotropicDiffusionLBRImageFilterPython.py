# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAnisotropicDiffusionLBRImageFilterPython
else:
    import _itkAnisotropicDiffusionLBRImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAnisotropicDiffusionLBRImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAnisotropicDiffusionLBRImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkAnisotropicDiffusionLBRImageFilterID2_New():
    return itkAnisotropicDiffusionLBRImageFilterID2.New()

class itkAnisotropicDiffusionLBRImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterID2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterID2

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterID2 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_swigregister(itkAnisotropicDiffusionLBRImageFilterID2)
itkAnisotropicDiffusionLBRImageFilterID2___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2___New_orig__
itkAnisotropicDiffusionLBRImageFilterID2_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2_cast


def itkAnisotropicDiffusionLBRImageFilterID3_New():
    return itkAnisotropicDiffusionLBRImageFilterID3.New()

class itkAnisotropicDiffusionLBRImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterID3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterID3

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterID3 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_swigregister(itkAnisotropicDiffusionLBRImageFilterID3)
itkAnisotropicDiffusionLBRImageFilterID3___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3___New_orig__
itkAnisotropicDiffusionLBRImageFilterID3_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3_cast


def itkAnisotropicDiffusionLBRImageFilterIF2_New():
    return itkAnisotropicDiffusionLBRImageFilterIF2.New()

class itkAnisotropicDiffusionLBRImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterIF2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterIF2

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterIF2 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_swigregister(itkAnisotropicDiffusionLBRImageFilterIF2)
itkAnisotropicDiffusionLBRImageFilterIF2___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2___New_orig__
itkAnisotropicDiffusionLBRImageFilterIF2_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2_cast


def itkAnisotropicDiffusionLBRImageFilterIF3_New():
    return itkAnisotropicDiffusionLBRImageFilterIF3.New()

class itkAnisotropicDiffusionLBRImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterIF3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterIF3

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterIF3 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_swigregister(itkAnisotropicDiffusionLBRImageFilterIF3)
itkAnisotropicDiffusionLBRImageFilterIF3___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3___New_orig__
itkAnisotropicDiffusionLBRImageFilterIF3_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3_cast


def itkAnisotropicDiffusionLBRImageFilterISS2_New():
    return itkAnisotropicDiffusionLBRImageFilterISS2.New()

class itkAnisotropicDiffusionLBRImageFilterISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterISS2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterISS2

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterISS2 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_swigregister(itkAnisotropicDiffusionLBRImageFilterISS2)
itkAnisotropicDiffusionLBRImageFilterISS2___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2___New_orig__
itkAnisotropicDiffusionLBRImageFilterISS2_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2_cast


def itkAnisotropicDiffusionLBRImageFilterISS3_New():
    return itkAnisotropicDiffusionLBRImageFilterISS3.New()

class itkAnisotropicDiffusionLBRImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterISS3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterISS3

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterISS3 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_swigregister(itkAnisotropicDiffusionLBRImageFilterISS3)
itkAnisotropicDiffusionLBRImageFilterISS3___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3___New_orig__
itkAnisotropicDiffusionLBRImageFilterISS3_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3_cast


def itkAnisotropicDiffusionLBRImageFilterIUC2_New():
    return itkAnisotropicDiffusionLBRImageFilterIUC2.New()

class itkAnisotropicDiffusionLBRImageFilterIUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterIUC2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterIUC2

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterIUC2 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_swigregister(itkAnisotropicDiffusionLBRImageFilterIUC2)
itkAnisotropicDiffusionLBRImageFilterIUC2___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2___New_orig__
itkAnisotropicDiffusionLBRImageFilterIUC2_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2_cast


def itkAnisotropicDiffusionLBRImageFilterIUC3_New():
    return itkAnisotropicDiffusionLBRImageFilterIUC3.New()

class itkAnisotropicDiffusionLBRImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterIUC3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterIUC3

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterIUC3 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_swigregister(itkAnisotropicDiffusionLBRImageFilterIUC3)
itkAnisotropicDiffusionLBRImageFilterIUC3___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3___New_orig__
itkAnisotropicDiffusionLBRImageFilterIUC3_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3_cast


def itkAnisotropicDiffusionLBRImageFilterIUS2_New():
    return itkAnisotropicDiffusionLBRImageFilterIUS2.New()

class itkAnisotropicDiffusionLBRImageFilterIUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterIUS2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterIUS2

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterIUS2 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_swigregister(itkAnisotropicDiffusionLBRImageFilterIUS2)
itkAnisotropicDiffusionLBRImageFilterIUS2___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2___New_orig__
itkAnisotropicDiffusionLBRImageFilterIUS2_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2_cast


def itkAnisotropicDiffusionLBRImageFilterIUS3_New():
    return itkAnisotropicDiffusionLBRImageFilterIUS3.New()

class itkAnisotropicDiffusionLBRImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkAnisotropicDiffusionLBRImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_Clone)
    SetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_SetNoiseScale)
    GetNoiseScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetNoiseScale)
    SetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_SetFeatureScale)
    GetFeatureScale = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetFeatureScale)
    SetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_SetRatioToMaxStableTimeStep)
    GetRatioToMaxStableTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetRatioToMaxStableTimeStep)
    SetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_SetMaxTimeStepsBetweenTensorUpdates)
    GetMaxTimeStepsBetweenTensorUpdates = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetMaxTimeStepsBetweenTensorUpdates)
    SetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_SetDiffusionTime)
    GetDiffusionTime = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetDiffusionTime)
    SetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_SetAdimensionize)
    GetAdimensionize = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetAdimensionize)
    EigenValuesTransform = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_EigenValuesTransform)
    GetLastTensorImage = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetLastTensorImage)
    GetLinearFilterEffectiveTimesAndIterations = _swig_new_instance_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_GetLinearFilterEffectiveTimesAndIterations)
    __swig_destroy__ = _itkAnisotropicDiffusionLBRImageFilterPython.delete_itkAnisotropicDiffusionLBRImageFilterIUS3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionLBRImageFilterIUS3

        Create a new object of the class itkAnisotropicDiffusionLBRImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionLBRImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionLBRImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicDiffusionLBRImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionLBRImageFilterIUS3 in _itkAnisotropicDiffusionLBRImageFilterPython:
_itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_swigregister(itkAnisotropicDiffusionLBRImageFilterIUS3)
itkAnisotropicDiffusionLBRImageFilterIUS3___New_orig__ = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3___New_orig__
itkAnisotropicDiffusionLBRImageFilterIUS3_cast = _itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def anisotropic_diffusion_lbr_image_filter(*args, **kwargs):
    """Procedural interface for AnisotropicDiffusionLBRImageFilter"""
    import itk
    instance = itk.AnisotropicDiffusionLBRImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def anisotropic_diffusion_lbr_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AnisotropicDiffusionLBRImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AnisotropicDiffusionLBRImageFilter.values()[0]
    else:
        filter_object = itk.AnisotropicDiffusionLBRImageFilter

    anisotropic_diffusion_lbr_image_filter.__doc__ = filter_object.__doc__
    anisotropic_diffusion_lbr_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    anisotropic_diffusion_lbr_image_filter.__doc__ += "Available Keyword Arguments:\n"
    anisotropic_diffusion_lbr_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



