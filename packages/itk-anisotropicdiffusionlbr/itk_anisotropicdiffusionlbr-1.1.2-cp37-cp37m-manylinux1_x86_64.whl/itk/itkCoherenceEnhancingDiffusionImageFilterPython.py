# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCoherenceEnhancingDiffusionImageFilterPython
else:
    import _itkCoherenceEnhancingDiffusionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkCoherenceEnhancingDiffusionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkCoherenceEnhancingDiffusionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkAnisotropicDiffusionLBRImageFilterPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkCoherenceEnhancingDiffusionImageFilterID2_New():
    return itkCoherenceEnhancingDiffusionImageFilterID2.New()

class itkCoherenceEnhancingDiffusionImageFilterID2(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID2):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterID2
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterID2

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterID2 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_swigregister(itkCoherenceEnhancingDiffusionImageFilterID2)
itkCoherenceEnhancingDiffusionImageFilterID2___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2___New_orig__
itkCoherenceEnhancingDiffusionImageFilterID2_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID2_cast


def itkCoherenceEnhancingDiffusionImageFilterID3_New():
    return itkCoherenceEnhancingDiffusionImageFilterID3.New()

class itkCoherenceEnhancingDiffusionImageFilterID3(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterID3):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterID3
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterID3

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterID3 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_swigregister(itkCoherenceEnhancingDiffusionImageFilterID3)
itkCoherenceEnhancingDiffusionImageFilterID3___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3___New_orig__
itkCoherenceEnhancingDiffusionImageFilterID3_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterID3_cast


def itkCoherenceEnhancingDiffusionImageFilterIF2_New():
    return itkCoherenceEnhancingDiffusionImageFilterIF2.New()

class itkCoherenceEnhancingDiffusionImageFilterIF2(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF2):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterIF2
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterIF2

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterIF2 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_swigregister(itkCoherenceEnhancingDiffusionImageFilterIF2)
itkCoherenceEnhancingDiffusionImageFilterIF2___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2___New_orig__
itkCoherenceEnhancingDiffusionImageFilterIF2_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF2_cast


def itkCoherenceEnhancingDiffusionImageFilterIF3_New():
    return itkCoherenceEnhancingDiffusionImageFilterIF3.New()

class itkCoherenceEnhancingDiffusionImageFilterIF3(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIF3):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterIF3
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterIF3

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterIF3 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_swigregister(itkCoherenceEnhancingDiffusionImageFilterIF3)
itkCoherenceEnhancingDiffusionImageFilterIF3___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3___New_orig__
itkCoherenceEnhancingDiffusionImageFilterIF3_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIF3_cast


def itkCoherenceEnhancingDiffusionImageFilterISS2_New():
    return itkCoherenceEnhancingDiffusionImageFilterISS2.New()

class itkCoherenceEnhancingDiffusionImageFilterISS2(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS2):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterISS2
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterISS2

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterISS2 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_swigregister(itkCoherenceEnhancingDiffusionImageFilterISS2)
itkCoherenceEnhancingDiffusionImageFilterISS2___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2___New_orig__
itkCoherenceEnhancingDiffusionImageFilterISS2_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS2_cast


def itkCoherenceEnhancingDiffusionImageFilterISS3_New():
    return itkCoherenceEnhancingDiffusionImageFilterISS3.New()

class itkCoherenceEnhancingDiffusionImageFilterISS3(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterISS3):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterISS3
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterISS3

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterISS3 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_swigregister(itkCoherenceEnhancingDiffusionImageFilterISS3)
itkCoherenceEnhancingDiffusionImageFilterISS3___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3___New_orig__
itkCoherenceEnhancingDiffusionImageFilterISS3_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterISS3_cast


def itkCoherenceEnhancingDiffusionImageFilterIUC2_New():
    return itkCoherenceEnhancingDiffusionImageFilterIUC2.New()

class itkCoherenceEnhancingDiffusionImageFilterIUC2(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC2):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterIUC2
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterIUC2

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterIUC2 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_swigregister(itkCoherenceEnhancingDiffusionImageFilterIUC2)
itkCoherenceEnhancingDiffusionImageFilterIUC2___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2___New_orig__
itkCoherenceEnhancingDiffusionImageFilterIUC2_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC2_cast


def itkCoherenceEnhancingDiffusionImageFilterIUC3_New():
    return itkCoherenceEnhancingDiffusionImageFilterIUC3.New()

class itkCoherenceEnhancingDiffusionImageFilterIUC3(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUC3):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterIUC3
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterIUC3

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterIUC3 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_swigregister(itkCoherenceEnhancingDiffusionImageFilterIUC3)
itkCoherenceEnhancingDiffusionImageFilterIUC3___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3___New_orig__
itkCoherenceEnhancingDiffusionImageFilterIUC3_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUC3_cast


def itkCoherenceEnhancingDiffusionImageFilterIUS2_New():
    return itkCoherenceEnhancingDiffusionImageFilterIUS2.New()

class itkCoherenceEnhancingDiffusionImageFilterIUS2(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS2):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterIUS2
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterIUS2

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterIUS2 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_swigregister(itkCoherenceEnhancingDiffusionImageFilterIUS2)
itkCoherenceEnhancingDiffusionImageFilterIUS2___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2___New_orig__
itkCoherenceEnhancingDiffusionImageFilterIUS2_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS2_cast


def itkCoherenceEnhancingDiffusionImageFilterIUS3_New():
    return itkCoherenceEnhancingDiffusionImageFilterIUS3.New()

class itkCoherenceEnhancingDiffusionImageFilterIUS3(itk.itkAnisotropicDiffusionLBRImageFilterPython.itkAnisotropicDiffusionLBRImageFilterIUS3):
    r"""Proxy of C++ itkCoherenceEnhancingDiffusionImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_Clone)
    SetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_SetExponent)
    SetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_SetLambda)
    SetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_SetAlpha)
    GetExponent = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_GetExponent)
    GetLambda = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_GetLambda)
    GetAlpha = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_GetAlpha)
    EnhancementType_CED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_EnhancementType_CED
    
    EnhancementType_cCED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_EnhancementType_cCED
    
    EnhancementType_EED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_EnhancementType_EED
    
    EnhancementType_cEED = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_EnhancementType_cEED
    
    EnhancementType_Isotropic = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_EnhancementType_Isotropic
    
    SetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_SetEnhancement)
    GetEnhancement = _swig_new_instance_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_GetEnhancement)
    __swig_destroy__ = _itkCoherenceEnhancingDiffusionImageFilterPython.delete_itkCoherenceEnhancingDiffusionImageFilterIUS3
    cast = _swig_new_static_method(_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkCoherenceEnhancingDiffusionImageFilterIUS3

        Create a new object of the class itkCoherenceEnhancingDiffusionImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoherenceEnhancingDiffusionImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoherenceEnhancingDiffusionImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoherenceEnhancingDiffusionImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoherenceEnhancingDiffusionImageFilterIUS3 in _itkCoherenceEnhancingDiffusionImageFilterPython:
_itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_swigregister(itkCoherenceEnhancingDiffusionImageFilterIUS3)
itkCoherenceEnhancingDiffusionImageFilterIUS3___New_orig__ = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3___New_orig__
itkCoherenceEnhancingDiffusionImageFilterIUS3_cast = _itkCoherenceEnhancingDiffusionImageFilterPython.itkCoherenceEnhancingDiffusionImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def coherence_enhancing_diffusion_image_filter(*args, **kwargs):
    """Procedural interface for CoherenceEnhancingDiffusionImageFilter"""
    import itk
    instance = itk.CoherenceEnhancingDiffusionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def coherence_enhancing_diffusion_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CoherenceEnhancingDiffusionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CoherenceEnhancingDiffusionImageFilter.values()[0]
    else:
        filter_object = itk.CoherenceEnhancingDiffusionImageFilter

    coherence_enhancing_diffusion_image_filter.__doc__ = filter_object.__doc__
    coherence_enhancing_diffusion_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    coherence_enhancing_diffusion_image_filter.__doc__ += "Available Keyword Arguments:\n"
    coherence_enhancing_diffusion_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



