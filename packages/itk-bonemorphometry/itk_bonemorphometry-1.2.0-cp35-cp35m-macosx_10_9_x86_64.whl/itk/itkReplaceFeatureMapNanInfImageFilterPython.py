# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkReplaceFeatureMapNanInfImageFilterPython
else:
    import _itkReplaceFeatureMapNanInfImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkReplaceFeatureMapNanInfImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkReplaceFeatureMapNanInfImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkImageToImageFilterCommonPython
import itk.vnl_vector_refPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.itkArrayPython
import itk.itkRGBAPixelPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
class vectoritkImageVF53(object):
    r"""Proxy of C++ std::vector< itkImageVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___nonzero__)
    __bool__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___bool__)
    __len__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___len__)
    __getslice__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___getslice__)
    __setslice__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___setslice__)
    __delslice__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___delslice__)
    __delitem__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___delitem__)
    __getitem__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___getitem__)
    __setitem__ = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___setitem__)
    pop = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_pop)
    append = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_append)
    empty = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_empty)
    size = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_size)
    swap = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_swap)
    begin = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_begin)
    end = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_end)
    rbegin = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_rbegin)
    rend = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_rend)
    clear = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_clear)
    get_allocator = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_get_allocator)
    pop_back = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_pop_back)
    erase = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageVF53 self) -> vectoritkImageVF53
        __init__(vectoritkImageVF53 self, vectoritkImageVF53 other) -> vectoritkImageVF53
        __init__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type size) -> vectoritkImageVF53
        __init__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type size, std::vector< itkImageVF53_Pointer >::value_type const & value) -> vectoritkImageVF53
        """
        _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_swiginit(self, _itkReplaceFeatureMapNanInfImageFilterPython.new_vectoritkImageVF53(*args))
    push_back = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_push_back)
    front = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_front)
    back = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_back)
    assign = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_assign)
    resize = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_resize)
    insert = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_insert)
    reserve = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_reserve)
    capacity = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_capacity)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_vectoritkImageVF53

# Register vectoritkImageVF53 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_swigregister(vectoritkImageVF53)


def itkImageFileWriterIVF53_New():
    return itkImageFileWriterIVF53.New()

class itkImageFileWriterIVF53(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageFileWriterIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_Clone)
    SetInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetInput)
    GetInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetInput)
    SetFileName = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetFileName)
    GetFileName = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetImageIO)
    Write = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_Write)
    SetIORegion = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageFileWriterIVF53
    cast = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF53

        Create a new object of the class itkImageFileWriterIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF53 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_swigregister(itkImageFileWriterIVF53)
itkImageFileWriterIVF53___New_orig__ = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53___New_orig__
itkImageFileWriterIVF53_cast = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_cast

class itkImageIOBase(itk.ITKCommonBasePython.itkLightProcessObject):
    r"""Proxy of C++ itkImageIOBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetFileName = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileName)
    GetFileName = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileName)
    SetNumberOfDimensions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetNumberOfDimensions)
    GetNumberOfDimensions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetNumberOfDimensions)
    SetDimensions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetDimensions)
    GetDimensions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDimensions)
    SetOrigin = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetOrigin)
    GetOrigin = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetOrigin)
    SetSpacing = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSpacing)
    SetDirection = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetDirection)
    GetDirection = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDirection)
    GetDefaultDirection = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDefaultDirection)
    SetIORegion = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetIORegion)
    SetPixelType = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetPixelType)
    GetPixelType = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelType)
    SetComponentType = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetComponentType)
    GetComponentType = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentType)
    GetComponentTypeInfo = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeInfo)
    SetNumberOfComponents = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetNumberOfComponents)
    GetNumberOfComponents = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetNumberOfComponents)
    SetUseCompression = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetCompressionLevel)
    SetCompressor = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetCompressor)
    GetCompressor = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetCompressor)
    SetUseStreamedReading = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseStreamedReading)
    GetUseStreamedReading = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseStreamedReading)
    UseStreamedReadingOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedReadingOn)
    UseStreamedReadingOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedReadingOff)
    SetUseStreamedWriting = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseStreamedWriting)
    GetUseStreamedWriting = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseStreamedWriting)
    UseStreamedWritingOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedWritingOn)
    UseStreamedWritingOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedWritingOff)
    SetExpandRGBPalette = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetExpandRGBPalette)
    GetExpandRGBPalette = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetExpandRGBPalette)
    ExpandRGBPaletteOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ExpandRGBPaletteOn)
    ExpandRGBPaletteOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ExpandRGBPaletteOff)
    SetWritePalette = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetWritePalette)
    GetWritePalette = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetWritePalette)
    WritePaletteOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_WritePaletteOn)
    WritePaletteOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_WritePaletteOff)
    GetIsReadAsScalarPlusPalette = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetIsReadAsScalarPlusPalette)
    GetComponentTypeAsString = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeAsString)
    GetComponentTypeFromString = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeFromString)
    GetPixelTypeAsString = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeAsString)
    GetPixelTypeFromString = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeFromString)
    SetFileType = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileType)
    GetFileType = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileType)
    SetFileTypeToASCII = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileTypeToASCII)
    SetFileTypeToBinary = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileTypeToBinary)
    SetByteOrder = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrder)
    GetByteOrder = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetByteOrder)
    SetByteOrderToBigEndian = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrderToBigEndian)
    SetByteOrderToLittleEndian = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrderToLittleEndian)
    GetFileTypeAsString = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileTypeAsString)
    GetByteOrderAsString = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetByteOrderAsString)
    GetPixelStride = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelStride)
    GetImageSizeInPixels = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInPixels)
    GetImageSizeInBytes = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInBytes)
    GetImageSizeInComponents = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInComponents)
    GetComponentSize = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentSize)
    CanReadFile = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanReadFile)
    CanStreamRead = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanStreamRead)
    ReadImageInformation = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ReadImageInformation)
    Read = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_Read)
    CanWriteFile = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanWriteFile)
    CanStreamWrite = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanStreamWrite)
    WriteImageInformation = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_WriteImageInformation)
    Write = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_Write)
    SupportsDimension = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SupportsDimension)
    GenerateStreamableReadRegionFromRequestedRegion = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GenerateStreamableReadRegionFromRequestedRegion)
    GetActualNumberOfSplitsForWriting = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetActualNumberOfSplitsForWriting)
    GetSplitRegionForWriting = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSplitRegionForWriting)
    GetSupportedReadExtensions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSupportedReadExtensions)
    GetSupportedWriteExtensions = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSupportedWriteExtensions)

# Register itkImageIOBase in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_swigregister(itkImageIOBase)
itkImageIOBase_GetComponentTypeAsString = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeAsString
itkImageIOBase_GetComponentTypeFromString = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeFromString
itkImageIOBase_GetPixelTypeAsString = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeAsString
itkImageIOBase_GetPixelTypeFromString = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeFromString

class itkImageSourceIVF53(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_MakeOutput)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageSourceIVF53
    cast = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_cast)

# Register itkImageSourceIVF53 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_swigregister(itkImageSourceIVF53)
itkImageSourceIVF53_cast = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_cast

class itkImageToImageFilterIVF53IVF53(itkImageSourceIVF53):
    r"""Proxy of C++ itkImageToImageFilterIVF53IVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetInput)
    GetInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetInput)
    PushBackInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetDirectionTolerance)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageToImageFilterIVF53IVF53
    cast = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_cast)

# Register itkImageToImageFilterIVF53IVF53 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_swigregister(itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53_cast = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_cast


def itkImageVF53_New():
    return itkImageVF53.New()

class itkImageVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Clone)
    Allocate = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Allocate)
    FillBuffer = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_SetPixel)
    GetPixel = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageVF53
    cast = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF53

        Create a new object of the class itkImageVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF53 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_swigregister(itkImageVF53)
itkImageVF53___New_orig__ = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53___New_orig__
itkImageVF53_cast = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_cast


def itkReplaceFeatureMapNanInfImageFilterIVF53_New():
    return itkReplaceFeatureMapNanInfImageFilterIVF53.New()

class itkReplaceFeatureMapNanInfImageFilterIVF53(itkImageToImageFilterIVF53IVF53):
    r"""Proxy of C++ itkReplaceFeatureMapNanInfImageFilterIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_Clone)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkReplaceFeatureMapNanInfImageFilterIVF53
    cast = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_cast)

    def New(*args, **kargs):
        """New() -> itkReplaceFeatureMapNanInfImageFilterIVF53

        Create a new object of the class itkReplaceFeatureMapNanInfImageFilterIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReplaceFeatureMapNanInfImageFilterIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReplaceFeatureMapNanInfImageFilterIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReplaceFeatureMapNanInfImageFilterIVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReplaceFeatureMapNanInfImageFilterIVF53 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_swigregister(itkReplaceFeatureMapNanInfImageFilterIVF53)
itkReplaceFeatureMapNanInfImageFilterIVF53___New_orig__ = _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53___New_orig__
itkReplaceFeatureMapNanInfImageFilterIVF53_cast = _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_cast


def itkReplaceFeatureMapNanInfImageFilterVIF3_New():
    return itkReplaceFeatureMapNanInfImageFilterVIF3.New()

class itkReplaceFeatureMapNanInfImageFilterVIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3):
    r"""Proxy of C++ itkReplaceFeatureMapNanInfImageFilterVIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_Clone)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkReplaceFeatureMapNanInfImageFilterVIF3
    cast = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_cast)

    def New(*args, **kargs):
        """New() -> itkReplaceFeatureMapNanInfImageFilterVIF3

        Create a new object of the class itkReplaceFeatureMapNanInfImageFilterVIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReplaceFeatureMapNanInfImageFilterVIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReplaceFeatureMapNanInfImageFilterVIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReplaceFeatureMapNanInfImageFilterVIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReplaceFeatureMapNanInfImageFilterVIF3 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_swigregister(itkReplaceFeatureMapNanInfImageFilterVIF3)
itkReplaceFeatureMapNanInfImageFilterVIF3___New_orig__ = _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3___New_orig__
itkReplaceFeatureMapNanInfImageFilterVIF3_cast = _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_cast


def itkImageFileReaderIVF53_New():
    return itkImageFileReaderIVF53.New()

class itkImageFileReaderIVF53(itkImageSourceIVF53):
    r"""Proxy of C++ itkImageFileReaderIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_UseStreamingOff)
    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageFileReaderIVF53
    cast = _swig_new_static_method(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF53

        Create a new object of the class itkImageFileReaderIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF53 in _itkReplaceFeatureMapNanInfImageFilterPython:
_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_swigregister(itkImageFileReaderIVF53)
itkImageFileReaderIVF53___New_orig__ = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53___New_orig__
itkImageFileReaderIVF53_cast = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_file_reader(*args, **kwargs):
    """Procedural interface for ImageFileReader"""
    import itk
    instance = itk.ImageFileReader.New(*args, **kwargs)
    return instance.__internal_call__()

def image_file_reader_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageFileReader, itkTemplate.itkTemplate):
        filter_object = itk.ImageFileReader.values()[0]
    else:
        filter_object = itk.ImageFileReader

    image_file_reader.__doc__ = filter_object.__doc__
    image_file_reader.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_file_reader.__doc__ += "Available Keyword Arguments:\n"
    image_file_reader.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToImageFilter.values()[0]
    else:
        filter_object = itk.ImageToImageFilter

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_image_filter.__doc__ += "Available Keyword Arguments:\n"
    image_to_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_file_writer(*args, **kwargs):
    """Procedural interface for ImageFileWriter"""
    import itk
    instance = itk.ImageFileWriter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_file_writer_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageFileWriter, itkTemplate.itkTemplate):
        filter_object = itk.ImageFileWriter.values()[0]
    else:
        filter_object = itk.ImageFileWriter

    image_file_writer.__doc__ = filter_object.__doc__
    image_file_writer.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_file_writer.__doc__ += "Available Keyword Arguments:\n"
    image_file_writer.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def replace_feature_map_nan_inf_image_filter(*args, **kwargs):
    """Procedural interface for ReplaceFeatureMapNanInfImageFilter"""
    import itk
    instance = itk.ReplaceFeatureMapNanInfImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def replace_feature_map_nan_inf_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ReplaceFeatureMapNanInfImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ReplaceFeatureMapNanInfImageFilter.values()[0]
    else:
        filter_object = itk.ReplaceFeatureMapNanInfImageFilter

    replace_feature_map_nan_inf_image_filter.__doc__ = filter_object.__doc__
    replace_feature_map_nan_inf_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    replace_feature_map_nan_inf_image_filter.__doc__ += "Available Keyword Arguments:\n"
    replace_feature_map_nan_inf_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        filter_object = itk.ImageSource.values()[0]
    else:
        filter_object = itk.ImageSource

    image_source.__doc__ = filter_object.__doc__
    image_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_source.__doc__ += "Available Keyword Arguments:\n"
    image_source.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



