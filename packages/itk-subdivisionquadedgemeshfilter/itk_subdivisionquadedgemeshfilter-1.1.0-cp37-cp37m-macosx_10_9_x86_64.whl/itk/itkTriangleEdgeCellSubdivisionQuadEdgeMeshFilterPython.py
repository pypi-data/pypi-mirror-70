# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython
else:
    import _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkGeometricalQuadEdgePython
import itk.itkQuadEdgePython
import itk.itkTriangleCellSubdivisionQuadEdgeMeshFilterPython
import itk.itkQuadEdgeMeshBasePython
import itk.itkFixedArrayPython
import itk.itkMapContainerPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkQuadEdgeCellTraitsInfoPython
import itk.itkQuadEdgeMeshPointPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkQuadEdgeMeshLineCellPython
import itk.itkArrayPython
import itk.itkSubdivisionQuadEdgeMeshFilterPython
import itk.itkQuadEdgeMeshToQuadEdgeMeshFilterPython
class itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2(itk.itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2):
    r"""Proxy of C++ itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetEdgesToBeSubdivided = _swig_new_instance_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_GetEdgesToBeSubdivided)
    SetCellsToBeSubdivided = _swig_new_instance_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_SetCellsToBeSubdivided)
    AddSubdividedEdge = _swig_new_instance_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_AddSubdividedEdge)
    __swig_destroy__ = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2
    cast = _swig_new_static_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_cast)

# Register itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 in _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython:
_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_cast = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_cast

class itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3(itk.itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3):
    r"""Proxy of C++ itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetEdgesToBeSubdivided = _swig_new_instance_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_GetEdgesToBeSubdivided)
    SetCellsToBeSubdivided = _swig_new_instance_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_SetCellsToBeSubdivided)
    AddSubdividedEdge = _swig_new_instance_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_AddSubdividedEdge)
    __swig_destroy__ = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3
    cast = _swig_new_static_method(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_cast)

# Register itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 in _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython:
_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_cast = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def triangle_edge_cell_subdivision_quad_edge_mesh_filter(*args, **kwargs):
    """Procedural interface for TriangleEdgeCellSubdivisionQuadEdgeMeshFilter"""
    import itk
    instance = itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def triangle_edge_cell_subdivision_quad_edge_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter.values()[0]
    else:
        filter_object = itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter

    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ = filter_object.__doc__
    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



