# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.


on:
  push:
    branches:
      - master

name: Zip to S3

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - name: Egging
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
          architecture: 'x64'
      - name: Install dependencies
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Clone aws-glue-libs
        run: git clone --single-branch --branch glue-1.0 https://github.com/awslabs/aws-glue-libs.git && cp -r aws-glue-libs/awsglue mlops/awsglue
      - name: Package
        run: python setup.py bdist_wheel bdist_wheel
      - name: install requirements
        run: pip install -r requirements.txt -t mlops
      - name: Zip Folder
        run:
          zip -r mlops.zip mlops __init__.py
      - name: Upload plain folder
        uses: ItsKarma/aws-cli@v1.70.0
        with:
          args: s3 cp mlops s3://mlops.dev.eu-west-1/sdk/mlops --recursive
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-1'
      - name: S3 CP Zip
        uses: ItsKarma/aws-cli@v1.70.0
        with:
          args: s3 cp /github/workspace/mlops.zip s3://mlops.dev.eu-west-1/sdk/mlops.zip
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-1'
      - name: S3 CP egg
        uses: ItsKarma/aws-cli@v1.70.0
        with:
          args: s3 cp /github/workspace/dist/ s3://mlops.dev.eu-west-1/sdk/ --recursive
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-1'        
        
