#!/usr/bin/python3
__author__ = "David COBAC"
__date__ = 20191219
__revisions__ = [20191230]

import requests
import datetime
import argparse
import json
from html.parser import HTMLParser


def liste_prenom_nom(chaine):
    liste = chaine.split(" ")
    nom = liste[-1]
    return [" ".join(liste[:-1]), nom.upper()]


class motd():
    def __init__(self, jour=None, decalage=0):
        MyHTMLParser.liste_evenements = []
        self.jour = jour
        self.decalage = int(decalage)
        self.sortie_json = {}
        self.j, self.jr, self.js = self._lejour()
        self.page_du_jour = ""
        self._requete()
        self._sortie()

    def _requete(self):
        url_le_jour = f"Day{self.jr}.html"
        site = "http://mathshistory.st-andrews.ac.uk/Day_files/"
        self.page_du_jour = requests.get(site + url_le_jour)
        return self.page_du_jour.status_code

    def _sortie(self):
        parser = MyHTMLParser()
        parser.feed(self.page_du_jour.text)
        self.sortie_json = json.dumps({self.js: parser.liste_evenements})

    def sortie(self):
        return self.sortie_json

    def _lejour(self):
        aujourdhui = datetime.date.today()
        if self.jour is None:
            jour_reference = aujourdhui
        else:
            date = self.jour.split('/')
            date = list(map(int, date))
            annee = aujourdhui.year
            jour_reference = datetime.date(annee, date[1], date[0])
        #
        jour_choisi = jour_reference + datetime.timedelta(days=self.decalage)
        jour_choisi_requete = jour_choisi.strftime("%m%d").lstrip('0')
        jour_choisi_sortie = jour_choisi.strftime("%d/%m")
        return [jour_choisi, jour_choisi_requete, jour_choisi_sortie]


class Evt():
    id = 0

    def __init__(self):
        self.renseignements = {'annee': None,
                               'prenom': None,
                               'nom': None,
                               'type': None}
        self.fourretout = []

    def annee(self, annee):
        self.renseignements['annee'] = int(annee)

    def prenom(self, prenom):
        self.renseignements['prenom'] = prenom

    def nom(self, nom):
        self.renseignements['nom'] = nom

    def nmd(self, t):
        self.renseignements['type'] = t

    def liste(self):
        return self.renseignements


class MyHTMLParser(HTMLParser):
    liste_evenements = []
    evt_actuel = None
    lien = 0
    evenement = 2
    date = False

    def handle_starttag(self, tag, attrs):
        if tag == "font":
            if attrs[0][1] == "green":
                MyHTMLParser.evenement = 1
            elif attrs[0][1] == "purple":
                MyHTMLParser.evenement = 0
            else:
                MyHTMLParser.evenement = 2
            # on n'a pas encore rencontré <p>
            MyHTMLParser.date = False
        if tag == "p":
            MyHTMLParser.date = True
        if tag == "a":
            for a in attrs:
                if a[0] == "onclick":
                    MyHTMLParser.lien = 1

    def handle_endtag(self, tag):
        pass

    def handle_data(self, data):
        data = data.strip()
        # la date est de la forme : "AAAA :"
        data = data.strip(" :")
        if MyHTMLParser.evenement != 2:
            if MyHTMLParser.date and data != "":
                # si None, on a fini l'événement précédent
                if MyHTMLParser.evt_actuel is None:
                    MyHTMLParser.evt_actuel = Evt()
                # détermination du champ à ajouter
                # date ou prenom/nom
                if data.isdigit():
                    MyHTMLParser.evt_actuel.annee(data)
                else:
                    prenom, nom = liste_prenom_nom(data)
                    MyHTMLParser.evt_actuel.prenom(prenom)
                    MyHTMLParser.evt_actuel.nom(nom)
        #
        if MyHTMLParser.lien == 1 and MyHTMLParser.evt_actuel is not None:
            if MyHTMLParser.evenement == 1:
                evt = "naissance"
            else:
                evt = "mort"
            MyHTMLParser.evt_actuel.nmd(evt)
            # fin de l'evt actuel
            MyHTMLParser.liste_evenements.append(
                MyHTMLParser.evt_actuel.liste())
            MyHTMLParser.evt_actuel = None
            MyHTMLParser.lien = 0


if __name__ == "__main__":
    parseur_args = argparse.ArgumentParser(
        description="Mathematicians Of The Day")

    parseur_args.add_argument('-d',
                              '--date',
                              help='JJ/MM')
    parseur_args.add_argument('decalage',
                              nargs='?',
                              default='+0')

    args = parseur_args.parse_args()

    m = motd(args.date, args.decalage)
    dico = json.loads(m.sortie())
    for k in dico:
        # print(k)
        for entree in dico[k]:
            s = str(entree['annee'])
            s += " "
            s += entree['type']
            s += " "
            s += entree['prenom']
            s += " "
            s += entree['nom']
            #
            print(s)

    # aujourdhui = datetime.date.today()
    # if args.date is None:
    #     jour_reference = aujourdhui
    # else:
    #     date = args.date.split('/')
    #     date = list(map(int, date))
    #     annee = aujourdhui.year()
    #     jour_reference = datetime.date(annee, date[1], date[0])

    # jour_choisi = jour_reference + datetime.timedelta(days=int(args.decalage))
    # jour_choisi_requete = jour_choisi.strftime("%m%d").lstrip('0')
    # jour_choisi_sortie = jour_choisi.strftime("%d/%m")

    # url_le_jour = f"Day{jour_choisi_requete}.html"
    # site = "http://mathshistory.st-andrews.ac.uk/Day_files/"
    # page_du_jour = requests.get(site + url_le_jour)

    # parser = MyHTMLParser()
    # parser.feed(page_du_jour.text)

    # print(json.dumps({jour_choisi_sortie: parser.liste_evenements}))
