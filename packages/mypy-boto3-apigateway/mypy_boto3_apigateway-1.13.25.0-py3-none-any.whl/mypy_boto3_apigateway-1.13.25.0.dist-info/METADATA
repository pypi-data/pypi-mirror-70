Metadata-Version: 2.1
Name: mypy-boto3-apigateway
Version: 1.13.25.0
Summary: Type annotations for boto3.APIGateway 1.13.25 service, generated by mypy-boto3-buider 2.0.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 apigateway type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.8"

# mypy-boto3-apigateway

[![PyPI - mypy-boto3-apigateway](https://img.shields.io/pypi/v/mypy-boto3-apigateway.svg?color=blue)](https://pypi.org/project/mypy-boto3-apigateway)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-apigateway.svg?color=blue)](https://pypi.org/project/mypy-boto3-apigateway)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

- [mypy-boto3-apigateway](#mypy-boto3-apigateway)
  - [How to use](#how-to-use)
  - [Automated type discovery](#automated-type-discovery)


Type annotations for
[boto3.APIGateway 1.13.25](https://boto3.amazonaws.com/v1/documentation/api/1.13.25/reference/services/apigateway.html#APIGateway) service
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider 2.0.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.

- [mypy-boto3-apigateway](#mypy-boto3-apigateway)
  - [How to use](#how-to-use)
    - [Type checking](#type-checking)
  - [How it works](#how-it-works)

## How to use

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs` for `APIGateway` service.

```bash
python -m pip install boto3-stubs[apigateway]

# update installed packages index for automated type discovery
python -m mypy_boto3
```

Use `boto3` with `mypy_boto3_apigateway` in your project and enjoy type checking and auto-complete.

```python
import boto3

from mypy_boto3_apigateway import APIGatewayClient

# Now mypy can check if your code is valid.
client: APIGatewayClient = boto3.client("apigateway")

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_client: APIGatewayClient = session.client("apigateway")



# Annotated paginators are included as well

import mypy_boto3_apigateway.paginator as apigateway_paginators

get_api_keys_paginator: apigateway_paginators.GetApiKeysPaginator = client.get_paginator("get_api_keys")
get_authorizers_paginator: apigateway_paginators.GetAuthorizersPaginator = client.get_paginator("get_authorizers")
get_base_path_mappings_paginator: apigateway_paginators.GetBasePathMappingsPaginator = client.get_paginator("get_base_path_mappings")
get_client_certificates_paginator: apigateway_paginators.GetClientCertificatesPaginator = client.get_paginator("get_client_certificates")
get_deployments_paginator: apigateway_paginators.GetDeploymentsPaginator = client.get_paginator("get_deployments")
get_documentation_parts_paginator: apigateway_paginators.GetDocumentationPartsPaginator = client.get_paginator("get_documentation_parts")
get_documentation_versions_paginator: apigateway_paginators.GetDocumentationVersionsPaginator = client.get_paginator("get_documentation_versions")
get_domain_names_paginator: apigateway_paginators.GetDomainNamesPaginator = client.get_paginator("get_domain_names")
get_gateway_responses_paginator: apigateway_paginators.GetGatewayResponsesPaginator = client.get_paginator("get_gateway_responses")
get_models_paginator: apigateway_paginators.GetModelsPaginator = client.get_paginator("get_models")
get_request_validators_paginator: apigateway_paginators.GetRequestValidatorsPaginator = client.get_paginator("get_request_validators")
get_resources_paginator: apigateway_paginators.GetResourcesPaginator = client.get_paginator("get_resources")
get_rest_apis_paginator: apigateway_paginators.GetRestApisPaginator = client.get_paginator("get_rest_apis")
get_sdk_types_paginator: apigateway_paginators.GetSdkTypesPaginator = client.get_paginator("get_sdk_types")
get_usage_paginator: apigateway_paginators.GetUsagePaginator = client.get_paginator("get_usage")
get_usage_plan_keys_paginator: apigateway_paginators.GetUsagePlanKeysPaginator = client.get_paginator("get_usage_plan_keys")
get_usage_plans_paginator: apigateway_paginators.GetUsagePlansPaginator = client.get_paginator("get_usage_plans")
get_vpc_links_paginator: apigateway_paginators.GetVpcLinksPaginator = client.get_paginator("get_vpc_links")
```

## Automated type discovery

`mypy_boto3` package can generate index for `mypy_boto3_apigateway` and other installed services.

```bash
# Run this command when you add or remove service packages
python -m mypy_boto3
```

Generated index provides overloads for `boto3.client` and `boto3.service`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully
- `VSCode` does not currently support function overloads

Also, generated index allows you to import types from `mypy_boto3`:

```python
# you can replace imports
import mypy_boto3_apigateway as apigateway
from mypy_boto3_apigateway import APIGatewayClient

# with these
from mypy_boto3 import apigateway
from mypy_boto3.apigateway import APIGatewayClient
```

