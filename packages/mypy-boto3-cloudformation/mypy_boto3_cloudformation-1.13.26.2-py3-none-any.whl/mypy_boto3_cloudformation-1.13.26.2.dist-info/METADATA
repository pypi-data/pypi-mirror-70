Metadata-Version: 2.1
Name: mypy-boto3-cloudformation
Version: 1.13.26.2
Summary: Type annotations for boto3.CloudFormation 1.13.26 service, generated by mypy-boto3-buider 2.0.4
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 cloudformation type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.8"

# mypy-boto3-cloudformation

[![PyPI - mypy-boto3-cloudformation](https://img.shields.io/pypi/v/mypy-boto3-cloudformation.svg?color=blue)](https://pypi.org/project/mypy-boto3-cloudformation)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-cloudformation.svg?color=blue)](https://pypi.org/project/mypy-boto3-cloudformation)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

- [mypy-boto3-cloudformation](#mypy-boto3-cloudformation)
  - [How to use](#how-to-use)
  - [Automated type discovery](#automated-type-discovery)

Type annotations for
[boto3.CloudFormation 1.13.26](https://boto3.amazonaws.com/v1/documentation/api/1.13.26/reference/services/cloudformation.html#CloudFormation) service
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider 2.0.4](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.

## How to use

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs` for `CloudFormation` service.

```bash
python -m pip install boto3-stubs[cloudformation]
```

Use `boto3` with `mypy_boto3_cloudformation` in your project and enjoy type checking and auto-complete.

```python
import boto3

from mypy_boto3_cloudformation import CloudFormationClient

# Now mypy can check if your code is valid.
client: CloudFormationClient = boto3.client("cloudformation")

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_client: CloudFormationClient = session.client("cloudformation")

# Do you prefer resource approach? We've got you covered!
from mypy_boto3_cloudformation import CloudFormationServiceResource

resource: cloudformation.CloudFormationServiceResource = boto3.resource("cloudformation")


# Waiters are also supported

import mypy_boto3_cloudformation.waiter as cloudformation_waiters

change_set_create_complete_waiter: cloudformation_waiters.ChangeSetCreateCompleteWaiter = client.get_waiter("change_set_create_complete")
stack_create_complete_waiter: cloudformation_waiters.StackCreateCompleteWaiter = client.get_waiter("stack_create_complete")
stack_delete_complete_waiter: cloudformation_waiters.StackDeleteCompleteWaiter = client.get_waiter("stack_delete_complete")
stack_exists_waiter: cloudformation_waiters.StackExistsWaiter = client.get_waiter("stack_exists")
stack_import_complete_waiter: cloudformation_waiters.StackImportCompleteWaiter = client.get_waiter("stack_import_complete")
stack_rollback_complete_waiter: cloudformation_waiters.StackRollbackCompleteWaiter = client.get_waiter("stack_rollback_complete")
stack_update_complete_waiter: cloudformation_waiters.StackUpdateCompleteWaiter = client.get_waiter("stack_update_complete")
type_registration_complete_waiter: cloudformation_waiters.TypeRegistrationCompleteWaiter = client.get_waiter("type_registration_complete")


# Annotated paginators are included as well

import mypy_boto3_cloudformation.paginator as cloudformation_paginators

describe_account_limits_paginator: cloudformation_paginators.DescribeAccountLimitsPaginator = client.get_paginator("describe_account_limits")
describe_change_set_paginator: cloudformation_paginators.DescribeChangeSetPaginator = client.get_paginator("describe_change_set")
describe_stack_events_paginator: cloudformation_paginators.DescribeStackEventsPaginator = client.get_paginator("describe_stack_events")
describe_stacks_paginator: cloudformation_paginators.DescribeStacksPaginator = client.get_paginator("describe_stacks")
list_change_sets_paginator: cloudformation_paginators.ListChangeSetsPaginator = client.get_paginator("list_change_sets")
list_exports_paginator: cloudformation_paginators.ListExportsPaginator = client.get_paginator("list_exports")
list_imports_paginator: cloudformation_paginators.ListImportsPaginator = client.get_paginator("list_imports")
list_stack_instances_paginator: cloudformation_paginators.ListStackInstancesPaginator = client.get_paginator("list_stack_instances")
list_stack_resources_paginator: cloudformation_paginators.ListStackResourcesPaginator = client.get_paginator("list_stack_resources")
list_stack_set_operation_results_paginator: cloudformation_paginators.ListStackSetOperationResultsPaginator = client.get_paginator("list_stack_set_operation_results")
list_stack_set_operations_paginator: cloudformation_paginators.ListStackSetOperationsPaginator = client.get_paginator("list_stack_set_operations")
list_stack_sets_paginator: cloudformation_paginators.ListStackSetsPaginator = client.get_paginator("list_stack_sets")
list_stacks_paginator: cloudformation_paginators.ListStacksPaginator = client.get_paginator("list_stacks")
```

## Dynamic type annotations

`mypy_boto3` command generates `boto3.client/resource` type annotations for
`mypy_boto3_cloudformation` and other installed services.

```bash
# Run this command after you add or remove service packages
python -m mypy_boto3
```

Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
- `VSCode` does not currently support function overloads, use explicit type annotations

```python
import boto3

# Type is discovered correctly by mypy and PyCharm
# VSCode still needs explicit type annotations
client = boto3.client("cloudformation")
resource = boto3.resource("cloudformation")

session_client = boto3.Session().client("cloudformation")
session_resource = boto3.Session().resource("cloudformation")
```

