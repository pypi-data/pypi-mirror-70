Metadata-Version: 2.1
Name: mypy-boto3-devicefarm
Version: 1.13.26.2
Summary: Type annotations for boto3.DeviceFarm 1.13.26 service, generated by mypy-boto3-buider 2.0.4
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 devicefarm type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.8"

# mypy-boto3-devicefarm

[![PyPI - mypy-boto3-devicefarm](https://img.shields.io/pypi/v/mypy-boto3-devicefarm.svg?color=blue)](https://pypi.org/project/mypy-boto3-devicefarm)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-devicefarm.svg?color=blue)](https://pypi.org/project/mypy-boto3-devicefarm)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

- [mypy-boto3-devicefarm](#mypy-boto3-devicefarm)
  - [How to use](#how-to-use)
  - [Automated type discovery](#automated-type-discovery)

Type annotations for
[boto3.DeviceFarm 1.13.26](https://boto3.amazonaws.com/v1/documentation/api/1.13.26/reference/services/devicefarm.html#DeviceFarm) service
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider 2.0.4](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.

## How to use

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs` for `DeviceFarm` service.

```bash
python -m pip install boto3-stubs[devicefarm]
```

Use `boto3` with `mypy_boto3_devicefarm` in your project and enjoy type checking and auto-complete.

```python
import boto3

from mypy_boto3_devicefarm import DeviceFarmClient

# Now mypy can check if your code is valid.
client: DeviceFarmClient = boto3.client("devicefarm")

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_client: DeviceFarmClient = session.client("devicefarm")



# Annotated paginators are included as well

import mypy_boto3_devicefarm.paginator as devicefarm_paginators

get_offering_status_paginator: devicefarm_paginators.GetOfferingStatusPaginator = client.get_paginator("get_offering_status")
list_artifacts_paginator: devicefarm_paginators.ListArtifactsPaginator = client.get_paginator("list_artifacts")
list_device_instances_paginator: devicefarm_paginators.ListDeviceInstancesPaginator = client.get_paginator("list_device_instances")
list_device_pools_paginator: devicefarm_paginators.ListDevicePoolsPaginator = client.get_paginator("list_device_pools")
list_devices_paginator: devicefarm_paginators.ListDevicesPaginator = client.get_paginator("list_devices")
list_instance_profiles_paginator: devicefarm_paginators.ListInstanceProfilesPaginator = client.get_paginator("list_instance_profiles")
list_jobs_paginator: devicefarm_paginators.ListJobsPaginator = client.get_paginator("list_jobs")
list_network_profiles_paginator: devicefarm_paginators.ListNetworkProfilesPaginator = client.get_paginator("list_network_profiles")
list_offering_promotions_paginator: devicefarm_paginators.ListOfferingPromotionsPaginator = client.get_paginator("list_offering_promotions")
list_offering_transactions_paginator: devicefarm_paginators.ListOfferingTransactionsPaginator = client.get_paginator("list_offering_transactions")
list_offerings_paginator: devicefarm_paginators.ListOfferingsPaginator = client.get_paginator("list_offerings")
list_projects_paginator: devicefarm_paginators.ListProjectsPaginator = client.get_paginator("list_projects")
list_remote_access_sessions_paginator: devicefarm_paginators.ListRemoteAccessSessionsPaginator = client.get_paginator("list_remote_access_sessions")
list_runs_paginator: devicefarm_paginators.ListRunsPaginator = client.get_paginator("list_runs")
list_samples_paginator: devicefarm_paginators.ListSamplesPaginator = client.get_paginator("list_samples")
list_suites_paginator: devicefarm_paginators.ListSuitesPaginator = client.get_paginator("list_suites")
list_tests_paginator: devicefarm_paginators.ListTestsPaginator = client.get_paginator("list_tests")
list_unique_problems_paginator: devicefarm_paginators.ListUniqueProblemsPaginator = client.get_paginator("list_unique_problems")
list_uploads_paginator: devicefarm_paginators.ListUploadsPaginator = client.get_paginator("list_uploads")
list_vpce_configurations_paginator: devicefarm_paginators.ListVPCEConfigurationsPaginator = client.get_paginator("list_vpce_configurations")
```

## Dynamic type annotations

`mypy_boto3` command generates `boto3.client/resource` type annotations for
`mypy_boto3_devicefarm` and other installed services.

```bash
# Run this command after you add or remove service packages
python -m mypy_boto3
```

Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
- `VSCode` does not currently support function overloads, use explicit type annotations

```python
import boto3

# Type is discovered correctly by mypy and PyCharm
# VSCode still needs explicit type annotations
client = boto3.client("devicefarm")

session_client = boto3.Session().client("devicefarm")
```

