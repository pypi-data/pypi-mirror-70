Metadata-Version: 2.1
Name: mypy-boto3-glacier
Version: 1.14.0.0
Summary: Type annotations for boto3.Glacier 1.14.0 service, generated by mypy-boto3-buider 2.0.4
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-glacier
        
        [![PyPI - mypy-boto3-glacier](https://img.shields.io/pypi/v/mypy-boto3-glacier.svg?color=blue)](https://pypi.org/project/mypy-boto3-glacier)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-glacier.svg?color=blue)](https://pypi.org/project/mypy-boto3-glacier)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        - [mypy-boto3-glacier](#mypy-boto3-glacier)
          - [How to use](#how-to-use)
          - [Automated type discovery](#automated-type-discovery)
        
        Type annotations for
        [boto3.Glacier 1.14.0](https://boto3.amazonaws.com/v1/documentation/api/1.14.0/reference/services/glacier.html#Glacier) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        Generated by [mypy-boto3-buider 2.0.4](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        ## How to use
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `Glacier` service.
        
        ```bash
        python -m pip install boto3-stubs[glacier]
        ```
        
        Use `boto3` with `mypy_boto3_glacier` in your project and enjoy type checking and auto-complete.
        
        ```python
        import boto3
        
        from mypy_boto3_glacier import GlacierClient
        
        # Now mypy can check if your code is valid.
        client: GlacierClient = boto3.client("glacier")
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: GlacierClient = session.client("glacier")
        
        # Do you prefer resource approach? We've got you covered!
        from mypy_boto3_glacier import GlacierServiceResource
        
        resource: glacier.GlacierServiceResource = boto3.resource("glacier")
        
        
        # Waiters are also supported
        
        import mypy_boto3_glacier.waiter as glacier_waiters
        
        vault_exists_waiter: glacier_waiters.VaultExistsWaiter = client.get_waiter("vault_exists")
        vault_not_exists_waiter: glacier_waiters.VaultNotExistsWaiter = client.get_waiter("vault_not_exists")
        
        
        # Annotated paginators are included as well
        
        import mypy_boto3_glacier.paginator as glacier_paginators
        
        list_jobs_paginator: glacier_paginators.ListJobsPaginator = client.get_paginator("list_jobs")
        list_multipart_uploads_paginator: glacier_paginators.ListMultipartUploadsPaginator = client.get_paginator("list_multipart_uploads")
        list_parts_paginator: glacier_paginators.ListPartsPaginator = client.get_paginator("list_parts")
        list_vaults_paginator: glacier_paginators.ListVaultsPaginator = client.get_paginator("list_vaults")
        ```
        
        ## Dynamic type annotations
        
        `mypy_boto3` command generates `boto3.client/resource` type annotations for
        `mypy_boto3_glacier` and other installed services.
        
        ```bash
        # Run this command after you add or remove service packages
        python -m mypy_boto3
        ```
        
        Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
        `boto3.Session.client` and `boto3.Session.resource` functions,
        so explicit type annotations are not needed.
        
        - `mypy` supports function overloads as expected
        - `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
        - `VSCode` does not currently support function overloads, use explicit type annotations
        
        ```python
        import boto3
        
        # Type is discovered correctly by mypy and PyCharm
        # VSCode still needs explicit type annotations
        client = boto3.client("glacier")
        resource = boto3.resource("glacier")
        
        session_client = boto3.Session().client("glacier")
        session_resource = boto3.Session().resource("glacier")
        ```
Keywords: boto3 glacier type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
