Metadata-Version: 2.1
Name: mypy-boto3-guardduty
Version: 1.13.26.0
Summary: Type annotations for boto3.GuardDuty 1.13.26 service, generated by mypy-boto3-buider 2.0.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-guardduty
        
        [![PyPI - mypy-boto3-guardduty](https://img.shields.io/pypi/v/mypy-boto3-guardduty.svg?color=blue)](https://pypi.org/project/mypy-boto3-guardduty)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-guardduty.svg?color=blue)](https://pypi.org/project/mypy-boto3-guardduty)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        - [mypy-boto3-guardduty](#mypy-boto3-guardduty)
          - [How to use](#how-to-use)
          - [Automated type discovery](#automated-type-discovery)
        
        
        Type annotations for
        [boto3.GuardDuty 1.13.26](https://boto3.amazonaws.com/v1/documentation/api/1.13.26/reference/services/guardduty.html#GuardDuty) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        Generated by [mypy-boto3-buider 2.0.2](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        - [mypy-boto3-guardduty](#mypy-boto3-guardduty)
          - [How to use](#how-to-use)
            - [Type checking](#type-checking)
          - [How it works](#how-it-works)
        
        ## How to use
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `GuardDuty` service.
        
        ```bash
        python -m pip install boto3-stubs[guardduty]
        
        # update installed packages index for automated type discovery
        python -m mypy_boto3
        ```
        
        Use `boto3` with `mypy_boto3_guardduty` in your project and enjoy type checking and auto-complete.
        
        ```python
        import boto3
        
        from mypy_boto3_guardduty import GuardDutyClient
        
        # Now mypy can check if your code is valid.
        client: GuardDutyClient = boto3.client("guardduty")
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: GuardDutyClient = session.client("guardduty")
        
        
        
        # Annotated paginators are included as well
        
        import mypy_boto3_guardduty.paginator as guardduty_paginators
        
        list_detectors_paginator: guardduty_paginators.ListDetectorsPaginator = client.get_paginator("list_detectors")
        list_filters_paginator: guardduty_paginators.ListFiltersPaginator = client.get_paginator("list_filters")
        list_findings_paginator: guardduty_paginators.ListFindingsPaginator = client.get_paginator("list_findings")
        list_ip_sets_paginator: guardduty_paginators.ListIPSetsPaginator = client.get_paginator("list_ip_sets")
        list_invitations_paginator: guardduty_paginators.ListInvitationsPaginator = client.get_paginator("list_invitations")
        list_members_paginator: guardduty_paginators.ListMembersPaginator = client.get_paginator("list_members")
        list_organization_admin_accounts_paginator: guardduty_paginators.ListOrganizationAdminAccountsPaginator = client.get_paginator("list_organization_admin_accounts")
        list_threat_intel_sets_paginator: guardduty_paginators.ListThreatIntelSetsPaginator = client.get_paginator("list_threat_intel_sets")
        ```
        
        ## Automated type discovery
        
        `mypy_boto3` package can generate index for `mypy_boto3_guardduty` and other installed services.
        
        ```bash
        # Run this command when you add or remove service packages
        python -m mypy_boto3
        ```
        
        Generated index provides overloads for `boto3.client` and `boto3.service`,
        `boto3.Session.client` and `boto3.Session.resource` functions,
        so explicit type annotations are not needed.
        
        - `mypy` supports function overloads as expected
        - `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully
        - `VSCode` does not currently support function overloads
        
        Also, generated index allows you to import types from `mypy_boto3`:
        
        ```python
        # you can replace imports
        import mypy_boto3_guardduty as guardduty
        from mypy_boto3_guardduty import GuardDutyClient
        
        # with these
        from mypy_boto3 import guardduty
        from mypy_boto3.guardduty import GuardDutyClient
        ```
Keywords: boto3 guardduty type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
