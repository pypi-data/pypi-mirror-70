Metadata-Version: 2.1
Name: mypy-boto3-iam
Version: 1.13.25.0
Summary: Type annotations for boto3.IAM 1.13.25 service, generated by mypy-boto3-buider 2.0.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 iam type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.8"

# mypy-boto3-iam

[![PyPI - mypy-boto3-iam](https://img.shields.io/pypi/v/mypy-boto3-iam.svg?color=blue)](https://pypi.org/project/mypy-boto3-iam)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-iam.svg?color=blue)](https://pypi.org/project/mypy-boto3-iam)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

- [mypy-boto3-iam](#mypy-boto3-iam)
  - [How to use](#how-to-use)
  - [Automated type discovery](#automated-type-discovery)


Type annotations for
[boto3.IAM 1.13.25](https://boto3.amazonaws.com/v1/documentation/api/1.13.25/reference/services/iam.html#IAM) service
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider 2.0.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.

- [mypy-boto3-iam](#mypy-boto3-iam)
  - [How to use](#how-to-use)
    - [Type checking](#type-checking)
  - [How it works](#how-it-works)

## How to use

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs` for `IAM` service.

```bash
python -m pip install boto3-stubs[iam]

# update installed packages index for automated type discovery
python -m mypy_boto3
```

Use `boto3` with `mypy_boto3_iam` in your project and enjoy type checking and auto-complete.

```python
import boto3

from mypy_boto3_iam import IAMClient

# Now mypy can check if your code is valid.
client: IAMClient = boto3.client("iam")

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_client: IAMClient = session.client("iam")

# Do you prefer resource approach? We've got you covered!
from mypy_boto3_iam import IAMServiceResource

resource: iam.IAMServiceResource = boto3.resource("iam")


# Waiters are also supported

import mypy_boto3_iam.waiter as iam_waiters

instance_profile_exists_waiter: iam_waiters.InstanceProfileExistsWaiter = client.get_waiter("instance_profile_exists")
policy_exists_waiter: iam_waiters.PolicyExistsWaiter = client.get_waiter("policy_exists")
role_exists_waiter: iam_waiters.RoleExistsWaiter = client.get_waiter("role_exists")
user_exists_waiter: iam_waiters.UserExistsWaiter = client.get_waiter("user_exists")


# Annotated paginators are included as well

import mypy_boto3_iam.paginator as iam_paginators

get_account_authorization_details_paginator: iam_paginators.GetAccountAuthorizationDetailsPaginator = client.get_paginator("get_account_authorization_details")
get_group_paginator: iam_paginators.GetGroupPaginator = client.get_paginator("get_group")
list_access_keys_paginator: iam_paginators.ListAccessKeysPaginator = client.get_paginator("list_access_keys")
list_account_aliases_paginator: iam_paginators.ListAccountAliasesPaginator = client.get_paginator("list_account_aliases")
list_attached_group_policies_paginator: iam_paginators.ListAttachedGroupPoliciesPaginator = client.get_paginator("list_attached_group_policies")
list_attached_role_policies_paginator: iam_paginators.ListAttachedRolePoliciesPaginator = client.get_paginator("list_attached_role_policies")
list_attached_user_policies_paginator: iam_paginators.ListAttachedUserPoliciesPaginator = client.get_paginator("list_attached_user_policies")
list_entities_for_policy_paginator: iam_paginators.ListEntitiesForPolicyPaginator = client.get_paginator("list_entities_for_policy")
list_group_policies_paginator: iam_paginators.ListGroupPoliciesPaginator = client.get_paginator("list_group_policies")
list_groups_paginator: iam_paginators.ListGroupsPaginator = client.get_paginator("list_groups")
list_groups_for_user_paginator: iam_paginators.ListGroupsForUserPaginator = client.get_paginator("list_groups_for_user")
list_instance_profiles_paginator: iam_paginators.ListInstanceProfilesPaginator = client.get_paginator("list_instance_profiles")
list_instance_profiles_for_role_paginator: iam_paginators.ListInstanceProfilesForRolePaginator = client.get_paginator("list_instance_profiles_for_role")
list_mfa_devices_paginator: iam_paginators.ListMFADevicesPaginator = client.get_paginator("list_mfa_devices")
list_policies_paginator: iam_paginators.ListPoliciesPaginator = client.get_paginator("list_policies")
list_policy_versions_paginator: iam_paginators.ListPolicyVersionsPaginator = client.get_paginator("list_policy_versions")
list_role_policies_paginator: iam_paginators.ListRolePoliciesPaginator = client.get_paginator("list_role_policies")
list_roles_paginator: iam_paginators.ListRolesPaginator = client.get_paginator("list_roles")
list_ssh_public_keys_paginator: iam_paginators.ListSSHPublicKeysPaginator = client.get_paginator("list_ssh_public_keys")
list_server_certificates_paginator: iam_paginators.ListServerCertificatesPaginator = client.get_paginator("list_server_certificates")
list_signing_certificates_paginator: iam_paginators.ListSigningCertificatesPaginator = client.get_paginator("list_signing_certificates")
list_user_policies_paginator: iam_paginators.ListUserPoliciesPaginator = client.get_paginator("list_user_policies")
list_users_paginator: iam_paginators.ListUsersPaginator = client.get_paginator("list_users")
list_virtual_mfa_devices_paginator: iam_paginators.ListVirtualMFADevicesPaginator = client.get_paginator("list_virtual_mfa_devices")
simulate_custom_policy_paginator: iam_paginators.SimulateCustomPolicyPaginator = client.get_paginator("simulate_custom_policy")
simulate_principal_policy_paginator: iam_paginators.SimulatePrincipalPolicyPaginator = client.get_paginator("simulate_principal_policy")
```

## Automated type discovery

`mypy_boto3` package can generate index for `mypy_boto3_iam` and other installed services.

```bash
# Run this command when you add or remove service packages
python -m mypy_boto3
```

Generated index provides overloads for `boto3.client` and `boto3.service`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully
- `VSCode` does not currently support function overloads

Also, generated index allows you to import types from `mypy_boto3`:

```python
# you can replace imports
import mypy_boto3_iam as iam
from mypy_boto3_iam import IAMClient

# with these
from mypy_boto3 import iam
from mypy_boto3.iam import IAMClient
```

