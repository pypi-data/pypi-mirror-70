Metadata-Version: 2.1
Name: mypy-boto3-iotsitewise
Version: 1.13.26.2
Summary: Type annotations for boto3.IoTSiteWise 1.13.26 service, generated by mypy-boto3-buider 2.0.4
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-iotsitewise
        
        [![PyPI - mypy-boto3-iotsitewise](https://img.shields.io/pypi/v/mypy-boto3-iotsitewise.svg?color=blue)](https://pypi.org/project/mypy-boto3-iotsitewise)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-iotsitewise.svg?color=blue)](https://pypi.org/project/mypy-boto3-iotsitewise)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        - [mypy-boto3-iotsitewise](#mypy-boto3-iotsitewise)
          - [How to use](#how-to-use)
          - [Automated type discovery](#automated-type-discovery)
        
        Type annotations for
        [boto3.IoTSiteWise 1.13.26](https://boto3.amazonaws.com/v1/documentation/api/1.13.26/reference/services/iotsitewise.html#IoTSiteWise) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        Generated by [mypy-boto3-buider 2.0.4](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        ## How to use
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `IoTSiteWise` service.
        
        ```bash
        python -m pip install boto3-stubs[iotsitewise]
        ```
        
        Use `boto3` with `mypy_boto3_iotsitewise` in your project and enjoy type checking and auto-complete.
        
        ```python
        import boto3
        
        from mypy_boto3_iotsitewise import IoTSiteWiseClient
        
        # Now mypy can check if your code is valid.
        client: IoTSiteWiseClient = boto3.client("iotsitewise")
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: IoTSiteWiseClient = session.client("iotsitewise")
        
        
        
        # Waiters are also supported
        
        import mypy_boto3_iotsitewise.waiter as iotsitewise_waiters
        
        asset_active_waiter: iotsitewise_waiters.AssetActiveWaiter = client.get_waiter("asset_active")
        asset_model_active_waiter: iotsitewise_waiters.AssetModelActiveWaiter = client.get_waiter("asset_model_active")
        asset_model_not_exists_waiter: iotsitewise_waiters.AssetModelNotExistsWaiter = client.get_waiter("asset_model_not_exists")
        asset_not_exists_waiter: iotsitewise_waiters.AssetNotExistsWaiter = client.get_waiter("asset_not_exists")
        portal_active_waiter: iotsitewise_waiters.PortalActiveWaiter = client.get_waiter("portal_active")
        portal_not_exists_waiter: iotsitewise_waiters.PortalNotExistsWaiter = client.get_waiter("portal_not_exists")
        
        
        # Annotated paginators are included as well
        
        import mypy_boto3_iotsitewise.paginator as iotsitewise_paginators
        
        get_asset_property_aggregates_paginator: iotsitewise_paginators.GetAssetPropertyAggregatesPaginator = client.get_paginator("get_asset_property_aggregates")
        get_asset_property_value_history_paginator: iotsitewise_paginators.GetAssetPropertyValueHistoryPaginator = client.get_paginator("get_asset_property_value_history")
        list_access_policies_paginator: iotsitewise_paginators.ListAccessPoliciesPaginator = client.get_paginator("list_access_policies")
        list_asset_models_paginator: iotsitewise_paginators.ListAssetModelsPaginator = client.get_paginator("list_asset_models")
        list_assets_paginator: iotsitewise_paginators.ListAssetsPaginator = client.get_paginator("list_assets")
        list_associated_assets_paginator: iotsitewise_paginators.ListAssociatedAssetsPaginator = client.get_paginator("list_associated_assets")
        list_dashboards_paginator: iotsitewise_paginators.ListDashboardsPaginator = client.get_paginator("list_dashboards")
        list_gateways_paginator: iotsitewise_paginators.ListGatewaysPaginator = client.get_paginator("list_gateways")
        list_portals_paginator: iotsitewise_paginators.ListPortalsPaginator = client.get_paginator("list_portals")
        list_project_assets_paginator: iotsitewise_paginators.ListProjectAssetsPaginator = client.get_paginator("list_project_assets")
        list_projects_paginator: iotsitewise_paginators.ListProjectsPaginator = client.get_paginator("list_projects")
        ```
        
        ## Dynamic type annotations
        
        `mypy_boto3` command generates `boto3.client/resource` type annotations for
        `mypy_boto3_iotsitewise` and other installed services.
        
        ```bash
        # Run this command after you add or remove service packages
        python -m mypy_boto3
        ```
        
        Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
        `boto3.Session.client` and `boto3.Session.resource` functions,
        so explicit type annotations are not needed.
        
        - `mypy` supports function overloads as expected
        - `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
        - `VSCode` does not currently support function overloads, use explicit type annotations
        
        ```python
        import boto3
        
        # Type is discovered correctly by mypy and PyCharm
        # VSCode still needs explicit type annotations
        client = boto3.client("iotsitewise")
        
        session_client = boto3.Session().client("iotsitewise")
        ```
Keywords: boto3 iotsitewise type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
