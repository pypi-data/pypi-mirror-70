Metadata-Version: 2.1
Name: mypy-boto3-medialive
Version: 1.13.26.2
Summary: Type annotations for boto3.MediaLive 1.13.26 service, generated by mypy-boto3-buider 2.0.4
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 medialive type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.8"

# mypy-boto3-medialive

[![PyPI - mypy-boto3-medialive](https://img.shields.io/pypi/v/mypy-boto3-medialive.svg?color=blue)](https://pypi.org/project/mypy-boto3-medialive)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-medialive.svg?color=blue)](https://pypi.org/project/mypy-boto3-medialive)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

- [mypy-boto3-medialive](#mypy-boto3-medialive)
  - [How to use](#how-to-use)
  - [Automated type discovery](#automated-type-discovery)

Type annotations for
[boto3.MediaLive 1.13.26](https://boto3.amazonaws.com/v1/documentation/api/1.13.26/reference/services/medialive.html#MediaLive) service
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider 2.0.4](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.

## How to use

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs` for `MediaLive` service.

```bash
python -m pip install boto3-stubs[medialive]
```

Use `boto3` with `mypy_boto3_medialive` in your project and enjoy type checking and auto-complete.

```python
import boto3

from mypy_boto3_medialive import MediaLiveClient

# Now mypy can check if your code is valid.
client: MediaLiveClient = boto3.client("medialive")

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_client: MediaLiveClient = session.client("medialive")



# Waiters are also supported

import mypy_boto3_medialive.waiter as medialive_waiters

channel_created_waiter: medialive_waiters.ChannelCreatedWaiter = client.get_waiter("channel_created")
channel_deleted_waiter: medialive_waiters.ChannelDeletedWaiter = client.get_waiter("channel_deleted")
channel_running_waiter: medialive_waiters.ChannelRunningWaiter = client.get_waiter("channel_running")
channel_stopped_waiter: medialive_waiters.ChannelStoppedWaiter = client.get_waiter("channel_stopped")
input_attached_waiter: medialive_waiters.InputAttachedWaiter = client.get_waiter("input_attached")
input_deleted_waiter: medialive_waiters.InputDeletedWaiter = client.get_waiter("input_deleted")
input_detached_waiter: medialive_waiters.InputDetachedWaiter = client.get_waiter("input_detached")
multiplex_created_waiter: medialive_waiters.MultiplexCreatedWaiter = client.get_waiter("multiplex_created")
multiplex_deleted_waiter: medialive_waiters.MultiplexDeletedWaiter = client.get_waiter("multiplex_deleted")
multiplex_running_waiter: medialive_waiters.MultiplexRunningWaiter = client.get_waiter("multiplex_running")
multiplex_stopped_waiter: medialive_waiters.MultiplexStoppedWaiter = client.get_waiter("multiplex_stopped")


# Annotated paginators are included as well

import mypy_boto3_medialive.paginator as medialive_paginators

describe_schedule_paginator: medialive_paginators.DescribeSchedulePaginator = client.get_paginator("describe_schedule")
list_channels_paginator: medialive_paginators.ListChannelsPaginator = client.get_paginator("list_channels")
list_input_devices_paginator: medialive_paginators.ListInputDevicesPaginator = client.get_paginator("list_input_devices")
list_input_security_groups_paginator: medialive_paginators.ListInputSecurityGroupsPaginator = client.get_paginator("list_input_security_groups")
list_inputs_paginator: medialive_paginators.ListInputsPaginator = client.get_paginator("list_inputs")
list_multiplex_programs_paginator: medialive_paginators.ListMultiplexProgramsPaginator = client.get_paginator("list_multiplex_programs")
list_multiplexes_paginator: medialive_paginators.ListMultiplexesPaginator = client.get_paginator("list_multiplexes")
list_offerings_paginator: medialive_paginators.ListOfferingsPaginator = client.get_paginator("list_offerings")
list_reservations_paginator: medialive_paginators.ListReservationsPaginator = client.get_paginator("list_reservations")
```

## Dynamic type annotations

`mypy_boto3` command generates `boto3.client/resource` type annotations for
`mypy_boto3_medialive` and other installed services.

```bash
# Run this command after you add or remove service packages
python -m mypy_boto3
```

Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
- `VSCode` does not currently support function overloads, use explicit type annotations

```python
import boto3

# Type is discovered correctly by mypy and PyCharm
# VSCode still needs explicit type annotations
client = boto3.client("medialive")

session_client = boto3.Session().client("medialive")
```

