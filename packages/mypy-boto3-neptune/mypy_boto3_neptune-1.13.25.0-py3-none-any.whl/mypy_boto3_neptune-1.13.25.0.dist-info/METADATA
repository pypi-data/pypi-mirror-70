Metadata-Version: 2.1
Name: mypy-boto3-neptune
Version: 1.13.25.0
Summary: Type annotations for boto3.Neptune 1.13.25 service, generated by mypy-boto3-buider 2.0.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Keywords: boto3 neptune type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions ; python_version < "3.8"

# mypy-boto3-neptune

[![PyPI - mypy-boto3-neptune](https://img.shields.io/pypi/v/mypy-boto3-neptune.svg?color=blue)](https://pypi.org/project/mypy-boto3-neptune)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-neptune.svg?color=blue)](https://pypi.org/project/mypy-boto3-neptune)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)

- [mypy-boto3-neptune](#mypy-boto3-neptune)
  - [How to use](#how-to-use)
  - [Automated type discovery](#automated-type-discovery)


Type annotations for
[boto3.Neptune 1.13.25](https://boto3.amazonaws.com/v1/documentation/api/1.13.25/reference/services/neptune.html#Neptune) service
compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/) and other tools.

Generated by [mypy-boto3-buider 2.0.2](https://github.com/vemel/mypy_boto3_builder).

More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.

- [mypy-boto3-neptune](#mypy-boto3-neptune)
  - [How to use](#how-to-use)
    - [Type checking](#type-checking)
  - [How it works](#how-it-works)

## How to use

Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.

Install `boto3-stubs` for `Neptune` service.

```bash
python -m pip install boto3-stubs[neptune]

# update installed packages index for automated type discovery
python -m mypy_boto3
```

Use `boto3` with `mypy_boto3_neptune` in your project and enjoy type checking and auto-complete.

```python
import boto3

from mypy_boto3_neptune import NeptuneClient

# Now mypy can check if your code is valid.
client: NeptuneClient = boto3.client("neptune")

# works for session as well
session = boto3.session.Session(region="us-west-1")
session_client: NeptuneClient = session.client("neptune")



# Waiters are also supported

import mypy_boto3_neptune.waiter as neptune_waiters

db_instance_available_waiter: neptune_waiters.DBInstanceAvailableWaiter = client.get_waiter("db_instance_available")
db_instance_deleted_waiter: neptune_waiters.DBInstanceDeletedWaiter = client.get_waiter("db_instance_deleted")


# Annotated paginators are included as well

import mypy_boto3_neptune.paginator as neptune_paginators

describe_db_cluster_parameter_groups_paginator: neptune_paginators.DescribeDBClusterParameterGroupsPaginator = client.get_paginator("describe_db_cluster_parameter_groups")
describe_db_cluster_parameters_paginator: neptune_paginators.DescribeDBClusterParametersPaginator = client.get_paginator("describe_db_cluster_parameters")
describe_db_cluster_snapshots_paginator: neptune_paginators.DescribeDBClusterSnapshotsPaginator = client.get_paginator("describe_db_cluster_snapshots")
describe_db_clusters_paginator: neptune_paginators.DescribeDBClustersPaginator = client.get_paginator("describe_db_clusters")
describe_db_engine_versions_paginator: neptune_paginators.DescribeDBEngineVersionsPaginator = client.get_paginator("describe_db_engine_versions")
describe_db_instances_paginator: neptune_paginators.DescribeDBInstancesPaginator = client.get_paginator("describe_db_instances")
describe_db_parameter_groups_paginator: neptune_paginators.DescribeDBParameterGroupsPaginator = client.get_paginator("describe_db_parameter_groups")
describe_db_parameters_paginator: neptune_paginators.DescribeDBParametersPaginator = client.get_paginator("describe_db_parameters")
describe_db_subnet_groups_paginator: neptune_paginators.DescribeDBSubnetGroupsPaginator = client.get_paginator("describe_db_subnet_groups")
describe_engine_default_parameters_paginator: neptune_paginators.DescribeEngineDefaultParametersPaginator = client.get_paginator("describe_engine_default_parameters")
describe_event_subscriptions_paginator: neptune_paginators.DescribeEventSubscriptionsPaginator = client.get_paginator("describe_event_subscriptions")
describe_events_paginator: neptune_paginators.DescribeEventsPaginator = client.get_paginator("describe_events")
describe_orderable_db_instance_options_paginator: neptune_paginators.DescribeOrderableDBInstanceOptionsPaginator = client.get_paginator("describe_orderable_db_instance_options")
describe_pending_maintenance_actions_paginator: neptune_paginators.DescribePendingMaintenanceActionsPaginator = client.get_paginator("describe_pending_maintenance_actions")
```

## Automated type discovery

`mypy_boto3` package can generate index for `mypy_boto3_neptune` and other installed services.

```bash
# Run this command when you add or remove service packages
python -m mypy_boto3
```

Generated index provides overloads for `boto3.client` and `boto3.service`,
`boto3.Session.client` and `boto3.Session.resource` functions,
so explicit type annotations are not needed.

- `mypy` supports function overloads as expected
- `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully
- `VSCode` does not currently support function overloads

Also, generated index allows you to import types from `mypy_boto3`:

```python
# you can replace imports
import mypy_boto3_neptune as neptune
from mypy_boto3_neptune import NeptuneClient

# with these
from mypy_boto3 import neptune
from mypy_boto3.neptune import NeptuneClient
```

