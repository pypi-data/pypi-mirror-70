Metadata-Version: 2.1
Name: mypy-boto3-sagemaker
Version: 1.13.25.0
Summary: Type annotations for boto3.SageMaker 1.13.25 service, generated by mypy-boto3-buider 2.0.2
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-sagemaker
        
        [![PyPI - mypy-boto3-sagemaker](https://img.shields.io/pypi/v/mypy-boto3-sagemaker.svg?color=blue)](https://pypi.org/project/mypy-boto3-sagemaker)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-sagemaker.svg?color=blue)](https://pypi.org/project/mypy-boto3-sagemaker)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        - [mypy-boto3-sagemaker](#mypy-boto3-sagemaker)
          - [How to use](#how-to-use)
          - [Automated type discovery](#automated-type-discovery)
        
        
        Type annotations for
        [boto3.SageMaker 1.13.25](https://boto3.amazonaws.com/v1/documentation/api/1.13.25/reference/services/sagemaker.html#SageMaker) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        Generated by [mypy-boto3-buider 2.0.2](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        - [mypy-boto3-sagemaker](#mypy-boto3-sagemaker)
          - [How to use](#how-to-use)
            - [Type checking](#type-checking)
          - [How it works](#how-it-works)
        
        ## How to use
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `SageMaker` service.
        
        ```bash
        python -m pip install boto3-stubs[sagemaker]
        
        # update installed packages index for automated type discovery
        python -m mypy_boto3
        ```
        
        Use `boto3` with `mypy_boto3_sagemaker` in your project and enjoy type checking and auto-complete.
        
        ```python
        import boto3
        
        from mypy_boto3_sagemaker import SageMakerClient
        
        # Now mypy can check if your code is valid.
        client: SageMakerClient = boto3.client("sagemaker")
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: SageMakerClient = session.client("sagemaker")
        
        
        
        # Waiters are also supported
        
        import mypy_boto3_sagemaker.waiter as sagemaker_waiters
        
        endpoint_deleted_waiter: sagemaker_waiters.EndpointDeletedWaiter = client.get_waiter("endpoint_deleted")
        endpoint_in_service_waiter: sagemaker_waiters.EndpointInServiceWaiter = client.get_waiter("endpoint_in_service")
        notebook_instance_deleted_waiter: sagemaker_waiters.NotebookInstanceDeletedWaiter = client.get_waiter("notebook_instance_deleted")
        notebook_instance_in_service_waiter: sagemaker_waiters.NotebookInstanceInServiceWaiter = client.get_waiter("notebook_instance_in_service")
        notebook_instance_stopped_waiter: sagemaker_waiters.NotebookInstanceStoppedWaiter = client.get_waiter("notebook_instance_stopped")
        processing_job_completed_or_stopped_waiter: sagemaker_waiters.ProcessingJobCompletedOrStoppedWaiter = client.get_waiter("processing_job_completed_or_stopped")
        training_job_completed_or_stopped_waiter: sagemaker_waiters.TrainingJobCompletedOrStoppedWaiter = client.get_waiter("training_job_completed_or_stopped")
        transform_job_completed_or_stopped_waiter: sagemaker_waiters.TransformJobCompletedOrStoppedWaiter = client.get_waiter("transform_job_completed_or_stopped")
        
        
        # Annotated paginators are included as well
        
        import mypy_boto3_sagemaker.paginator as sagemaker_paginators
        
        list_algorithms_paginator: sagemaker_paginators.ListAlgorithmsPaginator = client.get_paginator("list_algorithms")
        list_apps_paginator: sagemaker_paginators.ListAppsPaginator = client.get_paginator("list_apps")
        list_auto_ml_jobs_paginator: sagemaker_paginators.ListAutoMLJobsPaginator = client.get_paginator("list_auto_ml_jobs")
        list_candidates_for_auto_ml_job_paginator: sagemaker_paginators.ListCandidatesForAutoMLJobPaginator = client.get_paginator("list_candidates_for_auto_ml_job")
        list_code_repositories_paginator: sagemaker_paginators.ListCodeRepositoriesPaginator = client.get_paginator("list_code_repositories")
        list_compilation_jobs_paginator: sagemaker_paginators.ListCompilationJobsPaginator = client.get_paginator("list_compilation_jobs")
        list_domains_paginator: sagemaker_paginators.ListDomainsPaginator = client.get_paginator("list_domains")
        list_endpoint_configs_paginator: sagemaker_paginators.ListEndpointConfigsPaginator = client.get_paginator("list_endpoint_configs")
        list_endpoints_paginator: sagemaker_paginators.ListEndpointsPaginator = client.get_paginator("list_endpoints")
        list_experiments_paginator: sagemaker_paginators.ListExperimentsPaginator = client.get_paginator("list_experiments")
        list_flow_definitions_paginator: sagemaker_paginators.ListFlowDefinitionsPaginator = client.get_paginator("list_flow_definitions")
        list_human_task_uis_paginator: sagemaker_paginators.ListHumanTaskUisPaginator = client.get_paginator("list_human_task_uis")
        list_hyper_parameter_tuning_jobs_paginator: sagemaker_paginators.ListHyperParameterTuningJobsPaginator = client.get_paginator("list_hyper_parameter_tuning_jobs")
        list_labeling_jobs_paginator: sagemaker_paginators.ListLabelingJobsPaginator = client.get_paginator("list_labeling_jobs")
        list_labeling_jobs_for_workteam_paginator: sagemaker_paginators.ListLabelingJobsForWorkteamPaginator = client.get_paginator("list_labeling_jobs_for_workteam")
        list_model_packages_paginator: sagemaker_paginators.ListModelPackagesPaginator = client.get_paginator("list_model_packages")
        list_models_paginator: sagemaker_paginators.ListModelsPaginator = client.get_paginator("list_models")
        list_monitoring_executions_paginator: sagemaker_paginators.ListMonitoringExecutionsPaginator = client.get_paginator("list_monitoring_executions")
        list_monitoring_schedules_paginator: sagemaker_paginators.ListMonitoringSchedulesPaginator = client.get_paginator("list_monitoring_schedules")
        list_notebook_instance_lifecycle_configs_paginator: sagemaker_paginators.ListNotebookInstanceLifecycleConfigsPaginator = client.get_paginator("list_notebook_instance_lifecycle_configs")
        list_notebook_instances_paginator: sagemaker_paginators.ListNotebookInstancesPaginator = client.get_paginator("list_notebook_instances")
        list_processing_jobs_paginator: sagemaker_paginators.ListProcessingJobsPaginator = client.get_paginator("list_processing_jobs")
        list_subscribed_workteams_paginator: sagemaker_paginators.ListSubscribedWorkteamsPaginator = client.get_paginator("list_subscribed_workteams")
        list_tags_paginator: sagemaker_paginators.ListTagsPaginator = client.get_paginator("list_tags")
        list_training_jobs_paginator: sagemaker_paginators.ListTrainingJobsPaginator = client.get_paginator("list_training_jobs")
        list_training_jobs_for_hyper_parameter_tuning_job_paginator: sagemaker_paginators.ListTrainingJobsForHyperParameterTuningJobPaginator = client.get_paginator("list_training_jobs_for_hyper_parameter_tuning_job")
        list_transform_jobs_paginator: sagemaker_paginators.ListTransformJobsPaginator = client.get_paginator("list_transform_jobs")
        list_trial_components_paginator: sagemaker_paginators.ListTrialComponentsPaginator = client.get_paginator("list_trial_components")
        list_trials_paginator: sagemaker_paginators.ListTrialsPaginator = client.get_paginator("list_trials")
        list_user_profiles_paginator: sagemaker_paginators.ListUserProfilesPaginator = client.get_paginator("list_user_profiles")
        list_workteams_paginator: sagemaker_paginators.ListWorkteamsPaginator = client.get_paginator("list_workteams")
        search_paginator: sagemaker_paginators.SearchPaginator = client.get_paginator("search")
        ```
        
        ## Automated type discovery
        
        `mypy_boto3` package can generate index for `mypy_boto3_sagemaker` and other installed services.
        
        ```bash
        # Run this command when you add or remove service packages
        python -m mypy_boto3
        ```
        
        Generated index provides overloads for `boto3.client` and `boto3.service`,
        `boto3.Session.client` and `boto3.Session.resource` functions,
        so explicit type annotations are not needed.
        
        - `mypy` supports function overloads as expected
        - `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully
        - `VSCode` does not currently support function overloads
        
        Also, generated index allows you to import types from `mypy_boto3`:
        
        ```python
        # you can replace imports
        import mypy_boto3_sagemaker as sagemaker
        from mypy_boto3_sagemaker import SageMakerClient
        
        # with these
        from mypy_boto3 import sagemaker
        from mypy_boto3.sagemaker import SageMakerClient
        ```
Keywords: boto3 sagemaker type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
