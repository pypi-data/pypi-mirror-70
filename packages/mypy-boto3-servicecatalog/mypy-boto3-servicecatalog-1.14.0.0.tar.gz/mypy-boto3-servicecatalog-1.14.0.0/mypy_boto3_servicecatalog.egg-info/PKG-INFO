Metadata-Version: 2.1
Name: mypy-boto3-servicecatalog
Version: 1.14.0.0
Summary: Type annotations for boto3.ServiceCatalog 1.14.0 service, generated by mypy-boto3-buider 2.0.4
Home-page: https://github.com/vemel/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3_builder
Project-URL: Tracker, https://github.com/vemel/mypy_boto3_builder/issues
Description: # mypy-boto3-servicecatalog
        
        [![PyPI - mypy-boto3-servicecatalog](https://img.shields.io/pypi/v/mypy-boto3-servicecatalog.svg?color=blue)](https://pypi.org/project/mypy-boto3-servicecatalog)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3-servicecatalog.svg?color=blue)](https://pypi.org/project/mypy-boto3-servicecatalog)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
        
        - [mypy-boto3-servicecatalog](#mypy-boto3-servicecatalog)
          - [How to use](#how-to-use)
          - [Automated type discovery](#automated-type-discovery)
        
        Type annotations for
        [boto3.ServiceCatalog 1.14.0](https://boto3.amazonaws.com/v1/documentation/api/1.14.0/reference/services/servicecatalog.html#ServiceCatalog) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        Generated by [mypy-boto3-buider 2.0.4](https://github.com/vemel/mypy_boto3_builder).
        
        More information can be found on [boto3-stubs](https://pypi.org/project/boto3-stubs/) page.
        
        ## How to use
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `ServiceCatalog` service.
        
        ```bash
        python -m pip install boto3-stubs[servicecatalog]
        ```
        
        Use `boto3` with `mypy_boto3_servicecatalog` in your project and enjoy type checking and auto-complete.
        
        ```python
        import boto3
        
        from mypy_boto3_servicecatalog import ServiceCatalogClient
        
        # Now mypy can check if your code is valid.
        client: ServiceCatalogClient = boto3.client("servicecatalog")
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: ServiceCatalogClient = session.client("servicecatalog")
        
        
        
        # Annotated paginators are included as well
        
        import mypy_boto3_servicecatalog.paginator as servicecatalog_paginators
        
        list_accepted_portfolio_shares_paginator: servicecatalog_paginators.ListAcceptedPortfolioSharesPaginator = client.get_paginator("list_accepted_portfolio_shares")
        list_constraints_for_portfolio_paginator: servicecatalog_paginators.ListConstraintsForPortfolioPaginator = client.get_paginator("list_constraints_for_portfolio")
        list_launch_paths_paginator: servicecatalog_paginators.ListLaunchPathsPaginator = client.get_paginator("list_launch_paths")
        list_organization_portfolio_access_paginator: servicecatalog_paginators.ListOrganizationPortfolioAccessPaginator = client.get_paginator("list_organization_portfolio_access")
        list_portfolios_paginator: servicecatalog_paginators.ListPortfoliosPaginator = client.get_paginator("list_portfolios")
        list_portfolios_for_product_paginator: servicecatalog_paginators.ListPortfoliosForProductPaginator = client.get_paginator("list_portfolios_for_product")
        list_principals_for_portfolio_paginator: servicecatalog_paginators.ListPrincipalsForPortfolioPaginator = client.get_paginator("list_principals_for_portfolio")
        list_provisioned_product_plans_paginator: servicecatalog_paginators.ListProvisionedProductPlansPaginator = client.get_paginator("list_provisioned_product_plans")
        list_provisioning_artifacts_for_service_action_paginator: servicecatalog_paginators.ListProvisioningArtifactsForServiceActionPaginator = client.get_paginator("list_provisioning_artifacts_for_service_action")
        list_record_history_paginator: servicecatalog_paginators.ListRecordHistoryPaginator = client.get_paginator("list_record_history")
        list_resources_for_tag_option_paginator: servicecatalog_paginators.ListResourcesForTagOptionPaginator = client.get_paginator("list_resources_for_tag_option")
        list_service_actions_paginator: servicecatalog_paginators.ListServiceActionsPaginator = client.get_paginator("list_service_actions")
        list_service_actions_for_provisioning_artifact_paginator: servicecatalog_paginators.ListServiceActionsForProvisioningArtifactPaginator = client.get_paginator("list_service_actions_for_provisioning_artifact")
        list_tag_options_paginator: servicecatalog_paginators.ListTagOptionsPaginator = client.get_paginator("list_tag_options")
        scan_provisioned_products_paginator: servicecatalog_paginators.ScanProvisionedProductsPaginator = client.get_paginator("scan_provisioned_products")
        search_products_as_admin_paginator: servicecatalog_paginators.SearchProductsAsAdminPaginator = client.get_paginator("search_products_as_admin")
        ```
        
        ## Dynamic type annotations
        
        `mypy_boto3` command generates `boto3.client/resource` type annotations for
        `mypy_boto3_servicecatalog` and other installed services.
        
        ```bash
        # Run this command after you add or remove service packages
        python -m mypy_boto3
        ```
        
        Generated type annotations provide overloads for `boto3.client` and `boto3.resource`,
        `boto3.Session.client` and `boto3.Session.resource` functions,
        so explicit type annotations are not needed.
        
        - `mypy` supports function overloads as expected
        - `PyCharm` also supports function overloads, but consumes a lot of RAM, use carefully if you have many services installed
        - `VSCode` does not currently support function overloads, use explicit type annotations
        
        ```python
        import boto3
        
        # Type is discovered correctly by mypy and PyCharm
        # VSCode still needs explicit type annotations
        client = boto3.client("servicecatalog")
        
        session_client = boto3.Session().client("servicecatalog")
        ```
Keywords: boto3 servicecatalog type-annotations boto3-stubs mypy typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
