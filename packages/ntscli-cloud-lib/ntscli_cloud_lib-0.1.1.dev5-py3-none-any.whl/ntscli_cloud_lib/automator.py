# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/automator.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto


@dataclass
class DeviceIdentifier(betterproto.Message):
    esn: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    ip: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)
    serial: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
    rae: Optional[str] = betterproto.message_field(4, wraps=betterproto.TYPE_STRING)


@dataclass
class DeviceIdentifierTarget(betterproto.Message):
    target: "DeviceIdentifier" = betterproto.message_field(1)


@dataclass
class TestCase(betterproto.Message):
    name: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    exec: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)
    tags: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
    category: Optional[str] = betterproto.message_field(
        4, wraps=betterproto.TYPE_STRING
    )


@dataclass
class TestPlan(betterproto.Message):
    testcases: List["TestCase"] = betterproto.message_field(1)
    sdk_version: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )
    branch: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
    batch_id: Optional[str] = betterproto.message_field(
        4, wraps=betterproto.TYPE_STRING
    )
    error: Optional[str] = betterproto.message_field(5, wraps=betterproto.TYPE_STRING)
    message: Optional[str] = betterproto.message_field(6, wraps=betterproto.TYPE_STRING)


@dataclass
class GetTestPlanRequest(betterproto.Message):
    target: "DeviceIdentifier" = betterproto.message_field(1)


@dataclass
class GetTestPlanResponse(betterproto.Message):
    target: "DeviceIdentifier" = betterproto.message_field(1)
    testplan: "TestPlan" = betterproto.message_field(2)
    error: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
    message: Optional[str] = betterproto.message_field(4, wraps=betterproto.TYPE_STRING)


@dataclass
class HttpLikeGetTestPlanErrorResponseBody(betterproto.Message):
    message: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    error: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)


@dataclass
class HttpLikeGetTestPlanErrorResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    body: "HttpLikeGetTestPlanErrorResponseBody" = betterproto.message_field(2)


@dataclass
class HttpLikeErrorResponseBody(betterproto.Message):
    message: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    error: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)


@dataclass
class HttpLikeErrorResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    body: "HttpLikeGetTestPlanErrorResponseBody" = betterproto.message_field(2)


@dataclass
class HttpLikeGetTestPlanResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    body: "TestPlan" = betterproto.message_field(2)


@dataclass
class TestPlanRunRequest(betterproto.Message):
    target: "DeviceIdentifier" = betterproto.message_field(1)
    testplan: "TestPlan" = betterproto.message_field(2)


@dataclass
class TestPlanRunResponse(betterproto.Message):
    status: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    message: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)
    error: Optional[str] = betterproto.message_field(3, wraps=betterproto.TYPE_STRING)
    batch_id: Optional[str] = betterproto.message_field(
        4, wraps=betterproto.TYPE_STRING
    )
    result_topic: Optional[str] = betterproto.message_field(
        5, wraps=betterproto.TYPE_STRING
    )
    target: "DeviceIdentifier" = betterproto.message_field(6)


@dataclass
class HttpLikeTestPlanRunResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    body: "TestPlanRunResponse" = betterproto.message_field(2)


@dataclass
class AvafPerhipheralDescriptionConfig(betterproto.Message):
    audioinput: str = betterproto.string_field(1)
    device_category_id: int = betterproto.uint32_field(2)
    frc_setting: str = betterproto.string_field(3)
    hdmi_topology: str = betterproto.string_field(4)
    toneref: Dict[str, float] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_FLOAT
    )
    calibration_markerset: str = betterproto.string_field(6)


@dataclass
class AvafHardwareConfig(betterproto.Message):
    usb_port: str = betterproto.string_field(1)
    serial: str = betterproto.string_field(2)
    version: str = betterproto.string_field(3)
    target_version: str = betterproto.string_field(4)


@dataclass
class AvafPerhipheralDescription(betterproto.Message):
    type: str = betterproto.string_field(1)
    peripheral_id: str = betterproto.string_field(2)
    esn: str = betterproto.string_field(3)
    hw_config: "AvafHardwareConfig" = betterproto.message_field(4)
    config: "AvafPerhipheralDescriptionConfig" = betterproto.message_field(5)
    active: bool = betterproto.bool_field(6)
    inactive_reason: str = betterproto.string_field(7)


@dataclass
class HttpLikeAvafPeripheralListResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    body: List["AvafPerhipheralDescription"] = betterproto.message_field(2)


@dataclass
class AvafPeripheralListRequest(betterproto.Message):
    target: "DeviceIdentifier" = betterproto.message_field(1)
    type: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)


@dataclass
class StatusRequest(betterproto.Message):
    target: "DeviceIdentifier" = betterproto.message_field(1)
    batch_id: Optional[str] = betterproto.message_field(
        2, wraps=betterproto.TYPE_STRING
    )


@dataclass
class StatusSessionTarget(betterproto.Message):
    ip: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    usb_id: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)
    mac_address: Optional[str] = betterproto.message_field(
        3, wraps=betterproto.TYPE_STRING
    )
    esn: Optional[str] = betterproto.message_field(4, wraps=betterproto.TYPE_STRING)


@dataclass
class StatusSession(betterproto.Message):
    status: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    target: "DeviceIdentifier" = betterproto.message_field(2)
    last_batch: Optional[str] = betterproto.message_field(
        3, wraps=betterproto.TYPE_STRING
    )
    result_topic: Optional[str] = betterproto.message_field(
        4, wraps=betterproto.TYPE_STRING
    )


@dataclass
class TestCaseResult(betterproto.Message):
    name: str = betterproto.string_field(1)
    url: str = betterproto.string_field(2)
    status: str = betterproto.string_field(3)
    run_id: Optional[str] = betterproto.message_field(4, wraps=betterproto.TYPE_STRING)
    nts_id: Optional[str] = betterproto.message_field(5, wraps=betterproto.TYPE_STRING)
    logcat: Optional[str] = betterproto.message_field(6, wraps=betterproto.TYPE_STRING)
    step: Optional[str] = betterproto.message_field(7, wraps=betterproto.TYPE_STRING)
    started: Optional[str] = betterproto.message_field(8, wraps=betterproto.TYPE_STRING)
    ended: Optional[str] = betterproto.message_field(9, wraps=betterproto.TYPE_STRING)
    console_log: Optional[str] = betterproto.message_field(
        10, wraps=betterproto.TYPE_STRING
    )


@dataclass
class StatusSessionList(betterproto.Message):
    sessions: List["StatusSession"] = betterproto.message_field(1)
    results: List["TestCaseResult"] = betterproto.message_field(2)
    batch_id: str = betterproto.string_field(3)


@dataclass
class HttpLikeStatusResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    body: "StatusSessionList" = betterproto.message_field(2)


@dataclass
class HttpLikeListTargetsErrorResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    error: str = betterproto.string_field(2)


@dataclass
class HttpLikeListTargetsResponse(betterproto.Message):
    status: int = betterproto.uint32_field(1)
    body: List["DeviceIdentifier"] = betterproto.message_field(2)


@dataclass
class CancelBody(betterproto.Message):
    status: str = betterproto.string_field(1)
    message: str = betterproto.string_field(2)


@dataclass
class HttpLikeCancelResponse(betterproto.Message):
    status: str = betterproto.string_field(1)
    body: "CancelBody" = betterproto.message_field(2)


@dataclass
class CloudStatus(betterproto.Message):
    """
    work around payload size limits by only reporting status of single test
    changes
    """

    running: bool = betterproto.bool_field(1)
    batch_id: str = betterproto.string_field(2)
    target: "DeviceIdentifier" = betterproto.message_field(3)
    type: str = betterproto.string_field(4)
    test_total: int = betterproto.uint32_field(5)
    test_index: Optional[int] = betterproto.message_field(
        6, wraps=betterproto.TYPE_UINT32
    )
    data: "TestCaseResult" = betterproto.message_field(7)
    results_url: Optional[str] = betterproto.message_field(
        8, wraps=betterproto.TYPE_STRING
    )
