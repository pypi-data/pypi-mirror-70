{
  "openapi": "3.0.0",
  "info": {
    "title": "Opentrons OT-2 HTTP API Spec",
    "description": "This OpenAPI spec describes the HTTP API of the Opentrons OT-2. It may be retrieved from a robot on port 31950 at /openapi. Some schemas used in requests and responses use the `x-patternProperties` key to mean the JSON Schema `patternProperties` behavior.",
    "version": "1",
    "contact": {
      "name": "Opentrons Engineering",
      "url": "https://www.github.com/Opentrons",
      "email": "engineering@opentrons.com"
    }
  },
  "components": {
    "schemas": {
      "logPaths": {
        "type": "array",
        "description": "List of URL paths at which to find logs",
        "items": {"type": "string"}
      },
      "protocolApiVersion": {
        "type": "array",
        "description": "A major.minor Protocol API version",
        "items": {"type": "integer"},
        "minItems": 2,
        "maxItems": 2
      },
      "interfaceStatus": {
        "type": "object",
        "description": "Status for this interface",
        "properties": {
          "ipAddress": {
            "description": "The interface IP address with CIDR subnet appended (e.g. 10.0.0.1/24)",
            "type": "string",
            "nullable": true
          },
          "macAddress": {
            "description": "The MAC address of this interface (at least when connected to this network - it may change due to NetworkManager's privacy functionality when disconnected or connected to a different network)",
            "type": "string",
            "nullable": true
          },
          "gatewayAddress": {
            "description": "The address of the configured gateway",
            "type": "string",
            "format": "ipAddress",
            "nullable": true
          },
          "state": {
            "description": "The state of the connection",
            "type": "string",
            "enum": ["connected", "connecting", "disconnected"]
          },
          "type": {
            "description": "What kind of interface this is",
            "type": "string",
            "enum": ["wifi", "ethernet"]
          }
        }
      },
      "networkingStatus": {
        "description": "OT-2 /networking/status response",
        "type": "object",
        "additionalProperties": false,
        "required": [ "status", "interfaces" ],
        "properties": {
          "status": {
            "description": "Overall connectivity of the robot",
            "type": "string",
            "enum": ["full", "limited", "none", "portal", "unknown"]
          },
          "interfaces": {
            "type": "object",
            "description": "Per-interface networking status. Properties are named for network interfaces",
            "properties": {
              "eth0": {"$ref": "#/components/schemas/interfaceStatus"},
              "wlan0": {"$ref": "#/components/schemas/interfaceStatus"}
            }
          }
        }
      },
      "networkingSecurityType": {
        "description": "Top-level type of network security",
        "type": "string",
        "enum": [ "wpa-eap", "wpa-psk", "none", "unsupported" ]
      },
      "v1ErrorMessage": {
        "description": "An error response with a human readable message",
        "type": "object",
        "required": ["message"],
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable error message"
          }
        }
      },
      "v1ErrorWithTraceback": {
        "description": "An error response with a human readable message and a dumped traceback",
        "type": "object",
        "required": ["message", "traceback"],
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable error message"
          },
          "traceback": {
            "type": "string",
            "description": "A traceback dump from the server, in multiline text"
          }
        }
      },
      "wifiKeyFile": {
        "type": "object",
        "required": ["uri", "id", "name"],
        "additionalProperties": true,
        "properties": {
          "uri": {
            "type": "string",
            "description": "A URI for the key (mostly for use with DELETE /wifi/keys/{key_id})"
          },
          "id": {
            "type": "string",
            "description": "A contents hash of the key used to specify the key in POST /wifi/configure (and also to determine the key URI)"
          },
          "name": {
            "type": "string",
            "description": "The original filename of the key"
          }
        }
      },
      "moduleLiveData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Temperature Module live data",
            "additionalProperties": true,
            "required": ["currentTemp", "targetTemp"],
            "properties": {
              "currentTemp": {
                "type": "number",
                "description": "The current temperature of the module"
              },
              "targetTemp": {
                "type": "number",
                "description": "The target temperature of the module if any",
                "nullable": true
              }
            }
          },
          {
            "type": "object",
            "description": "Magnetic Module live data",
            "additionalProperties": true,
            "required": ["engaged", "height"],
            "properties": {
              "engaged": {
                "description": "Whether the magnets are raised or lowered",
                "type": "boolean"
              },
              "height": {
                "description": "The height of the top of the magnets relative to their home position, in mm",
                "type": "number"
              }
            }
          },
          {
            "type": "object",
            "description": "Thermocycler live data",
            "additionalProperties": true,
            "required": ["lid", "lidTarget", "lidTemp", "currentTemp", "targetTemp", "holdTime", "rampRate", "currentCycleIndex", "totalCycleCount", "currentStepIndex", "totalStepCount"],
            "properties": {
              "lid": {
                "description": "The current state of the lid",
                "type": "string",
                "enum": ["in_between", "open", "closed", "unknown"]
              },
              "lidTarget": {
                "description": "The target temperature of the lid temperature controller",
                "type": "number",
                "nullable": true
              },
              "lidTemp": {
                "description": "The current temperature of the lid",
                "type": "number"
              },
              "currentTemp": {
                "description": "The current temperature of the thermocycler block",
                "type": "number"
              },
              "targetTemp": {
                "description": "The target temperature of the thermocycler block",
                "type": "number",
                "nullable": true
              },
              "holdTime": {
                "description": "The time left in the current hold step, if any (in seconds)",
                "type": "number",
                "nullable": true
              },
              "rampRate": {
                "description": "The current ramp rate (in degC/s) for the thermocycler block",
                "type": "number",
                "nullable": true
              },
              "currentCycleIndex": {
                "description": "The index of the current cycle within the current programmed sequence",
                "type": "integer",
                "nullable": true
              },
              "totalCycleCount": {
                "description": "The total number of cycles within the current sequence",
                "type": "integer",
                "nullable": true
              },
              "currentStepIndex": {
                "description": "The index of the current step within the current programmed cycle",
                "type": "integer",
                "nullable": true
              },
              "totalStepCount": {
                "description": "The total number of steps within the current cycle",
                "type": "integer",
                "nullable": true
              }
            }
          }
        ]
      },
      "attachedPipette": {
        "description": "Pipette (if any) attached to the mount",
        "type": "object",
        "required": ["model", "name", "tip_length", "mount_axis", "plunger_axis", "id"],
        "additionalProperties": false,
        "properties": {
          "model": {
            "description": "The model of the attached pipette. These are snake case as in the Protocol API. This includes the full version string",
            "type": "string",
            "nullable": true
          },
          "name": {
            "description": "The name of the attached pipette - the model without the version string",
            "type": "string",
            "nullable": true
          },
          "tip_length": {
            "description": "The default tip length for this pipette, if attached",
            "deprecated": true,
            "type": "number",
            "nullable": true
          },
          "mount_axis": {
            "description": "The axis that moves this pipette up and down",
            "type": "string",
            "enum": ["z", "a"]
          },
          "plunger_axis": {
            "description": "The axis that moves this pipette's plunger",
            "type": "string",
            "enum": ["b", "c"]
          },
          "id": {
            "description": "The serial number of the attached pipette",
            "type": "string",
            "nullable": true
          }
        }
      },
      "motionTarget": {
        "type": "string",
        "enum": ["pipette", "mount"],
        "description": "What should be moved. If mount, move the nominal position of the mount; if pipette, move the nozzle of the pipette"
      },
      "point": {
        "type": "array",
        "minItems": 3,
        "maxItems": 3,
        "description": "A point in deck coordinates (x, y, z)",
        "items": {"type": "number"}
      },
      "lightState": {
        "description": "Whether a light is (or should be turned) on or off",
        "type": "object",
        "required": ["on"],
        "properties": {
          "on": {
            "description": "The light state",
            "type": "boolean"
          }
        }
      },
      "mount": {
        "description": "A valid pipette mount location to specify for motion or interrogation",
        "type": "string",
        "enum": ["left", "right"]
      },
      "deckCalibrationPoint": {
        "description": "The name of a point relative to deck calibration. The number points are calibration crosses (\"1\" in slot 1, \"2\" in slot 3, \"3\" in slot 7); \"safeZ\" is a safe height above the deck, \"attachTip\" is a good place to go for the user to attach a tip.",
        "type": "string",
        "enum": ["1", "2", "3", "safeZ", "attachTip"]
      },
      "deckCalibrationDispatchJog": {
        "description": "command: \"jog\" dispatch args",
        "allOf": [
          {"$ref": "#/components/schemas/deckCalibrationDispatch"},
          {
            "type": "object",
            "required": ["axis", "direction", "step"],
            "properties": {
              "axis": {
                "description": "The axis to jog",
                "type": "string",
                "enum": ["x", "y", "z"]
              },
              "direction": {
                "description": "The direction to jog",
                "type": "integer",
                "enum": [1, -1]
              },
              "step": {
                "description": "The distance to jog",
                "type": "number"
              }
            }
          }
        ]
      },
      "deckCalibrationDispatchMove": {
        "description": "command: \"move\" dispatch args",
        "allOf": [
          {"$ref": "#/components/schemas/deckCalibrationDispatch"},
          {
            "type": "object",
            "required": ["point"],
            "properties": {
              "point": {"$ref": "#/components/schemas/deckCalibrationPoint"}
            }
          }
        ]
      },
      "deckCalibrationDispatchSaveXY": {
        "description": "command: \"save xy\" dispatch args",
        "allOf": [
          {"$ref": "#/components/schemas/deckCalibrationDispatch"},
          {
            "type": "object",
            "properties": {
              "point": {"$ref": "#/components/schemas/deckCalibrationPoint"}
            }
          }
        ]
      },
      "deckCalibrationDispatchAttachTip": {
        "description": "command: \"attach tip\" dispatch args",
        "allOf": [
          {"$ref": "#/components/schemas/deckCalibrationDispatch"},
          {
            "type": "object",
            "required": ["tipLength"],
            "properties": {
              "tipLength": {
                "type": "number",
                "description": "The length of the tip you are prompting the user to attach"
              }
            }
          }
        ]
      },
      "deckCalibrationDispatchDetachTip": {
        "$ref": "#/components/schemas/deckCalibrationDispatch"
      },
      "deckCalibrationDispatchSaveZ": {
        "$ref": "#/components/schemas/deckCalibrationDispatch"
      },
      "deckCalibrationDispatchSaveTransform": {
        "$ref": "#/components/schemas/deckCalibrationDispatch"
      },
      "deckCalibrationDispatchRelease": {
        "$ref": "#/components/schemas/deckCalibrationDispatch"
      },
      "deckCalibrationDispatch": {
        "type": "object",
        "required": ["token", "command"],
        "properties": {
          "token": {
            "type": "string",
            "format": "uuid",
            "description": "The deck calibration session token"
          },
          "command": {
            "type": "string",
            "enum": ["jog", "move", "save xy", "attach tip", "detach tip", "save z", "save transform", "release"],
            "description": "The command to execute"
          }
        },
        "discriminator": {
          "propertyName": "command",
          "mapping": {
            "jog": "#/components/schemas/deckCalibrationDispatchJog",
            "move": "#/components/schemas/deckCalibrationDispatchMove",
            "save xy": "#/components/schemas/deckCalibrationDispatchSaveXY",
            "attach tip": "#/components/schemas/deckCalibrationDispatchAttachTip",
            "detach tip": "#/components/schemas/deckCalibrationDispatchDetachTip",
            "save z": "#/components/schemas/deckCalibrationDispatchSaveZ",
            "save transform": "#/components/schemas/deckCalibrationDispatchSaveTransform",
            "release": "#/components/schemas/deckCalibrationDispatchRelease"
          }
        }
      },
      "advancedSettings": {
        "description": "A list of advanced settings and their values",
        "type": "array",
        "items": {
          "type": "object",
          "required": ["id", "old_id", "title", "description", "restart_required", "value"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The machine-readable property ID"
            },
            "old_id": {
              "type": "string",
              "description": "The ID by which the property used to be known; not useful now and may contain spaces or hyphens"
            },
            "title": {
              "type": "string",
              "description": "A human-readable short string suitable for display as the title of the setting"
            },
            "description": {
              "type": "string",
              "description": "A human-readable long string suitable for display as a paragraph or two explaining the setting"
            },
            "restart_required": {
              "type": "boolean",
              "description": "Whether a robot restart is required to make this change take effect"
            },
            "value": {
              "type": "boolean",
              "nullable": true,
              "description": "Whether the setting is off by previous user choice (false), true by user choice (true), or off and has never been altered (null)"
            }
          }
        }
      },
      "v2ErrorMessage": {
        "description": "An error message with a shortname, a longer name, and some other props",
        "required": ["error", "message"],
        "additionalProperties": true,
        "properties": {
          "error": {
            "type": "string",
            "description": "A machine-readable shortname for the error that has occurred"
          },
          "message": {
            "type": "string",
            "description": "A human-readable message for display about the error"
          },
          "links": {
            "type": "object",
            "x-patternProperties": {
              "*": {
                "type": "string",
                "description": "A URI that can be requested to execute the operation named by the property"
              }
            }
          }
        }
      },
      "pipetteSettings": {
        "type": "object",
        "required": ["info", "fields"],
        "properties": {
          "info": {
            "type": "object",
            "required": ["name", "model"],
            "description": "Metadata about this pipette",
            "properties": {
              "name": {
                "type": "string",
                "description": "A pipette name (e.g. \"p300_single\")"
              },
              "model": {
                "type": "string",
                "description": "The exact pipette model (e.g. \"p300_single_v1.5\")"
              }
            }
          },
          "fields": {
            "description": "The fields of the pipette settings",
            "type": "object",
            "x-patternProperties": {
              "*": {
                "description": "A pipette config element identified by the property's name",
                "type": "object",
                "required": ["value", "units", "type", "min", "max", "default"],
                "properties": {
                  "units": {
                    "type": "string",
                    "description": "The physical units this value is in (e.g. mm, uL)"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the property",
                    "enum": ["float", "int"]
                  },
                  "min": {
                    "type": "number",
                    "description": "The minimum acceptable value of the property"
                  },
                  "max": {
                    "type": "number",
                    "description": "The maximum acceptable value of the property"
                  },
                  "default": {
                    "type": "number",
                    "description": "The default value of the property"
                  },
                  "value": {
                    "type": "number",
                    "description": "The current value of the property"
                  }
                }
              },
              "quirks": {
                "summary": "Pipette config elements that are binary in nature",
                "description": "Quirks are behavioral changes associated with pipettes. For instance, some models of pipette might need to run their drop tip behavior twice. Specific pipettes have specific valid quirks which can then be enabled or disabled; quirks that are not originally defined as compatible with a specific kind of pipette cannot be added to an incompatible pipette. Because quirks are only defined as compatible for a pipette if they should be on, the default value for all quirks is true.",
                "type": "object",
                "x-patternProperties": {
                  "*": {
                    "type": "boolean",
                    "description": "Whether the quirk is enabled or not"
                  }
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "serverDown": {
        "description": "Error from the reverse proxy indicating the API server is not up",
        "content": {
          "text/html": {
            "example": "<html><head><title>502 Bad Gateway</title></head><body><center><h1>502 Bad Gateway</h1></center><hr><center>nginx/1.15.7</center></body></html>"
          }
        }
      },
      "advancedSettings": {
        "description": "A dump of advanced settings and suitable links for next action",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["links", "settings"],
              "properties": {
                "settings": {"$ref": "#/components/schemas/advancedSettings"},
                "links": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "restart": {
                      "type": "string",
                      "description": "A URI to POST to restart the robot. If this is present, it must be requested for any settings changes to take effect"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [],
  "tags": [
    {"name": "networking",
     "description": "Controls or queries the OT-2's network connectivity"},
    {"name": "control",
     "description": "Operations that affect the OT-2's hardware"},
    {"name": "modules",
     "description": "Operations having to do with connected modules"},
    {"name": "pipettes",
     "description": "Operations having to do with pipettes"},
    {"name": "deckCalibration",
     "description": "Operations for executing deck calibration"},
    {"name": "settings",
     "description": "Operations for viewing or editing robot configuration"},
    {"name": "metadata",
     "description": "Operations involving robot or server metadata"}
  ],
  "security": [],
  "externalDocs": {
    "description": "More documentation for the OT-2 is here",
    "url": "https://docs.opentrons.com"
  },
  "paths": {
    "/openapi": {
      "get": {
        "tags": ["metadata"],
        "operationId": "getOpenAPISpec",
        "description": "Get an OpenAPI spec (this document)",
        "responses": {
          "200": {
            "description": "The OpenAPI spec",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "502": {"$ref": "#/components/responses/serverDown"}
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["metadata"],
        "operationId": "getHealth",
        "description": "Retrieve some useful information about supported API versions, names, and so on",
        "summary": "The /health endpoint is a good one to check to see if you're communicating with an OT-2 with a properly booted API server. If it returns OK, all is well. It also can be used to pull information like the robot software version and name.",
        "responses": {
          "200": {
            "description": "A set of information about the name and versions.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "OT-2 /health response",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "name", "api_version", "fw_version", "board_revision", "logs", "system_version", "protocol_api_version", "links"
                  ],
                  "properties": {
                    "name": {"description": "The robot's name. In most cases the same as its mDNS advertisement domain name but this can get out of sync. Mostly useful for user-facing titles.",
                             "type": "string"},
                    "api_version": {"description": "The SemVer dotted-int version of the API server and by extension robot software.",
                                    "type": "string"},
                    "fw_version": {"description": "The version of the firmware flashed to the OT-2's motor controller board. Doesn't follow a pattern, suitable only for display or exact matching.",
                                   "type": "string"},
                    "board_revision": {"description": "The revision of the OT-2's central routing board",
                                       "type": "string"},
                    "logs": {"$ref": "#/components/schemas/logPaths" },
                    "system_version": {"description": "The SemVer dotted-int version of the robot OS",
                                       "type": "string"},
                    "protocol_api_version": { "$ref": "#/components/schemas/protocolApiVersion" },
                    "links": {
                      "type": "object",
                      "description": "A set of useful links",
                      "required": ["apiLog", "serialLog", "apiSpec"],
                      "properties": {
                        "apiLog": {
                          "type": "string",
                          "description": "The URI of the api logs"
                        },
                        "serialLog": {
                          "type": "string",
                          "description": "The URI of the serial logs"
                        },
                        "apiSpec": {
                          "type": "string",
                          "description": "The URI to this API specification"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "name": "OT2CEP20190604A02",
                  "api_version": "3.15.2",
                  "fw_version": "v2.15.0",
                  "logs": ["/logs/serial.log", "/logs/api.log"],
                  "system_version": "1.2.1",
                  "protocol_api_version": [2, 0],
                  "links": {
                    "apiLog": "/logs/api.log",
                    "serialLog": "/logs/serial.log",
                    "apiSpec": "/openapi"
                  }
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/networking/status": {
      "get": {
        "operationId": "getNetworkingStatus",
        "tags": ["networking"],
        "description": "Query the current network connectivity state",
        "summary": "Gets information about the OT-2's network interfaces including their connectivity, their addresses, and their networking info",
        "responses": {
          "200": {
            "description": "The networking state information",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/networkingStatus"},
                "example": {
                  "status": "full",
                  "interfaces": {
                    "wlan0": {
                      "ipAddress": "192.168.43.97/24",
                      "macAddress": "B8:27:EB:6C:95:CF",
                      "gatewayAddress": "192.168.43.161",
                      "state": "connected",
                      "type": "wifi"
                    },
                    "eth0": {
                      "ipAddress": "169.254.229.173/16",
                      "macAddress": "B8:27:EB:39:C0:9A",
                      "gatewayAddress": null,
                      "state": "connected",
                      "type": "ethernet"
                    }
                  }
                }
              }
            }
          },
          "502": {"$ref": "#/components/responses/serverDown"},
          "500": {
            "description": "An internal error occurred, probably from NetworkManager. Same schema as the 200, but empty",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/networkingStatus" },
                "example": {"status": "none", "interfaces": {}}
              }
            }
          }
        }
      }
    },
    "/wifi/list": {
      "get": {
        "operationId": "scanWifiNetworks",
        "tags": ["networking"],
        "description": "Scan for visible WiFi networks",
        "summary": "Scans for beaconing WiFi networks and returns the list of visible ones along with some data about their security and strength",
        "responses": {
          "200": {
            "description": "The list of networks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["list"],
                  "additionalProperties": false,
                  "properties": {
                    "list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A visible network",
                        "required": ["ssid", "signal", "active", "security", "securityType"],
                        "additionalProperties": false,
                        "properties": {
                          "ssid": { "description": "The network's SSID",
                                    "type": "string"},
                          "signal": { "description": "A unitless signal strength; a higher number is a better signal",
                                      "type": "integer"},
                          "active": {"description": "Whether there is a connection active",
                                     "type": "boolean"},
                          "security": {"description": "The raw NetworkManager output about the wifi security",
                                       "type": "string"},
                          "securityType": {"$ref": "#/components/schemas/networkingSecurityType"}
                        }
                      }
                    }
                  }
                },
                "example": {
                  "list": [{
                    "ssid": "linksys",
                    "signal": 50,
                    "active": false,
                    "security": "WPA2 802.1X",
                    "securityType": "wpa-eap"}]
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["message"],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human-readable error message"}
                  }
                },
                "example": {
                  "message": "Something went wrong"
                }
              }
            }
          }
        }
      }
    },
    "/wifi/configure": {
      "post": {
        "operationId": "configureWifi",
        "tags": ["networking"],
        "description": "Configure the OT-2's WiFi",
        "summary": "Configures the wireless network interface to connect to a network",
        "requestBody": {
          "description": "Configuration options for the wireless network interface",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [ "ssid" ],
                "properties": {
                  "ssid": {
                    "description": "The SSID to connect to. If this isn't an SSID that is being broadcast by a network, you should also set hidden to true.",
                    "type": "string"
                  },
                  "hidden": {
                    "description": "True if the network is hidden (not broadcasting an ssid). False (default if key is not present) otherwise",
                    "type": "boolean"
                  },
                  "securityType": {
                    "$ref": "#/components/schemas/networkingSecurityType"
                  },
                  "psk": {
                    "description": "If this is a PSK-secured network (securityType is wpa-psk), the PSK",
                    "type": "string",
                    "format": "password"
                  },
                  "eapConfig": {
                    "description": "All options required to configure EAP access to the wifi. All options should match one of the cases described in /wifi/eap-options; for instance, configuring for peap/mschapv2 should have \"peap/mschapv2\" as the eapType; it should have \"identity\" and \"password\" props, both of which are identified as mandatory in /wifi/eap-options; and it may also have \"anonymousIdentity\" and \"caCert\" properties, both of which are identified as present but not required. ",
                    "type": "object",
                    "required": ["eapType"],
                    "additionalProperties": true,
                    "properties": {
                      "eapType": {
                        "description": "Which (supported) EAP variant to configure for. Must be one of the types returned by /wifi/eap-options.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "examples": {
                "unsecuredNetwork": {
                  "summary": "Connect to an unsecured network",
                  "value": {
                    "ssid": "linksys"
                  }
                },
                "pskNetwork": {
                  "summary": "Connect to a WPA2-PSK secured network",
                  "description": "This is the \"standard\" way to set up a WiFi router, and is where you provide a password",
                  "value": {
                    "ssid": "linksys",
                    "securityType": "wpa-psk",
                    "psk": "psksrock"
                  }
                },
                "hiddenNetwork": {
                  "summary": "Connect to a network not broadcasting its SSID, with a PSK",
                  "value": {
                    "ssid": "cantseeme",
                    "securityType": "wpa-psk",
                    "psk": "letmein",
                    "hidden": true
                  }
                },
                "eapNetwork": {
                  "summary": "Connect to a network secured by WPA2-EAP using PEAP/MSCHAPv2",
                  "description": "WPA2 Enterprise network security is based around the EAP protocol, which is a very complex tunneled authentication protocol. It can be configured in many different ways. The OT-2 supports several but by no means all of these variants. The variants supported on a given OT-2 can be found by GET /wifi/eap-options. This example describes how to set up PEAP/MSCHAPv2, which is an older EAP variant that was at one time the mechanism securing Eduroam.",
                  "value": {
                    "ssid": "Eduroam",
                    "securityType": "wpa-eap",
                    "eapConfig": {
                      "eapType": "peap/mschapv2",
                      "identity": "scientist@biology.org",
                      "password": "leeuwenhoek"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The OT-2 successfully connected to the specified network using the specified parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["message", "ssid"],
                  "properties": {
                    "message": {
                      "type": "string", "description": "A human-readable success message"
                    },
                    "ssid": {
                      "type": "string", "description": "The SSID configured"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "A malformed response body of some kind",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {"message": "Error: JSONDecodeError in /wifi/configure: Expecting delimiter at position 0"}
              }
            }
          },
          "401": {
            "description": "The response body was properly formed but the OT-2 could not connect to the specified network, likely because some configuration or password does not match",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Secrets were required but not provided"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/wifi/disconnect": {
      "post": {
        "operationId": "disconnectWifi",
        "tags": ["networking"],
        "description": "Disconnect the OT-2 from WiFi network",
        "summary": "Deactivates the wifi connection and removes it from known connections",
        "requestBody": {
          "description": "SSID of the network to disconnect from",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ssid": {
                    "description": "The SSID to disconnect from.",
                    "type": "string"
                  }
                }
              },
              "examples": {
                "disconnectFromSsid": {
                  "summary": "Disconnect robot from wifi network",
                  "value": {
                    "ssid": "linksys"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The OT-2 successfully disconnected from the specified ssid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["message"],
                  "properties": {
                    "message": {
                      "type": "string", "description": "A human-readable success message"
                    }
                  }
                }
              }
            }
          },
          "207": {
            "description": "The OT-2 successfully disconnected from the specified ssid but connection not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["message"],
                  "properties": {
                    "message": {
                      "type": "string", "description": "A human-readable multi-status message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "A malformed request body of some kind",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {"message": "Error: JSONDecodeError in /wifi/discoonect."}
              }
            }
          },
          "500": {
            "description": "The request body was properly formed but the OT-2 could not disconnect from the specified network, likely because the ssid was incorrect or the connection didn't exist",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Error: 'linksysss' is not an active connection.\nError: no active connection provided."}
              }
            }
          }
        }
      }
    },
    "/wifi/keys": {
      "description": "Keyfile management for the various kinds of Wifi authentication that require private key data",
      "get": {
        "operationId": "getWifiKeyList",
        "tags": ["networking"],
        "description": "Get a list of key files known to the system",
        "responses": {
          "200": {
            "description": "The list of key files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["keys"],
                  "additionalProperties": false,
                  "properties": {
                    "keys": {
                      "type": "array",
                      "description": "A list of keys in the system",
                      "items": { "$ref": "#/components/schemas/wifiKeyFile" }
                    }
                  }
                },
                "example": {
                  "keys": [
                    {"uri": "/wifi/keys/abda234a234",
                     "id": "abda234a234",
                     "name": "client.pem"}
                  ]
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      },
      "post": {
        "operationId": "addWifiKey",
        "tags": ["networking"],
        "description": "Send a new key file to the OT-2",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "key": {
                    "type": "string",
                    "format": "binary",
                    "description": "The key file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The details of the newly uploaded key",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/wifiKeyFile" },
                "example": {
                  "uri": "/wifi/keys/abda234a234",
                  "id": "abda234a234",
                  "name": "client.pem"}
              }
            }
          },
          "200": {
            "description": "The details of the file, which was already present ",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/wifiKeyFile" },
                "example": {
                  "uri": "/wifi/keys/abda234a234",
                  "id": "abda234a234",
                  "name": "client.pem",
                  "message": "Key file already present"
                }
              }
            }
          },
          "400": {
            "description": "The response was malformed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {"message": "Must upload key file"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/wifi/keys/{key_uuid}": {
      "parameters": [
        { "name": "key_uuid",
          "in": "path",
          "description": "The ID of key to delete, as determined by a previous call to GET /wifi/keys ",
          "required": true,
          "schema": {"type": "string"}
        }
      ],
      "delete": {
        "operationId": "deleteWifiKey",
        "tags": ["networking"],
        "description": "Delete a key file from the OT-2",
        "responses": {
          "200": {
            "description": "The key was successfully deleted",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {
                  "message": "Key file client.pem deleted"
                }
              }
            }
          },
          "404": {
            "description": "The key_uuid is not known",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {
                  "message": "No such key file 44aacab8"
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/wifi/eap-options": {
      "get": {
        "operationId": "getEapOptions",
        "tags": ["networking"],
        "description": "Get the supported EAP variants and their configuration parameters",
        "responses": {
          "200": {
            "description": "An object describing all supported EAP variants and their parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["options"],
                  "additionalProperties": false,
                  "properties": {
                    "options": {
                      "type": "array",
                      "items": {
                        "description": "An object describing an EAP variant",
                        "type": "object",
                        "required": ["name", "displayName", "options"],
                        "additionalProperties": false,
                        "properties": {
                          "name": {"type": "string",
                                   "description": "The identifier for the EAP variant"},
                          "displayName": {"type": "string",
                                          "description": "A human-readable formatted name for the EAP variant"},
                          "options": {
                            "description": "A list of objects describing configuration options for the EAP variant",
                            "type": "array",
                            "items": {
                              "description": "An object describing the name and format of an EAP config option",
                              "type": "object",
                              "required": ["name", "displayName", "required", "type"],
                              "additionalProperties": false,
                              "properties": {
                                "name": {
                                  "description": "The name of the config option",
                                  "type": "string"
                                },
                                "displayName": {
                                  "description": "A human-readable and nicely formatted name for the option",
                                  "type": "string"
                                },
                                "required": {
                                  "description": "Whether the option is required for this EAP variant or optional",
                                  "type": "boolean"
                                },
                                "type": {
                                  "description": "The type of the value. If string, a non-sensitive string like a username. If password, a sensitive string like a passphrase for a keyfile or a password. If file, upload the file with POST /wifi/keys and pass the hash.",
                                  "type": "string",
                                  "enum": ["string", "password", "file"]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "options": [
                    {"name": "peap/mschapv2",
                     "displayName": "PEAP/MS-CHAP v2",
                     "options": [
                       {"name": "identity",
                        "displayName": "Username",
                        "required": true,
                        "type": "string"
                       },
                       {"name": "anonymousIdentity",
                        "displayName": "Anonymous Identity",
                        "required": false,
                        "type": "string"},
                       {"name": "caCert",
                        "displayName": "CA Certificate File",
                        "required": false,
                        "type": "file"},
                       {"name": "password",
                        "displayName": "password",
                        "required": true,
                        "type": "password"}
                     ]}
                  ]
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/identify": {
      "post": {
        "operationId": "identifyRobot",
        "tags": ["control"],
        "description": "Blink the OT-2's gantry lights so you can pick it out of a crowd",
        "parameters": [
          {
            "name": "seconds",
            "in": "query",
            "required": false,
            "schema": {"type": "number"},
            "description": "Time to blink the lights for",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "A notification that the identification procedure has begun",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "identifying"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/modules": {
      "get": {
        "operationId": "getAttachedModules",
        "tags": ["control", "modules"],
        "description": "Describe the modules attached to the OT-2",
        "responses": {
          "200": {
            "description": "A list of all attached modules and the status of each one",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["modules"],
                  "additionalProperties": false,
                  "properties": {
                    "modules": {
                      "type": "array",
                      "items": {
                        "description": "An object identifying a module",
                        "type": "object",
                        "required": ["model", "moduleModel", "name", "displayName", "port", "serial", "revision", "fwVersion", "status", "data", "hasAvailableUpdate"],
                        "properties": {
                          "hasAvailableUpdate": {
                            "description": "if set, a module update is available",
                            "type": "boolean"
                          },
                          "name": {
                            "description": "A machine readable identifying name for a module. Provided for backcompatibility. Prefer use of moduleModel",
                            "type": "string"
                          },
                          "moduleModel": {
                            "description": "The model of the module, suitable for looking up the definition (e.g. magneticModuleV1)",
                            "type": "string"
                          },
                          "displayName": {
                            "description": "A human readable description of the module. Provided for backcompatibility. Prefer looking up the display name in the module definition",
                            "type": "string"
                          },
                          "model": {
                            "description": "The old name of the module hardware revision (e.g. temp_deck_v4.0). Provided for backcompatibility. Prefer use of revision",
                            "type": "string"
                          },
                          "port": {
                            "description": "The virtual port to which the module is attached",
                            "type": "string"
                          },
                          "serial": {
                            "description": "The unique serial number of the module",
                            "type": "string"
                          },
                          "revision": {
                            "description": "The hardware revision identifier (i.e. the part number)",
                            "type": "string"
                          },
                          "fwVersion": {
                            "description": "The current firmware version",
                            "type": "string"
                          },
                          "status": {
                            "description": "A human-readable module-specific status",
                            "type": "string"
                          },
                          "data": { "$ref": "#/components/schemas/moduleLiveData" }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "nothingAttached": {
                    "description": "With no modules present",
                    "value": {
                      "modules": []
                    }
                  },
                  "magneticModuleAttached": {
                    "description": "With a Magnetic Module attached",
                    "value": {
                      "modules": [
                        {
                          "model": "mag_deck_v4.0",
                          "name": "magdeck",
                          "moduleModel": "magneticModuleV1",
                          "displayName": "magdeck",
                          "port": "tty01_magdeck",
                          "serial": "MDV2313121",
                          "revision": "mag_deck_v4.0",
                          "fwVersion": "2.1.3",
                          "hasAvailableUpdate": true,
                          "status": "engaged",
                          "data": {
                            "engaged": true,
                            "height": 10
                          }
                        }
                      ]
                    }
                  },
                  "tempDeckAttached": {
                    "description": "With a Temperature Module GEN2 attached",
                    "value": {
                      "modules": [
                        {
                          "moduleModel": "temperatureModuleV2",
                          "model": "temp_deck_v20",
                          "name": "tempdeck",
                          "displayName": "tempdeck",
                          "port": "tty2_tempdeck",
                          "serial": "TDV20231231",
                          "revision": "temp_deck_v20",
                          "fwVersion": "1.2.0",
                          "status": "cooling",
                          "hasAvailableUpdate": false,
                          "data": {
                            "currentTemp": 25,
                            "targetTemp": 10
                          }
                        }
                      ]
                    }
                  },
                  "thermocyclerAttached": {
                    "description": "With a Thermocycler attached",
                    "value": {
                      "modules": [
                        {
                          "model": "thermocycler_v10",
                          "moduleModel": "thermocyclerModuleV1",
                          "displayName": "thermocycler",
                          "name": "thermocycler",
                          "port": "tty3_thermocycler",
                          "serial": "TCV1006052018",
                          "model": "thermocycler_v10",
                          "fwVersion": "1.0.0",
                          "hasAvailableUpdate": false,
                          "status": "cooling",
                          "data": {
                            "lid": "closed",
                            "lidTarget": 10,
                            "lidTemp": 15,
                            "currentTemp": 20,
                            "targetTemp": 10,
                            "holdTime": null,
                            "rampRate": 10,
                            "currentCycleIndex": null,
                            "totalCycleCount": null,
                            "currentStepIndex": null,
                            "totalStepCount": null
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/modules/{serial}/data": {
      "parameters": [
        {
          "name": "serial",
          "in": "path",
          "schema": {"type": "string"},
          "required": true
        }
      ],
      "get": {
        "operationId": "getModuleData",
        "tags": ["control", "modules"],
        "description": "Get live data for a specific module",
        "summary": "This is similar to the values in GET /modules, but for only a specific currently-attached module",
        "responses": {
          "200": {
            "description": "Data from the module",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status", "data"],
                  "additionalProperties": false,
                  "properties": {
                    "status": {
                      "description": "A human-readable module-specific status",
                      "type": "string"
                    },
                    "data": {"$ref": "#/components/schemas/moduleLiveData"}
                  }
                },
                "examples": {
                  "magneticModule": {
                    "description": "Specifying a Magnetic Module",
                    "value": {
                      "status": "engaged",
                      "data": {
                        "engaged": true,
                        "height": 10
                      }
                    }
                  },
                  "tempDeck": {
                    "description": "Specifying a Temperature Module",
                    "value": {
                      "status": "cooling",
                      "data": {
                        "currentTemp": 25,
                        "targetTemp": 10
                      }
                    }
                  },
                  "thermocycler": {
                    "description": "Specifying a Thermocycler",
                    "value": {
                      "status": "cooling",
                      "data": {
                        "lid": "closed",
                        "lidTarget": 10,
                        "lidTemp": 15,
                        "currentTemp": 20,
                        "targetTemp": 10,
                        "holdTime": null,
                        "rampRate": 10,
                        "currentCycleIndex": null,
                        "totalCycleCount": null,
                        "currentStepIndex": null,
                        "totalStepCount": null
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Module serial not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ErrorMessage"
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/modules/{serial}": {
      "parameters": [
        {
          "name": "serial",
          "in": "path",
          "schema": {"type": "string"},
          "required": true
        }
      ],
      "post": {
        "description": "Execute a command on a specific module",
        "summary": "Command a module to take an action. Valid actions depend on the specific module attached, which is the model value from GET /modules/{serial}/data or GET /modules",
        "operationId": "executeModuleCommand",
        "tags": ["control", "modules"],
        "requestBody": {
          "description": "The serialized module call",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["command_type"],
                "properties": {
                  "command_type": {
                    "type": "string",
                    "description": "The name of the module function to call"
                  },
                  "args": {
                    "description": "The ordered args list for the call",
                    "type": "array"
                  }
                }
              },
              "examples": {
                "tempModSetTemp": {
                  "summary": "Set Temperature Module temperature",
                  "description": "Set the temperature of an attached Temperature Module",
                  "value": {
                    "command_type": "set_temperature",
                    "args": [60]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The result of a successful call",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["message", "returnValue"],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human readable string"
                    },
                    "returnValue": {
                      "description": "The return value from the call"
                    }
                  }
                },
                "examples": {
                  "tempModSetTemperature": {
                    "summary": "Set temperature OK",
                    "description": "A successful call to set_temperature on a Temperature Module",
                    "value": {
                      "message": "Success",
                      "returnValue": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ErrorMessage"
                },
                "examples": {
                  "mispelledCommand": {
                    "summary": "Mispelled command",
                    "description": "Incorrect spelling of set_temperature",
                    "value": {
                      "message": "Module does not have command: sort_timecards"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid module serial specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ErrorMessage"
                }
              }
            },
            "links": {
              "move": {
                "description": "List attached modules",
                "operationId": "getAttachedModules"
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/modules/{serial}/update": {
      "parameters": [
        {
          "name": "serial",
          "in": "path",
          "schema": { "type": "string" },
          "required": true
        }
      ],
      "post": {
        "description": "Initiate a firmware update on a specific module",
        "summary": "Command robot to flash its bundled firmware file for this module's type to this specific module",
        "operationId": "updateModule",
        "tags": ["update", "modules"],
        "responses": {
          "200": {
            "description": "Confirm successful update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["message"],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human readable string"
                    }
                  }
                },
                "examples": {
                  "updateThermocyclerModule": {
                    "summary": "Module Firmware Update Success OK",
                    "description": "A successful firmware update on Thermocycler",
                    "value": {
                      "message": "Successully updated module TCV012019123456",
                      "returnValue": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid module serial specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ErrorMessage"
                }
              }
            },
            "links": {
              "move": {
                "description": "List attached modules",
                "operationId": "getAttachedModules"
              }
            }
          },
          "500": {
            "description": "Something went wrong when attempting module firmware update",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {
                  "message": "Bootloader error: cannot find SAMBA device on port /dev/ttyACM0"
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/camera/picture": {
      "post": {
        "operationId": "takePicture",
        "tags": ["control"],
        "description": "Capture an image from the OT-2's onboard camera and return it",
        "responses": {
          "200": {
            "description": "The image",
            "content": {
              "image/jpeg": {
                "schema": {"type": "string", "format": "binary"}
              }
            }
          },
          "500": {
            "description": "Something went wrong when taking the picture",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "picture not saved"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/pipettes": {
      "parameters": [
        {
          "name": "refresh",
          "in": "query",
          "schema": {"type": "boolean"},
          "description": "If true, actively scan for attached pipettes. Note: this requires disabling the pipette motors and should only be done when no protocol is running and you know it won't cause a problem"
        }
      ],
      "get": {
        "operationId": "getAttachedPipettes",
        "tags": ["control", "pipettes"],
        "description": "Get the pipettes currently attached",
        "summary": "This endpoint lists properties of the pipettes currently attached to the robot like name, model, and mount. It queries a cached value unless the refresh query parameter is set to true, in which case it will actively scan for pipettes. This requires disabling the pipette motors (which is done automatically) and therefore should only be done through user intent",
        "responses": {
          "200": {
            "description": "Data about the attached pipettes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["left", "right"],
                  "properties": {
                    "left": {"$ref": "#/components/schemas/attachedPipette"},
                    "right": {"$ref": "#/components/schemas/attachedPipette"}
                  }
                },
                "example": {
                  "left": {
                    "model": "p300_single_v1.5",
                    "name": "p300_single",
                    "tip_length": 51.7,
                    "mount_axis": "z",
                    "plunger_axis": "b",
                    "id": "P3HS12123041"
                  },
                  "right": {
                    "model": null,
                    "name": null,
                    "tip_length": null,
                    "mount_axis": "a",
                    "plunger_axis": "c",
                    "id": null
                  }
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/motors/engaged": {
      "get": {
        "operationId": "getEngagedRobotMotors",
        "description": "Query which motors are engaged and holding",
        "tags": ["control"],
        "responses": {
          "200": {
            "description":" Which motors are engaged",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["x", "y", "z", "a", "b", "c"],
                  "additionalProperties": false,
                  "properties": {
                    "x": {"type": "object",
                          "additionalProperties": false,
                          "required": ["enabled"],
                          "properties": {"enabled": {"type": "boolean"}}},
                    "y": {"type": "object",
                          "additionalProperties": false,
                          "required": ["enabled"],
                          "properties": {"enabled": {"type": "boolean"}}},
                    "z": {"type": "object",
                          "additionalProperties": false,
                          "required": ["enabled"],
                          "properties": {"enabled": {"type": "boolean"}}},
                    "a": {"type": "object",
                          "additionalProperties": false,
                          "required": ["enabled"],
                          "properties": {"enabled": {"type": "boolean"}}},
                    "b": {"type": "object",
                          "additionalProperties": false,
                          "required": ["enabled"],
                          "properties": {"enabled": {"type": "boolean"}}},
                    "c": {"type": "object",
                          "additionalProperties": false,
                          "required": ["enabled"],
                          "properties": {"enabled": {"type": "boolean"}}}
                  }
                },
                "example": {
                  "x": {"enabled": false},
                  "y": {"enabled": true},
                  "z": {"enabled": false},
                  "a": {"enabled": true},
                  "b": {"enabled": false},
                  "c": {"enabled": true}
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/motors/disengage": {
      "post": {
        "operationId": "disengageRobotMotors",
        "description": "Disengage a motor or set of motors",
        "tags": ["control"],
        "requestBody": {
          "required": true,
          "description": "A list of motor axes to disengage",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["x", "y", "z", "a", "b", "c"]
                }
              },
              "example": ["x", "y", "b"]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requested axes have been disabled",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Disengaged axes: x, y, b"}
              }
            }
          },
          "400": {
            "description": "Bad request body or nonexistent axes",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Invalid axes: v"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/robot/positions": {
      "get": {
        "operationId": "getRobotPositions",
        "description": "Get a list of useful positions",
        "tags": ["control"],
        "responses": {
          "200": {
            "description": "The positions and their names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["positions"],
                  "additionalProperties": false,
                  "properties": {
                    "positions": {
                      "type": "object",
                      "required": ["change_pipette", "attach_tip"],
                      "additionalProperties": false,
                      "properties": {
                        "change_pipette": {
                          "type": "object",
                          "required": ["target", "left", "right"],
                          "additionalProperties": false,
                          "properties": {
                            "target": { "$ref": "#/components/schemas/motionTarget"},
                            "left": { "$ref": "#/components/schemas/point" },
                            "right": { "$ref": "#/components/schemas/point" }
                          }
                        },
                        "attach_tip": {
                          "type": "object",
                          "required": ["target", "point"],
                          "additionalProperties": false,
                          "properties": {
                            "target": { "$ref": "#/components/schemas/motionTarget"},
                            "point": { "$ref": "#/components/schemas/point" }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "positions": {
                    "change_pipette": {
                      "target": "mount",
                      "left": [325, 40, 30],
                      "right": [65, 40, 30]
                    },
                    "attach_tip": {
                      "target": "pipette",
                      "point": [200, 90, 150]
                    }
                  }
                }
              }
            },
            "links": {
              "move": {
                "description": "Move robot to a position identified by the response",
                "operationId": "moveRobotGantry"
              }
            }
          }
        }
      }
    },
    "/robot/move": {
      "post": {
        "operationId": "moveRobotGantry",
        "description": "Move the robot's gantry to a position (usually to a position retrieved from GET /robot/positions)",
        "tags": ["control"],
        "requestBody": {
          "description": "Specify the place to move to (as a point) and the thing to move (combining motion target, mount, and model if necessary)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["target", "point", "mount"],
                "properties": {
                  "target": {
                    "$ref": "#/components/schemas/motionTarget"
                  },
                  "point": {
                    "$ref": "#/components/schemas/point"
                  },
                  "mount": {
                    "description": "which mount to move",
                    "type": "string",
                    "enum": ["right", "left"]
                  },
                  "model": {
                    "description": "A pipette model that matches the pipette attached to the specified mount. Required if target is \"pipette\" ",
                    "type": "string"
                  }
                }
              },
              "examples": {
                "moveLeftMount": {
                  "description": "Move the left mount, regardless of what is attached to that mount, to a specific position. Since you move the mount, the end of the pipette will be in different places depending on what pipette is attached - but you don't have to know what's attached.",
                  "summary": "Move left mount",
                  "value": {
                    "target": "mount",
                    "point": [100, 100, 80],
                    "mount": "left"
                  }
                },
                "moveRightP300Single": {
                  "summary": "Move P300 Single on right mount",
                  "description": "Move a P300 Single attached to the right mount to a specific position. You have to specify that it's a P300 Single that you're moving, but as long as you specify the correct model the end of the pipette will always be at the specified position.",
                  "value": {
                    "target": "pipette",
                    "mount": "right",
                    "model": "p300_single",
                    "point": [25, 25, 50]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Move successfully executed",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {"message": "Move copmlete. New position: (25, 25, 50)"}
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {"message": "Invalid target key: 'robot' (target must be one of 'mount' or 'pipette')"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/robot/home": {
      "post": {
        "operationId": "homeRobot",
        "tags": ["control"],
        "description": "Home the robot",
        "requestBody": {
          "description": "Parameters for the home",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["target"],
                "properties": {
                  "target": {
                    "description": "What to home. Robot means to home all axes; pipette, only that pipette's carriage and pipette axes",
                    "type": "string",
                    "enum": ["robot", "pipette"]
                  },
                  "mount": {
                    "description": "Which mount to home, if target is \"pipette\" (required in that case)",
                    "type": "string",
                    "enum": ["left", "right"]
                  }
                }
              },
              "examples": {
                "homeGantry": {
                  "summary": "Home Gantry",
                  "description": "Home the robot's gantry",
                  "value": {
                    "target": "robot"
                  }
                },
                "homeRight": {
                  "summary": "Home right pipette",
                  "description": "Home only the right pipette",
                  "value": {
                    "target": "pipette",
                    "mount": "right"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Robot successfully homed",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Homing robot."}
              }
            }
          },
          "400": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Expected 'left' or 'right' as values for mountgot top instead."}
              }
            }
          },
          "500": {
            "description": "Internal homing error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorWithTraceback"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/robot/lights": {
      "get": {
        "operationId": "getRobotLights",
        "tags": ["control"],
        "description": "Get the current status of the OT-2's rail lights",
        "responses": {
          "200": {
            "description": "The status of the rail lights",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/lightState" },
                "example": {
                  "on": true
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      },
      "post": {
        "operationId": "setRobotLights",
        "tags": ["control"],
        "description": "Turn the rail lights on or off",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/lightState" },
              "example": {
                "on": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new state of the lights",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/lightState"},
                "example": {"on": false}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/calibration/deck/start": {
      "post": {
        "operationId": "deckCalibrationStart",
        "tags": ["deckCalibration"],
        "description": "Begin (or restart) a deck calibration session",
        "requestBody": {
          "description": "Send a json formatted body as described here to force refresh the deck calibration session if one is ongoing",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Set to true to refresh the session",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The session was created",
            "links": {
              "dispatch": {
                "description": "Dispatch deck calibration commands once you have a session",
                "operationId": "deckCalibrationDispatch",
                "requestBody": "$response.body#/token"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["token", "pipette"],
                  "properties": {
                    "token": {
                      "description": "The token to send along in future deck calibration actions",
                      "type": "string",
                      "format": "uuid"
                    },
                    "pipette": {
                      "description": "Details of the pipette the system has selected for use in deck calibration",
                      "type": "object",
                      "required": ["mount", "model"],
                      "additionalProperties": false,
                      "properties": {
                        "mount": {"$ref": "#/components/schemas/mount"},
                        "model": {
                          "type": "string",
                          "description": "The model of the pipette attached in this mount"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e",
                  "pipette": {
                    "mount": "right",
                    "model": "p10_single_v1.5"
                  }
                }
              }
            }
          },
          "403": {
            "description": "No pipette is attached, or the attached pipette cannot be read",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Error, pipette not recognized"}
              }
            }
          },
          "409": {
            "description": "There is already a session in progress",
            "links": {
              "forceBegin": {
                "description": "Re-request a session and force refresh",
                "operationId": "deckCalibrationStart",
                "requestBody": "{\"force\": true }"
              }
            },
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Error, session in progress. Use  \"force\" key in request body to override"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/calibration/deck": {
      "post": {
        "operationId": "deckCalibrationDispatch",
        "tags": ["deckCalibration"],
        "description": "Execute a deck calibration action",
        "requestBody": {
          "required": true,
          "description": "The operation to execute and any required parameters",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {"$ref": "#/components/schemas/deckCalibrationDispatchJog"},
                  {"$ref": "#/components/schemas/deckCalibrationDispatchMove"},
                  {"$ref": "#/components/schemas/deckCalibrationDispatchSaveXY"},
                  {"$ref": "#/components/schemas/deckCalibrationDispatchAttachTip"},
                  {"$ref": "#/components/schemas/deckCalibrationDispatchDetachTip"},
                  {"$ref": "#/components/schemas/deckCalibrationDispatchSaveZ"},
                  {"$ref": "#/components/schemas/deckCalibrationDispatchSaveTransform"},
                  {"$ref": "#/components/schemas/deckCalibrationDispatchRelease"}
                ]
              },
              "examples": {
                "jog": {
                  "description": "Jog +1mm in X",
                  "value": {
                    "command": "jog",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e",
                    "axis": "x",
                    "direction": 1,
                    "distance": 1
                  }
                },
                "move": {
                  "description": "Move to cross 1",
                  "value": {
                    "command": "move",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e",
                    "point": "1"
                  }
                },
                "savexy": {
                  "description": "Save the XY position of cross 2 (in slot 3)",
                  "value": {
                    "command": "save xy",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e",
                    "point": "2"
                  }
                },
                "attachTip": {
                  "description": "Inform the OT-2 that a tip is attached",
                  "value": {
                    "command": "attach tip",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e",
                    "tipLength": 51.7
                  }
                },
                "detachTip": {
                  "description": "Inform the OT-2 that a tip has been removed",
                  "value": {
                    "command": "detach tip",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e"
                  }
                },
                "saveZ": {
                  "description": "Save the current Z position as the height of the deck",
                  "value": {
                    "command": "save z",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e"
                  }
                },
                "saveTransform": {
                  "description": "Save the current transform after saving all positions",
                  "value": {
                    "command": "save transform",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e"
                  }
                },
                "release": {
                  "description": "End the deck calibration session",
                  "value": {
                    "command": "release",
                    "token": "1fdec5cc-234a-11ea-b24d-f2189817b27e"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["message"],
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "418": {
            "description": "No session ongoing",
            "links": {
              "startSession": {
                "operationId": "deckCalibrationStart"
              }
            },
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Session must be started before issuing commands"}
              }
            }
          },
          "400": {
            "description": "Internal assertion failure, probably from a bad request",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "\"command\" field required for calibration requests"}
              }
            }
          },
          "403": {
            "description": "Invalid token",
            "links": {
              "startSession": {
                "operationId": "deckCalibrationStart"
              }
            },
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Invalid token: notatoken"}
              }
            }
          },
          "500": {
            "description": "Internal error during command dispatch",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "Exception FileNotFoundError raised by dispatch of move: <traceback>"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/settings": {
      "post": {
        "tags": ["settings"],
        "operationId": "setAdvancedSettings",
        "description": "Change an advanced setting (feature flag)",
        "requestBody": {
          "description": "Configure the setting to change and the new value",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the setting to change (something returned by GET /settings)"
                  },
                  "value": {
                    "type": "boolean",
                    "description": "The new value to set. If null, reset to default",
                    "nullable": true
                  }
                }
              },
              "examples": {
                "calibrateToBottom": {
                  "summary": "Calibrate To Bottom",
                  "description": "Tell the robot to move to the bottom of labware wells during labware calibration",
                  "value": {
                    "id": "calibrateToBottom",
                    "value": true
                  }
                },
                "resetHomeOnBoot": {
                  "summary": "Home On Boot",
                  "description": "Regardless of current setting, reset the Disable Home On Boot setting to its default",
                  "value": {
                    "id": "disableHomeOnBoot"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/advancedSettings" },
          "400": {
            "description": "Bad settings ID",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v2ErrorMessage"}
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      },
      "get": {
        "tags": ["settings"],
        "description": "Get a list of available advanced settings (feature flags) and their values",
        "operationId": "getAdvancedSettings",
        "responses": {
          "200": { "$ref": "#/components/responses/advancedSettings" },
          "502": {"$ref": "#/components/responses/serverDown"}
        }
      }
    },
    "/settings/log_level/local": {
      "post": {
        "tags": ["settings"],
        "operationId": "setLocalLogLevel",
        "description": "Set the minimum level of logs saved locally",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["log_level"],
                "properties": {
                  "log_level": {
                    "type": "string",
                    "enum": ["debug", "info", "warning", "error"],
                    "description": "The value to set (conforming to Python log levels)"
                  }
                }
              },
              "example": {
                "log_level": "info"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log level set OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {
                  "message": "log_level set to info"
                }
              }
            }
          },
          "400": {
            "description": "bad log_level",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {"message": "invalid log_level hellothere"}
              }
            }
          },
          "502": {"$ref": "#/components/responses/serverDown"}
        }
      }
    },
    "/settings/log_level/upstream": {
      "post": {
        "tags": ["settings"],
        "operationId": "setUpstreamLogLevel",
        "description": "Set the minimum level of logs sent upstream to Opentrons. Only available on a real robot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["log_level"],
                "properties": {
                  "log_level": {
                    "type": "string",
                    "enum": ["debug", "info", "warning", "error"],
                    "description": "The value to set (conforming to Python log levels)"
                  }
                }
              },
              "example": {
                "log_level": "info"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log level set OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {
                  "message": "log_level set to info"
                }
              }
            }
          },
          "400": {
            "description": "bad log_level",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/v1ErrorMessage" },
                "example": {"message": "invalid log_level hellothere"}
              }
            }
          },
          "502": {"$ref": "#/components/responses/serverDown"}
        }
      }
    },
    "/settings/reset/options": {
      "get": {
        "tags": ["settings"],
        "operationId": "getSettingsResetOptions",
        "description": "Get the settings that can be reset as part of factory reset",
        "responses": {
          "200": {
            "description": "Available things to reset as factory reset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["options"],
                  "properties": {
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["id", "name", "description"],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A short machine-readable id for the setting"
                          },
                          "name": {
                            "type": "string",
                            "description": "A short human-readable name for the setting"
                          },
                          "description": {
                            "type": "string",
                            "description": "A longer human-readable description of the setting"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "502": {"$ref": "#/components/responses/serverDown"}
        }
      }
    },
    "/settings/reset": {
      "post": {
        "tags": ["settings"],
        "operationId": "settingsReset",
        "description": "Perform a factory reset of some robot data",
        "requestBody": {
          "description": "The specific elements of robot data to reset",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "An object whose property names describe the resets to perform. Property names must be taken from the ids of the response of /settings/reset/options",
                "x-patternProperties": {
                  "*": {
                    "type": "boolean",
                    "nullable": true,
                    "description": "True to request a reset of this option; null (or not present) otherwise"
                  }
                }
              },
              "example": {
                "tipProbe": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Setting(s) reset OK, should restart",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid key reset",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v2ErrorMessage"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/settings/robot": {
      "get": {
        "description": "Get the current robot config.",
        "tags": ["settings"],
        "operationId": "getRobotSettings",
        "responses": {
          "200": {
            "description":" The robot settings, which are currently not schema controlled and may change without warning",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/settings/pipettes": {
      "get": {
        "description": "List all settings for all known pipettes by id",
        "tags": ["settings"],
        "operationId": "getAllPipetteSettings",
        "responses": {
          "200": {
            "description": "Settings for each pipette, keyed by the pipette ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-patternProperties": {
                    "*": { "$ref": "#/components/schemas/pipetteSettings" }
                  }
                },
                "example": {
                  "P20SV202019072505": {
                    "info": {
                      "name": "p20_single_gen2",
                      "model": "p20_single_gen2_v2.0"
                    },
                    "fields": {
                      "top": {
                        "value": 19.5,
                        "min": -45,
                        "max": 45,
                        "units": "mm",
                        "type": "float",
                        "default": 19.5
                      },
                      "quirks": {}
                    }
                  },
                  "P300M180502A18": {
                    "info": {
                      "name": "p300_multi",
                      "model": "p300_multi_v1"
                    },
                    "fields": {
                      "top": {
                        "value": 19.5,
                        "min": 19.5,
                        "max": 19.5,
                        "units": "mm",
                        "type": "float",
                        "default": 19.5
                      },
                      "quirks": {"dropTipShake": true}
                    }
                  }
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      }
    },
    "/settings/pipettes/{pipetteId}": {
      "parameters": [
        {
          "name": "pipetteId",
          "in": "path",
          "schema": {"type": "string"},
          "required": true
        }
      ],
      "get": {
        "description": "Get the settings of a specific pipette by ID",
        "tags": ["settings"],
        "operationId": "getSpecificPipetteSettings",
        "responses": {
          "200": {
            "description": "The settings for this pipette",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/pipetteSettings"},
                "example": {
                  "info": {
                    "name": "p20_single_gen2",
                    "model": "p20_single_gen2_v2.0"
                  },
                  "fields": {
                    "top": {
                      "value": 19.5,
                      "min": -45,
                      "max": 45,
                      "units": "mm",
                      "type": "float",
                      "default": 19.5
                    },
                    "quirks": {}
                  }
                }
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown" }
        }
      },
      "post": {
        "description": "Change the settings of a specific pipette",
        "tags": ["settings"],
        "operationId": "setSpecificPipetteSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-patternProperties": {
                  "*": {
                    "description": "A setting, with its key as the name of the setting (the same as in the GET). Quirks should be inlined in the same format, next to other settings",
                    "type": "object",
                    "required": ["value"],
                    "properties": {
                      "value": {
                        "oneOf": [
                          {
                            "type": "boolean",
                            "nullable": true,
                            "description": "The format if this is a quirk. Null means reset"
                          },
                          {
                            "type": "number",
                            "nullable": true,
                            "description": "The format if this is not a quirk. Must be between max and min for this property. Null means reset"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "example": {
                "fields": {
                  "top": {"value": null},
                  "dropTipShake": {"value": false}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Setting changed OK. Dumps the new settings for the pipette",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/pipetteSettings"}
              }
            }
          },
          "412": {
            "description": "A specified value was out of range",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/v1ErrorMessage"},
                "example": {"message": "top out of range with 300"}
              }
            }
          },
          "502": { "$ref": "#/components/responses/serverDown"}
        }
      }
    }
  }
}
