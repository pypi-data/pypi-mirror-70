# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Server(pulumi.CustomResource):
    action: pulumi.Output[str]
    cpu: pulumi.Output[str]
    description: pulumi.Output[str]
    hostname: pulumi.Output[str]
    location: pulumi.Output[str]
    os: pulumi.Output[str]
    private_ip_addresses: pulumi.Output[list]
    public_ip_addresses: pulumi.Output[list]
    ram: pulumi.Output[str]
    ssh_keys: pulumi.Output[list]
    status: pulumi.Output[str]
    storage: pulumi.Output[str]
    type: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, action=None, description=None, hostname=None, location=None, os=None, ssh_keys=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Server resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['action'] = action
            __props__['description'] = description
            if hostname is None:
                raise TypeError("Missing required property 'hostname'")
            __props__['hostname'] = hostname
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            if os is None:
                raise TypeError("Missing required property 'os'")
            __props__['os'] = os
            if ssh_keys is None:
                raise TypeError("Missing required property 'ssh_keys'")
            __props__['ssh_keys'] = ssh_keys
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['cpu'] = None
            __props__['private_ip_addresses'] = None
            __props__['public_ip_addresses'] = None
            __props__['ram'] = None
            __props__['status'] = None
            __props__['storage'] = None
        super(Server, __self__).__init__(
            'pnap:index/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, action=None, cpu=None, description=None, hostname=None, location=None, os=None, private_ip_addresses=None, public_ip_addresses=None, ram=None, ssh_keys=None, status=None, storage=None, type=None):
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["action"] = action
        __props__["cpu"] = cpu
        __props__["description"] = description
        __props__["hostname"] = hostname
        __props__["location"] = location
        __props__["os"] = os
        __props__["private_ip_addresses"] = private_ip_addresses
        __props__["public_ip_addresses"] = public_ip_addresses
        __props__["ram"] = ram
        __props__["ssh_keys"] = ssh_keys
        __props__["status"] = status
        __props__["storage"] = storage
        __props__["type"] = type
        return Server(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

