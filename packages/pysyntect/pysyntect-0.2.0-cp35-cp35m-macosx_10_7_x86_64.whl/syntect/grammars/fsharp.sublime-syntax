%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: fsharp
file_extensions:
  - fs
scope: source.fsharp
contexts:
  main:
    - include: comments
    - include: constants
    - include: attributes
    - include: strings
    - include: chars
    - include: double_tick
    - include: definition
    - include: modules
    - include: anonymous_functions
    - include: keywords
    - include: records
    - include: cexprs
    - include: text
  anonymous_functions:
    - match: \b(fun)\b
      captures:
        1: keyword.other.function-definition.fsharp
      push:
        - meta_scope: function.anonymous
        - match: '[(->)\n]'
          captures:
            1: keyword.other.fsharp
          pop: true
        - include: variables
  attributes:
    - match: '\[\<'
      push:
        - meta_scope: support.function.attribute.fsharp
        - match: '\>\]'
          pop: true
        - include: main
  cexprs:
    - match: '\b([[:alpha:]]*\s+\{)'
      scope: cexpr.fsharp
      captures:
        1: keyword.other.fsharp
  chars:
    - match: ('\\?.')
      scope: char.fsharp
      captures:
        1: string.quoted.single.fsharp
  comments:
    - match: (\(\*(?!\)))
      captures:
        1: comment.block.fsharp
      push:
        - meta_scope: comment.block.fsharp
        - match: (\*\))
          captures:
            1: comment.block.fsharp
          pop: true
    - match: //.*$
      scope: comment.line.double-slash.fsharp
  constants:
    - match: \(\)
      scope: constant.language.unit.fsharp
    - match: '\b-?[0-9][0-9_]*((\.([0-9][0-9_]*([eE][+-]??[0-9][0-9_]*)?)?)|([eE][+-]??[0-9][0-9_]*))'
      scope: constant.numeric.floating-point.fsharp
    - match: '\b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))'
      scope: constant.numeric.integer.nativeint.fsharp
    - match: \b(true|false|null|unit)\b
      scope: constant.others.fsharp
  definition:
    - match: '\b(val mutable|val|let mutable|let inline|let|member|static member|override|let!)(\s+rec|mutable)?(\s+private|internal|public)?\s+(\([^\s-]*\)|[_[:alpha:]]([_[:alpha:]0-9,\.]|(?<=,)\s)*)'
      captures:
        1: keyword.other.binding.fsharp
        2: keyword.other.function-recursive.fsharp
        3: keyword.other.access.fsharp
        4: variable.other.binding.fsharp
      push:
        - meta_scope: binding.fsharp
        - match: ((``.*``)|(with)|=|$)
          captures:
            1: keyword.other.fsharp
            2: variable.other.binding.fsharp
            3: keyword.other.fsharp
          pop: true
        - include: variables
  double_tick:
    - match: (``)(.*)(``)
      scope: variable.other.binding.fsharp
      captures:
        1: string.quoted.single.fsharp
        2: variable.other.binding.fsharp
        3: string.quoted.single.fsharp
  keywords:
    - match: \b(function|yield!|yield|class|match|delegate|of|new|in|as|if|then|else|elif|for|begin|end|inherit|do|let\!|return\!|return|interface|with|abstract|member|try|finally|and|when|use|use\!|struct|while)\b
      scope: keyword.other.fsharp
    - match: ^\s*#\s*(light)\b
      push:
        - meta_scope: meta.preprocessor.fsharp
        - match: (\s|$)
          pop: true
    - match: '(&&&|\|\|\||\^\^\^|~~~|<<<|>>>|\|>|\->|\<\-|:>|:\?>|:|\[|\]|\;|<>|=|@|\|\||&&|{|}|\||_|\.\.|\+|\-|\*|\/|\^|\!|\>|\>\=|\>\>|\<|\<\=|\<\<)'
      scope: keyword.other.fsharp
  modules:
    - match: '\b(namespace|module)(\s+public|internal|private)?\s+([[:alpha:]][[:alpha:]0-9''_. ]*)'
      captures:
        1: keyword.other.fsharp
        2: keyword.other.fsharp
        3: entity.name.section.fsharp
      push:
        - meta_scope: entity.name.section.fsharp
        - match: (\s|$)
          pop: true
        - match: '(\.)([A-Z][[:alpha:]0-9''_]*)'
          scope: entity.name.section.fsharp
          captures:
            1: punctuation.separator.namespace-reference.fsharp
            2: entity.name.section.fsharp
    - match: '\b(open)\s+([[:alpha:]][[:alpha:]0-9''_]*)(?=(\.[A-Z][[:alpha:]0-9_]*)*)'
      captures:
        1: keyword.other.fsharp
        2: entity.name.section.fsharp
      push:
        - meta_scope: namespace.open.fsharp
        - match: (\s|$)
          pop: true
        - match: '(\.)([[:alpha:]][[:alpha:]0-9''_]*)'
          scope: entity.name.section.fsharp
          captures:
            1: punctuation.separator.namespace-reference.fsharp
            2: entity.name.section.fsharp
    - match: '^\s*(module)\s+([A-Z][[:alpha:]0-9''_]*)\s*(=)\s*([A-Z][[:alpha:]0-9''_]*)'
      captures:
        1: keyword.other.namespace-definition.fsharp
        2: entity.name.type.namespace.fsharp
        3: punctuation.separator.namespace-definition.fsharp
        4: entity.name.section.fsharp
      push:
        - meta_scope: namespace.alias.fsharp
        - match: (\s|$)
          pop: true
        - match: '(\.)([A-Z][[:alpha:]0-9''_]*)'
          scope: entity.name.section.fsharp
          captures:
            1: punctuation.separator.namespace-reference.fsharp
            2: entity.name.section.fsharp
  records:
    - match: '(type)[\s]+(private|internal|public)?[\s]*([[:alpha:]0-9''<>^:,. ]+)[\s]*(\([[:alpha:]0-9''<>^:,. ]+\))?[\s]*((with)|(as [[:alpha:]0-9'']+)|(=)|(\(\)))'
      scope: record.fsharp
      captures:
        1: keyword.other.fsharp
        2: keyword.other.fsharp
        3: entity.name.type.fsharp
        4: entity.name.type.fsharp
        6: keyword.other.fsharp
        7: keyword.other.fsharp
        8: keyword.other.fsharp
        9: constant.language.unit.fsharp
  strings:
    - match: '(?=[^\\])(@")'
      captures:
        1: punctuation.definition.string.begin.fsharp
      push:
        - meta_scope: string.quoted.literal.fsharp
        - match: (")(?!")
          captures:
            1: punctuation.definition.string.end.fsharp
          pop: true
        - match: '"(")'
          scope: constant.character.string.escape.fsharp
    - match: '(?=[^\\])(""")'
      captures:
        1: punctuation.definition.string.begin.fsharp
      push:
        - meta_scope: string.quoted.triple.fsharp
        - match: (""")
          captures:
            1: punctuation.definition.string.end.fsharp
          pop: true
    - match: '(?=[^\\])(")'
      captures:
        1: punctuation.definition.string.begin.fsharp
      push:
        - meta_scope: string.quoted.double.fsharp
        - match: (")
          captures:
            1: punctuation.definition.string.end.fsharp
          pop: true
        - match: '\\$[ \t]*'
          scope: punctuation.separator.string.ignore-eol.fsharp
        - match: '\\([\\''''ntbr]|u[a-fA-F0-9]{4}|u[a-fA-F0-9]{8})'
          scope: constant.character.string.escape.fsharp
        - match: '\\(?![\\''''ntbr]|u[a-fA-F0-9]{4}|u[a-fA-F0-9]{8}).'
          scope: invalid.illeagal.character.string.fsharp
  text:
    - match: \\
      scope: text.fsharp
  variables:
    - match: \(\)
      scope: constant.language.unit.fsharp
    - match: '[[:alpha:]'']\w*'
      scope: variable.parameter.fsharp
