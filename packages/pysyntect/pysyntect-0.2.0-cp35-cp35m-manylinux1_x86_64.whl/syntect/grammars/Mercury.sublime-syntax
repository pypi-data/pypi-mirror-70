%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Mercury
file_extensions:
  - m
  - moo
scope: source.mercury
contexts:
  main:
    - include: number
    - include: string_quoted_double
    - include: inline_bin_op
    - include: atom
    - include: block_comment
    - include: line_comment
    - include: decl_keywords
    - include: purity_level
    - include: declarations
    - include: common_ops
    - include: determ_keywords
    - include: logic_keywords
    - include: foreign_mods
    - include: variables
  atom:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.source.mercury
      push:
        - meta_scope: string.quoted.single.source.mercury
        - match: "'(?!['])"
          captures:
            0: punctuation.definition.string.end.source.mercury
          pop: true
        - match: \\.
          scope: constant.character.escape.source.mercury
        - match: \'\'
          scope: constant.character.escape.quote.source.mercury
  block_comment:
    - match: /\*
      captures:
        0: punctuation.definition.comment.source.mercury
      push:
        - meta_scope: comment.block.source.mercury
        - match: \*/
          captures:
            0: punctuation.definition.comment.source.mercury
          pop: true
  common_ops:
    - match: '(-(?![>-])|[+](?![+])|[*][*]?|/(?![\\/])|//|\\(?![/=]))'
      scope: keyword.operator.arithmetic.source.mercury
    - match: "(=<|>=|<(?![=])|(?![-])>)"
      scope: keyword.operator.comparison.source.mercury
    - match: '(<=>|<=|=>|\\=|==|:-|=(?![=<>])|,|;|->|/\\(?![=])|\\/|@)'
      scope: keyword.operator.logic.source.mercury
    - match: '(-->|--->|[+][+](?![+])|::|:=|![\.:]?|\||\^)'
      scope: keyword.operator.other.source.mercury
    - match: '(\(|\)|\[|\]|\{|\})'
      scope: keyword.operator.list.source.mercury
    - match: '\.(?=[ \t]*($|%))'
      scope: keyword.operator.terminator.source.mercury
  decl_keywords:
    - match: \b(is|where)\b
      scope: keyword.control.declaration.source.mercury
  declarations:
    - match: '(?x)(^[ \t]*:-)[ ]((use|include|end|import|)_module|module |func|pred|type(class)?|inst(ance)? |mode|interface|implementation )\b'
      scope: keyword.control.declaration.source.mercury
      captures:
        1: keyword.operator.logic.source.mercury
    - match: '(?x)(^[ \t]*:-)[ ](pragma)[ ](check_termination|does_not_terminate|fact_table |inline|loop_check|memo|minimal_model|no_inline |obsolete|promise_equivalent_clauses|source_file |terminates|type_spec |foreign_(proc|type|decl|code|export(_enum)? |enum|import_module) )\b'
      scope: constant.language.pragma.source.mercury
      captures:
        1: keyword.operator.logic.source.mercury
        2: keyword.control.pragma.source.mercury
  determ_keywords:
    - match: (?x)\b(require_(_switch_arms)?)?(multi|cc_(multi|nondet) |det|semidet|nondet |errorneous|failure )\b
      scope: constant.language.determ.source.mercury
  foreign_mods:
    - match: (?x)\b(affects_liveness|(does_not|doesnt)_affect_liveness |attach_to_io_state |can_pass_as_mercury_type|stable |(may_call|will_not)(_call_mercury|_modify) |(may_)(not_)?_duplicate |(no_|unknown_)?sharing|tabled_for_io|local |(un)?trailed |(not_|maybe_)?thread_safe |will_not_throw_exception )\b
      scope: storage.type.source.mercury
  impl_defined_variable:
    - match: '[$][a-zA-Z0-9_]*\b'
      scope: variable.language.source.mercury
  inline_bin_op:
    - match: "`[^`]+`"
      scope: keyword.operator.other.source.mercury
  line_comment:
    - match: '(^[ \t]+)?(%([-]+%)?)'
      captures:
        1: punctuation.whitespace.comment.leading.source.mercury
        2: comment.line.percentage.source.mercury
      push:
        - meta_scope: comment.comment.source.mercury
        - match: (?!\G)
          pop: true
        - match: '(([ \t]+(XXX|TODO|FIXME|WARNING|IMPORTANT|NOTE(_TO_IMPLEMENTORS)?)\b)*)(.*)'
          captures:
            0: comment.comment.source.mercury
            1: constant.language.warn.source.mercury
  logic_keywords:
    - match: (?x)\b(yes|no|true|false|(semidet_)?succeed|(semidet_)?fail |some|all|require_complete_switch )\b
      scope: constant.language.logic.source.mercury
  number:
    - match: '\b(0(?![''])[0-7]*|0[''].|[1-9][0-9]*|\.[0-9]+([eE][0-9]+)?|0[xX][0-9a-fA-F]+|0[bB][01]+)\b'
      scope: constant.numeric.source.mercury
  purity_level:
    - match: \b((promise_)(semi)?pure|(im|semi)?pure)\b
      scope: storage.type.source.mercury
  singleton_variable:
    - match: '\b_[A-Z]?[a-zA-Z0-9_]*\b'
      scope: support.variable
  string_quoted_double:
    - match: '"'
      captures:
        0: punctuation.literal.string.begin.source.mercury
      push:
        - meta_scope: string.quoted.double.source.mercury
        - match: '"(?!")'
          captures:
            0: punctuation.literal.string.end.source.mercury
          pop: true
        - match: \\.
          scope: constant.character.escapesource.mercury
        - match: '""'
          scope: constant.character.escape.quote.source.mercury
        - match: '%[I]?[-+# *\.0-9]*[dioxXucsfeEgGp]'
          scope: constant.character.escape.format.source.mercury
  variable:
    - match: '\b[A-Z][a-zA-Z0-9_]*\b'
      scope: variable.other
  variables:
    - include: impl_defined_variable
    - include: singleton_variable
    - include: variable
