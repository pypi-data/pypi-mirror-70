%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: AWK
file_extensions:
  - awk
scope: source.awk
contexts:
  main:
    - include: comment
    - include: procedure
    - include: pattern
  comment:
    - match: "#.*"
      scope: comment.line.number-sign.awk
  builtin-pattern:
    - match: \b(BEGINFILE|BEGIN|ENDFILE|END)\b
      scope: constant.language.awk
  command:
    - match: \b(?:next|print|printf)\b
      scope: keyword.other.command.awk
    - match: \b(?:close|getline|delete|system)\b
      scope: keyword.other.command.nawk
    - match: \b(?:fflush|nextfile)\b
      scope: keyword.other.command.bell-awk
  constant:
    - include: numeric-constant
    - include: string-constant
  escaped-char:
    - match: '\\(?:[\\abfnrtv/"]|x[0-9A-Fa-f]{2}|[0-7]{3})'
      scope: constant.character.escape.awk
  expression:
    - include: command
    - include: function
    - include: constant
    - include: variable
    - include: regexp-in-expression
    - include: operator
    - include: groupings
  function:
    - match: \b(?:exp|int|log|sqrt|index|length|split|sprintf|substr)\b
      scope: support.function.awk
    - match: \b(?:atan2|cos|rand|sin|srand|gsub|match|sub|tolower|toupper)\b
      scope: support.function.nawk
    - match: \b(?:gensub|strftime|systime)\b
      scope: support.function.gawk
  function-definition:
    - match: \b(function)\s+(\w+)(\()
      captures:
        1: storage.type.function.awk
        2: entity.name.function.awk
        3: punctuation.definition.parameters.begin.awk
      push:
        - match: \)
          captures:
            0: punctuation.definition.parameters.end.awk
          pop: true
        - match: \b(\w+)\b
          scope: variable.parameter.function.awk
        - match: \b(,)\b
          scope: punctuation.separator.parameters.awk
  groupings:
    - match: \(
      scope: meta.brace.round.awk
    - match: \)
      scope: meta.brace.round.awk
    - match: \,
      scope: punctuation.separator.parameters.awk
  keyword:
    - match: \b(?:break|continue|do|while|exit|for|if|else|return)\b
      scope: keyword.control.awk
  numeric-constant:
    - match: '\b[0-9]+(?:\.[0-9]+)?(?:e[+-][0-9]+)?\b'
      scope: constant.numeric.awk
  operator:
    - match: "(!?~|[=<>!]=|[<>])"
      scope: keyword.operator.comparison.awk
    - match: \b(in)\b
      scope: keyword.operator.comparison.awk
    - match: '([+\-*/%^]=|\+\+|--|>>|=)'
      scope: keyword.operator.assignment.awk
    - match: (\|\||&&|!)
      scope: keyword.operator.boolean.awk
    - match: '([+\-*/%^])'
      scope: keyword.operator.arithmetic.awk
    - match: "([?:])"
      scope: keyword.operator.trinary.awk
    - match: '(\[|\])'
      scope: keyword.operator.index.awk
  pattern:
    - include: regexp-as-pattern
    - include: function-definition
    - include: builtin-pattern
    - include: expression
  procedure:
    - match: '\{'
      push:
        - match: '\}'
          pop: true
        - include: comment
        - include: procedure
        - include: keyword
        - include: expression
  regex-as-assignment:
    - match: '([^=<>!+\-*/%^]=)\s*(/)'
      captures:
        1: keyword.operator.assignment.awk
        2: punctuation.definition.regex.begin.awk
      push:
        - meta_content_scope: string.regexp
        - match: /
          captures:
            0: punctuation.definition.regex.end.awk
          pop: true
        - include: scope:source.regexp
  regex-as-comparison:
    - match: (!?~)\s*(/)
      captures:
        1: keyword.operator.comparison.awk
        2: punctuation.definition.regex.begin.awk
      push:
        - meta_content_scope: string.regexp
        - match: /
          captures:
            0: punctuation.definition.regex.end.awk
          pop: true
        - include: scope:source.regexp
  regex-as-first-argument:
    - match: (\()\s*(/)
      captures:
        1: meta.brace.round.awk
        2: punctuation.definition.regex.begin.awk
      push:
        - meta_content_scope: string.regexp
        - match: /
          captures:
            0: punctuation.definition.regex.end.awk
          pop: true
        - include: scope:source.regexp
  regex-as-nth-argument:
    - match: (,)\s*(/)
      captures:
        1: punctuation.separator.parameters.awk
        2: punctuation.definition.regex.begin.awk
      push:
        - meta_content_scope: string.regexp
        - match: /
          captures:
            0: punctuation.definition.regex.end.awk
          pop: true
        - include: scope:source.regexp
  regexp-as-pattern:
    - match: /
      captures:
        0: punctuation.definition.regex.begin.awk
      push:
        - meta_content_scope: string.regexp
        - match: /
          captures:
            0: punctuation.definition.regex.end.awk
          pop: true
        - include: scope:source.regexp
  regexp-in-expression:
    - include: regex-as-assignment
    - include: regex-as-comparison
    - include: regex-as-first-argument
    - include: regex-as-nth-argument
  string-constant:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.awk
      push:
        - meta_scope: string.quoted.double.awk
        - match: '"'
          captures:
            0: punctuation.definition.string.end.awk
          pop: true
        - include: escaped-char
  variable:
    - match: '\$[0-9]+'
      scope: variable.language.awk
    - match: \b(?:FILENAME|FS|NF|NR|OFMT|OFS|ORS|RS)\b
      scope: variable.language.awk
    - match: \b(?:ARGC|ARGV|CONVFMT|ENVIRON|FNR|RLENGTH|RSTART|SUBSEP)\b
      scope: variable.language.nawk
    - match: \b(?:ARGIND|ERRNO|FIELDWIDTHS|IGNORECASE|RT)\b
      scope: variable.language.gawk
