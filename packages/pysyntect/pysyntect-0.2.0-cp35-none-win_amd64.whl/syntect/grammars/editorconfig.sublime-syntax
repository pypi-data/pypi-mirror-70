%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: EditorConfig
file_extensions:
  - editorconfig
first_line_match: |-
  (?ix)

  	# Emacs modeline
  	-\*-(?:\s*(?=[^:;\s]+\s*-\*-)|(?:.*?[;\s]|(?<=-\*-))mode\s*:\s*)
  		editor-?config(?:config|-conf)?
  	(?=[\s;]|(?<![-*])-\*-).*?-\*-

  	|

  	# Vim modeline
  	(?:(?:\s|^)vi(?:m[<=>]?\d+|m)?|\sex)(?=:(?=\s*set?\s[^\n:]+:)|:(?!\s* set?\s))(?:(?:\s|\s*:\s*)\w*(?:\s*=(?:[^\n\\\s]|\\.)*)?)*[\s:](?:filetype|ft|syntax)\s*=
  		editor-?config(?:-config|conf)?
  	(?=\s|:|$)
scope: source.editorconfig
contexts:
  main:
    - include: comment
    - include: section
    - include: rule
  comment:
    - match: (\s*)(#)
      captures:
        1: punctuation.whitespace.comment.leading.editorconfig
        2: punctuation.definition.comment.editorconfig
      push:
        - meta_scope: comment.line.number-sign.editorconfig
        - match: $
          pop: true
    - match: (\s*)(;)
      captures:
        1: punctuation.whitespace.comment.leading.editorconfig
        2: punctuation.definition.comment.editorconfig
      push:
        - meta_scope: comment.line.semicolon.editorconfig
        - match: $
          pop: true
  bareword:
    - match: '[^=#;\s]+'
      scope: string.unquoted.bareword.editorconfig
  escape:
    - match: \\.
      scope: constant.character.escape.editorconfig
  keywords:
    - match: (?i)(?<=\s|=)(true|false|on|off|yes|no)(?=$|\s)
      scope: "constant.language.boolean.${1:/downcase}.editorconfig"
    - match: (?i)(?<=\s|=)(CRLF|CR|LF|tab|space|unset)(?=$|\s)
      scope: "constant.language.${1:/downcase}.editorconfig"
  number:
    - match: \d+
      scope: constant.numeric.decimal.integer.int.editorconfig
  pathBracketsCurly:
    - match: "{"
      captures:
        0: punctuation.definition.brace.bracket.curly.begin.editorconfig
      push:
        - match: "}|(?=$)"
          captures:
            0: punctuation.definition.brace.bracket.curly.end.editorconfig
          pop: true
        - include: escape
        - match: ","
          scope: punctuation.separator.delimiter.comma.editorconfig
        - include: pathRange
        - include: pathSpec
  pathBracketsSquare:
    - match: '\['
      captures:
        0: punctuation.definition.brace.bracket.square.begin.editorconfig
      push:
        - match: '\]|(?=$)'
          captures:
            0: punctuation.definition.brace.bracket.square.end.editorconfig
          pop: true
        - include: pathSpec
  pathRange:
    - match: '([0-9]+)(\.{2})([0-9]+)'
      scope: meta.range.editorconfig
      captures:
        2: punctuation.definition.separator.range.editorconfig
  pathSpec:
    - include: escape
    - include: pathBracketsCurly
    - include: pathBracketsSquare
    - match: '\*{2}'
      scope: keyword.operator.glob.wildcard.globstar.editorconfig
    - match: \*
      scope: keyword.operator.glob.wildcard.editorconfig
    - match: \?
      scope: keyword.operator.glob.wildcard.editorconfig
  rule:
    - match: '^\s*(indent_(width))(?=$|[=\s])'
      captures:
        1: keyword.other.definition.indent_size.editorconfig
        2: invalid.illegal.confusable.editorconfig
    - match: '^\s*(tab_(size))(?=$|[=\s])'
      captures:
        1: keyword.other.definition.tab_width.editorconfig
        2: invalid.illegal.confusable.editorconfig
    - match: |-
        (?ix)
        ^ \s*
        ( end_of_line
        | indent_size
        | indent_style
        | insert_final_newline
        | max_line_length
        | root
        | tab_width
        | trim_trailing_whitespace
        ) \s* (=)
      captures:
        1: "keyword.other.definition.${1:/downcase}.editorconfig"
        2: punctuation.separator.key-value.editorconfig
      push:
        - meta_scope: "meta.rule.${1:/downcase}.editorconfig"
        - match: $
          pop: true
        - include: value
    - match: ^\s*(charset)\s*(=)
      captures:
        1: "keyword.other.definition.${1:/downcase}.editorconfig"
        2: punctuation.separator.key-value.editorconfig
      push:
        - meta_scope: meta.rule.charset.editorconfig
        - match: $
          pop: true
        - match: '(?i)(?<=\s|=)([-\w]+)(?=$|\s)'
          scope: "constant.language.charset.encoding.${1:/downcase}.editorconfig"
        - include: value
    - match: '^\s*(?![\[#;])([^\s=]+)\s*(=)'
      captures:
        1: keyword.other.definition.custom.editorconfig
        2: punctuation.separator.key-value.editorconfig
      push:
        - meta_scope: meta.rule.custom.editorconfig
        - match: $
          pop: true
        - include: value
        - include: bareword
  section:
    - match: '^\s*(?=\[.*?\])'
      push:
        - meta_scope: meta.section.editorconfig
        - match: '(?!\G)(?=^\s*\[)'
          pop: true
        - include: sectionHeader
        - include: comment
        - include: rule
  sectionHeader:
    - match: '\G\['
      captures:
        0: punctuation.section.brace.bracket.square.begin.editorconfig
      push:
        - meta_scope: meta.section.header.editorconfig
        - meta_content_scope: entity.name.section.group-title.editorconfig
        - match: '\]|(?=$)'
          captures:
            0: punctuation.section.brace.bracket.square.end.editorconfig
          pop: true
        - match: \G!
          scope: keyword.control.logical.not.negation.editorconfig
        - include: pathSpec
  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.editorconfig
      push:
        - meta_scope: string.quoted.double.editorconfig
        - match: '"'
          captures:
            0: punctuation.definition.string.end.editorconfig
          pop: true
        - include: escape
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.editorconfig
      push:
        - meta_scope: string.quoted.single.editorconfig
        - match: "'"
          captures:
            0: punctuation.definition.string.end.editorconfig
          pop: true
        - include: escape
  value:
    - include: escape
    - include: comment
    - include: keywords
    - include: number
    - include: string
