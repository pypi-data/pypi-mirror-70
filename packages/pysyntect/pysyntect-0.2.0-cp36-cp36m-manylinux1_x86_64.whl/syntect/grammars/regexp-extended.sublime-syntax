%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Regular Expression (Extended)
first_line_match: '^\s*(?:/\s*)?(\(\?\^?[A-Za-wyz]*x[A-Za-z]*[-A-Za-wyz]*\))'
scope: source.regexp.extended
contexts:
  main:
    - include: comment
    - include: scope:source.regexp#comment
    - include: scope:source.regexp#variable
    - include: scope:source.regexp#anchor
    - include: scope:source.regexp#escape
    - include: scope:source.regexp#wildcard
    - include: scope:source.regexp#alternation
    - include: scope:source.regexp#quantifier
    - include: assertion
    - include: conditional
    - include: group
    - include: scope:source.regexp#class
  comment:
    - match: "#"
      captures:
        0: punctuation.definition.comment.regexp
      push:
        - meta_scope: comment.line.number-sign.regexp
        - match: $
          pop: true
  assertion:
    - match: \(\?=
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.positive.look-ahead.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
    - match: \(\?!
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.negative.look-ahead.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
    - match: \(\?<!
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.negative.look-behind.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
    - match: \(\?<=
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.positive.look-behind.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
  calloutBrackets:
    - match: "{"
      captures:
        0: punctuation.definition.bracket.curly.begin.regexp
      push:
        - match: "}"
          captures:
            0: punctuation.definition.bracket.curly.end.regexp
          pop: true
        - include: calloutBrackets
        - include: main
  conditional:
    - match: (\()(\?)(?=\()
      captures:
        1: punctuation.section.condition.begin.regexp
        2: keyword.control.flow.regexp
      push:
        - meta_scope: meta.conditional.regexp
        - match: \)
          captures:
            0: punctuation.section.condition.end.regexp
          pop: true
        - match: \|
          scope: punctuation.separator.condition.if-else.regexp
        - include: assertion
        - match: \G\(
          captures:
            0: punctuation.section.condition.begin.regexp
          push:
            - meta_scope: meta.condition.function-call.regexp
            - match: \)
              captures:
                0: punctuation.section.condition.end.regexp
              pop: true
            - match: \GDEFINE
              scope: storage.type.function.subpattern.regexp
            - match: \Gassert
              scope: keyword.other.assertion.regexp
            - match: '\G(?:(<)([^>]+)(>)|('')([^>]+)(''))'
              captures:
                1: punctuation.definition.group-reference.bracket.angle.begin.regexp
                2: entity.group.name.regexp
                3: punctuation.definition.group-reference.bracket.angle.end.regexp
                4: punctuation.definition.group-reference.quote.single.begin.regexp
                5: entity.group.name.regexp
                6: punctuation.definition.group-reference.quote.single.end.regexp
            - match: \G(R(&))(\w+)
              captures:
                1: keyword.other.recursion.specific.regexp
                2: punctuation.definition.reference.regexp
                3: entity.group.name.regexp
            - match: \GR\d+
              scope: keyword.other.recursion.specific-group.regexp
            - match: \GR
              scope: keyword.other.recursion.overall.regexp
            - match: \G\d+
              scope: keyword.other.reference.absolute.regexp
            - match: '\G[-+]\d+'
              scope: keyword.other.reference.relative.regexp
            - match: \G\w+
              scope: entity.group.name.regexp
        - include: main
  group:
    - include: scope:source.regexp#fixedGroups
    - match: '\(\?(?=P?[<''])'
      captures:
        0: punctuation.definition.group.begin.regexp
      push:
        - meta_scope: meta.group.named.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - match: \G(P?)(<)
          captures:
            1: storage.type.function.named-group.regexp
            2: punctuation.definition.named-group.bracket.angle.begin.regexp
          push:
            - meta_content_scope: entity.group.name.regexp
            - match: ">"
              captures:
                0: punctuation.definition.named-group.bracket.angle.end.regexp
              pop: true
        - match: \G'
          captures:
            0: punctuation.definition.named-group.quote.single.begin.regexp
          push:
            - meta_content_scope: entity.group.name.regexp
            - match: "'"
              captures:
                0: punctuation.definition.named-group.quote.single.end.regexp
              pop: true
        - include: main
    - match: '(\(\?)((?:y{[\w]+}|[-A-Za-z^])*)(:)'
      captures:
        1: punctuation.definition.group.begin.regexp
        3: punctuation.separator.colon.regexp
      push:
        - meta_scope: meta.group.non-capturing.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
    - match: \(\?>
      captures:
        0: punctuation.definition.group.begin.regexp
      push:
        - meta_scope: meta.group.atomic.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
    - match: (\(\*)((?:atomic_)?script_run|a?sr)(:)
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.verb.regexp
        3: punctuation.separator.colon.regexp
      push:
        - meta_scope: meta.group.script-run.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
    - match: '(\(\?{1,2})({)'
      captures:
        1: punctuation.definition.group.begin.regexp
        2: punctuation.definition.bracket.curly.begin.regexp
      push:
        - meta_scope: meta.group.callout.contents.regexp
        - match: |-
            (?x)
            (})                                    # Last closing bracket
            ((\[)([_A-Za-z][_A-Za-z0-9]*)(\]))?  # [tag]
            (X|<|>)?                               # Callout direction
            (?:[^\)]*)                            # Silently skip unexpected characters
            (\))                                  # Closing bracket
          captures:
            1: punctuation.definition.bracket.curly.end.regexp
            2: entity.name.tag.callout-tag.regexp
            3: punctuation.definition.callout-tag.begin.regexp
            4: callout-tag.constant.other.regexp
            5: punctuation.definition.callout-tag.end.regexp
            6: constant.language.callout-direction.regexp
            7: punctuation.definition.group.end.regexp
          pop: true
        - include: calloutBrackets
        - include: main
    - match: |-
        (?x)
        (\(\*)
        ([_A-Za-z][_A-Za-z0-9]*)               # Name
        ((\[)([_A-Za-z][_A-Za-z0-9]*)(\]))?  # [tag]
        ({)
      captures:
        1: punctuation.definition.group.begin.regexp
        2: entity.name.callout.regexp
        3: entity.name.tag.callout-tag.regexp
        4: punctuation.definition.callout-tag.begin.regexp
        5: callout-tag.constant.other.regexp
        6: punctuation.definition.callout-tag.end.regexp
        7: punctuation.definition.arguments.begin.regexp
      push:
        - meta_scope: meta.group.callout.regexp
        - match: |-
            (?x)
            (})
            (?:[^\)]*)
            (?:(\))|(?=$))
          captures:
            1: punctuation.definition.arguments.end.regexp
            2: punctuation.definition.group.end.regexp
          pop: true
        - include: main
        - match: '[-\w]+'
          scope: variable.parameter.argument.regexp
    - match: (\()(\?~)(\|)
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.flow.regexp
        3: punctuation.separator.delimiter.pipe.regexp
      push:
        - meta_scope: meta.absent-function.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - match: \|
          scope: punctuation.separator.delimiter.pipe.regexp
        - match: '[-\w]+'
          scope: variable.parameter.argument.regexp
        - include: main
    - match: \(
      captures:
        0: punctuation.definition.group.begin.regexp
      push:
        - meta_scope: meta.group.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
