%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: SCSS
file_extensions:
  - scss
  - css.scss
  - css.scss.erb
  - scss.erb
  - scss.liquid
scope: source.css.scss
contexts:
  main:
    - include: variable_setting
    - include: at_rule_forward
    - include: at_rule_use
    - include: at_rule_include
    - include: at_rule_import
    - include: general
    - include: flow_control
    - include: rules
    - include: property_list
    - include: at_rule_mixin
    - include: at_rule_media
    - include: at_rule_function
    - include: at_rule_charset
    - include: at_rule_option
    - include: at_rule_namespace
    - include: at_rule_fontface
    - include: at_rule_page
    - include: at_rule_keyframes
    - include: at_rule_at_root
    - include: at_rule_supports
    - match: ;
      scope: punctuation.terminator.rule.css
  at_rule_at_root:
    - match: \s*((@)(at-root))(\s+|$)
      captures:
        1: keyword.control.at-rule.at-root.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.at-root.scss
        - match: '\s*(?={)'
          pop: true
        - include: function_attributes
        - include: functions
        - include: selectors
  at_rule_charset:
    - match: \s*((@)charset\b)\s*
      captures:
        1: keyword.control.at-rule.charset.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.charset.scss
        - match: \s*((?=;|$))
          captures:
            1: keyword.control.at-rule.charset.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: variable
        - include: string_single
        - include: string_double
  at_rule_content:
    - match: \s*((@)content\b)\s*
      captures:
        1: keyword.control.content.scss
      push:
        - meta_scope: meta.content.scss
        - match: \s*((?=;))
          captures:
            1: keyword.control.content.scss
          pop: true
        - include: variable
        - include: selectors
        - include: property_values
  at_rule_each:
    - match: \s*((@)each\b)\s*
      captures:
        1: keyword.control.each.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.each.scss
        - match: '\s*((?=}))'
          captures:
            1: keyword.control.each.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - match: \b(in|,)\b
          scope: keyword.control.operator
        - include: variable
        - include: property_values
        - include: main
  at_rule_else:
    - match: \s*((@)else(\s*(if)?))\s*
      captures:
        1: keyword.control.else.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.else.scss
        - match: '\s*(?={)'
          captures:
            1: keyword.control.else.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: conditional_operators
        - include: variable
        - include: property_values
  at_rule_extend:
    - match: \s*((@)extend\b)\s*
      captures:
        1: keyword.control.at-rule.extend.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.extend.scss
        - match: \s*(?=;)
          captures:
            1: keyword.control.at-rule.extend.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: variable
        - include: selectors
        - include: property_values
  at_rule_fontface:
    - match: ^\s*((@)font-face\b)
      captures:
        1: keyword.control.at-rule.fontface.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.fontface.scss
        - match: '\s*(?={)'
          pop: true
        - include: function_attributes
  at_rule_for:
    - match: \s*((@)for\b)\s*
      captures:
        1: keyword.control.for.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.for.scss
        - match: '\s*(?={)'
          captures:
            1: keyword.control.for.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - match: (==|!=|<=|>=|<|>|from|to|through)
          scope: keyword.control.operator
        - include: variable
        - include: property_values
        - include: main
  at_rule_forward:
    - match: \s*((@)forward\b)\s*
      captures:
        1: keyword.control.at-rule.forward.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.forward.scss
        - match: \s*(?=;)
          captures:
            1: keyword.control.at-rule.forward.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - match: \b(as|hide|show)\b
          scope: keyword.control.operator
        - match: '\b([\w-]+)(\*)'
          captures:
            1: entity.other.attribute-name.module.scss
            2: punctuation.definition.wildcard.scss
        - match: '\b[\w-]+\b'
          scope: entity.name.function.scss
        - include: variable
        - include: string_single
        - include: string_double
        - include: comment_line
        - include: comment_block
  at_rule_function:
    - match: \s*((@)function\b)\s*
      captures:
        1: keyword.control.at-rule.function.scss
        2: punctuation.definition.keyword.scss
        3: entity.name.function.scss
      push:
        - meta_scope: meta.at-rule.function.scss
        - match: '\s*(?={)'
          captures:
            1: keyword.control.at-rule.function.scss
            2: punctuation.definition.keyword.scss
            3: entity.name.function.scss
          pop: true
        - include: function_attributes
    - match: \s*((@)function\b)\s*
      scope: meta.at-rule.function.scss
      captures:
        1: keyword.control.at-rule.function.scss
        2: punctuation.definition.keyword.scss
        3: entity.name.function.scss
  at_rule_if:
    - match: \s*((@)if\b)\s*
      captures:
        1: keyword.control.if.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.if.scss
        - match: '\s*(?={)'
          captures:
            1: keyword.control.if.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: conditional_operators
        - include: variable
        - include: property_values
  at_rule_import:
    - match: \s*((@)import\b)\s*
      captures:
        1: keyword.control.at-rule.import.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.import.scss
        - match: '\s*((?=;)|(?=}))'
          captures:
            1: keyword.control.at-rule.import.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: variable
        - include: string_single
        - include: string_double
        - include: functions
        - include: comment_line
  at_rule_include:
    - match: '(?<=@include)\s+(?:([\w-]+)\s*(\.))?([\w-]+)\s*(\()'
      captures:
        1: variable.scss
        2: punctuation.access.module.scss
        3: entity.name.function.scss
        4: punctuation.definition.parameters.begin.bracket.round.scss
      push:
        - meta_scope: meta.at-rule.include.scss
        - match: \)
          captures:
            0: punctuation.definition.parameters.end.bracket.round.scss
          pop: true
        - include: function_attributes
    - match: '(?<=@include)\s+(?:([\w-]+)\s*(\.))?([\w-]+)'
      captures:
        0: meta.at-rule.include.scss
        1: variable.scss
        2: punctuation.access.module.scss
        3: entity.name.function.scss
    - match: ((@)include)\b
      captures:
        0: meta.at-rule.include.scss
        1: keyword.control.at-rule.include.scss
        2: punctuation.definition.keyword.scss
  at_rule_keyframes:
    - match: (?<=^|\s)(@)(?:-(?:webkit|moz)-)?keyframes\b
      captures:
        0: keyword.control.at-rule.keyframes.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.keyframes.scss
        - match: "(?<=})"
          pop: true
        - match: '(?<=@keyframes)\s+((?:[_A-Za-z][-\w]|-[_A-Za-z])[-\w]*)'
          captures:
            1: entity.name.function.scss
        - match: (?<=@keyframes)\s+(")
          captures:
            1: punctuation.definition.string.begin.scss
          push:
            - meta_scope: string.quoted.double.scss
            - meta_content_scope: entity.name.function.scss
            - match: '"'
              captures:
                0: punctuation.definition.string.end.scss
              pop: true
            - match: '\\(\h{1,6}|.)'
              scope: constant.character.escape.scss
            - include: interpolation
        - match: (?<=@keyframes)\s+(')
          captures:
            1: punctuation.definition.string.begin.scss
          push:
            - meta_scope: string.quoted.single.scss
            - meta_content_scope: entity.name.function.scss
            - match: "'"
              captures:
                0: punctuation.definition.string.end.scss
              pop: true
            - match: '\\(\h{1,6}|.)'
              scope: constant.character.escape.scss
            - include: interpolation
        - match: "{"
          captures:
            0: punctuation.section.keyframes.begin.scss
          push:
            - match: "}"
              captures:
                0: punctuation.section.keyframes.end.scss
              pop: true
            - match: '\b(?:(?:100|[1-9]\d|\d)%|from|to)(?=\s*{)'
              scope: entity.other.attribute-name.scss
            - include: flow_control
            - include: interpolation
            - include: property_list
            - include: rules
  at_rule_media:
    - match: ^\s*((@)media)\b
      captures:
        1: keyword.control.at-rule.media.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.media.scss
        - match: '\s*(?={)'
          pop: true
        - include: comment_docblock
        - include: comment_block
        - include: comment_line
        - match: \b(only)\b
          scope: keyword.control.operator.css.scss
        - match: \(
          captures:
            0: punctuation.definition.media-query.begin.bracket.round.scss
          push:
            - meta_scope: meta.property-list.media-query.scss
            - match: \)
              captures:
                0: punctuation.definition.media-query.end.bracket.round.scss
              pop: true
            - match: "(?<![-a-z])(?=[-a-z])"
              push:
                - meta_scope: meta.property-name.media-query.scss
                - match: "$|(?![-a-z])"
                  pop: true
                - include: scope:source.css#media-features
                - include: scope:source.css#property-names
            - match: '(:)\s*(?!(\s*{))'
              captures:
                1: punctuation.separator.key-value.scss
              push:
                - meta_content_scope: meta.property-value.media-query.scss
                - match: '\s*(;|(?=}|\)))'
                  captures:
                    1: punctuation.terminator.rule.scss
                  pop: true
                - include: general
                - include: property_values
        - include: variable
        - include: conditional_operators
        - include: scope:source.css#media-types
  at_rule_mixin:
    - match: '(?<=@mixin)\s+([\w-]+)\s*(\()'
      captures:
        1: entity.name.function.scss
        2: punctuation.definition.parameters.begin.bracket.round.scss
      push:
        - meta_scope: meta.at-rule.mixin.scss
        - match: \)
          captures:
            0: punctuation.definition.parameters.end.bracket.round.scss
          pop: true
        - include: function_attributes
    - match: '(?<=@mixin)\s+([\w-]+)'
      scope: meta.at-rule.mixin.scss
      captures:
        1: entity.name.function.scss
    - match: ((@)mixin)\b
      scope: meta.at-rule.mixin.scss
      captures:
        1: keyword.control.at-rule.mixin.scss
        2: punctuation.definition.keyword.scss
  at_rule_namespace:
    - match: (?<=@namespace)\s+(?=url)
      push:
        - meta_scope: meta.at-rule.namespace.scss
        - match: (?=;|$)
          pop: true
        - include: property_values
        - include: string_single
        - include: string_double
    - match: '(?<=@namespace)\s+([\w-]*)'
      captures:
        1: entity.name.namespace-prefix.scss
      push:
        - meta_scope: meta.at-rule.namespace.scss
        - match: (?=;|$)
          captures:
            1: entity.name.namespace-prefix.scss
          pop: true
        - include: variables
        - include: property_values
        - include: string_single
        - include: string_double
    - match: ((@)namespace)\b
      scope: meta.at-rule.namespace.scss
      captures:
        1: keyword.control.at-rule.namespace.scss
        2: punctuation.definition.keyword.scss
  at_rule_option:
    - match: ^\s*((@)option\b)\s*
      scope: meta.at-rule.option.scss
      captures:
        1: keyword.control.at-rule.charset.scss
        2: punctuation.definition.keyword.scss
  at_rule_page:
    - match: '^\s*((@)page)(?=:|\s)\s*([-:\w]*)'
      captures:
        1: keyword.control.at-rule.page.scss
        2: punctuation.definition.keyword.scss
        3: entity.name.function.scss
      push:
        - meta_scope: meta.at-rule.page.scss
        - match: '\s*(?={)'
          captures:
            1: keyword.control.at-rule.page.scss
            2: punctuation.definition.keyword.scss
            3: entity.name.function.scss
          pop: true
  at_rule_return:
    - match: \s*((@)(return)\b)
      captures:
        1: keyword.control.return.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.return.scss
        - match: \s*((?=;))
          captures:
            1: keyword.control.return.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: variable
        - include: property_values
  at_rule_supports:
    - match: (?<=^|\s)(@)supports\b
      captures:
        0: keyword.control.at-rule.supports.scss
        1: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.supports.scss
        - match: "(?={)|$"
          captures:
            0: keyword.control.at-rule.supports.scss
            1: punctuation.definition.keyword.scss
          pop: true
        - include: logical_operators
        - include: properties
        - match: \(
          scope: punctuation.definition.condition.begin.bracket.round.scss
        - match: \)
          scope: punctuation.definition.condition.end.bracket.round.scss
  at_rule_use:
    - match: \s*((@)use\b)\s*
      captures:
        1: keyword.control.at-rule.use.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.use.scss
        - match: \s*(?=;)
          captures:
            1: keyword.control.at-rule.use.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - match: \b(as|with)\b
          scope: keyword.control.operator
        - match: '\b[\w-]+\b'
          scope: variable.scss
        - match: \*
          scope: variable.language.expanded-namespace.scss
        - include: string_single
        - include: string_double
        - include: comment_line
        - include: comment_block
        - match: \(
          captures:
            0: punctuation.definition.parameters.begin.bracket.round.scss
          push:
            - match: \)
              captures:
                0: punctuation.definition.parameters.end.bracket.round.scss
              pop: true
            - include: function_attributes
  at_rule_warn:
    - match: \s*((@)(warn|debug|error)\b)\s*
      captures:
        1: keyword.control.warn.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.warn.scss
        - match: \s*(?=;)
          captures:
            1: keyword.control.warn.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: variable
        - include: string_double
        - include: string_single
  at_rule_while:
    - match: \s*((@)while\b)\s*
      captures:
        1: keyword.control.while.scss
        2: punctuation.definition.keyword.scss
      push:
        - meta_scope: meta.at-rule.while.scss
        - match: '\s*(?=})'
          captures:
            1: keyword.control.while.scss
            2: punctuation.definition.keyword.scss
          pop: true
        - include: conditional_operators
        - include: variable
        - include: property_values
        - include: main
  comment_block:
    - match: /\*
      captures:
        0: punctuation.definition.comment.scss
      push:
        - meta_scope: comment.block.scss
        - match: \*/
          captures:
            0: punctuation.definition.comment.scss
          pop: true
  comment_docblock:
    - match: ///
      captures:
        0: punctuation.definition.comment.scss
      push:
        - meta_scope: comment.block.documentation.scss
        - match: (?=$)
          pop: true
        - include: scope:source.sassdoc
  comment_line:
    - match: //
      captures:
        0: punctuation.definition.comment.scss
      push:
        - meta_scope: comment.line.scss
        - match: \n
          pop: true
  comparison_operators:
    - match: "==|!=|<=|>=|<|>"
      scope: keyword.operator.comparison.scss
  conditional_operators:
    - include: comparison_operators
    - include: logical_operators
  constant_default:
    - match: "!default"
      scope: keyword.other.default.scss
  constant_functions:
    - match: '(?:([\w-]+)(\.))?([\w-]+)(\()'
      captures:
        1: variable.scss
        2: punctuation.access.module.scss
        3: support.function.misc.scss
        4: punctuation.section.function.scss
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.scss
          pop: true
        - include: parameters
  constant_important:
    - match: "!important"
      scope: keyword.other.important.scss
  constant_mathematical_symbols:
    - match: \b(\+|-|\*|/)\b
      scope: support.constant.mathematical-symbols.scss
  constant_optional:
    - match: "!optional"
      scope: keyword.other.optional.scss
  constant_sass_functions:
    - match: (headings|stylesheet-url|rgba?|hsla?|ie-hex-str|red|green|blue|alpha|opacity|hue|saturation|lightness|prefixed|prefix|-moz|-svg|-css2|-pie|-webkit|-ms|font-(?:files|url)|grid-image|image-(?:width|height|url|color)|sprites?|sprite-(?:map|map-name|file|url|position)|inline-(?:font-files|image)|opposite-position|grad-point|grad-end-position|color-stops|color-stops-in-percentages|grad-color-stops|(?:radial|linear)-(?:gradient|svg-gradient)|opacify|fade-?in|transparentize|fade-?out|lighten|darken|saturate|desaturate|grayscale|adjust-(?:hue|lightness|saturation|color)|scale-(?:lightness|saturation|color)|change-color|spin|complement|invert|mix|-compass-(?:list|space-list|slice|nth|list-size)|blank|compact|nth|first-value-of|join|length|append|nest|append-selector|headers|enumerate|range|percentage|unitless|unit|if|type-of|comparable|elements-of-type|quote|unquote|escape|e|sin|cos|tan|abs|round|ceil|floor|pi|translate(?:X|Y))(\()
      captures:
        1: support.function.misc.scss
        2: punctuation.section.function.scss
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.scss
          pop: true
        - include: parameters
  flow_control:
    - include: at_rule_if
    - include: at_rule_else
    - include: at_rule_warn
    - include: at_rule_for
    - include: at_rule_while
    - include: at_rule_each
    - include: at_rule_return
  function_attributes:
    - match: ":"
      scope: punctuation.separator.key-value.scss
    - include: general
    - include: property_values
    - match: '[={}\?;@]'
      scope: invalid.illegal.scss
  functions:
    - match: '([\w-]{1,})(\()\s*'
      captures:
        1: support.function.misc.scss
        2: punctuation.section.function.scss
      push:
        - match: (\))
          captures:
            1: punctuation.section.function.scss
          pop: true
        - include: parameters
    - match: '([\w-]{1,})'
      scope: support.function.misc.scss
  general:
    - include: variable
    - include: comment_docblock
    - include: comment_block
    - include: comment_line
  interpolation:
    - match: "#{"
      captures:
        0: punctuation.definition.interpolation.begin.bracket.curly.scss
      push:
        - meta_scope: variable.interpolation.scss
        - match: "}"
          captures:
            0: punctuation.definition.interpolation.end.bracket.curly.scss
          pop: true
        - include: variable
        - include: property_values
  logical_operators:
    - match: \b(not|or|and)\b
      scope: keyword.operator.logical.scss
  map:
    - match: \(
      captures:
        0: punctuation.definition.map.begin.bracket.round.scss
      push:
        - meta_scope: meta.definition.variable.map.scss
        - match: \)
          captures:
            0: punctuation.definition.map.end.bracket.round.scss
          pop: true
        - include: comment_docblock
        - include: comment_block
        - include: comment_line
        - match: '\b([\w-]+)\s*(:)'
          captures:
            1: support.type.map.key.scss
            2: punctuation.separator.key-value.scss
        - match: ","
          scope: punctuation.separator.delimiter.scss
        - include: map
        - include: variable
        - include: property_values
  operators:
    - match: '[-+*/](?!\s*[-+*/])'
      scope: keyword.operator.css
  parameters:
    - include: variable
    - match: \(
      captures:
        0: punctuation.definition.begin.bracket.round.scss
      push:
        - match: \)
          captures:
            0: punctuation.definition.end.bracket.round.scss
          pop: true
        - include: function_attributes
    - include: property_values
    - include: comment_block
    - match: '[^''",) \t]+'
      scope: variable.parameter.url.scss
    - match: ","
      scope: punctuation.separator.delimiter.scss
  parent_selector_suffix:
    - match: |-
        (?x)
        (?<=&)
        (
          (?: [-a-zA-Z_0-9]|[^\x00-\x7F]     # Valid identifier characters
            | \\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
            | \#\{                           # Interpolation (escaped to avoid Coffeelint errors)
            | \$                              # Possible start of interpolation variable
            | }                                # Possible end of interpolation
          )+
        )                                      # Followed by either:
        (?= $                                  # - End of the line
          | [\s,.\#)\[:{>+~|]               # - Another selector
          | /\*                               # - A block comment
        )
      scope: entity.other.attribute-name.parent-selector-suffix.css
      captures:
        1: punctuation.definition.entity.css
  properties:
    - match: "(?<![-a-z])(?=[-a-z])"
      push:
        - meta_scope: meta.property-name.scss
        - match: "$|(?![-a-z])"
          pop: true
        - include: scope:source.css#property-names
        - include: at_rule_include
    - match: '(:)\s*(?!(\s*{))'
      captures:
        1: punctuation.separator.key-value.scss
      push:
        - meta_content_scope: meta.property-value.scss
        - match: '\s*(;|(?=}|\)))'
          captures:
            1: punctuation.terminator.rule.scss
          pop: true
        - include: general
        - include: property_values
  property_list:
    - match: "{"
      captures:
        0: punctuation.section.property-list.begin.bracket.curly.scss
      push:
        - meta_scope: meta.property-list.scss
        - match: "}"
          captures:
            0: punctuation.section.property-list.end.bracket.curly.scss
          pop: true
        - include: flow_control
        - include: rules
        - include: properties
        - include: main
  property_values:
    - include: string_single
    - include: string_double
    - include: constant_functions
    - include: constant_sass_functions
    - include: constant_important
    - include: constant_default
    - include: constant_optional
    - include: scope:source.css#numeric-values
    - include: scope:source.css#property-keywords
    - include: scope:source.css#color-keywords
    - include: scope:source.css#property-names
    - include: constant_mathematical_symbols
    - include: operators
    - match: \(
      captures:
        0: punctuation.definition.begin.bracket.round.scss
      push:
        - match: \)
          captures:
            0: punctuation.definition.end.bracket.round.scss
          pop: true
        - include: general
        - include: property_values
  rules:
    - include: general
    - include: at_rule_extend
    - include: at_rule_content
    - include: at_rule_include
    - include: at_rule_media
    - include: selectors
  selector_attribute:
    - match: |-
        (?xi)
        (\[)
        \s*
        (
          (?:
            [-a-zA-Z_0-9]|[^\x00-\x7F]       # Valid identifier characters
            | \\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
            | \#\{                           # Interpolation (escaped to avoid Coffeelint errors)
            | \.?\$                          # Possible start of interpolation variable
            | }                                # Possible end of interpolation
          )+?
        )
        (?:
          \s*([~|^$*]?=)\s*
          (?:
            (
              (?:
                [-a-zA-Z_0-9]|[^\x00-\x7F]       # Valid identifier characters
                | \\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
                | \#\{                           # Interpolation (escaped to avoid Coffeelint errors)
                | \.?\$                          # Possible start of interpolation variable
                | }                                # Possible end of interpolation
              )+
            )
            |
            ((")(.*?)("))
            |
            ((')(.*?)('))
          )
        )?
        \s*
        (\])
      scope: meta.attribute-selector.scss
      captures:
        1: punctuation.definition.attribute-selector.begin.bracket.square.scss
        10: punctuation.definition.string.begin.scss
        12: punctuation.definition.string.end.scss
        13: punctuation.definition.attribute-selector.end.bracket.square.scss
        2: entity.other.attribute-name.attribute.scss
        3: keyword.operator.scss
        4: string.unquoted.attribute-value.scss
        5: string.quoted.double.attribute-value.scss
        6: punctuation.definition.string.begin.scss
        8: punctuation.definition.string.end.scss
        9: string.quoted.single.attribute-value.scss
  selector_class:
    - match: |-
        (?x)
        (\.)                                  # Valid class-name
        (
          (?: [-a-zA-Z_0-9]|[^\x00-\x7F]     # Valid identifier characters
            | \\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
            | \#\{                           # Interpolation (escaped to avoid Coffeelint errors)
            | \.?\$                          # Possible start of interpolation variable
            | }                                # Possible end of interpolation
          )+
        )                                      # Followed by either:
        (?= $                                  # - End of the line
          | [\s,\#)\[:{>+~|]                # - Another selector
          | \.[^$]                            # - Class selector, negating module variable
          | /\*                               # - A block comment
          | ;                                  # - A semicolon
        )
      scope: entity.other.attribute-name.class.css
      captures:
        1: punctuation.definition.entity.css
  selector_custom:
    - match: '\b([a-zA-Z0-9]+(-[a-zA-Z0-9]+)+)(?=\.|\s++[^:]|\s*[,\[{]|:(link|visited|hover|active|focus|target|lang|disabled|enabled|checked|indeterminate|root|nth-(child|last-child|of-type|last-of-type)|first-child|last-child|first-of-type|last-of-type|only-child|only-of-type|empty|not|valid|invalid)(\([0-9A-Za-z]*\))?)'
      scope: entity.name.tag.custom.scss
  selector_id:
    - match: |-
        (?x)
        (\#)                                  # Valid id-name
        (
          (?: [-a-zA-Z_0-9]|[^\x00-\x7F]     # Valid identifier characters
            | \\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
            | \#\{                           # Interpolation (escaped to avoid Coffeelint errors)
            | \.?\$                          # Possible start of interpolation variable
            | }                                # Possible end of interpolation
          )+
        )                                      # Followed by either:
        (?= $                                  # - End of the line
          | [\s,\#)\[:{>+~|]                # - Another selector
          | \.[^$]                            # - Class selector, negating module variable
          | /\*                               # - A block comment
        )
      scope: entity.other.attribute-name.id.css
      captures:
        1: punctuation.definition.entity.css
  selector_placeholder:
    - match: |-
        (?x)
        (%)                                    # Valid placeholder-name
        (
          (?: [-a-zA-Z_0-9]|[^\x00-\x7F]     # Valid identifier characters
            | \\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
            | \#\{                           # Interpolation (escaped to avoid Coffeelint errors)
            | \.\$                           # Possible start of interpolation module scope variable
            | \$                              # Possible start of interpolation variable
            | }                                # Possible end of interpolation
          )+
        )                                      # Followed by either:
        (?= ;                                  # - End of statement
          | $                                  # - End of the line
          | [\s,\#)\[:{>+~|]                # - Another selector
          | \.[^$]                            # - Class selector, negating module variable
          | /\*                               # - A block comment
        )
      scope: entity.other.attribute-name.placeholder.css
      captures:
        1: punctuation.definition.entity.css
  selector_pseudo_class:
    - match: ((:)\bnth-(?:child|last-child|of-type|last-of-type))(\()
      captures:
        1: entity.other.attribute-name.pseudo-class.css
        2: punctuation.definition.entity.css
        3: punctuation.definition.pseudo-class.begin.bracket.round.css
      push:
        - match: \)
          captures:
            0: punctuation.definition.pseudo-class.end.bracket.round.css
          pop: true
        - include: interpolation
        - match: \d+
          scope: constant.numeric.css
        - match: (?<=\d)n\b|\b(n|even|odd)\b
          scope: constant.other.scss
        - match: \w+
          scope: invalid.illegal.scss
    - include: scope:source.css#pseudo-classes
    - include: scope:source.css#pseudo-elements
    - include: scope:source.css#functional-pseudo-classes
  selectors:
    - include: scope:source.css#tag-names
    - include: selector_custom
    - include: selector_class
    - include: selector_id
    - include: selector_pseudo_class
    - include: tag_wildcard
    - include: tag_parent_reference
    - include: scope:source.css#pseudo-elements
    - include: selector_attribute
    - include: selector_placeholder
    - include: parent_selector_suffix
  string_double:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.scss
      push:
        - meta_scope: string.quoted.double.scss
        - match: '"'
          captures:
            0: punctuation.definition.string.end.scss
          pop: true
        - match: '\\(\h{1,6}|.)'
          scope: constant.character.escape.scss
        - include: interpolation
  string_single:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.scss
      push:
        - meta_scope: string.quoted.single.scss
        - match: "'"
          captures:
            0: punctuation.definition.string.end.scss
          pop: true
        - match: '\\(\h{1,6}|.)'
          scope: constant.character.escape.scss
        - include: interpolation
  tag_parent_reference:
    - match: "&"
      scope: entity.name.tag.reference.scss
  tag_wildcard:
    - match: \*
      scope: entity.name.tag.wildcard.scss
  variable:
    - include: variables
    - include: interpolation
  variable_setting:
    - match: '(?=\$[\w-]+\s*:)'
      push:
        - meta_content_scope: meta.definition.variable.scss
        - match: ;
          captures:
            0: punctuation.terminator.rule.scss
          pop: true
        - match: '\$[\w-]+(?=\s*:)'
          scope: variable.scss
        - match: ":"
          captures:
            0: punctuation.separator.key-value.scss
          push:
            - match: (?=;)
              pop: true
            - include: comment_docblock
            - include: comment_block
            - include: comment_line
            - include: map
            - include: property_values
            - include: variable
            - match: ","
              scope: punctuation.separator.delimiter.scss
  variables:
    - match: '\b([\w-]+)(\.)(\$[\w-]+)\b'
      captures:
        1: variable.scss
        2: punctuation.access.module.scss
        3: variable.scss
    - match: '(\$|\-\-)[A-Za-z0-9_-]+\b'
      scope: variable.scss
