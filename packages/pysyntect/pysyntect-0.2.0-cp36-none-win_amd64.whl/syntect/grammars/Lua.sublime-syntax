%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Lua
file_extensions:
  - lua
  - p8
  - rockspec
first_line_match: \A#!.*?\blua(\d+(\.\d+)?)?\b|\A--\s+-\*-\s*lua\s*-\*-
scope: source.lua
contexts:
  main:
    - match: '\b(?:(local)\s+)?(function)\s*(?:\s+([a-zA-Z_][a-zA-Z0-9_]*(?:([\.:])[a-zA-Z_][a-zA-Z0-9_]*)?)\s*)?(\()'
      captures:
        1: storage.modifier.local.lua
        2: keyword.control.lua
        3: entity.name.function.lua
        4: punctuation.separator.parameter.lua
        5: punctuation.definition.parameters.begin.lua
      push:
        - meta_scope: meta.function.lua
        - match: \)
          captures:
            0: punctuation.definition.parameters.end.lua
          pop: true
        - match: "[a-zA-Z_][a-zA-Z0-9_]*"
          scope: variable.parameter.function.lua
        - match: ","
          scope: punctuation.separator.arguments.lua
    - match: '(?<![\w\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])'
      scope: constant.numeric.integer.hexadecimal.lua
    - match: '(?<![\w\d.])0[xX][0-9A-Fa-f]+(\.[0-9A-Fa-f]+)?([eE]-?\d*)?([pP][-+]\d+)?'
      scope: constant.numeric.float.hexadecimal.lua
    - match: '(?<![\w\d.])\d+(?![pPeE.0-9])'
      scope: constant.numeric.integer.lua
    - match: '(?<![\w\d.])\d+(\.\d+)?([eE]-?\d*)?'
      scope: constant.numeric.float.lua
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.lua
      push:
        - meta_scope: string.quoted.single.lua
        - match: "'"
          captures:
            0: punctuation.definition.string.end.lua
          pop: true
        - include: escaped_char
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.lua
      push:
        - meta_scope: string.quoted.double.lua
        - match: '"'
          captures:
            0: punctuation.definition.string.end.lua
          pop: true
        - include: escaped_char
    - match: '(?<=\.cdef)\s*(\[(=*)\[)'
      captures:
        0: string.quoted.other.multiline.lua
        1: punctuation.definition.string.begin.lua
      push:
        - meta_content_scope: meta.embedded.lua
        - match: '(\]\2\])'
          captures:
            0: string.quoted.other.multiline.lua
            1: punctuation.definition.string.end.lua
          pop: true
        - include: scope:source.c
    - match: '(?<!--)\[(=*)\['
      captures:
        0: punctuation.definition.string.begin.lua
      push:
        - meta_scope: string.quoted.other.multiline.lua
        - match: '\]\1\]'
          captures:
            0: punctuation.definition.string.end.lua
          pop: true
    - match: \A(#!).*$\n?
      scope: comment.line.shebang.lua
      captures:
        1: punctuation.definition.comment.lua
    - match: '(^[ \t]+)?(?=--)'
      captures:
        1: punctuation.whitespace.comment.leading.lua
      push:
        - match: '(?!\G)((?!^)[ \t]+\n)?'
          captures:
            1: punctuation.whitespace.comment.trailing.lua
          pop: true
        - match: '--\[(=*)\['
          captures:
            0: punctuation.definition.comment.begin.lua
          push:
            - meta_scope: comment.block.lua
            - match: '\]\1\]'
              captures:
                0: punctuation.definition.comment.end.lua
              pop: true
        - match: "--"
          captures:
            0: punctuation.definition.comment.lua
          push:
            - meta_scope: comment.line.double-dash.lua
            - match: \n
              pop: true
    - match: '\b(goto)\s+([a-zA-Z_][a-zA-Z0-9_]*)'
      captures:
        1: keyword.control.goto.lua
        2: constant.other.placeholder.lua
    - match: "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)"
      scope: constant.other.placeholder.lua
      captures:
        1: punctuation.definition.label.begin.lua
        2: punctuation.definition.label.end.lua
    - match: \b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|function|local|in)\b
      scope: keyword.control.lua
    - match: '(?<![^.]\.|:)\b(false|nil|true|_G|_VERSION|math\.(pi|huge))\b|(?<![.])\.{3}(?!\.)'
      scope: constant.language.lua
    - match: '(?<![^.]\.|:)\b(self)\b'
      scope: variable.language.self.lua
    - match: '(?<![^.]\.|:)\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\b(?=\s*(?:[({"'']|\[\[))'
      scope: support.function.lua
    - match: '(?<![^.]\.|:)\b(coroutine\.(create|resume|running|status|wrap|yield)|string\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\.(concat|insert|maxn|remove|sort)|math\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\.(cpath|loaded|loadlib|path|preload|seeall)|debug\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\b(?=\s*(?:[({"'']|\[\[))'
      scope: support.function.library.lua
    - match: \b(and|or|not)\b
      scope: keyword.operator.lua
    - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*(?:[({"'']|\[\[))'
      scope: support.function.any-method.lua
    - match: '(?<=[^.]\.|:)\b([a-zA-Z_][a-zA-Z0-9_]*)'
      scope: variable.other.lua
    - match: '\+|-|%|#|\*|\/|\^|==?|~=|<=?|>=?|(?<!\.)\.{2}(?!\.)'
      scope: keyword.operator.lua
  escaped_char:
    - match: '\\[abfnrtvz\\"''\n]'
      scope: constant.character.escape.lua
    - match: '\\\d{1,3}'
      scope: constant.character.escape.byte.lua
    - match: '\\x[0-9A-Fa-f][0-9A-Fa-f]'
      scope: constant.character.escape.byte.lua
    - match: '\\u\{[0-9A-Fa-f]+\}'
      scope: constant.character.escape.unicode.lua
    - match: \\.
      scope: invalid.illegal.character.escape.lua
