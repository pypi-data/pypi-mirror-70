%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Objective-C
file_extensions:
  - m
  - h
scope: source.objc
contexts:
  main:
    - match: '((@)(interface|protocol))(?!.+;)\s+([A-Za-z_][A-Za-z0-9_]*)\s*((:)(?:\s*)([A-Za-z][A-Za-z0-9]*))?(\s|\n)?'
      captures:
        1: storage.type.objc
        2: punctuation.definition.storage.type.objc
        4: entity.name.type.objc
        6: punctuation.definition.entity.other.inherited-class.objc
        7: entity.other.inherited-class.objc
        8: meta.divider.objc
        9: meta.inherited-class.objc
      push:
        - meta_scope: meta.interface-or-protocol.objc
        - meta_content_scope: meta.scope.interface.objc
        - match: ((@)end)\b
          captures:
            1: storage.type.objc
            2: punctuation.definition.storage.type.objc
            4: entity.name.type.objc
            6: punctuation.definition.entity.other.inherited-class.objc
            7: entity.other.inherited-class.objc
            8: meta.divider.objc
            9: meta.inherited-class.objc
          pop: true
        - include: interface_innards
    - match: '((@)(implementation))\s+([A-Za-z_][A-Za-z0-9_]*)\s*(?::\s*([A-Za-z][A-Za-z0-9]*))?'
      captures:
        1: storage.type.objc
        2: punctuation.definition.storage.type.objc
        4: entity.name.type.objc
        5: entity.other.inherited-class.objc
      push:
        - meta_scope: meta.implementation.objc
        - meta_content_scope: meta.scope.implementation.objc
        - match: ((@)end)\b
          captures:
            1: storage.type.objc
            2: punctuation.definition.storage.type.objc
            4: entity.name.type.objc
            5: entity.other.inherited-class.objc
          pop: true
        - include: implementation_innards
    - match: (?=@")
      push:
        - match: '@?"'
          captures:
            0: punctuation.definition.string.begin.objc
          push:
            - meta_scope: string.quoted.double.objc
            - match: '"'
              captures:
                0: punctuation.definition.string.end.objc
              pop: true
            - include: scope:source.c#string_escaped_char
            - match: |-
                (?x)%
                	(\d+\$)?                             # field (argument #)
                	[#0\- +']*                          # flags
                	((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
                	(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
                	[@]                                  # conversion type
              scope: constant.other.placeholder.objc
            - include: scope:source.c#string_placeholder
        - match: (?=\S)
          pop: true
    - match: \b(id)\s*(?=<)
      captures:
        1: storage.type.objc
      push:
        - meta_scope: meta.id-with-protocol.objc
        - match: (?<=>)
          pop: true
        - include: protocol_list
    - match: \b(NS_DURING|NS_HANDLER|NS_ENDHANDLER)\b
      scope: keyword.control.macro.objc
    - match: (@)(try|catch|finally|throw)\b
      scope: keyword.control.exception.objc
      captures:
        1: punctuation.definition.keyword.objc
    - match: (@)(synchronized)\b
      scope: keyword.control.synchronize.objc
      captures:
        1: punctuation.definition.keyword.objc
    - match: (@)(required|optional)\b
      scope: keyword.control.protocol-specification.objc
      captures:
        1: punctuation.definition.keyword.objc
    - match: (@)(defs|encode)\b
      scope: keyword.other.objc
      captures:
        1: punctuation.definition.keyword.objc
    - match: (@)(class|protocol)\b
      scope: storage.type.objc
      captures:
        1: punctuation.definition.storage.type.objc
    - match: ((@)selector)\s*(\()
      captures:
        1: storage.type.objc
        2: punctuation.definition.storage.type.objc
        3: punctuation.definition.storage.type.objc
      push:
        - meta_scope: meta.selector.objc
        - meta_content_scope: meta.selector.method-name.objc
        - match: (\))
          captures:
            1: punctuation.definition.storage.type.objc
          pop: true
        - match: '\b(?:[a-zA-Z_:][\w]*)+'
          scope: support.function.any-method.name-of-parameter.objc
          captures:
            1: punctuation.separator.arguments.objc
    - match: (@)(synchronized|public|package|private|protected)\b
      scope: storage.modifier.objc
      captures:
        1: punctuation.definition.storage.modifier.objc
    - match: \b(YES|NO|Nil|nil)\b
      scope: constant.language.objc
    - include: scope:source.objc.platform
    - include: scope:source.objc.platform#functions
    - include: scope:source.c
    - include: bracketed_content
  comment:
    - match: /\*
      captures:
        0: punctuation.definition.comment.objc
      push:
        - meta_scope: comment.block.objc
        - match: \*/
          captures:
            0: punctuation.definition.comment.objc
          pop: true
    - match: '(^[ \t]+)?(?=//)'
      captures:
        1: punctuation.whitespace.comment.leading.objc
      push:
        - match: (?!\G)
          pop: true
        - match: //
          captures:
            0: punctuation.definition.comment.objc
          push:
            - meta_scope: comment.line.double-slash.objc
            - match: \n
              pop: true
            - match: (?>\\\s*\n)
              scope: punctuation.separator.continuation.objc
  bracketed_content:
    - match: '\['
      captures:
        0: punctuation.section.scope.begin.objc
      push:
        - meta_scope: meta.bracketed.objc
        - match: '\]'
          captures:
            0: punctuation.section.scope.end.objc
          pop: true
        - match: (?=predicateWithFormat:)(?<=NSPredicate )(predicateWithFormat:)
          captures:
            1: support.function.any-method.objc
            2: punctuation.separator.arguments.objc
          push:
            - meta_scope: meta.function-call.predicate.objc
            - match: '(?=\])'
              pop: true
            - match: \bargument(Array|s)(:)
              scope: support.function.any-method.name-of-parameter.objc
              captures:
                1: punctuation.separator.arguments.objc
            - match: \b\w+(:)
              scope: invalid.illegal.unknown-method.objc
              captures:
                1: punctuation.separator.arguments.objc
            - match: '@"'
              captures:
                0: punctuation.definition.string.begin.objc
              push:
                - meta_scope: string.quoted.double.objc
                - match: '"'
                  captures:
                    0: punctuation.definition.string.end.objc
                  pop: true
                - match: \b(AND|OR|NOT|IN)\b
                  scope: keyword.operator.logical.predicate.cocoa
                - match: \b(ALL|ANY|SOME|NONE)\b
                  scope: constant.language.predicate.cocoa
                - match: \b(NULL|NIL|SELF|TRUE|YES|FALSE|NO|FIRST|LAST|SIZE)\b
                  scope: constant.language.predicate.cocoa
                - match: \b(MATCHES|CONTAINS|BEGINSWITH|ENDSWITH|BETWEEN)\b
                  scope: keyword.operator.comparison.predicate.cocoa
                - match: \bC(ASEINSENSITIVE|I)\b
                  scope: keyword.other.modifier.predicate.cocoa
                - match: \b(ANYKEY|SUBQUERY|CAST|TRUEPREDICATE|FALSEPREDICATE)\b
                  scope: keyword.other.predicate.cocoa
                - match: '\\(\\|[abefnrtv''"?]|[0-3]\d{0,2}|[4-7]\d?|x[a-zA-Z0-9]+)'
                  scope: constant.character.escape.objc
                - match: \\.
                  scope: invalid.illegal.unknown-escape.objc
            - include: special_variables
            - include: c_functions
            - include: $top_level_main
        - match: '(?=\w)(?<=[\w\]\s)"]\s)(\w+(?:(:)|(?=\])))'
          captures:
            1: support.function.any-method.objc
            2: punctuation.separator.arguments.objc
          push:
            - meta_scope: meta.function-call.objc
            - match: '(?=\])'
              pop: true
            - match: \b\w+(:)
              scope: support.function.any-method.name-of-parameter.objc
              captures:
                1: punctuation.separator.arguments.objc
            - include: special_variables
            - include: c_functions
            - include: $top_level_main
        - include: special_variables
        - include: c_functions
        - include: main
  c_functions:
    - include: scope:source.c.platform#functions
    - match: |-
        (?x) (?: (?= \s )  (?:(?<=else|new|return) | (?<!\w)) (\s+))?
        (\b
        	(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\s*\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\b | :: )++                  # actual name
        )
         \s*(\()
      scope: meta.function-call.c
      captures:
        1: punctuation.whitespace.function-call.leading.c
        2: support.function.any-method.c
        3: punctuation.definition.parameters.c
  disabled:
    - match: ^\s*#\s*if(n?def)?\b.*$
      comment: eat nested preprocessor if(def)s
      push:
        - match: ^\s*#\s*endif\b.*$
          pop: true
        - include: disabled
        - include: pragma-mark
  implementation_innards:
    - include: preprocessor-rule-enabled-implementation
    - include: preprocessor-rule-disabled-implementation
    - include: preprocessor-rule-other-implementation
    - include: property_directive
    - include: special_variables
    - include: method_super
    - include: $top_level_main
  interface_innards:
    - include: preprocessor-rule-enabled-interface
    - include: preprocessor-rule-disabled-interface
    - include: preprocessor-rule-other-interface
    - include: properties
    - include: protocol_list
    - include: method
    - include: $top_level_main
  method:
    - match: ^(-|\+)\s*
      push:
        - meta_scope: meta.function.objc
        - match: '(?=\{|#)|;'
          pop: true
        - match: (\()
          captures:
            1: punctuation.definition.type.begin.objc
          push:
            - meta_scope: meta.return-type.objc
            - match: (\))\s*(\w+\b)
              captures:
                1: punctuation.definition.type.end.objc
                2: entity.name.function.objc
              pop: true
            - include: protocol_list
            - include: protocol_type_qualifier
            - include: $top_level_main
        - match: \b\w+(?=:)
          scope: entity.name.function.name-of-parameter.objc
        - match: ((:))\s*(\()
          captures:
            1: entity.name.function.name-of-parameter.objc
            2: punctuation.separator.arguments.objc
            3: punctuation.definition.type.begin.objc
          push:
            - meta_scope: meta.argument-type.objc
            - match: (\))\s*(\w+\b)?
              captures:
                1: punctuation.definition.type.end.objc
                2: variable.parameter.function.objc
              pop: true
            - include: protocol_list
            - include: protocol_type_qualifier
            - include: $top_level_main
        - include: comment
  method_super:
    - match: ^(?=-|\+)
      push:
        - meta_scope: meta.function-with-body.objc
        - match: '(?<=\})|(?=#)'
          pop: true
        - include: method
        - include: $top_level_main
  pragma-mark:
    - match: ^\s*(#\s*(pragma\s+mark)\s+(.*))
      scope: meta.section
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.pragma.c
        3: meta.toc-list.pragma-mark.c
  preprocessor-rule-disabled-implementation:
    - match: ^\s*(#(if)\s+(0)\b).*
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b.*?(?:(?=(?://|/\*))|$))
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b.*?(?:(?=(?://|/\*))|$))
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: interface_innards
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b.*?(?:(?=(?://|/\*))|$))
              pop: true
            - include: disabled
            - include: pragma-mark
  preprocessor-rule-disabled-interface:
    - match: ^\s*(#(if)\s+(0)\b).*
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b.*?(?:(?=(?://|/\*))|$))
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - match: (?=^\s*#\s*endif\b.*?(?:(?=(?://|/\*))|$))
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: interface_innards
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.c
            - match: (?=^\s*#\s*(else|endif)\b.*?(?:(?=(?://|/\*))|$))
              pop: true
            - include: disabled
            - include: pragma-mark
  preprocessor-rule-enabled-implementation:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b.*?(?:(?=(?://|/\*))|$))
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b).*
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b.*?(?:(?=(?://|/\*))|$))
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b.*?(?:(?=(?://|/\*))|$))
              pop: true
            - include: implementation_innards
  preprocessor-rule-enabled-interface:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.if.c
        3: constant.numeric.preprocessor.c
      push:
        - match: ^\s*(#\s*(endif)\b.*?(?:(?=(?://|/\*))|$))
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.if.c
            3: constant.numeric.preprocessor.c
          pop: true
        - match: ^\s*(#\s*(else)\b).*
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.else.c
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.c
            - match: (?=^\s*#\s*endif\b.*?(?:(?=(?://|/\*))|$))
              captures:
                1: meta.preprocessor.c
                2: keyword.control.import.else.c
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b.*?(?:(?=(?://|/\*))|$))
              pop: true
            - include: interface_innards
  preprocessor-rule-other-implementation:
    - match: ^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
      push:
        - match: ^\s*(#\s*(endif)\b).*?(?:(?=(?://|/\*))|$)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.c
          pop: true
        - include: implementation_innards
  preprocessor-rule-other-interface:
    - match: ^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))
      captures:
        1: meta.preprocessor.c
        2: keyword.control.import.c
      push:
        - match: ^\s*(#\s*(endif)\b).*?(?:(?=(?://|/\*))|$)
          captures:
            1: meta.preprocessor.c
            2: keyword.control.import.c
          pop: true
        - include: interface_innards
  properties:
    - match: ((@)property)\s*(\()
      captures:
        1: keyword.other.property.objc
        2: punctuation.definition.keyword.objc
        3: punctuation.section.scope.begin.objc
      push:
        - meta_scope: meta.property-with-attributes.objc
        - match: (\))
          captures:
            1: punctuation.section.scope.end.objc
          pop: true
        - match: \b(getter|setter|readonly|readwrite|assign|retain|copy|atomic|nonatomic|strong|weak|nullable|nonnull|class)\b
          scope: keyword.other.property.attribute
    - match: ((@)property)\b
      scope: meta.property.objc
      captures:
        1: keyword.other.property.objc
        2: punctuation.definition.keyword.objc
  property_directive:
    - match: (@)(dynamic|synthesize)\b
      scope: keyword.other.property.directive.objc
      captures:
        1: punctuation.definition.keyword.objc
  protocol_list:
    - match: (<)
      captures:
        1: punctuation.section.scope.begin.objc
      push:
        - meta_scope: meta.protocol-list.objc
        - match: (>)
          captures:
            1: punctuation.section.scope.end.objc
          pop: true
        - include: scope:source.objc.platform#protocols
  protocol_type_qualifier:
    - match: \b(in|out|inout|oneway|bycopy|byref)\b
      scope: storage.modifier.protocol.objc
  special_variables:
    - match: \b_cmd\b
      scope: variable.other.selector.objc
    - match: \b(self|super)\b
      scope: variable.language.objc
