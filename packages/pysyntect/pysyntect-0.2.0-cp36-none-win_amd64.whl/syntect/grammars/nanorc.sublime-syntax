%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: .nanorc
file_extensions:
  - nanorc
  - nanorc.sample
first_line_match: |-
  (?ix)

  	# Emacs modeline
  	-\*-(?:\s*(?=[^:;\s]+\s*-\*-)|(?:.*?[;\s]|(?<=-\*-))mode\s*:\s*)
  		nanorc
  	(?=[\s;]|(?<![-*])-\*-).*?-\*-

  	|

  	# Vim modeline
  	(?:(?:\s|^)vi(?:m[<=>]?\d+|m)?|\sex)(?=:(?=\s*set?\s[^\n:]+:)|:(?!\s* set?\s))(?:(?:\s|\s*:\s*)\w*(?:\s*=(?:[^\n\\\s]|\\.)*)?)*[\s:](?:filetype|ft|syntax)\s*=
  		nanorc
  	(?=\s|:|$)
scope: source.nanorc
contexts:
  main:
    - include: comment
    - include: colours
    - include: syntax
    - include: options
  comment:
    - match: "#"
      captures:
        0: punctuation.definition.comment.nanorc
      push:
        - meta_scope: comment.line.number-sign.nanorc
        - match: $
          pop: true
  colours:
    - match: ^\s*(i?color)(?=\s|$)
      captures:
        1: storage.type.var.colour.name.nanorc
      push:
        - meta_scope: meta.colour.nanorc
        - match: $
          pop: true
        - match: \G\s*(,)(\S+)
          captures:
            1: punctuation.separator.delimiter.meta.comma.nanorc
            2: entity.background.colour.name.nanorc
        - match: \G\s*((?!,)\S+)(,)(\S+)
          captures:
            1: entity.foreground.colour.name.nanorc
            2: punctuation.separator.delimiter.meta.comma.nanorc
            3: entity.background.colour.name.nanorc
        - match: '\G\s*([^\s,]+)(,?)(?=\s|$)'
          captures:
            1: entity.foreground.colour.name.nanorc
            2: punctuation.separator.delimiter.meta.comma.nanorc
        - match: (?<=\s|\G)(start|end)(=)(?=\s|$)
          scope: meta.$1-pattern.nanorc
          captures:
            1: variable.parameter.attribute.nanorc
            2: punctuation.definition.assignment.equals-sign.nanorc
        - match: (?<=\s|\G)(start|end)(=)(?=")
          captures:
            1: variable.parameter.attribute.nanorc
            2: punctuation.definition.assignment.equals-sign.nanorc
          push:
            - meta_scope: meta.$1-pattern.nanorc
            - match: (?<=")
              captures:
                1: variable.parameter.attribute.nanorc
                2: punctuation.definition.assignment.equals-sign.nanorc
              pop: true
            - include: regexp
        - include: regexp
  options:
    - match: ^\s*(set)\s+(fill|tabsize)(?=\s|$)
      captures:
        1: keyword.operator.$1.nanorc
        2: entity.option.name.nanorc
      push:
        - meta_scope: meta.option.$2.nanorc
        - match: $
          pop: true
        - match: "[0-9]+"
          scope: constant.numeric.integer.int.decimal.nanorc
    - match: |-
        (?x) ^ \s*
        (set|unset) \s+
        (autoindent|backup|backwards|boldtext|casesensitive|const|cut
        |historylog|morespace|mouse|multibuffer|noconvert|nofollow|nohelp
        |nonewlines|nowrap|preserve|quickblank|rebinddelete|rebindkeypad
        |regexp|smarthome|smooth|suspend|tabstospaces|tempfile|view
        |wordbounds) (?=\s|$)
      captures:
        1: keyword.operator.$1.nanorc
        2: entity.option.name.nanorc
      push:
        - meta_scope: meta.option.$2.nanorc
        - match: $
          pop: true
    - match: |-
        (?x) ^ \s*
        (set) \s+
        (backupdir|brackets|matchbrackets|operatingdir
        |punct|speller|whitespace) (?=\s|$)
      captures:
        1: keyword.operator.$1.nanorc
        2: entity.option.name.nanorc
      push:
        - meta_scope: meta.option.$2.nanorc
        - match: $
          pop: true
        - include: string
    - match: ^\s*(include)(?=\s|$)\s*
      captures:
        1: keyword.control.directive.include.nanorc
      push:
        - meta_scope: meta.preprocessor.include.nanorc
        - meta_content_scope: storage.modifier.import.file-name.nanorc
        - match: $
          pop: true
    - match: ^\s*(set)\s+(quotestr)(?=\s|$)
      captures:
        1: keyword.operator.$1.nanorc
        2: entity.option.name.nanorc
      push:
        - meta_scope: meta.option.$2.nanorc
        - match: $
          pop: true
        - include: regexp
    - match: ^\s*(?:(set|unset)\s+)?(\S+)
      captures:
        1: keyword.operator.$1.nanorc
        2: entity.option.name.nanorc
      push:
        - meta_scope: meta.option.custom.nanorc
        - match: $
          pop: true
        - match: \b(true|false|on|off|yes|no)\b
          scope: constant.logical.boolean.$1.nanorc
        - match: '[-+]?(?:\d+(?:\.\d*)?|\.\d+)(?=\s|$)'
          scope: constant.numeric.decimal.nanorc
        - include: regexp
  quotedString:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.nanorc
      push:
        - meta_scope: string.quoted.double.nanorc
        - match: '"(?=[^"]*$)|(?=$)'
          captures:
            0: punctuation.definition.string.end.nanorc
          pop: true
  regexp:
    - match: (")"?+
      captures:
        1: punctuation.definition.string.begin.nanorc
      push:
        - meta_scope: string.regexp.embedded.nanorc
        - match: '"(?=\s|$)|(?=$)'
          captures:
            0: punctuation.definition.string.end.nanorc
          pop: true
        - match: (?:"(?!\s|$))+
        - include: scope:source.regexp
  string:
    - include: quotedString
    - include: unquotedString
  syntax:
    - match: ^\s*(syntax)\s+(none|default)(?=\s|$)
      scope: meta.syntax.nanorc
      captures:
        1: storage.type.var.syntax.name.nanorc
        2: support.constant.language.$2.nanorc
    - match: '^\s*(syntax)(?:\s+((")[^"]+(")|\S+)(?:\s+(.*))?)?\s*$\s*'
      captures:
        1: storage.type.var.syntax.name.nanorc
        2: entity.syntax.name.nanorc
        3: punctuation.definition.name.begin.nanorc
        4: punctuation.definition.name.end.nanorc
      push:
        - meta_scope: meta.syntax.nanorc
        - match: ^(?=\s*syntax)
          pop: true
        - include: main
  unquotedString:
    - match: \S+
      scope: string.unquoted.bareword.nanorc
