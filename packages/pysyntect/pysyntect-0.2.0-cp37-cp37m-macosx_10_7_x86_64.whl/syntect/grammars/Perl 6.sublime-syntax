%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Perl 6
file_extensions:
  - p6
  - pl6
  - pm6
  - nqp
first_line_match: |-
  (?x)
  # Hashbang
  ^\#!.*(?:\s|\/|(?<=!)\b)(?:perl6|nqp)(?:$|\s)
  |
  # Perl 6 pragma
  \buse\s+v6\b
  |
  # Modeline
  (?i:
    # Emacs
    -\*-(?:(?:(?!mode\s*:)[^:;]+:[^:;]+;)*\s*mode\s*:)?\s*
  	perl6
    \s*(?:;[^:;]+:[^:;]+?)*;?\s*-\*-
    |
    # Vim
    (?:(?:\s|^)vi(?:m[<=>]?\d+|m)?|(?!^)\sex)(?=:(?=\s*set?\s[^\n:]+:)|:(?!\s*set?\s))(?:(?:\s|\s*:\s*)\w*(?:\s*=(?:[^\n\\\s]|\\.)*)?)*[\s:](?:filetype|ft|syntax)\s*=
  	perl6
    (?=\s|:|$)
  )
scope: source.perl.6
contexts:
  main:
    - match: ^=begin
      push:
        - meta_scope: comment.block.perl
        - match: ^=end
          pop: true
    - match: '(^[ \t]+)?(?=#)'
      captures:
        1: punctuation.whitespace.comment.leading.perl
      push:
        - match: (?!\G)
          pop: true
        - match: "#"
          captures:
            0: punctuation.definition.comment.perl
          push:
            - meta_scope: comment.line.number-sign.perl
            - match: \n
              pop: true
    - match: '(class|enum|grammar|knowhow|module|package|role|slang|subset)(\s+)(((?:::|'')?(?:([a-zA-Z_\x{C0}-\x{FF}\$])([a-zA-Z0-9_\x{C0}-\x{FF}\\$]|[\-''][a-zA-Z0-9_\x{C0}-\x{FF}\$])*))+)'
      scope: meta.class.perl.6
      captures:
        1: storage.type.class.perl.6
        3: entity.name.type.class.perl.6
    - match: (?<=\s)'
      captures:
        0: punctuation.definition.string.begin.perl
      push:
        - meta_scope: string.quoted.single.perl
        - match: "'"
          captures:
            0: punctuation.definition.string.end.perl
          pop: true
        - match: '\\[''\\]'
          scope: constant.character.escape.perl
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.perl
      push:
        - meta_scope: string.quoted.double.perl
        - match: '"'
          captures:
            0: punctuation.definition.string.end.perl
          pop: true
        - match: '\\[abtnfre"\\]'
          scope: constant.character.escape.perl
    - match: q(q|to|heredoc)*\s*:?(q|to|heredoc)*\s*/(.+)/
      push:
        - meta_scope: string.quoted.single.heredoc.perl
        - match: \3
          pop: true
    - match: '(q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*{{'
      push:
        - meta_scope: string.quoted.double.heredoc.brace.perl
        - match: "}}"
          pop: true
        - include: qq_brace_string_content
    - match: (q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*\(\(
      push:
        - meta_scope: string.quoted.double.heredoc.paren.perl
        - match: \)\)
          pop: true
        - include: qq_paren_string_content
    - match: '(q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*\[\['
      push:
        - meta_scope: string.quoted.double.heredoc.bracket.perl
        - match: '\]\]'
          pop: true
        - include: qq_bracket_string_content
    - match: '(q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*{'
      push:
        - meta_scope: string.quoted.single.heredoc.brace.perl
        - match: "}"
          pop: true
        - include: qq_brace_string_content
    - match: (q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*/
      push:
        - meta_scope: string.quoted.single.heredoc.slash.perl
        - match: /
          pop: true
        - include: qq_slash_string_content
    - match: (q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*\(
      push:
        - meta_scope: string.quoted.single.heredoc.paren.perl
        - match: \)
          pop: true
        - include: qq_paren_string_content
    - match: '(q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*\['
      push:
        - meta_scope: string.quoted.single.heredoc.bracket.perl
        - match: '\]'
          pop: true
        - include: qq_bracket_string_content
    - match: (q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*'
      push:
        - meta_scope: string.quoted.single.heredoc.single.perl
        - match: "'"
          pop: true
        - include: qq_single_string_content
    - match: (q|Q)(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*:?(x|exec|w|words|ww|quotewords|v|val|q|single|qq|double|s|scalar|a|array|h|hash|f|function|c|closure|b|blackslash|regexp|substr|trans|codes|p|path)*\s*"
      push:
        - meta_scope: string.quoted.single.heredoc.double.perl
        - match: '"'
          pop: true
        - include: qq_double_string_content
    - match: \b\$\w+\b
      scope: variable.other.perl
    - match: \b(macro|sub|submethod|method|multi|proto|only|rule|token|regex|category)\b
      scope: storage.type.declare.routine.perl
    - match: \b(self)\b
      scope: variable.language.perl
    - match: \b(use|require)\b
      scope: keyword.other.include.perl
    - match: \b(if|else|elsif|unless)\b
      scope: keyword.control.conditional.perl
    - match: \b(let|my|our|state|temp|has|constant)\b
      scope: storage.type.variable.perl
    - match: \b(for|loop|repeat|while|until|gather|given)\b
      scope: keyword.control.repeat.perl
    - match: \b(take|do|when|next|last|redo|return|contend|maybe|defer|default|exit|make|continue|break|goto|leave|async|lift)\b
      scope: keyword.control.flowcontrol.perl
    - match: \b(is|as|but|trusts|of|returns|handles|where|augment|supersede)\b
      scope: storage.modifier.type.constraints.perl
    - match: \b(BEGIN|CHECK|INIT|START|FIRST|ENTER|LEAVE|KEEP|UNDO|NEXT|LAST|PRE|POST|END|CATCH|CONTROL|TEMP)\b
      scope: meta.function.perl
    - match: \b(die|fail|try|warn)\b
      scope: keyword.control.control-handlers.perl
    - match: \b(prec|irs|ofs|ors|export|deep|binary|unary|reparsed|rw|parsed|cached|readonly|defequiv|will|ref|copy|inline|tighter|looser|equiv|assoc|required)\b
      scope: storage.modifier.perl
    - match: \b(NaN|Inf)\b
      scope: constant.numeric.perl
    - match: \b(oo|fatal)\b
      scope: keyword.other.pragma.perl
    - match: \b(Object|Any|Junction|Whatever|Capture|MatchSignature|Proxy|Matcher|Package|Module|ClassGrammar|Scalar|Array|Hash|KeyHash|KeySet|KeyBagPair|List|Seq|Range|Set|Bag|Mapping|Void|UndefFailure|Exception|Code|Block|Routine|Sub|MacroMethod|Submethod|Regex|Str|str|Blob|Char|ByteCodepoint|Grapheme|StrPos|StrLen|Version|NumComplex|num|complex|Bit|bit|bool|True|FalseIncreasing|Decreasing|Ordered|Callable|AnyCharPositional|Associative|Ordering|KeyExtractorComparator|OrderingPair|IO|KitchenSink|RoleInt|int|int1|int2|int4|int8|int16|int32|int64Rat|rat|rat1|rat2|rat4|rat8|rat16|rat32|rat64Buf|buf|buf1|buf2|buf4|buf8|buf16|buf32|buf64UInt|uint|uint1|uint2|uint4|uint8|uint16|uint32uint64|Abstraction|utf8|utf16|utf32)\b
      scope: support.type.perl6
    - match: \b(div|xx|x|mod|also|leg|cmp|before|after|eq|ne|le|lt|not|gt|ge|eqv|ff|fff|and|andthen|or|xor|orelse|extra|lcm|gcd)\b
      scope: keyword.operator.perl
    - match: '(\$|@|%|&)(\*|:|!|\^|~|=|\?|(<(?=.+>)))?([a-zA-Z_\x{C0}-\x{FF}\$])([a-zA-Z0-9_\x{C0}-\x{FF}\$]|[\-''][a-zA-Z0-9_\x{C0}-\x{FF}\$])*'
      scope: variable.other.identifier.perl.6
    - match: \b(eager|hyper|substr|index|rindex|grep|map|sort|join|lines|hints|chmod|split|reduce|min|max|reverse|truncate|zip|cat|roundrobin|classify|first|sum|keys|values|pairs|defined|delete|exists|elems|end|kv|any|all|one|wrap|shape|key|value|name|pop|push|shift|splice|unshift|floor|ceiling|abs|exp|log|log10|rand|sign|sqrt|sin|cos|tan|round|strand|roots|cis|unpolar|polar|atan2|pick|chop|p5chop|chomp|p5chomp|lc|lcfirst|uc|ucfirst|capitalize|normalize|pack|unpack|quotemeta|comb|samecase|sameaccent|chars|nfd|nfc|nfkd|nfkc|printf|sprintf|caller|evalfile|run|runinstead|nothing|want|bless|chr|ord|gmtime|time|eof|localtime|gethost|getpw|chroot|getlogin|getpeername|kill|fork|wait|perl|graphs|codes|bytes|clone|print|open|read|write|readline|say|seek|close|opendir|readdir|slurp|spurt|shell|run|pos|fmt|vec|link|unlink|symlink|uniq|pair|asin|atan|sec|cosec|cotan|asec|acosec|acotan|sinh|cosh|tanh|asinh|done|acos|acosh|atanh|sech|cosech|cotanh|sech|acosech|acotanh|asech|ok|nok|plan_ok|dies_ok|lives_ok|skip|todo|pass|flunk|force_todo|use_ok|isa_ok|diag|is_deeply|isnt|like|skip_rest|unlike|cmp_ok|eval_dies_ok|nok_error|eval_lives_ok|approx|is_approx|throws_ok|version_lt|plan|EVAL|succ|pred|times|nonce|once|signature|new|connect|operator|undef|undefine|sleep|from|to|infix|postfix|prefix|circumfix|postcircumfix|minmax|lazy|count|unwrap|getc|pi|e|context|void|quasi|body|each|contains|rewinddir|subst|can|isa|flush|arity|assuming|rewind|callwith|callsame|nextwith|nextsame|attr|eval_elsewhere|none|srand|trim|trim_start|trim_end|lastcall|WHAT|WHERE|HOW|WHICH|VAR|WHO|WHENCE|ACCEPTS|REJECTS|not|true|iterator|by|re|im|invert|flip|gist|flat|tree|is-prime|throws_like|trans)\b
      scope: support.function.perl
  qq_brace_string_content:
    - match: "{"
      push:
        - match: "}"
          pop: true
        - include: qq_brace_string_content
  qq_bracket_string_content:
    - match: '\['
      push:
        - match: '\]'
          pop: true
        - include: qq_bracket_string_content
  qq_double_string_content:
    - match: '"'
      push:
        - match: '"'
          pop: true
        - include: qq_double_string_content
  qq_paren_string_content:
    - match: \(
      push:
        - match: \)
          pop: true
        - include: qq_paren_string_content
  qq_single_string_content:
    - match: "'"
      push:
        - match: "'"
          pop: true
        - include: qq_single_string_content
  qq_slash_string_content:
    - match: \\/
      push:
        - match: \\/
          pop: true
        - include: qq_slash_string_content
