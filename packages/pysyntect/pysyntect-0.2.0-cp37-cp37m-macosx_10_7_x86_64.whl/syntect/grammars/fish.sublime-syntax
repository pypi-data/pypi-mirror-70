%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: fish
file_extensions:
  - fish
first_line_match: ^#!.*(fish)
scope: source.fish
contexts:
  main:
    - match: '"'
      comment: Single quoted string
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.quoted.double.fish
        - match: '"'
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - match: \\\"|\\\$|\\\\
          scope: constant.character.escape.fish
        - include: variable
    - match: "'"
      comment: single quoted string
      captures:
        0: punctuation.definition.string.begin.fish
      push:
        - meta_scope: string.quoted.single.fish
        - match: "'"
          captures:
            0: punctuation.definition.string.end.fish
          pop: true
        - match: \\'|\\
          scope: constant.character.escape.fish
        - include: variable
        - include: escape
    - match: '(?<!\$)(#)(?!\{).*$\n?'
      comment: line comment
      scope: comment.line.number-sign.fish
      captures:
        1: punctuation.definition.comment.fish
    - match: '(?<!\.)\b(function|while|if|else|switch|for|in|end)\b(?![?!])'
      comment: control structures requiring an end
      scope: keyword.control.fish
    - match: '(?<!\.)\bfunction\b(?![?!])'
      scope: storage.type.fish
    - match: \|
      scope: keyword.operator.pipe.fish
    - match: |-
        (?x:
        <|				# Standard Input
        (>|\^|>>|\^\^)(&[012\-])?| # Redirection of stdout/stderr
        [012](<|>|>>)(&[012\-])? # Redirect input/output of file descriptors
        )
      comment: IO Redirection
      scope: keyword.operator.redirect.fish
    - match: "&"
      scope: keyword.operator.background.fish
    - match: \*\*|\*|\?
      scope: keyword.operator.glob.fish
    - match: '\s(-{1,2}[a-zA-Z_\-0-9]+|-\w)\b'
      comment: command short/long options
      captures:
        1: string.other.option.fish
    - match: |-
        (?x)\b(
        _|__fish_append|__fish_bind_test1|__fish_bind_test2|__fish_commandline_test|
        __fish_complete_ant_targets|__fish_complete_bittorrent|__fish_complete_cd|
        __fish_complete_command|__fish_complete_directories|__fish_complete_file_url|
        __fish_complete_groups|__fish_complete_ls|__fish_complete_man|
        __fish_complete_mime|__fish_complete_pids|__fish_complete_ssh|
        __fish_complete_subcommand|__fish_complete_subcommand_root|
        __fish_complete_suffix|__fish_complete_tar|__fish_complete_tex|
        __fish_complete_unrar|__fish_complete_users|__fish_complete_vi|
        __fish_config_interactive|__fish_contains_opt|__fish_crux_packages|
        __fish_describe_command|__fish_filter_ant_targets|__fish_filter_mime|
        __fish_gnu_complete|__fish_is_first_token|__fish_list_current_token|
        __fish_move_last|__fish_no_arguments|__fish_not_contain_opt|__fish_paginate|
        __fish_ports_dirs|__fish_print_addresses|__fish_print_encodings|
        __fish_print_filesystems|__fish_print_function_prototypes|__fish_print_help|
        __fish_print_hostnames|__fish_print_interfaces|__fish_print_make_targets|
        __fish_print_packages|__fish_print_users|__fish_prt_no_subcommand|
        __fish_prt_packages|__fish_prt_ports|__fish_prt_use_package|
        __fish_prt_use_port|__fish_reload_key_bindings|__fish_repaint|
        __fish_repaint_root|__fish_seen_subcommand_from|__fish_test_arg|
        __fish_use_subcommand|__fish_winch_handler|alias|cd|delete-or-exit|dirh|
        dirs|down-or-search|eval|fish_default_key_bindings|fish_on_exit|
        fish_prompt|fish_sigtrap_handler|funced|funcsave|grep|help|isatty|la|ll|
        ls|math|N_|nextd|nextd-or-forward-word|open|popd|prevd|
        prevd-or-backward-word|prompt_pwd|psub|pushd|pwd|setenv|sgrep|trap|type|
        umask|up-or-search|vared
        )\b
      comment: builtin shellscript functions
      scope: support.function.script.fish
    - match: |-
        (?x)\b(
        \s\.\s|and|begin|bg|bind|block|break|breakpoint|builtin|case|cd|command|
        commandline|complete|contains|continue|count|else|emit|end|exec|exit|
        fg|for|function|functions|if|jobs|not|or|random|read|return|set|
        status|switch|ulimit|while
        )\b
      comment: builtin commands listed by builtin -n
      scope: support.function.builtin.fish
    - match: |-
        (?x)\b(
        admin|alias|ar|asa|at|awk|basename|batch|bc|bg|break|c99|cal|cat|
        cd|cflow|chgrp|chmod|chown|cksum|cmp|colon|comm|command|compress|
        continue|cp|crontab|csplit|ctags|cut|cxref|date|dd|delta|df|diff|
        dirname|dot|du|echo|ed|env|eval|ex|exec|exit|expand|export|expr|
        false|fc|fg|file|find|fold|fort77|fuser|gencat|get|getconf|getopts|
        grep|hash|head|iconv|id|ipcrm|ipcs|jobs|join|kill|lex|link|ln|
        locale|localedef|logger|logname|lp|ls|m4|mailx|make|man|mesg|mkdir|
        mkfifo|more|mv|newgrp|nice|nl|nm|nohup|od|paste|patch|pathchk|pax|
        pr|printf|prs|ps|pwd|qalter|qdel|qhold|qmove|qmsg|qrerun|qrls|
        qselect|qsig|qstat|qsub|read|readonly|renice|return|rm|rmdel|rmdir|
        sact|sccs|sed|set|sh|shift|sleep|sort|split|strings|strip|stty|tabs|
        tail|talk|tee|test|time|times|touch|tput|tr|trap|true|tsort|tty|
        type|ulimit|umask|unalias|uname|uncompress|unexpand|unget|uniq|unlink|
        unset|uucp|uudecode|uuencode|uustat|uux|val|vi|wait|wc|what|who|
        write|xargs|yacc|zcat
        )\b
      comment: standard Unix utilities as specified in IEEE Std 1003.1 (2004 edition)
      scope: support.function.unix.fish
    - include: variable
    - include: escape
  escape:
    - match: '\\(a|b|e|f|n|r|t|v|\s|\$|\\|\*|\?|~|\%|#|(|)|{|}|\[|\]|<|>|\^)'
      comment: single character character escape sequences
      scope: constant.character.escape.single.fish
    - match: '\\x[0-9a-fA-F]{2}'
      comment: escapes the ascii character with the specified value (hexadecimal)
      scope: constant.character.escape.hex-ascii.fish
    - match: '\\X[0-9a-fA-F]{2}'
      comment: |
        escapes a byte of data with the specified value (hexadecimal).
                            If you are using a mutibyte encoding, this can be used to enter invalid strings.
                            Only use this if you know what you are doing.
      scope: constant.character.escape.hex-byte.fish
    - match: '\\[0-9]{3}'
      comment: escapes the ascii character with the specified value (octal)
      scope: constant.character.escape.octal.fish
    - match: '\\u[0-9a-fA-F]{4}'
      comment: escapes the 16-bit unicode character with the specified value (hexadecimal)
      scope: constant.character.escape.unicode-16-bit.fish
    - match: '\\U[0-9a-fA-F]{8}'
      comment: escapes the 32-bit unicode character with the specified value (hexadecimal)
      scope: constant.character.escape.unicode-32-bit.fish
    - match: '\\c[a-zA-Z]'
      comment: escapes the control sequence generated by pressing the control key and the specified letter
      scope: constant.character.escape.control.fish
  variable:
    - match: |-
        (?x)(\$)(BROWSER|CDPATH|fish_greeting|LANG|LC_ALL|LC_COLLATE|
        LC_CTYPE|LC_MESSAGES|LC_MONETARY|LC_NUMERIC|LC_TIME|PATH|
        umask|fish_color_command|fish_color_comment|fish_color_cwd|fish_color_cwd_root|
        fish_color_error|fish_color_escape|fish_color_history_current|
        fish_color_match|fish_color_normal|fish_color_operator|fish_color_quote|
        fish_color_redirection|fish_color_search_match|fish_color_valid_path|
        fish_complete_path|fish_function_path|fish_greeting|fish_key_bindings|
        fish_pager_color_completion|fish_pager_color_description|
        fish_pager_color_prefix|fish_pager_color_progress)
      scope: variable.other.special.fish
      captures:
        1: punctuation.definition.variable.fish
    - match: (\$)(_|argv|history|HOME|PWD|status|USER)
      scope: variable.other.fixed.fish
      captures:
        1: punctuation.definition.variable.fish
    - match: '(\$)__(fish|FISH)[a-zA-Z_][a-zA-Z0-9_]*'
      scope: variable.other.fish.fish
      captures:
        1: punctuation.definition.variable.fish
    - match: '(\$)[a-zA-Z_][a-zA-Z0-9_]*'
      scope: variable.other.normal.fish
      captures:
        1: punctuation.definition.variable.fish
