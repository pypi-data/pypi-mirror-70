%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Smali
file_extensions:
  - Smali
scope: source.smali
contexts:
  main:
    - include: annotation
    - include: annotation-end
    - include: annotation-value_list
    - include: annotation-value
    - include: annotation-name
    - include: annotation-access
    - include: comment-alone
    - include: comment-inline
    - include: field
    - include: field-end
    - match: '^[\s\t]*(\.class)[\s\t]*((?:(?:interface|public|protected|private|abstract|static|final|synchronized|transient|volatile|native|strictfp|synthetic|enum|annotation)[\s\t]+)*)[\s\t]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)(?=[\s\t]*(#.*)?$)'
      comment: Class name
      captures:
        1: constant.language.smali
        2: variable.parameter.smali
        3: entity.name.tag.smali
        4: string.quoted.double.smali
        5: entity.name.tag.smali
    - match: '^[\s\t]*(\.(?:super|implements))[\s\t]+(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)(?=[\s\t]*(#.*)?$)'
      comment: Super / implements class name
      captures:
        1: constant.language.smali
        2: entity.name.tag.smali
        3: string.quoted.double.smali
        4: entity.name.tag.smali
    - match: '^[\s\t]*(\.source)[\s\t]+(")(.*?)((?<!\\)")(?=[\s\t]*(#.*)?$)(?=[\s\t]*(#.*)?$)'
      comment: Source file
      captures:
        1: constant.language.smali
        2: entity.name.tag.smali
        3: string.quoted.double.smali
        4: entity.name.tag.smali
    - match: '^[\s\t]*(\.method)[\s\t]*((?:(?:bridge|varargs|declared-synchronized|public|protected|private|abstract|static|final|synchronized|transient|volatile|native|strictfp|synthetic|enum)[\s\t]+)*)(constructor )?(<init>|<clinit>|(?:[\$\p{L}_\-][\p{L}\d_\$]*))\(((?:[\[]*(?:Z|B|S|C|I|J|F|D|L(?:[\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*);))*)\)(?:(V)|[\[]*(Z|B|S|C|I|J|F|D)|[\[]*(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))(?=[\s\t]*(#.*)?$)'
      comment: Method signature and body
      captures:
        1: constant.language.smali
        10: entity.name.tag.smali
        11: constant.numeric.smali
        12: entity.name.tag.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: entity.name.function.smali
        5: constant.numeric.smali
        6: constant.numeric.smali
        7: constant.numeric.smali
        8: entity.name.tag.smali
        9: constant.numeric.smali
      push:
        - match: '^[\s\t]*(\.end method)(?=[\s\t]*(#.*)?$)'
          captures:
            1: constant.language.smali
          pop: true
        - include: comment-inline
        - match: '^[\s\t]*(\.prologue)(?=[\s\t]*(#.*)?$)'
          comment: Prologue
          scope: constant.language.smali
        - match: '^[\s\t]*(\.local)[\s\t]+([vp]\d+),[\s\t]+("[\p{L}_\$][\w\$]*"):[\[]*(?:(?:(Z|B|S|C|I|J|F|D)|(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))))(?:,(")(.*?)((?<!\\)"))?(?:,[\s\t]*(")(.*?)((?<!\\)"))?(?=[\s\t]*(#.*)?$)'
          comment: Local
          captures:
            1: constant.language.smali
            10: entity.name.tag.smali
            11: entity.name.tag.smali
            12: string.interpolated.smali
            13: entity.name.tag.smali
            2: variable.parameter.smali
            3: string.interpolated.smali
            4: constant.numeric.smali
            5: entity.name.tag.smali
            6: constant.numeric.smali
            7: entity.name.tag.smali
            8: entity.name.tag.smali
            9: string.interpolated.smali
        - match: '^[\s\t]*(\.catch)[\s\t]+(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))[\s\t]+{(:[A-Za-z_\d]+)[\s\t]+\.\.[\s\t]+(:[A-Za-z_\d]+)}[\s\t]+(:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
          comment: Catch exceptions
          captures:
            1: constant.language.smali
            2: entity.name.tag.smali
            3: constant.numeric.smali
            4: entity.name.tag.smali
            5: keyword.control.smali
            6: keyword.control.smali
            7: keyword.control.smali
        - match: '^[\s\t]*(\.catchall)[\s\t]+{(:[A-Za-z_\d]+)[\s\t]+\.\.[\s\t]+(:[A-Za-z_\d]+)}[\s\t]+(:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
          comment: Gotta catch 'em all!
          captures:
            1: constant.language.smali
            2: keyword.control.smali
            3: keyword.control.smali
            4: keyword.control.smali
        - match: '^[\s\t]*(\.(?:end|restart)[\s\t]+local)[\s\t]+[vp]\d+(?=[\s\t]*(#.*)?$)'
          comment: End / Restart Local
          scope: constant.language.smali
        - match: '^[\s\t]*(\.sparse-switch)(?=[\s\t]*(#.*)?$)'
          comment: Sparse Switch
          captures:
            1: constant.language.smali
          push:
            - match: '^[\s\t]*(\.end sparse-switch)(?=[\s\t]*(#.*)?$)'
              captures:
                1: constant.language.smali
              pop: true
            - include: comment-inline
            - match: '^[\s\t]*(-?0x(?i:0|[1-9a-f][\da-f]*))[\s\t]+->[\s\t]+(:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
              captures:
                1: variable.parameter.smali
                2: keyword.control.smali
        - match: '^[\s\t]*(\.packed-switch)[\s\t]+(-0x1|0x(?i:0|[1-9a-f][\da-f]*))(?=[\s\t]*(#.*)?$)'
          comment: Begin Packed Switch, no idea what literal limit is for these. Have seen up to 0x7f090005
          captures:
            1: constant.language.smali
            2: variable.parameter.smali
        - match: '^[\s\t]*(\.end packed-switch)(?=[\s\t]*(#.*)?$)'
          comment: End Packed Switch
          scope: constant.language.smali
        - match: '^[\s\t]*(\.array-data)[\s\t]+(1|2|4|8)(?=[\s\t]*(#.*)?$)'
          comment: Array data
          captures:
            1: constant.language.smali
            2: variable.parameter.smali
          push:
            - match: '^[\s\t]*(\.end array-data)(?=[\s\t]*(#.*)?$)'
              captures:
                1: constant.language.smali
              pop: true
            - include: comment-inline
            - match: '^[\s\t]*(?i:((?:-0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}|8[0]{7})|0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}))[st]?|(?:(?:-0x(?:0|[1-9a-f][\da-f]{0,14}|[1-7][\da-f]{15}|8[0]{15})|0x(?:0|[1-9a-f][\da-f]{0,14}|[1-7][\da-f]{15}))L))\b)(?=[\s\t]*(#.*)?$)'
              captures:
                1: variable.parameter.smali
        - include: field
        - include: field-end
        - include: annotation
        - include: annotation-end
        - include: annotation-value_list
        - include: annotation-value
        - include: annotation-name
        - include: annotation-access
        - include: comment-alone
        - include: directive-method-line
        - include: directive-method-registers_locals
        - include: directive-method-label
        - include: directive-method-parameter
        - include: directive-method-parameter-end
        - include: directives-method-relaxed
        - include: opcode-format-10x
        - include: opcode-format-10x-relaxed
        - include: opcode-format-11n
        - include: opcode-format-11n-relaxed
        - include: opcode-format-11x
        - include: opcode-format-11x-relaxed
        - include: opcode-format-22x
        - include: opcode-format-22x-relaxed
        - include: opcode-format-32x
        - include: opcode-format-32x-relaxed
        - include: opcode-format-12x
        - include: opcode-format-12x-relaxed
        - include: opcode-format-21c-string
        - include: opcode-format-21c-type
        - include: opcode-format-21c-field
        - include: opcode-format-21c-relaxed
        - include: opcode-format-21h
        - include: opcode-format-21h-relaxed
        - include: opcode-format-21s
        - include: opcode-format-21s-relaxed
        - include: opcode-format-21t
        - include: opcode-format-21t-relaxed
        - include: opcode-format-31t
        - include: opcode-format-31t-relaxed
        - include: opcode-format-22b
        - include: opcode-format-22b-relaxed
        - include: opcode-format-22c-type
        - include: opcode-format-22c-type_array
        - include: opcode-format-22c-field
        - include: opcode-format-22c-relaxed
        - include: opcode-format-22s
        - include: opcode-format-22s-relaxed
        - include: opcode-format-22t
        - include: opcode-format-22t-relaxed
        - include: opcode-format-23x
        - include: opcode-format-23x-relaxed
        - include: opcode-format-3rc-type
        - include: opcode-format-3rc-meth
        - include: opcode-format-3rc-relaxed
        - include: opcode-format-35c-type
        - include: opcode-format-35c-meth
        - include: opcode-format-35c-relaxed
        - include: opcode-format-51l
        - include: opcode-format-51l-relaxed
        - include: opcode-format-31i
        - include: opcode-format-31i-relaxed
        - include: opcode-format-10t-20t-30t
        - include: opcode-format-10t-20t-30t-relaxed
    - match: '^[\s\t]*(\.(?:class|super|implements|method|(end )?(?:method|annotation|field)))'
      comment: Method directives - relaxed
      captures:
        1: invalid.illegal.smali
  annotation:
    - match: '^[\s\t]*(\.annotation)[\s\t]+(build|runtime|system)[\s\t]+(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))(?=[\s\t]*(#.*)?$)'
      captures:
        1: constant.language.smali
        2: storage.modifier.smali
        3: entity.name.tag.smali
        4: constant.numeric.smali
        5: entity.name.tag.smali
  annotation-access:
    - match: '^[\s\t]*(accessFlags)[\s\t]*=[\s\t]*(0x(?:0|[1-9a-f][\da-f]{0,3}))(?=[\s\t]*(#.*)?$)'
      comment: accessFlags property in annotation. Haven't seen any of these go over 0x4019.
      captures:
        1: support.function.smali
        2: constant.numeric.smali
  annotation-end:
    - match: '^[\s\t]*(\.end annotation)(?=[\s\t]*(#.*)?$)'
      comment: Parsing this is hard to do right. This is Good Enough™.
      captures:
        1: constant.language.smali
  annotation-name:
    - match: '^[\s\t]*(name)[\s\t]*=[\s\t]*(?:(null)|(")(.*?)((?<!\\)")?)(?=[\s\t]*(#.*)?$)'
      comment: Name property in annotation
      captures:
        1: support.function.smali
        2: constant.language.smali
        3: entity.name.tag.smali
        4: string.quoted.double.smali
        5: entity.name.tag.smali
  annotation-value:
    - match: '^[\s\t]*(value)[\s\t]*=[\s\t]*(?:(")(.*?)((?<!\\)")?|(?:\.(enum|subannotation)[\s\t]+)?(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))(?:->(?:([\p{L}_\$][\w\$]*):[\[]*(?:(?:(Z|B|S|C|I|J|F|D)|(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))))|(<init>|<clinit>|(?:[\$\p{L}_][\p{L}\d_\$]*))\(((?:[\[]*(?:Z|B|S|C|I|J|F|D|L(?:[\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*);))*)\)(?:(V)|[\[]*(Z|B|S|C|I|J|F|D)|[\[]*(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))))?(?=[\s\t]*(#.*)?$)'
      comment: This is another hack because sublime can't handle multi-line regex, particulaly for 'end'.
      captures:
        1: support.function.smali
        10: constant.numeric.smali
        11: entity.name.tag.smali
        12: constant.numeric.smali
        13: entity.name.tag.smali
        14: entity.name.function.smali
        15: constant.numeric.smali
        16: constant.numeric.smali
        17: constant.numeric.smali
        18: entity.name.tag.smali
        19: constant.numeric.smali
        2: entity.name.tag.smali
        20: entity.name.tag.smali
        21: constant.numeric.smali
        22: entity.name.tag.smali
        3: string.quoted.double.smali
        4: entity.name.tag.smali
        5: entity.name.tag.smali
        6: entity.name.tag.smali
        7: constant.numeric.smali
        8: entity.name.tag.smali
        9: string.interpolated.smali
  annotation-value_list:
    - match: '^[\s\t]*(value)[\s\t]*=[\s\t]*{(?=[\s\t]*(#.*)?$)'
      comment: This is another hack. Deals.
      captures:
        1: support.function.smali
      push:
        - match: '^[\s\t]*}(?=[\s\t]*(#.*)?$)'
          pop: true
        - include: comment-inline
        - match: '(?:(")(.*?)((?<!\\)")?|(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))(?:,)?(?=[\s\t]*(#.*)?$)'
          captures:
            1: entity.name.tag.smali
            2: string.quoted.double.smali
            3: entity.name.tag.smali
            4: entity.name.tag.smali
            5: constant.numeric.smali
            6: entity.name.tag.smali
  comment-alone:
    - match: '^[\s\t]*(#.*)$'
      comment: Single line, stand alone comment
      captures:
        1: comment.line.number-sign.smali
  comment-inline:
    - match: (#.*)$
      comment: In-line comment
      captures:
        1: comment.line.number-sign.smali
  directive-method-label:
    - match: '^[\s\t]*(:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
      comment: Label
      captures:
        1: keyword.control.smali
  directive-method-line:
    - match: '[\s\t]*(\.line)[\s\t]+(\d+)(?=[\s\t]*(#.*)?$)'
      comment: Line
      captures:
        1: constant.language.smali
        2: variable.parameter.smali
  directive-method-parameter:
    - match: '[\s\t]*(\.param(?:eter)?)[\s\t]+(p(?:0|[1-9][\d]?|[1-4][\d]{2}|50[\d]|51[0-2])\b)(?:,[\s\t]*(")(.*?)((?<!\\)"))?(?=[\s\t]*(#.*)?$)'
      comment: Parameter
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: entity.name.tag.smali
        4: string.quoted.double.smali
        5: entity.name.tag.smali
  directive-method-parameter-end:
    - match: '^[\s\t]*(\.end param)(?=[\s\t]*(#.*)?$)'
      comment: Parsing this is hard to do right. This is Good Enough™.
      captures:
        1: constant.language.smali
  directive-method-registers_locals:
    - match: '[\s\t]*(\.(?:registers|locals))[\s\t]+(\d+)(?=[\s\t]*(#.*)?$)'
      comment: Registers / Locals
      captures:
        1: constant.language.smali
        2: variable.parameter.smali
  directives-method-relaxed:
    - match: '^[\s\t]*(:|\.(?:parameter|line|registers|locals|(?:restart )?local|prologue|(?:end )?(annotation|(sparse|packed)-switch|local)|catch(?:all)?))'
      captures:
        1: invalid.illegal.smali
  field:
    - match: '^[\s\t]*(\.field)[\s\t]+((?:(?:bridge|varargs|declared-synchronized|public|protected|private|abstract|static|final|synchronized|transient|volatile|native|strictfp|synthetic|enum)[\s\t]+)*)([\p{L}_\$\-][\w\$]*):[\[]*(?:(?:(Z|B|S|C|I|J|F|D)|(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))))(?:[\s\t]+=[\s\t]+(?:(null|true|false)|(?i:(\d+(?:\.\d+)?[fldst]?))|(?i:((?:-0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}|8[0]{7})|0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}))|(?:(?:-0x(?:0|[1-9a-f][\da-f]{0,14}|[1-7][\da-f]{15}|8[0]{15})|0x(?:0|[1-9a-f][\da-f]{0,14}|[1-7][\da-f]{15}))[fldst]?))\b)|(["''])(.*?)((?<!\\)["''])))?(?=[\s\t]*(#.*)?$)'
      comment: Field
      captures:
        1: constant.language.smali
        10: constant.numeric.smali
        11: entity.name.tag.smali
        12: string.quoted.double.smali
        13: entity.name.tag.smali
        2: variable.parameter.smali
        3: string.interpolated.smali
        4: constant.numeric.smali
        5: entity.name.tag.smali
        6: constant.numeric.smali
        7: entity.name.tag.smali
        8: constant.language.smali
        9: constant.numeric.smali
  field-end:
    - match: '^[\s\t]*(\.end field)(?=[\s\t]*(#.*)?$)'
      comment: Parsing this is hard to do right. This is Good Enough™.
      captures:
        1: constant.language.smali
  opcode-format-10t-20t-30t:
    - match: '^[\s\t]*(goto(?:/16|/32)?) (:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op +AA(AA(AAAA))"
      captures:
        1: support.function.smali
        2: keyword.control
  opcode-format-10t-20t-30t-relaxed:
    - match: '^[\s\t]*(goto(?:/16|/32)?)'
      captures:
        1: invalid.illegal.smali
  opcode-format-10x:
    - match: '^[\s\t]*(nop|return-void)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op"
      captures:
        1: support.function.smali
  opcode-format-10x-relaxed:
    - match: '^[\s\t]*(nop|return-void)'
      captures:
        1: invalid.illegal.smali
  opcode-format-11n:
    - match: '^[\s\t]*(const/4)[\s\t]+([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*(?i:(-0x[0-8]|0x[0-7]))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vA, #+B"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: constant.numeric.smali
  opcode-format-11n-relaxed:
    - match: '^[\s\t]*(const/4)'
      captures:
        1: invalid.illegal.smali
  opcode-format-11x:
    - match: '^[\s\t]*(move-(?:result(?:-wide|-object)?|exception)|return(?:-wide|-object)?|monitor-(?:enter|exit)|throw)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
  opcode-format-11x-relaxed:
    - match: '^[\s\t]*(move-(?:result(?:-wide|-object)?|exception)|return(?:-wide|-object)?|monitor-(?:enter|exit)|throw)'
      captures:
        1: invalid.illegal.smali
  opcode-format-12x:
    - match: '^[\s\t]*(move(?:-wide|-object)?|array-length|neg-(?:int|long|float|double)|not-(?:int|long)|int-to-(?:long|float|double|byte|char|short)|long-to-(?:int|float|double)|float-to-(?:int|long|double)|double-to-(?:int|long|float)|(?:add|sub|mul|div|rem|and|or|xor|shl|shr|ushr)-(?:int|long)/2addr|(?:add|sub|mul|div|rem)-(?:float|double)/2addr)[\s\t]+([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*([vp](?:0|[1-9]|1[0-5])\b)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vA, vB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
  opcode-format-12x-relaxed:
    - match: '^[\s\t]*(move(?:-wide|-object)?|array-length|neg-(?:int|long|float|double)|not-(?:int|long)|int-to-(?:long|float|double|byte|char|short)|long-to-(?:int|float|double)|float-to-(?:int|long|double)|double-to-(?:int|long|float)|(?:add|sub|mul|div|rem|and|or|xor|shl|shr|ushr)-(?:int|long)/2addr|(?:add|sub|mul|div|rem)-(?:float|double)/2addr)'
      captures:
        1: invalid.illegal.smali
  opcode-format-21c-field:
    - match: '^[\s\t]*((?:sget|sput)(?:-wide|-object|-boolean|-byte|-char|-short)?)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)->([\p{L}_\$][\w\$]*):[\[]*(?:(?:(Z|B|S|C|I|J|F|D)|(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, field@BBBB"
      captures:
        1: support.function.smali
        10: entity.name.tag.smali
        2: variable.parameter.smali
        3: entity.name.tag.smali
        4: constant.numeric.smali
        5: entity.name.tag.smali
        6: string.interpolated.smali
        7: constant.numeric.smali
        8: entity.name.tag.smali
        9: constant.numeric.smali
  opcode-format-21c-relaxed:
    - match: '^[\s\t]*(const-string|const-class|check-cast|new-instance|(?:sget|sput)(?:-wide|-object|-boolean|-byte|-char|-short)?)'
      captures:
        1: invalid.illegal.smali
  opcode-format-21c-string:
    - match: '^[\s\t]*(const-string(?:/jumbo)?)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(")(.*?)((?<!\\)")(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, string@BBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: entity.name.tag.smali
        4: string.quoted.double.smali
        5: entity.name.tag.smali
  opcode-format-21c-type:
    - match: '^[\s\t]*(const-class|check-cast|new-instance)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*[\[]*(?:(?:(Z|B|S|C|I|J|F|D)|(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, type@BBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: constant.numeric.smali
        4: entity.name.tag.smali
        5: constant.numeric.smali
        6: entity.name.tag.smali
  opcode-format-21h:
    - match: '^[\s\t]*(const(?:-wide)?/high16)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*((?i:-?0x(?:0|[1-9a-f][\da-f]{0,2}|[1-7][\da-f]{3}|8000)[0]{0,12}L?))\b(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, #+BBBB0000(00000000)"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: constant.numeric.smali
  opcode-format-21h-relaxed:
    - match: '^[\s\t]*(const(?:-wide)?/high16)'
      captures:
        1: invalid.illegal.smali
  opcode-format-21s:
    - match: '^[\s\t]*(const(?:-wide)?/16)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(?i:(-0x(?:0|[1-9a-f][\da-f]{0,2}|[1-7][\da-f]{3}|8000)|0x(?:0|[1-9a-f][\da-f]{0,2}|[1-7][\da-f]{3})))\b(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, #+BBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: constant.numeric.smali
  opcode-format-21s-relaxed:
    - match: '^[\s\t]*(const(?:-wide)?/16)'
      captures:
        1: invalid.illegal.smali
  opcode-format-21t:
    - match: '^[\s\t]*(if-(?:eq|ne|lt|ge|gt|le)z)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, +BBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: keyword.control.smali
  opcode-format-21t-relaxed:
    - match: '^[\s\t]*(if-(?:eq|ne|lt|ge|gt|le)z)'
      captures:
        1: invalid.illegal.smali
  opcode-format-22b:
    - match: '^[\s\t]*((?:add|rsub|mul|div|rem|and|or|xor|shl|shr|ushr)-int/lit8)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(?i:(-0x(?:[\da-f]|[1-7][\da-f]|80)|0x(?:[\da-f]|[1-7][\da-f])))\b(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, vBB, #+CC"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: constant.numeric.smali
  opcode-format-22b-relaxed:
    - match: '^[\s\t]*((?:add|rsub|mul|div|rem|and|or|xor|shl|shr|ushr)-int/lit8)'
      captures:
        1: invalid.illegal.smali
  opcode-format-22c-field:
    - match: '^[\s\t]*((?:iget|iput)(?:-wide|-object|-boolean|-byte|-char|-short)?)[\s\t]+([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)->([\p{L}_\$][\w\$]*):[\[]*(?:(Z|B|S|C|I|J|F|D|(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vA, vB, field@CCCC"
      captures:
        1: support.function.smali
        10: constant.numeric.smali
        11: entity.name.tag.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: entity.name.tag.smali
        5: constant.numeric.smali
        6: entity.name.tag.smali
        7: string.interpolated.smali
        8: constant.numeric.smali
        9: entity.name.tag.smali
  opcode-format-22c-relaxed:
    - match: '^[\s\t]*(instance-of|new-array|(?:iget|iput)(?:-wide|-object|-boolean|-byte|-char|-short)?)'
      captures:
        1: invalid.illegal.smali
  opcode-format-22c-type:
    - match: '^[\s\t]*(instance-of)[\s\t]+([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*[\[]*(?:(Z|B|S|C|I|J|F|D)|(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vA, vB, type@CCCC"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: constant.numeric.smali
        5: entity.name.tag.smali
        6: constant.numeric.smali
        7: entity.name.tag.smali
  opcode-format-22c-type_array:
    - match: '^[\s\t]*(new-array)[\s\t]+([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*[\[]+(?:(Z|B|S|C|I|J|F|D)|(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vA, vB, [type@CCCC"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: constant.numeric.smali
        5: entity.name.tag.smali
        6: constant.numeric.smali
        7: entity.name.tag.smali
  opcode-format-22s:
    - match: '^[\s\t]*((?:(?:add|mul|div|rem|and|or|xor)-int/lit16)|rsub-int)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(?i:(-0x(?:0|[1-9a-f][\da-f]{0,2}|[1-7][\da-f]{3}|8000)|0x(?:0|[1-9a-f][\da-f]{0,2}|[1-7][\da-f]{3})))\b(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vA, vB, #+CCCC"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: constant.numeric.smali
  opcode-format-22s-relaxed:
    - match: '^[\s\t]*((?:(?:add|mul|div|rem|and|or|xor)-int/lit16)|rsub-int)'
      captures:
        1: invalid.illegal.smali
  opcode-format-22t:
    - match: '^[\s\t]*(if-(?:eq|ne|lt|ge|gt|le))[\s\t]+([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*(:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
      comment: "*Format: op vA, vB, +CCCC"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: keyword.control
  opcode-format-22t-relaxed:
    - match: (if-(?:eq|ne|lt|ge|gt|le))
      captures:
        1: invalid.illegal.smali
  opcode-format-22x:
    - match: '^[\s\t]*(move(?:-wide|-object)?/from16)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*([vp](?:0|[1-9][\d]{0,3}|[1-5][\d]{4}|6[0-4][\d]{3}|65[0-4][\d]{2}|655[0-2][\d]|6553[0-5])\b)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, vBBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
  opcode-format-22x-relaxed:
    - match: '^[\s\t]*(move(?:-wide|-object)?/from16)'
      captures:
        1: invalid.illegal.smali
  opcode-format-23x:
    - match: '^[\s\t]*((?:cmpl|cmpg)-(?:float|double)|cmp-long|(?:aget|aput)(?:-wide|-object|-boolean|-byte|-char|-short)?|(?:add|sub|mul|div|rem|and|or|xor|shl|shr|ushr)-(?:int|long)|(?:add|sub|mul|div|rem)-(?:float|double))[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, vBB, vCC"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: variable.parameter.smali
  opcode-format-23x-relaxed:
    - match: '^[\s\t]*((?:cmpl|cmpg)-(float|double)|cmp-long|(?:aget|aput)(?:-wide|-object|-boolean|-byte|-char|-short)?|(?:add|sub|mul|div|rem|and|or|xor|shl|shr|ushr)-(?:int|long)|(?:add|sub|mul|div|rem)-(?:float|double))'
      captures:
        1: invalid.illegal.smali
  opcode-format-31i:
    - match: '^[\s\t]*(const(?:-wide/32)?)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(?i:(-0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}|8[0]{7})|0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}))\b)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, #+BBBBBBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: constant.numeric.smali
  opcode-format-31i-relaxed:
    - match: '^[\s\t]*(const(?:-wide/32)?)'
      captures:
        1: invalid.illegal.smali
  opcode-format-31t:
    - match: '^[\s\t]*(fill-array-data|(?:packed|sparse)-switch)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(:[A-Za-z_\d]+)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, +BBBBBBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: keyword.control
  opcode-format-31t-relaxed:
    - match: '^[\s\t]*(fill-array-data|(?:packed|sparse)-switch)'
      captures:
        1: invalid.illegal.smali
  opcode-format-32x:
    - match: '^[\s\t]*(move(?:-wide|-object)?/16)[\s\t]+([vp](?:0|[1-9][\d]{0,3}|[1-5][\d]{4}|6[0-4][\d]{3}|65[0-4][\d]{2}|655[0-2][\d]|6553[0-5])\b),[\s\t]*([vp](?:0|[1-9][\d]{0,3}|[1-5][\d]{4}|6[0-4][\d]{3}|65[0-4][\d]{2}|655[0-2][\d]|6553[0-5])\b)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAAAA, vBBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
  opcode-format-32x-relaxed:
    - match: '^[\s\t]*(move(?:-wide|-object)?/16)'
      captures:
        1: invalid.illegal.smali
  opcode-format-35c-meth:
    - match: '^[\s\t]*(invoke-(?:virtual|super|direct|static|interface)) {[\s\t]*([vp](?:0|[1-9]|1[0-5])\b)?(?:,[\s\t]*([vp](?:0|[1-9]|1[0-5])\b))?(?:,[\s\t]*([vp](?:0|[1-9]|1[0-5])\b))?(?:,[\s\t]*([vp](?:0|[1-9]|1[0-5])\b))?(?:,[\s\t]*([vp](?:0|[1-9]|1[0-5])\b))?[\s\t]*},[\s\t]*[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)->(<init>|<clinit>|(?:[\$\p{L}_][\p{L}\d_\$]*))\((?:[\[]*(Z|B|S|C|I|J|F|D)|(?:[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))?(?:[\[]*(Z|B|S|C|I|J|F|D)|(?:[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))?(?:[\[]*(Z|B|S|C|I|J|F|D)|(?:[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))?(?:[\[]*(Z|B|S|C|I|J|F|D)|(?:[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))?(?:[\[]*(Z|B|S|C|I|J|F|D)|(?:[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))?\)(?:(?:(V)|[\[]*(Z|B|S|C|I|J|F|D))|(?:[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op {vC, vD, vE, vF, vG}, meth@BBBB"
      captures:
        1: support.function.smali
        10: entity.name.function.smali
        11: constant.numeric.smali
        12: entity.name.tag.smali
        13: constant.numeric.smali
        14: entity.name.tag.smali
        15: constant.numeric.smali
        16: entity.name.tag.smali
        17: constant.numeric.smali
        18: entity.name.tag.smali
        19: constant.numeric.smali
        2: variable.parameter.smali
        20: entity.name.tag.smali
        21: constant.numeric.smali
        22: entity.name.tag.smali
        23: constant.numeric.smali
        24: entity.name.tag.smali
        25: constant.numeric.smali
        26: entity.name.tag.smali
        27: constant.numeric.smali
        28: entity.name.tag.smali
        29: constant.numeric.smali
        3: variable.parameter.smali
        30: entity.name.tag.smali
        31: constant.numeric.smali
        32: constant.numeric.smali
        33: entity.name.tag.smali
        34: constant.numeric.smali
        35: entity.name.tag.smali
        4: variable.parameter.smali
        5: variable.parameter.smali
        6: variable.parameter.smali
        7: entity.name.tag.smali
        8: constant.numeric.smali
        9: entity.name.tag.smali
  opcode-format-35c-relaxed:
    - match: '^[\s\t]*(filled-new-array|invoke-(?:virtual|super|direct|static|interface))'
      captures:
        1: invalid.illegal.smali
  opcode-format-35c-type:
    - match: '^[\s\t]*(filled-new-array) {([vp](?:0|[1-9]|1[0-5])\b),[\s\t]*([vp](?:0|[1-9]|1[0-5])\b)(?:,[\s\t]*([vp](?:0|[1-9]|1[0-5])\b))?(?:,[\s\t]*([vp](?:0|[1-9]|1[0-5])\b))?(?:,[\s\t]*([vp](?:0|[1-9]|1[0-5])\b))?},[\s\t]*[\[]+(?:(Z|B|S|C|I|J|F|D)|(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op {vC, vD, vE, vF, vG}, type@BBBB"
      captures:
        1: support.function.smali
        10: entity.name.tag.smali
        11: constant.numeric.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: variable.parameter.smali
        5: variable.parameter.smali
        6: variable.parameter.smali
        7: constant.numeric.smali
        8: entity.name.tag.smali
        9: constant.numeric.smali
  opcode-format-3rc-meth:
    - match: '^[\s\t]*(invoke-(?:virtual|super|direct|static|interface)/range) {[\s\t]*([vp](?:0|[1-9][\d]{0,3}|[1-5][\d]{4}|6[0-4][\d]{3}|65[0-4][\d]{2}|655[0-2][\d]|6553[0-5])\b) \.\. ([vp](?:0|[1-9][\d]{0,3}|[1-5][\d]{4}|6[0-4][\d]{3}|65[0-4][\d]{2}|655[0-2][\d]|6553[0-5])\b)[\s\t]*},[\s\t]*[\[]*(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)->(<init>|<clinit>|(?:[\$\p{L}_][\p{L}\d_\$]*))\(((?:[\[]*(?:Z|B|S|C|I|J|F|D|L(?:[\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*);))*)\)(?:(V)|[\[]*(Z|B|S|C|I|J|F|D)|[\[]*(?:(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;)))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op {vCCCC .. vNNNN}, meth@BBBB"
      captures:
        1: support.function.smali
        10: constant.numeric.smali
        11: entity.name.tag.smali
        12: constant.numeric.smali
        13: entity.name.tag.smali
        14: constant.numeric.smali
        15: entity.name.tag.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: entity.name.tag.smali
        5: constant.numeric.smali
        6: entity.name.tag.smali
        7: entity.name.function.smali
        8: constant.numeric.smali
        9: constant.numeric.smali
  opcode-format-3rc-relaxed:
    - match: '^[\s\t]*((?:filled-new-array|invoke-(?:virtual|super|direct|static|interface))/range)'
      captures:
        1: invalid.illegal.smali
  opcode-format-3rc-type:
    - match: '^[\s\t]*(filled-new-array/range) {([vp](?:0|[1-9][\d]{0,3}|[1-5][\d]{4}|6[0-4][\d]{3}|65[0-4][\d]{2}|655[0-2][\d]|6553[0-5])\b) \.\. ([vp](?:0|[1-9][\d]{0,3}|[1-5][\d]{4}|6[0-4][\d]{3}|65[0-4][\d]{2}|655[0-2][\d]|6553[0-5])\b)},[\s\t]*[\[]+(?:(Z|B|S|C|I|J|F|D)|(L)([\p{L}_\$][\p{L}\d_\$]*(?:/[\p{L}_\$][\p{L}\d_\$]*)*)(;))(?=[\s\t]*(#.*)?$)'
      comment: "Format: op {vCCCC .. vNNNN}, type@BBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: variable.parameter.smali
        4: constant.numeric.smali
        5: entity.name.tag.smali
        6: constant.numeric.smali
        7: entity.name.tag.smali
  opcode-format-51l:
    - match: '^[\s\t]*(const-wide)(?!/32)[\s\t]+([vp](?:0|[1-9][\d]?|1[\d]{2}|2[0-4][\d]|25[0-5])\b),[\s\t]*(?i:((?:-0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}|8[0]{7})|0x(?:0|[1-9a-f][\da-f]{0,6}|[1-7][\da-f]{7}))|(?:(?:-0x(?:0|[1-9a-f][\da-f]{0,14}|[1-7][\da-f]{15}|8[0]{15})|0x(?:0|[1-9a-f][\da-f]{0,14}|[1-7][\da-f]{15}))L))\b)(?=[\s\t]*(#.*)?$)'
      comment: "Format: op vAA, #+BBBBBBBBBBBBBBBB"
      captures:
        1: support.function.smali
        2: variable.parameter.smali
        3: constant.numeric.smali
  opcode-format-51l-relaxed:
    - match: '^[\s\t]*(const-wide)(?!\/32)'
      captures:
        1: invalid.illegal.smali
