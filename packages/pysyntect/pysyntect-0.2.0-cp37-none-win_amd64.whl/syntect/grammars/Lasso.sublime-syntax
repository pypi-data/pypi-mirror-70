%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Lasso
file_extensions:
  - lasso
  - las
  - inc
first_line_match: <\?(?i:=|lasso(script)?)
scope: file.lasso
contexts:
  main:
    - match: '(?m)\A\s*(?=<|\[)'
      push:
        - meta_scope: text.html.basic
        - match: \a
          pop: true
        - include: lasso-html
    - match: \A
      push:
        - meta_scope: source.lasso
        - match: \a
          pop: true
        - include: lasso
  embedded-code:
    - include: lasso_script
    - include: lasso_brackets
  entities:
    - match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
      scope: constant.character.entity.html
      captures:
        1: punctuation.definition.entity.html
        3: punctuation.definition.entity.html
    - match: "&"
      scope: invalid.illegal.bad-ampersand.html
  lasso:
    - match: '(?i)\b(define)\s+(?=[_a-z][_0-9a-z]*\s*=>\s*(type|trait|thread)\s*\{)'
      captures:
        1: keyword.definition.lasso
      push:
        - meta_scope: meta.definition.type_trait.start.lasso
        - match: '(=>)\s*(type|trait|thread)\s*\{'
          captures:
            1: keyword.operator.association.lasso
            2: keyword.descriptors.lasso
          pop: true
        - match: "[_a-z][_0-9a-z]*"
          scope: meta.name.type_trait.lasso
    - match: '(?i)\b(define)\s+(?=[_a-z][_0-9a-z]*\s*=>|\()'
      captures:
        1: keyword.definition.lasso
      push:
        - meta_scope: meta.definition.method.start.lasso
        - match: \(|(=>)
          captures:
            1: keyword.operator.association.lasso
          pop: true
        - match: "[_a-z][_0-9a-z]*"
          scope: meta.name.method.lasso
    - match: (?i)\b(abort|case|define|else|if|inline|iterate|loop|loop_abort|loop_continue|loop_count|loop_key|loop_value|match|protect|records|resultset|return|rows|while)\b
      scope: keyword.control.lasso
    - match: (?i)\b(library|include)(_once)?\b
      scope: keyword.control.import.lasso
    - match: (?i)\b(public|private|protected|data|type|thread|trait|import|parent|provide|require)\b
      scope: keyword.descriptors.lasso
    - match: |-
        (?i)\b(array|action_params?|boolean|bytes|capture|curl|currency|database_registry|date|dateandtime|decimal|delve|dir|duration|eacher|file|generateForEachKeyed|generateForEachUnKeyed|generateSeries|inline_type|integer|list|list_node|literal|local|locale|map|map_node
        |net_tcp|net_tcpssl|net_udp|net_udppacket|object|pair|pairup|paramdesc|pdf_barcode|pdf_chunk|pdf_color|pdf_doc|pdf_font|pdf_hyphenator|pdf_image|pdf_list|pdf_paragraph|pdf_phrase|pdf_read|pdf_table|pdf_text|pdf_typebase
        |percent|queriable_select|queriable_groupBy|queriable_grouping|queriable_groupJoin|queriable_join|queriable_orderBy|queriable_orderByDescending|queriable_selectMany|queriable_skip|queriable_take|queriable_thenBy|queriable_thenByDescending|queriable_where
        |queue|repeat|serialization_element|serialization_object_identity_compare|serialization_reader|serialization_writer|serialization_writer_ref|serialization_writer_standin|set|scientific
        |sqlite_column|sqlite_columnScanner|sqlite_currentrow|sqlite_db|sqlite_expressionGenerator|sqlite_query_stat|sqlite_results|sqlite_table|stack|staticarray|string|tie|timeonly|tree_base|tree_node|tree_nullNode|user_registry|var(iable)?|web_request|web_response|xml_element|xml_namednodemap_attr|xml_node|xml_nodelist|zip|zip_file)\b
      scope: storage.type.lasso
    - match: (?i)\b(jchar|jchararray|jbyte|jbytearray|jfloat|jint|jshort)\b
      comment: This is for the ljapi types
      scope: storage.type.lasso
    - match: \b(?i:void|null|true|false)\b
      scope: constant.language.lasso
    - match: '"'
      push:
        - meta_scope: string.quoted.double.lasso
        - match: '"'
          pop: true
        - match: \\.
          scope: constant.character.escape.lasso
    - match: "'"
      push:
        - meta_scope: string.quoted.single.lasso
        - match: "'"
          pop: true
        - match: \\.
          scope: constant.character.escape.lasso
    - match: "`"
      push:
        - meta_scope: string.quoted.backtick.lasso
        - match: "`"
          pop: true
    - match: /\*\*(\!)?\s*$
      comment: |
        This now only highlights a docblock if the first line contains only /**
                                        - this is to stop highlighting everything as invalid when people do comment banners with /******** ...
                                        - Now matches /**! too - used for docblock templates
      push:
        - meta_scope: comment.block.documentation.lasso
        - match: \*/
          pop: true
    - match: /\*
      push:
        - meta_scope: comment.block.lasso
        - match: \*/
          pop: true
    - match: (//).*?($\n?|(?=\?>))
      scope: comment.line.double-slash.lasso
    - match: '\$[a-zA-Z_][a-zA-Z0-9_.]*'
      scope: variable.other.thread.lasso
    - match: "#[a-zA-Z_][a-zA-Z0-9_.]*"
      scope: variable.other.local.lasso
    - match: (\s#1\s|\b(?i:self)\b)
      scope: variable.language.lasso
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.lasso
    - match: (\-|\+|\*|/|%)
      scope: keyword.operator.arithmetic.lasso
    - match: (?i)(!|&&|\|\||\?|\bnot\b|\band\b|\bor\b)
      scope: keyword.operator.logical.lasso
    - match: (=|:=|\+=|\-=|/=|%=)
      scope: keyword.operator.assignment.lasso
    - match: (===|==|!==|!=|<=|>=|<|>|>>|!>>)
      scope: keyword.operator.comparison.lasso
    - match: (->|&)
      scope: keyword.operator.target.lasso
    - match: (=>)
      scope: keyword.operator.association.lasso
  lasso-html:
    - match: '(<)([a-zA-Z0-9:]++)(?=[^>]*></\2>)'
      captures:
        1: punctuation.definition.tag.html
        2: entity.name.tag.html
      push:
        - meta_scope: meta.tag.any.html
        - match: (>(<)/)(\2)(>)
          captures:
            1: punctuation.definition.tag.html
            2: meta.scope.between-tag-pair.html
            3: entity.name.tag.html
            4: punctuation.definition.tag.html
          pop: true
        - include: tag-stuff
    - match: (<\?)(xml)
      captures:
        1: punctuation.definition.tag.html
        2: entity.name.tag.xml.html
      push:
        - meta_scope: meta.tag.preprocessor.xml.html
        - match: (\?>)
          captures:
            1: punctuation.definition.tag.html
            2: entity.name.tag.xml.html
          pop: true
        - include: tag-generic-attribute
        - include: string-double-quoted
        - include: string-single-quoted
    - match: <!--
      captures:
        0: punctuation.definition.comment.html
      push:
        - meta_scope: comment.block.html
        - match: '--\s*>'
          captures:
            0: punctuation.definition.comment.html
          pop: true
        - match: "--"
          scope: invalid.illegal.bad-comments-or-CDATA.html
    - match: <!
      captures:
        0: punctuation.definition.tag.html
      push:
        - meta_scope: meta.tag.sgml.html
        - match: ">"
          captures:
            0: punctuation.definition.tag.html
          pop: true
        - match: (DOCTYPE)
          captures:
            1: entity.name.tag.doctype.html
          push:
            - meta_scope: meta.tag.sgml.doctype.html
            - match: (?=>)
              captures:
                1: entity.name.tag.doctype.html
              pop: true
            - match: '"[^">]*"'
              scope: string.quoted.double.doctype.identifiers-and-DTDs.html
        - match: '\[CDATA\['
          push:
            - meta_scope: constant.other.inline-data.html
            - match: "]](?=>)"
              pop: true
        - match: (\s*)(?!--|>)\S(\s*)
          scope: invalid.illegal.bad-comments-or-CDATA.html
    - include: embedded-code
    - match: '(?:^\s+)?(<)((?i:style))\b(?![^>]*/>)'
      captures:
        1: punctuation.definition.tag.html
        2: entity.name.tag.style.html
        3: punctuation.definition.tag.html
      push:
        - meta_scope: source.css.embedded.html
        - match: (</)((?i:style))(>)(?:\s*\n)?
          captures:
            1: punctuation.definition.tag.html
            2: entity.name.tag.style.html
            3: punctuation.definition.tag.html
          pop: true
        - include: tag-stuff
        - match: (>)
          captures:
            1: punctuation.definition.tag.html
          push:
            - match: (?=</(?i:style))
              pop: true
            - include: embedded-code
            - include: scope:source.css
    - match: '(?:^\s+)?(<)((?i:script))\b(?![^>]*/>)'
      captures:
        1: punctuation.definition.tag.html
        2: entity.name.tag.script.html
      push:
        - meta_scope: source.js.embedded.html
        - match: (?<=</(script|SCRIPT))(>)(?:\s*\n)?
          captures:
            2: punctuation.definition.tag.html
          pop: true
        - include: tag-stuff
        - match: (?<!</(?:script|SCRIPT))(>)
          captures:
            1: punctuation.definition.tag.html
            2: entity.name.tag.script.html
          push:
            - match: (</)((?i:script))
              captures:
                1: punctuation.definition.tag.html
                2: entity.name.tag.script.html
              pop: true
            - match: (//).*?((?=</script)|$\n?)
              scope: comment.line.double-slash.js
              captures:
                1: punctuation.definition.comment.js
            - match: /\*
              captures:
                0: punctuation.definition.comment.js
              push:
                - meta_scope: comment.block.js
                - match: \*/|(?=</script)
                  captures:
                    0: punctuation.definition.comment.js
                  pop: true
            - include: scope:source.js
    - match: (</?)((?i:body|head|html)\b)
      captures:
        1: punctuation.definition.tag.html
        2: entity.name.tag.structure.any.html
      push:
        - meta_scope: meta.tag.structure.any.html
        - match: (>)
          captures:
            1: punctuation.definition.tag.html
            2: entity.name.tag.structure.any.html
          pop: true
        - include: tag-stuff
    - match: (</?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\b)
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.any.html
      push:
        - meta_scope: meta.tag.block.any.html
        - match: (>)
          captures:
            1: punctuation.definition.tag.end.html
          pop: true
        - include: tag-stuff
    - match: (</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\b)
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.any.html
      push:
        - meta_scope: meta.tag.inline.any.html
        - match: "((?: ?/)?>)"
          captures:
            1: punctuation.definition.tag.end.html
          pop: true
        - include: tag-stuff
    - match: "(</?)([a-zA-Z0-9:]+)"
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.other.html
      push:
        - meta_scope: meta.tag.other.html
        - match: (>)
          captures:
            1: punctuation.definition.tag.end.html
          pop: true
        - include: tag-stuff
    - include: entities
    - match: <>
      scope: invalid.illegal.incomplete.html
    - match: <
      scope: invalid.illegal.bad-angle-bracket.html
  lasso_brackets:
    - match: '\['
      push:
        - meta_scope: source.lasso.embedded.html
        - match: '\]'
          pop: true
        - include: lasso
  lasso_script:
    - match: (<\?)(?i:=|lasso(script)?)
      push:
        - meta_scope: source.lasso.embedded.html
        - match: (\?>)
          pop: true
        - include: lasso
  smarty:
    - match: '(\{(literal)\})'
      captures:
        1: source.smarty.embedded.html
        2: support.function.built-in.smarty
      push:
        - match: '(\{/(literal)\})'
          captures:
            1: source.smarty.embedded.html
            2: support.function.built-in.smarty
          pop: true
    - match: "{{|{"
      push:
        - meta_scope: source.smarty.embedded.html
        - match: "}}|}"
          pop: true
        - include: scope:source.smarty
  string-double-quoted:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.html
      push:
        - meta_scope: string.quoted.double.html
        - match: '"'
          captures:
            0: punctuation.definition.string.end.html
          pop: true
        - include: embedded-code
        - include: entities
  string-single-quoted:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.html
      push:
        - meta_scope: string.quoted.single.html
        - match: "'"
          captures:
            0: punctuation.definition.string.end.html
          pop: true
        - include: embedded-code
        - include: entities
  tag-generic-attribute:
    - match: '\b([a-zA-Z\-:]+)'
      scope: entity.other.attribute-name.html
  tag-id-attribute:
    - match: \b(id)\b\s*(=)
      captures:
        1: entity.other.attribute-name.id.html
        2: punctuation.separator.key-value.html
      push:
        - meta_scope: meta.attribute-with-value.id.html
        - match: (?<='|")
          captures:
            1: entity.other.attribute-name.id.html
            2: punctuation.separator.key-value.html
          pop: true
        - match: '"'
          captures:
            0: punctuation.definition.string.begin.html
          push:
            - meta_scope: string.quoted.double.html
            - meta_content_scope: meta.toc-list.id.html
            - match: '"'
              captures:
                0: punctuation.definition.string.end.html
              pop: true
            - include: embedded-code
            - include: entities
        - match: "'"
          captures:
            0: punctuation.definition.string.begin.html
          push:
            - meta_scope: string.quoted.single.html
            - meta_content_scope: meta.toc-list.id.html
            - match: "'"
              captures:
                0: punctuation.definition.string.end.html
              pop: true
            - include: embedded-code
            - include: entities
  tag-stuff:
    - include: tag-id-attribute
    - include: tag-generic-attribute
    - include: string-double-quoted
    - include: string-single-quoted
    - include: embedded-code
