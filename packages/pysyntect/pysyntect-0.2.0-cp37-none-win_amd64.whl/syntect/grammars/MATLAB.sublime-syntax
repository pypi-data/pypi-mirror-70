%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: MATLAB
file_extensions:
  - m
scope: source.matlab
contexts:
  main:
    - include: all_before_command_dual
    - include: command_dual
    - include: all_after_command_dual
  all_after_command_dual:
    - include: string
    - include: line_continuation
    - include: comments
    - include: conjugate_transpose
    - include: transpose
    - include: constants
    - include: variables
    - include: numbers
    - include: operators
  all_before_command_dual:
    - include: classdef
    - include: function
    - include: blocks
    - include: control_statements
    - include: global_persistent
    - include: parens
    - include: square_brackets
    - include: indexing_curly_brackets
    - include: curly_brackets
  blocks:
    - match: '\s*(?:^|[\s,;])(for)\b'
      captures:
        1: keyword.control.for.matlab
      push:
        - meta_scope: meta.for.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.for.matlab
          pop: true
        - include: main
    - match: '\s*(?:^|[\s,;])(if)\b'
      captures:
        1: keyword.control.if.matlab
      push:
        - meta_scope: meta.if.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.if.matlab
          pop: true
        - match: '(\s*)(?:^|[\s,;])(elseif)\b(.*)$\n?'
          scope: meta.elseif.matlab
          captures:
            2: keyword.control.elseif.matlab
        - match: '(\s*)(?:^|[\s,;])(else)\b(.*)?$\n?'
          scope: meta.else.matlab
          captures:
            2: keyword.control.else.matlab
        - include: main
    - match: '\s*(?:^|[\s,;])(parfor)\b'
      captures:
        1: keyword.control.for.matlab
      push:
        - meta_scope: meta.parfor.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.for.matlab
          pop: true
        - match: \G(?!$)
          push:
            - meta_scope: meta.parfor-quantity.matlab
            - match: $\n?
              pop: true
            - include: main
        - include: main
    - match: '\s*(?:^|[\s,;])(spmd)\b'
      captures:
        1: keyword.control.spmd.matlab
      push:
        - meta_scope: meta.spmd.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.spmd.matlab
          pop: true
        - match: \G(?!$)
          push:
            - meta_scope: meta.spmd-statement.matlab
            - match: $\n?
              pop: true
            - include: main
        - include: main
    - match: '\s*(?:^|[\s,;])(switch)\b'
      captures:
        1: keyword.control.switch.matlab
      push:
        - meta_scope: meta.switch.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.switch.matlab
          pop: true
        - match: '(\s*)(?:^|[\s,;])(case)\b(.*)$\n?'
          scope: meta.case.matlab
          captures:
            2: keyword.control.case.matlab
        - match: '(\s*)(?:^|[\s,;])(otherwise)\b(.*)?$\n?'
          scope: meta.otherwise.matlab
          captures:
            2: keyword.control.otherwise.matlab
        - include: main
    - match: '\s*(?:^|[\s,;])(try)\b'
      captures:
        1: keyword.control.try.matlab
      push:
        - meta_scope: meta.try.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.try.matlab
          pop: true
        - match: '(\s*)(?:^|[\s,;])(catch)\b(.*)?$\n?'
          scope: meta.catch.matlab
          captures:
            2: keyword.control.catch.matlab
        - include: main
    - match: '\s*(?:^|[\s,;])(while)\b'
      captures:
        1: keyword.control.while.matlab
      push:
        - meta_scope: meta.while.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.while.matlab
          pop: true
        - include: main
  braced_validator_list:
    - match: '\s*({)\s*'
      comment: Validator functions. Treated as a recursive group to permit nested brackets, quotes, etc.
      captures:
        1: storage.type.matlab
      push:
        - match: "(})"
          captures:
            1: storage.type.matlab
          pop: true
        - include: braced_validator_list
        - include: validator_strings
        - include: line_continuation
        - match: '([^{}}''"\.]+)'
          captures:
            1: storage.type.matlab
        - match: \.
          scope: storage.type.matlab
  classdef:
    - match: |-
        (?x)
        		(^\s*)								# Leading whitespace
        		(classdef)
        		\b\s*
        		(.*)
      captures:
        2: storage.type.class.matlab
      push:
        - meta_scope: meta.class.matlab
        - match: '\s*(?:^|[\s,;])(end)\b'
          captures:
            1: keyword.control.end.class.matlab
          pop: true
        - match: |-
            (?x)
            	(^\s*)								# Leading whitespace
            	(properties)\b([^%]*)
            	\s*
            	(									# Optional attributes
            		\( [^)]* \)
            	)?
            	\s*($|(?=%))
          captures:
            2: keyword.control.properties.matlab
          push:
            - meta_scope: meta.properties.matlab
            - match: '\s*(?:^|[\s,;])(end)\b'
              captures:
                1: keyword.control.end.properties.matlab
              pop: true
            - include: validators
            - include: main
        - match: |-
            (?x)
            	(^\s*)								# Leading whitespace
            	(methods)\b([^%]*)
            	\s*
            	(									# Optional attributes
            		\( [^)]* \)
            	)?
            	\s*($|(?=%))
          captures:
            2: keyword.control.methods.matlab
          push:
            - meta_scope: meta.methods.matlab
            - match: '\s*(?:^|[\s,;])(end)\b'
              captures:
                1: keyword.control.end.methods.matlab
              pop: true
            - include: main
        - match: |-
            (?x)
            	(^\s*)								# Leading whitespace
            	(events)\b([^%]*)
            	\s*
            	(									# Optional attributes
            		\( [^)]* \)
            	)?
            	\s*($|(?=%))
          captures:
            2: keyword.control.events.matlab
          push:
            - meta_scope: meta.events.matlab
            - match: '\s*(?:^|[\s,;])(end)\b'
              captures:
                1: keyword.control.end.events.matlab
              pop: true
            - include: main
        - match: |-
            (?x)
            	(^\s*)								# Leading whitespace
            	(enumeration)\b([^%]*)
            	\s*($|(?=%))
          captures:
            2: keyword.control.enumeration.matlab
          push:
            - meta_scope: meta.enumeration.matlab
            - match: '\s*(?:^|[\s,;])(end)\b'
              captures:
                1: keyword.control.end.enumeration.matlab
              pop: true
            - include: main
        - include: main
  command_dual:
    - match: '^\s*((?# A> )([b-df-hk-moq-zA-HJ-MO-Z]\w*|a|an|a([A-Za-mo-z0-9_]\w*|n[A-Za-rt-z0-9_]\w*|ns\w+)|e|ep|e([A-Za-oq-z0-9_]\w*|p[A-Za-rt-z0-9_]\w*|ps\w+)|in|i([A-Za-mo-z0-9_]\w*|n[A-Za-eg-z0-9_]\w*|nf\w+)|I|In|I([A-Za-mo-z0-9_]\w*|n[A-Za-eg-z0-9_]\w*|nf\w+)|j\w+|N|Na|N([A-Zb-z0-9_]\w*|a[A-MO-Za-z0-9_]\w*|aN\w+)|n|na|nar|narg|nargi|nargo|nargou|n([A-Zb-z0-9_]\w*|a([A-Za-mo-qs-z0-9_]\w*|n\w+|r([A-Za-fh-z0-9_]\w*|g([A-Za-hj-nq-z0-9_]\w*|i([A-Za-mo-z0-9_]\w*|n\w+)|o([A-Za-tv-z0-9_]\w*|u([A-Za-su-z]\w*|t\w+))))))|p|p[A-Za-hj-z0-9_]\w*|pi\w+)(?# <A )\s+(((?# B> )([^\s;,%()=.{&|~<>:+\-*/\\@^''"]|(?='')|(?="))(?# <B )|(?# C> )(\.\^|\.\*|\./|\.\\|\.''|\.\(|&&|==|\|\||&(?=[^&])|\|(?=[^\|])|~=|<=|>=|~(?!=)|<(?!=)|>(?!=)|:|\+|-|\*|/|\\|@|\^)(?# <C )(?# D> )([^\s]|\s*(?=%)|\s+$|\s+(,|;|\)|}|\]|&|\||<|>|=|:|\*|/|\\|\^|@|(\.[^\d.]|\.\.[^.])))(?# <D )|(?# E> )(\.[^^*/\\''(\sA-Za-z])(?# <E ))(?# F> )([^%]|''[^'']*''|"[^"]*")*(?# <F )|(?# X> )(\.(?=\s)|\.[A-Za-z]|(?={))(?# <X )(?# Y> )([^(=\''"%]|==|''[^'']*''|"[^"]*"|\(|\([^)%]*\)|\[|\[[^\]%]*\]|{|{[^}%]*})*(\.\.\.[^%]*)?((?=%)|$)(?# <Y )))(%.*)?$'
      comment: "1        2                                  3                                                    4                                                  5                                                    6                                                         7                                                                             8                 9                            10                   11                      12                         13                   14                                                               1516       17                                                             18                                                                                                                               19                      20                                     21                                    22                                      23                                         24                                         25                                                                         26            27                 28"
      captures:
        1: string.interpolated.matlab
        2: variable.other.command.matlab
        28: comment.line.percentage.matlab
  comment_block:
    - match: '(^[\s]*)%\{[^\n\S]*+\n'
      captures:
        1: punctuation.definition.comment.matlab
      push:
        - meta_scope: comment.block.percentage.matlab
        - match: '^[\s]*%\}[^\n\S]*+(?:\n|$)'
          pop: true
        - include: comment_block
        - match: '^[^\n]*\n'
  comments:
    - match: '(^[ \t]+)?(?=%%\s)'
      captures:
        1: punctuation.whitespace.comment.leading.matlab
      push:
        - match: (?!\G)
          pop: true
        - match: "%%"
          captures:
            0: punctuation.definition.comment.matlab
          push:
            - meta_scope: comment.line.double-percentage.matlab
            - match: \n
              pop: true
            - match: '\G[^\S\n]*(?![\n\s])'
              push:
                - meta_content_scope: meta.cell.matlab
                - match: (?=\n)
                  pop: true
    - include: comment_block
    - match: '(^[ \t]+)?(?=%)'
      captures:
        1: punctuation.whitespace.comment.leading.matlab
      push:
        - match: (?!\G)
          pop: true
        - match: "%"
          captures:
            0: punctuation.definition.comment.matlab
          push:
            - meta_scope: comment.line.percentage.matlab
            - match: \n
              pop: true
  conjugate_transpose:
    - match: '((?<=[^\s])|(?<=\])|(?<=\))|(?<=\}))'''
      scope: keyword.operator.transpose.matlab
  constants:
    - match: (?<!\.)\b(eps|false|Inf|inf|intmax|intmin|namelengthmax|NaN|nan|on|off|realmax|realmin|true|pi)\b
      comment: MATLAB Constants
      scope: constant.language.matlab
  control_statements:
    - match: '\s*(?:^|[\s,;])(break|continue|return)\b'
      scope: meta.control.matlab
      captures:
        1: keyword.control.matlab
  curly_brackets:
    - match: '\{'
      comment: "We don't include $self here to avoid matching command syntax inside (), [], {}"
      push:
        - match: '\}'
          pop: true
        - include: end_in_parens
        - include: all_before_command_dual
        - include: all_after_command_dual
        - include: end_in_parens
  end_in_parens:
    - match: \bend\b
      comment: end as operator symbol
      scope: keyword.operator.symbols.matlab
  function:
    - match: |-
        (?x)
        	(^\s*)												# Leading whitespace
        	(function)
        	\s+
        	(?:													# Optional
        		(?:
        			(\[) ([^\]]*) (\])
        		  | ([a-zA-Z][a-zA-Z0-9_]*)
        		)
        		\s* = \s*
        	)?
        	([a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)*)	# Function name
        	\s*													# Trailing space
      captures:
        2: storage.type.function.matlab
        3: punctuation.definition.arguments.begin.matlab
        5: punctuation.definition.arguments.end.matlab
        6: variable.parameter.output.function.matlab
        7: entity.name.function.matlab
      push:
        - meta_scope: meta.function.matlab
        - match: '\s*(?:^|[\s,;])(end)\b(\s*\n)?'
          captures:
            1: keyword.control.end.function.matlab
          pop: true
        - match: \G\(
          push:
            - meta_scope: meta.arguments.function.matlab
            - match: \)
              pop: true
            - include: line_continuation
            - match: \w+
              scope: variable.parameter.input.matlab
        - match: |-
            (?x)
            	(^\s*)								# Leading whitespace
            	(arguments)\b([^%]*)
            	\s*
            	(									# Optional attributes
            		\( [^)]* \)
            	)?
            	\s*($|(?=%))
          captures:
            2: keyword.control.arguments.matlab
          push:
            - meta_scope: meta.arguments.matlab
            - match: '\s*(?:^|[\s,;])(end)\b'
              captures:
                1: keyword.control.end.arguments.matlab
              pop: true
            - include: validators
            - include: main
        - include: main
  global_persistent:
    - match: ^\s*(global|persistent)\b
      scope: meta.globalpersistent.matlab
      captures:
        1: keyword.control.globalpersistent.matlab
  indexing_curly_brackets:
    - match: '([a-zA-Z][a-zA-Z0-9_\.]*\s*)\{'
      comment: "We don't include $self here to avoid matching command syntax inside (), [], {}"
      push:
        - match: '(\}|(?<!\.\.\.).\n)'
          pop: true
        - include: end_in_parens
        - include: all_before_command_dual
        - include: all_after_command_dual
        - include: end_in_parens
  line_continuation:
    - match: (\.\.\.)(.*)$
      comment: Line continuations
      scope: meta.linecontinuation.matlab
      captures:
        1: keyword.operator.symbols.matlab
        2: comment.line.continuation.matlab
  numbers:
    - match: '(?<=[\s\-\+\*\/\\=:\[\(\{,]|^)\d*\.?\d+([eE][+-]?\d)?([0-9&&[^\.]])*(i|j)?\b'
      comment: "Valid numbers: 1, .1, 1.1, .1e1, 1.1e1, 1e1, 1i, 1j, 1e2j"
      scope: constant.numeric.matlab
  operators:
    - match: (?<=\s)(==|~=|>|>=|<|<=|&|&&|:|\||\|\||\+|-|\*|\.\*|/|\./|\\|\.\\|\^|\.\^)(?=\s)
      comment: Operator symbols
      scope: keyword.operator.symbols.matlab
  parens:
    - match: \(
      comment: "We don't include $self here to avoid matching command syntax inside (), [], {}"
      push:
        - match: (\)|(?<!\.\.\.).\n)
          pop: true
        - include: end_in_parens
        - include: all_before_command_dual
        - include: all_after_command_dual
  square_brackets:
    - match: '\['
      comment: "We don't include $self here to avoid matching command syntax inside (), [], {}"
      push:
        - match: '\]'
          pop: true
        - include: all_before_command_dual
        - include: all_after_command_dual
  string:
    - match: ^\s*((!).*$\n?)
      comment: Shell command
      captures:
        1: string.interpolated.matlab
        2: punctuation.definition.string.begin.matlab
    - match: '((?<=(\[|\(|\{|=|\s|;|:|,|~|<|>|&|\||-|\+|\*|/|\\|\.|\^))|^)'''
      comment: Character vector literal (single-quoted)
      captures:
        0: punctuation.definition.string.begin.matlab
      push:
        - meta_scope: string.quoted.single.matlab
        - match: '''(?=(\[|\(|\{|\]|\)|\}|=|~|<|>|&|\||-|\+|\*|/|\\|\.|\^|\s|;|:|,))'
          captures:
            0: punctuation.definition.string.end.matlab
          pop: true
        - match: "''"
          scope: constant.character.escape.matlab
        - match: "'(?=.)"
          scope: invalid.illegal.unescaped-quote.matlab
        - match: '((\%([\+\-0]?\d{0,3}(\.\d{1,3})?)(c|d|e|E|f|g|G|s|((b|t)?(o|u|x|X))))|\%\%|\\(b|f|n|r|t|\\))'
          comment: Operator symbols
          scope: constant.character.escape.matlab
    - match: '((?<=(\[|\(|\{|=|\s|;|:|,|~|<|>|&|\||-|\+|\*|/|\\|\.|\^))|^)"'
      comment: String literal (double-quoted)
      captures:
        0: punctuation.definition.string.begin.matlab
      push:
        - meta_scope: string.quoted.double.matlab
        - match: '"(?=(\[|\(|\{|\]|\)|\}|=|~|<|>|&|\||-|\+|\*|/|\\|\.|\^|\||\s|;|:|,))'
          captures:
            0: punctuation.definition.string.end.matlab
          pop: true
        - match: '""'
          scope: constant.character.escape.matlab
        - match: '"(?=.)'
          scope: invalid.illegal.unescaped-quote.matlab
  transpose:
    - match: \.'
      scope: keyword.operator.transpose.matlab
  validator_strings: []
  validators:
    - match: '\s*[;]?\s*([a-zA-Z][a-zA-Z0-9_\.\?]*)'
      comment: Property and argument validation. Match an identifier allowing . and ?.
      push:
        - match: '([;\n%=].*)'
          pop: true
        - include: line_continuation
        - match: '\s*(\([^\)]*\))'
          comment: Size declaration
          scope: storage.type.matlab
        - match: '([a-zA-Z][a-zA-Z0-9_\.]*)'
          comment: Type declaration
          scope: storage.type.matlab
        - include: braced_validator_list
  variables:
    - match: (?<!\.)\b(nargin|nargout|varargin|varargout)\b
      comment: MATLAB variables
      scope: variable.other.function.matlab
