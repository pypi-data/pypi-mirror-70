%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Swift
comment: See swift.tmbundle/grammar-test.swift for test cases.
file_extensions:
  - swift
first_line_match: ^#!/.*\bswift
scope: source.swift
contexts:
  main:
    - include: root
  attributes:
    - match: ((@)available)(\()
      captures:
        1: storage.modifier.attribute.swift
        2: punctuation.definition.attribute.swift
        3: punctuation.definition.arguments.begin.swift
      push:
        - meta_scope: meta.attribute.available.swift
        - match: \)
          captures:
            0: punctuation.definition.arguments.end.swift
          pop: true
        - match: '\b(swift|(?:iOS|macOS|OSX|watchOS|tvOS|UIKitForMac)(?:ApplicationExtension)?)\b(?:\s+([0-9]+(?:\.[0-9]+)*\b))?'
          captures:
            1: keyword.other.platform.os.swift
            2: constant.numeric.swift
        - match: \b(introduced|deprecated|obsoleted)\s*(:)\s*
          captures:
            1: keyword.other.swift
            2: punctuation.separator.key-value.swift
          push:
            - match: (?!\G)
              pop: true
            - match: '\b[0-9]+(?:\.[0-9]+)*\b'
              scope: constant.numeric.swift
        - match: \b(message|renamed)\s*(:)\s*(?=")
          captures:
            1: keyword.other.swift
            2: punctuation.separator.key-value.swift
          push:
            - match: (?!\G)
              pop: true
            - include: literals
        - match: '(?:(\*)|\b(deprecated|unavailable)\b)\s*(.*?)(?=[,)])'
          captures:
            1: keyword.other.platform.all.swift
            2: keyword.other.swift
            3: invalid.illegal.character-not-allowed-here.swift
    - match: ((@)objc)(\()
      captures:
        1: storage.modifier.attribute.swift
        2: punctuation.definition.attribute.swift
        3: punctuation.definition.arguments.begin.swift
      push:
        - meta_scope: meta.attribute.objc.swift
        - match: \)
          captures:
            0: punctuation.definition.arguments.end.swift
          pop: true
        - match: \w*(?::(?:\w*:)*(\w*))?
          scope: entity.name.function.swift
          captures:
            1: invalid.illegal.missing-colon-after-selector-piece.swift
    - match: '(@)(?<q>`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k<q>)'
      comment: any other attribute
      captures:
        0: storage.modifier.attribute.swift
        1: punctuation.definition.attribute.swift
        2: punctuation.definition.identifier.swift
        3: punctuation.definition.identifier.swift
      push:
        - meta_scope: meta.attribute.swift
        - match: (?!\G\()
          pop: true
        - match: \(
          captures:
            0: punctuation.definition.arguments.begin.swift
          push:
            - meta_scope: meta.arguments.attribute.swift
            - match: \)
              captures:
                0: punctuation.definition.arguments.end.swift
              pop: true
            - include: expressions
  builtin-functions:
    - match: '(?<=\.)(?:s(?:ort(?:ed)?|plit)|contains|index|partition|f(?:i(?:lter|rst)|orEach|latMap)|with(?:MutableCharacters|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|m(?:in|a(?:p|x)))(?=\s*[({])\b'
      comment: Member functions in the standard library in Swift 3 which may be used with trailing closures and no parentheses
      scope: support.function.swift
    - match: (?<=\.)(?:s(?:ymmetricDifference|t(?:oreBytes|arts|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|ne(?:gate(?:d)?|xt)|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?|reate)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|n(?:code|umerate(?:d)?)|lementsEqual|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:i(?:thMemoryRebound|dth)|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographical(?:Compare|lyPrecedes)))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|duce|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)(?=\s*\()
      comment: Member functions in the standard library in Swift 3
      scope: support.function.swift
    - match: (?<=\.)(?:s(?:uperclassMirror|amePositionIn|tartsWith)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))(?=\s*\()
      comment: Member functions in the standard library in Swift 2 only
      scope: support.function.swift
  builtin-global-functions:
    - match: \b(type)(\()\s*(of)(:)
      captures:
        1: support.function.dynamic-type.swift
        2: punctuation.definition.arguments.begin.swift
        3: support.variable.parameter.swift
        4: punctuation.separator.argument-label.begin.swift
      push:
        - match: \)
          captures:
            0: punctuation.definition.arguments.end.swift
          pop: true
        - include: expressions
    - match: '\b(?:anyGenerator|autoreleasepool)(?=\s*[({])\b'
      comment: Global functions available in Swift 3 which may be used with trailing closures and no parentheses
      scope: support.function.swift
    - match: \b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))(?=\s*\()
      comment: Global functions available in Swift 3
      scope: support.function.swift
    - match: \b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))(?=\s*\()
      comment: Global functions available in Swift 2 only
      scope: support.function.swift
  builtin-properties:
    - match: (?<=^Process\.|\WProcess\.|^CommandLine\.|\WCommandLine\.)(arguments|argc|unsafeArgv)
      comment: The simpler (?<=\bProcess\.|\bCommandLine\.) breaks VS Code / Atom, see https://github.com/textmate/swift.tmbundle/issues/29
      scope: support.variable.swift
    - match: (?<=\.)(?:s(?:t(?:artIndex|ri(?:ngValue|de))|i(?:ze|gn(?:BitIndex|ificand(?:Bit(?:Count|Pattern)|Width)?|alingNaN)?)|u(?:perclassMirror|mmary|bscriptBaseAddress))|h(?:eader|as(?:hValue|PointerRepresentation))|n(?:ulTerminatedUTF8|ext(?:Down|Up)|a(?:n|tiveOwner))|c(?:haracters|ount(?:TrailingZeros)?|ustom(?:Mirror|PlaygroundQuickLook)|apacity)|i(?:s(?:S(?:ign(?:Minus|aling(?:NaN)?)|ubnormal)|N(?:ormal|aN)|Canonical|Infinite|Zero|Empty|Finite|ASCII)|n(?:dices|finity)|dentity)|owner|de(?:scription|bugDescription)|u(?:n(?:safelyUnwrapped|icodeScalar(?:s)?|derestimatedCount)|tf(?:16|8(?:Start|C(?:String|odeUnitCount))?)|intValue|ppercaseString|lp(?:OfOne)?)|p(?:i|ointee)|e(?:ndIndex|lements|xponent(?:Bit(?:Count|Pattern))?)|value(?:s)?|keys|quietNaN|f(?:irst(?:ElementAddress(?:IfContiguous)?)?|loatingPointClass)|l(?:ittleEndian|owercaseString|eastNo(?:nzeroMagnitude|rmalMagnitude)|a(?:st|zy))|a(?:l(?:ignment|l(?:ocatedElementCount|Zeros))|rray(?:PropertyIsNativeTypeChecked)?)|ra(?:dix|wValue)|greatestFiniteMagnitude|m(?:in|emory|ax)|b(?:yteS(?:ize|wapped)|i(?:nade|tPattern|gEndian)|uffer|ase(?:Address)?))\b
      comment: Properties in the standard library in Swift 3
      scope: support.variable.swift
    - match: (?<=\.)(?:boolValue|disposition|end|objectIdentifier|quickLookObject|start|valueType)\b
      comment: Properties in the standard library in Swift 2 only
      scope: support.variable.swift
    - match: (?<=\.)(?:s(?:calarValue|i(?:ze|gnalingNaN)|o(?:und|me)|uppressed|prite|et)|n(?:one|egative(?:Subnormal|Normal|Infinity|Zero))|c(?:ol(?:or|lection)|ustomized)|t(?:o(?:NearestOr(?:Even|AwayFromZero)|wardZero)|uple|ext)|i(?:nt|mage)|optional|d(?:ictionary|o(?:uble|wn))|u(?:Int|p|rl)|p(?:o(?:sitive(?:Subnormal|Normal|Infinity|Zero)|int)|lus)|e(?:rror|mptyInput)|view|quietNaN|float|a(?:ttributedString|wayFromZero)|r(?:ectangle|ange)|generated|minus|b(?:ool|ezierPath))\b
      comment: Enum cases in the standard library - note that there is some overlap between these and the properties
      scope: support.variable.swift
  builtin-types: []
  code-block:
    - match: '\{'
      captures:
        0: punctuation.section.scope.begin.swift
      push:
        - match: '\}'
          captures:
            0: punctuation.section.scope.end.swift
          pop: true
        - include: main
  comments:
    - match: \A^(#!).*$\n?
      scope: comment.line.number-sign.swift
      captures:
        1: punctuation.definition.comment.swift
    - match: /\*\*(?!/)
      captures:
        0: punctuation.definition.comment.begin.swift
      push:
        - meta_scope: comment.block.documentation.swift
        - match: \*/
          captures:
            0: punctuation.definition.comment.end.swift
          pop: true
    - match: '/\*:'
      captures:
        0: punctuation.definition.comment.begin.swift
      push:
        - meta_scope: comment.block.documentation.playground.swift
        - match: \*/
          captures:
            0: punctuation.definition.comment.end.swift
          pop: true
    - match: /\*
      captures:
        0: punctuation.definition.comment.begin.swift
      push:
        - meta_scope: comment.block.swift
        - match: \*/
          captures:
            0: punctuation.definition.comment.end.swift
          pop: true
    - match: \*/
      scope: invalid.illegal.unexpected-end-of-block-comment.swift
    - match: '(^[ \t]+)?(?=//)'
      captures:
        1: punctuation.whitespace.comment.leading.swift
      push:
        - match: (?!\G)
          pop: true
        - match: ///
          captures:
            0: punctuation.definition.comment.swift
          push:
            - meta_scope: comment.line.triple-slash.documentation.swift
            - match: ^
              pop: true
        - match: "//:"
          captures:
            0: punctuation.definition.comment.swift
          push:
            - meta_scope: comment.line.double-slash.documentation.swift
            - match: ^
              pop: true
        - match: //
          captures:
            0: punctuation.definition.comment.swift
          push:
            - meta_scope: comment.line.double-slash.swift
            - match: ^
              pop: true
  compiler-control:
    - match: ^\s*(#)(if|elseif)\s+(false)\b.*?(?=$|//|/\*)
      captures:
        0: meta.preprocessor.conditional.swift
        1: punctuation.definition.preprocessor.swift
        2: keyword.control.preprocessor.conditional.swift
        3: constant.language.boolean.swift
      push:
        - meta_content_scope: comment.block.preprocessor.swift
        - match: (?=^\s*(#(elseif|else|endif)\b))
          pop: true
    - match: ^\s*(#)(if|elseif)\s+
      captures:
        1: punctuation.definition.preprocessor.swift
        2: keyword.control.preprocessor.conditional.swift
      push:
        - meta_scope: meta.preprocessor.conditional.swift
        - match: (?=\s*(?://|/\*))|$
          captures:
            1: punctuation.definition.preprocessor.swift
            2: keyword.control.preprocessor.conditional.swift
          pop: true
        - match: (&&|\|\|)
          scope: keyword.operator.logical.swift
        - match: \b(true|false)\b
          scope: constant.language.boolean.swift
        - match: \b(arch)\s*(\()\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\w+)\s*(\))
          captures:
            1: keyword.other.condition.swift
            2: punctuation.definition.parameters.begin.swift
            3: support.constant.platform.architecture.swift
            4: punctuation.definition.parameters.end.swift
        - match: \b(os)\s*(\()\s*(?:(macOS|OSX|iOS|tvOS|watchOS|Android|Linux|FreeBSD|Windows|PS4)|\w+)\s*(\))
          captures:
            1: keyword.other.condition.swift
            2: punctuation.definition.parameters.begin.swift
            3: support.constant.platform.os.swift
            4: punctuation.definition.parameters.end.swift
        - match: '\b(canImport)\s*(\()([\p{L}_][\p{L}_\p{N}\p{M}]*)(\))'
          captures:
            1: keyword.other.condition.swift
            2: punctuation.definition.parameters.begin.swift
            3: entity.name.type.module.swift
            4: punctuation.definition.parameters.end.swift
        - match: \b(targetEnvironment)\s*(\()
          captures:
            1: keyword.other.condition.swift
            2: punctuation.definition.parameters.begin.swift
          push:
            - match: (\))|$
              captures:
                1: punctuation.definition.parameters.end.swift
              pop: true
            - match: \b(simulator|UIKitForMac)\b
              scope: support.constant.platform.environment.swift
        - match: \b(swift|compiler)\s*(\()
          captures:
            1: keyword.other.condition.swift
            2: punctuation.definition.parameters.begin.swift
          push:
            - match: (\))|$
              captures:
                1: punctuation.definition.parameters.end.swift
              pop: true
            - match: ">=|<"
              scope: keyword.operator.comparison.swift
            - match: '\b[0-9]+(?:\.[0-9]+)*\b'
              scope: constant.numeric.swift
    - match: ^\s*(#)(else|endif)(.*?)(?=$|//|/\*)
      scope: meta.preprocessor.conditional.swift
      captures:
        1: punctuation.definition.preprocessor.swift
        2: keyword.control.preprocessor.conditional.swift
    - match: '^\s*(#)(sourceLocation)((\()([^)]*)(\)))(.*?)(?=$|//|/\*)'
      scope: meta.preprocessor.sourcelocation.swift
      captures:
        1: punctuation.definition.preprocessor.swift
        2: keyword.control.preprocessor.sourcelocation.swift
        4: punctuation.definition.parameters.begin.swift
        6: punctuation.definition.parameters.begin.swift
  declarations: []
  expressions:
    - include: comments
    - include: code-block
    - include: attributes
    - include: literals
    - include: operators
    - include: builtin-types
    - include: builtin-functions
    - include: builtin-global-functions
    - include: builtin-properties
    - include: keywords
    - match: \b_\b
      scope: support.variable.discard-value.swift
  keywords:
    - match: (?<!\.)\b(?:if|else|guard|where|switch|case|default|fallthrough)\b
      scope: keyword.control.branch.swift
    - match: (?<!\.)\b(?:continue|break|fallthrough|return)\b
      scope: keyword.control.transfer.swift
    - match: (?<!\.)\b(?:while|for|in)\b
      scope: keyword.control.loop.swift
    - match: (?<!\.)\b(repeat)\b(\s*)
      comment: extra scopes for repeat-while snippet
      captures:
        1: keyword.control.loop.swift
        2: punctuation.whitespace.trailing.repeat.swift
    - match: (?<!\.)\bdefer\b
      scope: keyword.control.defer.swift
    - match: '(?<!\.)\b(?:catch|throws?|rethrows|try)\b|\btry[?!]\B'
      scope: keyword.control.exception.swift
    - match: (?<!\.)\b(do)\b(\s*)
      comment: extra scopes for do-catch snippet
      captures:
        1: keyword.control.exception.swift
        2: punctuation.whitespace.trailing.do.swift
    - match: (?<!\.)\b(?:associatedtype|let|operator|typealias|var)\b
      scope: keyword.other.declaration-specifier.swift
    - match: (?<!\.)\b(class|enum|extension|precedencegroup|protocol|struct)\b
      scope: storage.type.$1.swift
    - match: (?<!\.)\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix)\b
      scope: storage.modifier.swift
    - match: '\binit[?!]|\binit\b|(?<!\.)\b(?:func|deinit|subscript|didSet|get|set|willSet)\b'
      scope: storage.type.function.swift
    - match: (?<!\.)\b(?:fileprivate|private|internal|public|open)\b
      scope: keyword.other.declaration-specifier.accessibility.swift
    - match: (?<!\.)\b(?:weak|unowned)\b|\bunowned\((?:safe|unsafe)\)
      comment: matches weak, unowned, unowned(safe), unowned(unsafe)
      scope: keyword.other.capture-specifier.swift
    - match: (?<=\.)(?:(dynamicType|self)|(Protocol|Type))\b
      captures:
        1: keyword.operator.type.swift
        2: keyword.operator.type.metatype.swift
    - match: (?<!\.)\b(?:super|self|Self)\b
      scope: variable.language.swift
    - match: \B(?:#file|#line|#column|#function|#dsohandle)\b|\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\b
      scope: support.variable.swift
    - match: (?<!\.)\bimport\b
      scope: keyword.control.import.swift
  literals:
    - match: \bnil\b
      scope: constant.language.nil.swift
    - match: \B#(colorLiteral|imageLiteral|fileLiteral)\b
      comment: object "literals" used in playgrounds
      scope: support.function.object-literal.swift
    - match: \B#keyPath\b
      scope: support.function.key-path.swift
    - match: \B(#selector)(\()(?:\s*(getter|setter)\s*(:))?
      captures:
        1: support.function.selector-reference.swift
        2: punctuation.definition.arguments.begin.swift
        3: support.variable.parameter.swift
        4: punctuation.separator.argument-label.swift
      push:
        - match: \)
          captures:
            0: punctuation.definition.arguments.end.swift
          pop: true
        - include: expressions
  operators:
    - match: '\b(is\b|as([!?]\B|\b))'
      comment: Type casting
      scope: keyword.operator.type-casting.swift
    - match: |-
        (?x)
        	(?=
        		(?<oph>								# operator-head
        			[/=\-+!*%<>&|^~?]
        		  | [\x{00A1}-\x{00A7}]
        		  | [\x{00A9}\x{00AB}]
        		  | [\x{00AC}\x{00AE}]
        		  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
        		  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
        		  | [\x{2030}-\x{203E}]
        		  | [\x{2041}-\x{2053}]
        		  | [\x{2055}-\x{205E}]
        		  | [\x{2190}-\x{23FF}]
        		  | [\x{2500}-\x{2775}]
        		  | [\x{2794}-\x{2BFF}]
        		  | [\x{2E00}-\x{2E7F}]
        		  | [\x{3001}-\x{3003}]
        		  | [\x{3008}-\x{3030}]
        		)
        	  | \.
        		(
        			\g<oph>							# operator-head
        		  | \.
        		  | [\x{0300}-\x{036F}]				# operator-character
        		  | [\x{1DC0}-\x{1DFF}]
        		  | [\x{20D0}-\x{20FF}]
        		  | [\x{FE00}-\x{FE0F}]
        		  | [\x{FE20}-\x{FE2F}]
        		  | [\x{E0100}-\x{E01EF}]
        		)
        	)
      comment: This rule helps us speed up the matching.
      push:
        - match: (?!\G)
          pop: true
        - match: |-
            (?x)
            	\G										# Matching from the beginning ensures
            											# that we start with operator-head
            	(?<=^|[\s(\[{,;:])
            	(
            		(?!(//|/\*|\*/))
            		(
            			[/=\-+!*%<>&|^~?]				# operator-head
            		  | [\x{00A1}-\x{00A7}]
            		  | [\x{00A9}\x{00AB}]
            		  | [\x{00AC}\x{00AE}]
            		  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
            		  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
            		  | [\x{2030}-\x{203E}]
            		  | [\x{2041}-\x{2053}]
            		  | [\x{2055}-\x{205E}]
            		  | [\x{2190}-\x{23FF}]
            		  | [\x{2500}-\x{2775}]
            		  | [\x{2794}-\x{2BFF}]
            		  | [\x{2E00}-\x{2E7F}]
            		  | [\x{3001}-\x{3003}]
            		  | [\x{3008}-\x{3030}]

            		  | [\x{0300}-\x{036F}]				# operator-character
            		  | [\x{1DC0}-\x{1DFF}]
            		  | [\x{20D0}-\x{20FF}]
            		  | [\x{FE00}-\x{FE0F}]
            		  | [\x{FE20}-\x{FE2F}]
            		  | [\x{E0100}-\x{E01EF}]
            		)
            	)++
            	(?![\s)\]},;:]|\z)
          comment: Prefix unary operator
          captures:
        - match: |-
            (?x)
            	\G										# Matching from the beginning ensures
            											# that we start with operator-head
            	(?<!^|[\s(\[{,;:])
            	(
            		(?!(//|/\*|\*/))
            		(
            			[/=\-+!*%<>&|^~?]				# operator-head
            		  | [\x{00A1}-\x{00A7}]
            		  | [\x{00A9}\x{00AB}]
            		  | [\x{00AC}\x{00AE}]
            		  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
            		  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
            		  | [\x{2030}-\x{203E}]
            		  | [\x{2041}-\x{2053}]
            		  | [\x{2055}-\x{205E}]
            		  | [\x{2190}-\x{23FF}]
            		  | [\x{2500}-\x{2775}]
            		  | [\x{2794}-\x{2BFF}]
            		  | [\x{2E00}-\x{2E7F}]
            		  | [\x{3001}-\x{3003}]
            		  | [\x{3008}-\x{3030}]

            		  | [\x{0300}-\x{036F}]				# operator-character
            		  | [\x{1DC0}-\x{1DFF}]
            		  | [\x{20D0}-\x{20FF}]
            		  | [\x{FE00}-\x{FE0F}]
            		  | [\x{FE20}-\x{FE2F}]
            		  | [\x{E0100}-\x{E01EF}]
            		)
            	)++
            	(?=[\s)\]},;:]|\z)
          comment: Postfix unary operator
          captures:
        - match: |-
            (?x)
            	\G										# Matching from the beginning ensures
            											# that we start with operator-head
            	(
            		(?!(//|/\*|\*/))
            		(
            			[/=\-+!*%<>&|^~?]				# operator-head
            		  | [\x{00A1}-\x{00A7}]
            		  | [\x{00A9}\x{00AB}]
            		  | [\x{00AC}\x{00AE}]
            		  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
            		  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
            		  | [\x{2030}-\x{203E}]
            		  | [\x{2041}-\x{2053}]
            		  | [\x{2055}-\x{205E}]
            		  | [\x{2190}-\x{23FF}]
            		  | [\x{2500}-\x{2775}]
            		  | [\x{2794}-\x{2BFF}]
            		  | [\x{2E00}-\x{2E7F}]
            		  | [\x{3001}-\x{3003}]
            		  | [\x{3008}-\x{3030}]

            		  | [\x{0300}-\x{036F}]				# operator-character
            		  | [\x{1DC0}-\x{1DFF}]
            		  | [\x{20D0}-\x{20FF}]
            		  | [\x{FE00}-\x{FE0F}]
            		  | [\x{FE20}-\x{FE2F}]
            		  | [\x{E0100}-\x{E01EF}]
            		)
            	)++
          comment: Infix operator
          captures:
        - match: |-
            (?x)
            	\G										# Matching from the beginning ensures
            											# that we start with operator-head
            	(?<=^|[\s(\[{,;:])
            	\.										# dot
            	(
            		(?!(//|/\*|\*/))
            		(
            			\.								# dot
            		  | [/=\-+!*%<>&|^~?]				# operator-head
            		  | [\x{00A1}-\x{00A7}]
            		  | [\x{00A9}\x{00AB}]
            		  | [\x{00AC}\x{00AE}]
            		  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
            		  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
            		  | [\x{2030}-\x{203E}]
            		  | [\x{2041}-\x{2053}]
            		  | [\x{2055}-\x{205E}]
            		  | [\x{2190}-\x{23FF}]
            		  | [\x{2500}-\x{2775}]
            		  | [\x{2794}-\x{2BFF}]
            		  | [\x{2E00}-\x{2E7F}]
            		  | [\x{3001}-\x{3003}]
            		  | [\x{3008}-\x{3030}]

            		  | [\x{0300}-\x{036F}]				# operator-character
            		  | [\x{1DC0}-\x{1DFF}]
            		  | [\x{20D0}-\x{20FF}]
            		  | [\x{FE00}-\x{FE0F}]
            		  | [\x{FE20}-\x{FE2F}]
            		  | [\x{E0100}-\x{E01EF}]
            		)
            	)++
            	(?![\s)\]},;:]|\z)
          comment: Dot prefix unary operator
          captures:
        - match: |-
            (?x)
            	\G										# Matching from the beginning ensures
            											# that we start with operator-head
            	(?<!^|[\s(\[{,;:])
            	\.										# dot
            	(
            		(?!(//|/\*|\*/))
            		(
            			\.								# dot
            		  | [/=\-+!*%<>&|^~?]				# operator-head
            		  | [\x{00A1}-\x{00A7}]
            		  | [\x{00A9}\x{00AB}]
            		  | [\x{00AC}\x{00AE}]
            		  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
            		  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
            		  | [\x{2030}-\x{203E}]
            		  | [\x{2041}-\x{2053}]
            		  | [\x{2055}-\x{205E}]
            		  | [\x{2190}-\x{23FF}]
            		  | [\x{2500}-\x{2775}]
            		  | [\x{2794}-\x{2BFF}]
            		  | [\x{2E00}-\x{2E7F}]
            		  | [\x{3001}-\x{3003}]
            		  | [\x{3008}-\x{3030}]

            		  | [\x{0300}-\x{036F}]				# operator-character
            		  | [\x{1DC0}-\x{1DFF}]
            		  | [\x{20D0}-\x{20FF}]
            		  | [\x{FE00}-\x{FE0F}]
            		  | [\x{FE20}-\x{FE2F}]
            		  | [\x{E0100}-\x{E01EF}]
            		)
            	)++
            	(?=[\s)\]},;:]|\z)
          comment: Dot postfix unary operator
          captures:
        - match: |-
            (?x)
            	\G										# Matching from the beginning ensures
            											# that we start with operator-head
            	\.										# dot
            	(
            		(?!(//|/\*|\*/))
            		(
            			\.								# dot
            		  | [/=\-+!*%<>&|^~?]				# operator-head
            		  | [\x{00A1}-\x{00A7}]
            		  | [\x{00A9}\x{00AB}]
            		  | [\x{00AC}\x{00AE}]
            		  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
            		  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
            		  | [\x{2030}-\x{203E}]
            		  | [\x{2041}-\x{2053}]
            		  | [\x{2055}-\x{205E}]
            		  | [\x{2190}-\x{23FF}]
            		  | [\x{2500}-\x{2775}]
            		  | [\x{2794}-\x{2BFF}]
            		  | [\x{2E00}-\x{2E7F}]
            		  | [\x{3001}-\x{3003}]
            		  | [\x{3008}-\x{3030}]

            		  | [\x{0300}-\x{036F}]				# operator-character
            		  | [\x{1DC0}-\x{1DFF}]
            		  | [\x{20D0}-\x{20FF}]
            		  | [\x{FE00}-\x{FE0F}]
            		  | [\x{FE20}-\x{FE2F}]
            		  | [\x{E0100}-\x{E01EF}]
            		)
            	)++
          comment: Dot infix operator
          captures:
    - match: ":"
      scope: keyword.operator.ternary.swift
  root:
    - include: compiler-control
    - include: declarations
    - include: expressions
