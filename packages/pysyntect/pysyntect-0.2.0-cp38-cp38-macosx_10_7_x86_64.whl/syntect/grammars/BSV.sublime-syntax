%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: BSV
file_extensions:
  - bsv
scope: source.bsv
contexts:
  main:
    - match: '^\s*(import|export|package)\s+\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
      scope: meta.entity.package.bsv
      captures:
        1: keyword.control.import.bsv
        2: entity.name.package.bsv
    - match: '^\s*(defparam)\s+([a-zA-Z_][a-zA-Z0-9_]*)(.[a-zA-Z_][a-zA-Z0-9_]*)\s*(=)'
      scope: meta.definition.defparam.bsv
      captures:
        1: keyword.other.bsv
        2: entity.name.type.instance.bsv
        3: meta.module.parameters.bsv
        4: keyword.other.bsv
    - match: \b(automatic|cell|config|deassign|defparam|design|disable|edge|endconfig|endgenerate|endspecify|endtable|endtask|event|generate|genvar|ifnone|incdir|include|liblist|library|localparam|macromodule|negedge|noshowcancelled|posedge|pulsestyle_onevent|pulsestyle_ondetect|real|realtime|scalared|showcancelled|specify|specparam|table|task|time|use|vectored)\b
      scope: keyword.other.bsv
    - match: \b(initial|always|wait|force|release|assign)\b
      scope: keyword.control.bsv
    - match: \b(begin|end|fork|join)\b
      scope: keyword.other.bsv
    - match: \b(matches|action|endaction|actionvalue|endactionvalue|ancestor|deriving|return|match|par|endpar|provisos|dependencies|determines|seq|endseq|schedule|port|clock|reset|no_reset|clocked_by|reset_by|default_clock|default_reset|output_clock|output_reset|input_clock|input_reset|same_family|import|numeric|type)\b
      scope: keyword.control.bsv
    - match: \b(TAdd|TSub|TLog|TExp|TMul|TDiv|TMin|TMax)\b
      scope: keyword.typesystem.math.bsv
    - match: \b(Bits|DefaultValue|Eq|Ord|Bounded|Arith|Literal|Bitwise|BitReduction|BitExtend|FShow|IsModule|Add|Max|Log|Mul|Div)\b
      scope: keyword.typesystem.typeclass.bsv
    - match: \b(forever|repeat|while|for|if|else|case|casex|casez|default|endcase)\b
      scope: keyword.control.bsv
    - match: \b(endpackage)\b
      scope: keyword.control.import.bsv
    - match: '^\s*(`include)\s+(["<].*[">])'
      scope: meta.include.bsv
      captures:
        1: meta.preprocessor.bsv
        2: entity.name.type.include.bsv
    - match: '^\s*(`ifdef|`ifndef|`undef|`define)\s+([a-zA-Z_][a-zA-Z0-9_]*)\b'
      scope: meta.preprocessor.ifdef.bsv
      captures:
        1: meta.preprocessor.bsv
        2: constant.other.define.bsv
    - match: '`(celldefine|default_nettype|define|else|elsif|endcelldefine|endif|ifdef|ifndef|include|line|nounconnected_drive|resetall|timescale|unconnected_drive|undef)\b'
      scope: meta.preprocessor.bsv
    - match: "[.][_a-zA-Z0-9]+"
      scope: meta.module.parameters.bsv
    - match: \b(True|False)\b
      scope: constant.language.bsv
    - match: '`\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
      scope: constant.other.define.bsv
    - include: comments
    - include: pragma-compiler-bsv
    - match: \b(let|module|endmodule|rule|endrule|rules|endrules|interface|endinterface|method|endmethod|function|endfunction|instance|endinstance|typeclass|endtypeclass|primitive|endprimitive)\b
      scope: storage.type.bsv
    - match: '(?:^|\{|,)\s*\b(?!endmodule|endrule|endinterface|endmethod|endfunction|endinstance|endtypeclass)\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*(:)(?!:)\s*'
      scope: meta.case.bsv
      captures:
        1: entity.name.state.bsv
        2: keyword.operator.bitwise.bsv
    - include: all-types
    - match: (==|===|!=|!==|<=|>=|<|>)
      scope: keyword.operator.comparison.bsv
    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.bsv
    - match: (!|&&|\|\||\bor\b)
      scope: keyword.operator.logical.bsv
    - match: (&|\||\^|~|<<|>>|\?|:)
      scope: keyword.operator.bitwise.bsv
    - match: "({|})"
      scope: keyword.operator.parenthesis.curly.bsv
    - match: (\(|\))
      scope: keyword.operator.parenthesis.round.bsv
    - match: '(\[|\])'
      scope: keyword.operator.parenthesis.square.bsv
    - match: "([;,])"
      scope: keyword.delimiter.bsv
    - match: (#|@|=)
      scope: keyword.other.bsv
    - match: '\b(output|input|inout|and|nand|nor|or|xor|xnor|buf|not|bufif[01]|notif[01]|r?[npc]mos|tran|r?tranif[01]|pullup|pulldown)\b'
      scope: support.type.bsv
    - match: '\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))(?=[^a-zA-Z_])'
      scope: constant.numeric.real.bsv
    - match: '((\b\d+)?''s?([bB]\s*(([0-1_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*))|[oO]\s*(([0-7_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*))|[dD]\s*(([0-9_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*))|[hH]\s*(([0-9a-fA-F_xXzZ?]+)|(`[A-Z]+[_0-9a-zA-Z]*)))((e|E)(\+|-)?[0-9]+)?\b)|(\b\d+\b)'
      scope: constant.numeric.bsv
    - include: strings
    - match: '\$\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
      scope: support.function.bsv
  all-types:
    - include: storage-type-bsv
    - include: storage-type-standard-bsv
    - include: storage-modifier-bsv
  comments:
    - match: /\*
      captures:
        0: punctuation.definition.comment.bsv
      push:
        - meta_scope: comment.block.bsv
        - match: \*/
          captures:
            0: punctuation.definition.comment.bsv
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.bsv
      captures:
        1: punctuation.definition.comment.bsv
  pragma-compiler-bsv:
    - match: \(\*
      captures:
        0: punctuation.definition.comment.bsv
      push:
        - meta_scope: pragma.compiler.bsv
        - match: \*\)
          captures:
            0: punctuation.definition.comment.bsv
          pop: true
  storage-modifier-bsv:
    - match: '\b(signed|unsigned|small|medium|large|supply[01]|strong[01]|pull[01]|weak[01]|highz[01])\b'
      scope: storage.modifier.bsv
  storage-type-bsv:
    - match: '\b(wire|tri|tri[01]|supply[01]|wand|triand|wor|trior|trireg|reg|parameter|integer|typedef|struct|enum|tagged|union)\b'
      scope: storage.type.bsv
  storage-type-standard-bsv:
    - match: \b(void|Action|ActionValue|Integer|Nat|Real|Inout|Bit|UInt|Int|Bool|Maybe|String|Either|Rules|Module|Clock|Reset|Power|Empty|Array|Reg|RWire|Wire|BypassWire|DWire|PulseWire|ReadOnly|WriteOnly|Vector|List|RegFile|FIFO|FIFOF|Stmt)\b
      scope: storage.type.standard.bsv
  strings:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.bsv
      push:
        - meta_scope: string.quoted.double.bsv
        - match: '"'
          captures:
            0: punctuation.definition.string.end.bsv
          pop: true
        - match: \\.
          scope: constant.character.escape.bsv
