%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: NetLinx
file_extensions:
  - axs
  - axi
first_line_match: "-[*]-( Mode:)? C -[*]-"
scope: source.netlinx
contexts:
  main:
    - include: preprocessor-rule-enabled
    - include: preprocessor-rule-disabled
    - include: preprocessor-rule-other
    - include: comments
    - match: '(\d{1,5})(:)(\d{1,5})(:)(\d{1,5})'
      comment: Device Number
      scope: meta.dps.netlinx
      captures:
        1: constant.numeric.dps.device.netlinx
        2: punctuation.colon.dps.netlinx
        3: constant.numeric.dps.port.netlinx
        4: punctuation.colon.dps.netlinx
        5: constant.numeric.dps.system.netlinx
    - match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b'
      scope: constant.numeric.netlinx
    - match: '(\$[0-9a-fA-F]+)'
      comment: hex
      scope: constant.numeric.hex.netlinx
    - match: "'"
      comment: single quoted string
      captures:
        0: punctuation.definition.string.begin.netlinx
      push:
        - meta_scope: string.quoted.single.netlinx
        - match: "'"
          captures:
            0: punctuation.definition.string.end.netlinx
          pop: true
    - match: |-
        (?ix)
        	^\s*(\#(define))\s+             # define
        	((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
        	(?:                              # and optionally:
        	    (\()                         # an open parenthesis
        	        (
        	            \s* \g<id> \s*       # first argument
        	            ((,) \s* \g<id> \s*)*  # additional arguments
        	            (?:\.\.\.)?          # varargs ellipsis?
        	        )
        	    (\))                         # a close parenthesis
        	)?
      captures:
        1: keyword.control.import.define.netlinx
        2: keyword.control.import.define.netlinx
        3: entity.name.function.preprocessor.netlinx
        5: punctuation.definition.parameters.netlinx
        6: variable.parameter.preprocessor.netlinx
        8: punctuation.separator.parameters.netlinx
        9: punctuation.definition.parameters.netlinx
      push:
        - meta_scope: meta.preprocessor.macro.netlinx
        - match: (?=(?://|/\*))|$
          pop: true
        - match: (?>\\\s*\n)
          scope: punctuation.separator.continuation.netlinx
        - include: $top_level_main
    - include: pragma-mark
    - include: block
    - match: (?i)\s*\b(define_function)\b\s+
      comment: function name
      captures:
        1: keyword.control.define.netlinx
      push:
        - match: \)
          pop: true
        - match: '(?i)\b([a-z_]\w*)\b(?=\s*\()'
          comment: function name
          scope: entity.name.function.netlinx
        - include: netlinx_keywords
        - match: '(?i)([a-z_][a-z0-9_]*)(?=\s+)'
          comment: type/variable pairs where type is user-defined (a struct)
          scope: support.type.user.netlinx
        - include: netlinx_variables
    - include: netlinx_keywords
    - match: '(?i)(?i)\b([a-z_][a-z0-9_]*)\b(?=\s*\()'
      comment: user function names (alphanumeric before parenthesis)
      scope: support.function.user.netlinx
    - include: netlinx_variables
  access:
    - match: '(?i)\.[a-zA-Z_][a-zA-Z_0-9]*\b(?!\s*\()'
      scope: variable.other.dot-access.netlinx
  block:
    - match: '\{'
      push:
        - meta_scope: meta.block.netlinx
        - match: '\}'
          pop: true
        - include: block_innards
  block_innards:
    - include: preprocessor-rule-enabled-block
    - include: preprocessor-rule-disabled-block
    - include: preprocessor-rule-other-block
    - include: access
    - match: |-
        (?x)
                (?x)
        (?:
             (?: (?= \s )           (?<!else|return) (?<=\w)\s+      #  or word + space before name
             )
        )
        (
        	(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name
        	(?: (?<=operator) (?: [-*&<>=+!]+ | \(\) | \[\] ) )?  # if it is a NetLinx operator
        )
         \s*(\()
      scope: meta.initialization.netlinx
      captures:
        1: variable.other.netlinx
        2: punctuation.definition.parameters.netlinx
    - include: block
    - include: $top_level_main
  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.netlinx
      captures:
        1: meta.toc-list.banner.block.netlinx
    - match: /\*
      captures:
        0: punctuation.definition.comment.netlinx
      push:
        - meta_scope: comment.block.netlinx
        - match: \*/
          captures:
            0: punctuation.definition.comment.netlinx
          pop: true
    - match: \(\*
      comment: Netlinx parenthesis comments.
      captures:
        0: punctuation.definition.comment.netlinx
      push:
        - meta_scope: comment.block.netlinx
        - match: \*\)
          captures:
            0: punctuation.definition.comment.netlinx
          pop: true
    - match: \*/.*\n
      scope: invalid.illegal.stray-comment-end.netlinx
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.netlinx
      captures:
        1: meta.toc-list.banner.line.netlinx
    - match: //
      captures:
        0: punctuation.definition.comment.netlinx
      push:
        - meta_scope: comment.line.double-slash.netlinx
        - match: $\n?
          pop: true
        - match: (?>\\\s*\n)
          scope: punctuation.separator.continuation.netlinx
  disabled:
    - match: ^\s*#\s*if(n?def)?\b.*$
      comment: eat nested preprocessor if(def)s
      push:
        - match: ^\s*#\s*endif\b.*$
          pop: true
        - include: disabled
        - include: pragma-mark
  dps_variables:
    - match: '(?i)[a-z0-9_]+\.\b(number|port|system)\b'
      captures:
        1: support.variable.system.dps.dot-access.netlinx
  netlinx_constants:
    - match: '\b(dv|vdv|btn|lvl|ch|adr)?([A-Z0-9_]+)\b'
      scope: constant.other.netlinx
  netlinx_keywords:
    - match: (?i)(\s*#\b(define|disable_warning|else|end_if|if_defined|if_not_defined|include|warn)\b)
      comment: Compiler Directives
      scope: keyword.control.netlinx
    - match: (?i)\b(call|define_call|system_call)\b
      comment: Subroutine Keywords
      scope: keyword.control.netlinx
    - match: (?i)\b(length_array|max_length_array|set_length_array)\b
      comment: Array Keywords
      scope: support.function.netlinx
    - match: (?i)\b(clear_buffer|create_buffer|create_multi_buffer)\b
      comment: Buffer Keywords
      scope: keyword.control.netlinx
    - match: (?i)\b(on|off|total_off)\b
      comment: Channel Keywords
      scope: support.function.netlinx
    - match: (?i)\b(clkmgr_set_daylightsavings_offset|clkmgr_delete_userdefined_timeserver|clkmgr_get_active_timeserver|clkmgr_get_daylightsavings_offset|clkmgr_get_end_daylightsavings_rule|clkmgr_get_resync_period|clkmgr_get_start_daylightsavings_rule|clkmgr_get_timeservers|clkmgr_get_timezone|clkmgr_is_daylightsavings_on|clkmgr_is_network_sourced|clkmgr_set_active_timeserver|clkmgr_set_clk_source|clkmgr_set_daylightsavings_mode|clkmgr_set_daylightsavings_offset|clkmgr_set_end_daylightsavings_rule|clkmgr_set_resync_period|clkmgr_set_start_daylightsavings_rule|clkmgr_set_timezone|)\b
      comment: Clock Manager Keywords
      scope: support.function.netlinx
    - match: (?i)\b(combine_channels|combine_devices|combine_levels|uncombine_channels|uncombine_devices|uncombine_levels)\b
      comment: Combine/Uncombine Keywords
      scope: support.function.combine.netlinx
    - match: (?i)\b(__DATE__|__FILE__|__LDATE__|__LINE__|__NAME__|__TIME__)\b
      comment: Compiler Keywords
      scope: support.function.compiler.netlinx
    - match: (?i)\b(break|return|default|else|for|if|include|select|active|switch|case|while|medium_while|long_while)\b
      comment: Conditional and Loop Keywords
      scope: keyword.control.netlinx
    - match: (?i)\b(true|false)\b
      comment: Boolean Values
      scope: constant.language.netlinx
    - match: (?i)\b(atoi|atof|atol|ch_to_wc|ftoa|hextoi|itoa|format|itohex|raw_be|raw_le)\b
      comment: Conversion Keywords
      scope: support.function.netlinx
    - match: (?i)\b(awake|command|hold|onerror|offline|online|standby)\b
      comment: Data Event Keywords
      scope: keyword.control.event.data.netlinx
    - match: '(?i)\b(char|widechar|integer|sinteger|long|slong|float|double|dev|devchan)\b\s+([a-z_]\w*)\b(?!\()'
      comment: Data Type Keywords
      captures:
        1: support.type.system.netlinx
        2: support.variable.system.netlinx
    - match: (?i)\b(char|widechar|integer|sinteger|long|slong|float|double|dev|devchan)\b
      comment: Data Type Keywords
      scope: support.type.system.netlinx
    - match: (?i)\b(device_id|device_id_string|device_info|device_standby|device_wake|dynamic_application_device|master_slot|master_sn|reboot|send_command|system_number)\b
      comment: Device Keywords
      scope: support.function.netlinx
    - match: (?i)\b(length_variable_to_string|variable_to_xml|xml_to_variable|length_variable_to_xml)\b
      comment: Encode/Decode Keywords
      scope: support.function.netlinx
    - match: (?i)\b(button_event|channel_event|data_event|level_event|rebuild_event)\b
      comment: Event Handler Keywords
      scope: keyword.control.event.netlinx
    - match: (?i)\b(file_close|file_copy|file_createdir|file_delete|file_dir|file_getdir|file_open|file_read|file_read_line|file_removedir|file_rename|file_seek|file_setdir|file_write|file_write_line)\b
      comment: File Operation Keywords
      scope: support.function.netlinx
    - match: (?i)\b(get_last|get_multi_buffer_string|get_pulse_time|get_serial_number|get_system_number|get_timer|get_unique_id|get_url_list)\b
      comment: Get Keywords
      scope: support.function.netlinx
    - match: (?i)\b(add_url_entry|delete_url_entry|get_dns_list|get_ip_address|ip_bound_client_open|ip_client_close|ip_client_open|ip_mc_server_open|ip_server_close|ip_server_open|ip_set_option|set_ip_address|set_dns_list)\b
      comment: IP Keywords
      scope: support.function.netlinx
    - match: (?i)\b(~levsyncon|~levsyncoff|create_level|send_level|set_virtual_level_count)\b
      comment: Level Keywords
      scope: support.function.netlinx
    - match: (?i)\b(set_log_level|get_log_level|amx_log)\b
      comment: Log Keywords
      scope: support.function.log.netlinx
    - match: (?i)\b(exp_value|log_value|log10_value|power_value|sqrt_value)\b
      comment: Math Functions
      scope: support.function.netlinx
    - match: (?i)\b(duet_mem_size_get|duet_mem_size_set|module_name)\b
      comment: Module Keywords
      scope: support.function.netlinx
    - match: (\&|~|\||\^|<|\%|\!|>|=|\")
      comment: Operator Keywords
      scope: keyword.operator.netlinx
    - match: (?i)\b(dynamic_polled_port|first_local_port|static_port_binding)\b
      comment: Port Keywords
      scope: support.function.netlinx
    - match: (?i)\b(push|release)\b
      comment: Push And Release Control Keywords
      scope: keyword.control.netlinx
    - match: (?i)\b(repeat|do_push|do_push_timed|do_release|min_to|push|push_channel|push_devchan|push_device|release|release_channel|release_devchan|release_device|to)\b
      comment: Push And Release Keywords
      scope: support.function.netlinx
    - match: (?i)\b(set_outdoor_temperature|set_pulse_time|pulse|set_system_number|set_timer|set_virtual_channel_count|set_virtual_port_count)\b
      comment: Set Keywords
      scope: support.function.netlinx
    - match: (?i)\b(smtp_server_config_set|smtp_server_config_get|smtp_send)\b
      comment: SMTP Keywords
      scope: support.function.netlinx
    - match: (?i)\b(chard|chardm|compare_string|find_string|left_string|length_string|lower_string|max_length_string|mid_string|redirect_string|remove_string|right_string|send_string|set_length_string|string|string_to_variable|upper_string|variable_to_string)\b
      comment: String Keywords
      scope: support.function.netlinx
    - match: (?i)\b(struct|structure)\b
      comment: Structure Keywords
      scope: support.function.netlinx
    - match: (?i)\b(astro_clock|clock|date|date_to_day|date_to_month|date_to_year|day|day_of_week|ldate|time|time_to_hour|time_to_minute|time_to_second)\b
      comment: Time And Date Keywords
      scope: support.function.netlinx
    - match: (?i)\b(timeline_active|timeline_create|timeline_event|timeline_get|timeline_kill|timeline_pause|timeline_reload|timeline_restart|timeline_set)\b
      comment: Timeline Keywords
      scope: support.function.timeline.netlinx
    - match: (?i)\b(_wc|wc_compare_string|wc_concat_string|wc_decode|wc_encode|wc_file_close|wc_file_open|wc_file_read|wc_file_read_line|wc_file_write|wc_file_write_line|wc_find_string|wc_get_buffer_char|wc_get_buffer_string|wc_left_string|wc_length_string|wc_lower_string|wc_max_length_string|wc_mid_string|wc_remove_string|wc_right_string|wc_set_length_string|wc_to_ch|wc_tp_encode|wc_upper_string)\b
      comment: Unicode Keywords
      scope: support.function.netlinx
    - match: (?i)\b(abs_value|max_value|min_value|random_number|type_cast)\b
      comment: Variables Keywords
      scope: support.function.variable.netlinx
    - match: (?i)\b(constant|non_volatile|persistent|local_var|stack_var|volatile)\b
      comment: Variable Modifiers
      scope: storage.modifier.netlinx
    - match: (?i)\b(cancel_all_wait|cancel_all_wait_until|cancel_wait|cancel_wait_until|pause_all_wait|pause_wait|restart_all_wait|restart_wait|wait|wait_until|timed_wait_until)\b
      comment: Wait Keywords
      scope: support.function.wait.netlinx
    - include: dps_variables
    - include: netlinx_constants
  netlinx_variables:
    - match: \w+
      comment: Variables (every word not matched)
      scope: variable.other.netlinx
  parens:
    - match: \(
      push:
        - meta_scope: meta.parens.netlinx
        - match: \)
          pop: true
        - include: $top_level_main
  pragma-mark:
    - match: ^\s*(#\s*(pragma\s+mark)\s+(.*))
      scope: meta.section
      captures:
        1: meta.preprocessor.netlinx
        2: keyword.control.import.pragma.netlinx
        3: meta.toc-list.pragma-mark.netlinx
  preprocessor-rule-disabled:
    - match: ^\s*(#(if)\s+(0)\b).*
      captures:
        1: meta.preprocessor.netlinx
        2: keyword.control.import.if.netlinx
        3: constant.numeric.preprocessor.netlinx
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.if.netlinx
            3: constant.numeric.preprocessor.netlinx
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.else.netlinx
          push:
            - match: (?=^\s*#\s*endif\b.*$)
              captures:
                1: meta.preprocessor.netlinx
                2: keyword.control.import.else.netlinx
              pop: true
            - include: $top_level_main
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch
            - match: (?=^\s*#\s*(else|endif)\b.*$)
              pop: true
            - include: disabled
            - include: pragma-mark
  preprocessor-rule-disabled-block:
    - match: ^\s*(#(if)\s+(0)\b).*
      captures:
        1: meta.preprocessor.netlinx
        2: keyword.control.import.if.netlinx
        3: constant.numeric.preprocessor.netlinx
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.if.netlinx
            3: constant.numeric.preprocessor.netlinx
          pop: true
        - match: ^\s*(#\s*(else)\b)
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.else.netlinx
          push:
            - match: (?=^\s*#\s*endif\b.*$)
              captures:
                1: meta.preprocessor.netlinx
                2: keyword.control.import.else.netlinx
              pop: true
            - include: block_innards
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.in-block
            - match: (?=^\s*#\s*(else|endif)\b.*$)
              pop: true
            - include: disabled
            - include: pragma-mark
  preprocessor-rule-enabled:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.netlinx
        2: keyword.control.import.if.netlinx
        3: constant.numeric.preprocessor.netlinx
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.if.netlinx
            3: constant.numeric.preprocessor.netlinx
          pop: true
        - match: ^\s*(#\s*(else)\b).*
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.else.netlinx
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch
            - match: (?=^\s*#\s*endif\b.*$)
              captures:
                1: meta.preprocessor.netlinx
                2: keyword.control.import.else.netlinx
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b.*$)
              pop: true
            - include: $top_level_main
  preprocessor-rule-enabled-block:
    - match: ^\s*(#(if)\s+(0*1)\b)
      captures:
        1: meta.preprocessor.netlinx
        2: keyword.control.import.if.netlinx
        3: constant.numeric.preprocessor.netlinx
      push:
        - match: ^\s*(#\s*(endif)\b)
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.if.netlinx
            3: constant.numeric.preprocessor.netlinx
          pop: true
        - match: ^\s*(#\s*(else)\b).*
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.else.netlinx
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.in-block
            - match: (?=^\s*#\s*endif\b.*$)
              captures:
                1: meta.preprocessor.netlinx
                2: keyword.control.import.else.netlinx
              pop: true
            - include: disabled
            - include: pragma-mark
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b.*$)
              pop: true
            - include: block_innards
  preprocessor-rule-other:
    - match: ^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))
      captures:
        1: meta.preprocessor.netlinx
        2: keyword.control.import.netlinx
      push:
        - match: ^\s*(#\s*(endif)\b).*$
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.netlinx
          pop: true
        - include: $top_level_main
  preprocessor-rule-other-block:
    - match: ^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))
      captures:
        1: meta.preprocessor.netlinx
        2: keyword.control.import.netlinx
      push:
        - match: ^\s*(#\s*(endif)\b).*$
          captures:
            1: meta.preprocessor.netlinx
            2: keyword.control.import.netlinx
          pop: true
        - include: block_innards
  string_placeholder:
    - match: |-
        (?x)%
        	(\d+\$)?                             # field (argument #)
        	[#0\- +']*                           # flags
        	[,;:_]?                              # separator character (AltiVec)
        	((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
        	(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
        	(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
        	[diouxXDOUeEfFgGaACcSspn%]           # conversion type
      scope: constant.other.placeholder.netlinx
    - match: "%"
      scope: invalid.illegal.placeholder.netlinx
