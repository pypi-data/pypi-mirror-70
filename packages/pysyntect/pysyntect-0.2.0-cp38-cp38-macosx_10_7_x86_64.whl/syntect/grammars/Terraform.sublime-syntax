%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Terraform
file_extensions:
  - tf
  - tfvars
  - hcl
scope: source.terraform
contexts:
  main:
    - include: comments
    - include: block
    - include: expressions
  attribute_access:
    - match: \.
      comment: Attribute Access - "." Identifier
      captures:
        0: keyword.operator.accessor.terraform
      push:
        - match: '(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)|(\*)|(\d+)'
          captures:
            1: variable.other.member.terraform
            2: keyword.operator.splat.terraform
            3: constant.numeric.integer.terraform
          pop: true
  block:
    - match: '(\b(resource|provider|variable|output|locals|module|data|terraform)\b|(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b))(?=[\s\"\-[:word:]]*(\{))'
      comment: Blocks
      captures:
        2: storage.type.terraform
        3: entity.name.type.terraform
      push:
        - meta_scope: meta.type.terraform
        - match: '(?=\{)'
          pop: true
        - match: \"
          comment: String literal label
          captures:
            0: punctuation.definition.string.begin.terraform
          push:
            - meta_scope: string.quoted.double.terraform
            - match: \"
              captures:
                0: punctuation.definition.string.end.terraform
              pop: true
        - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
          comment: Identifer label
          scope: entity.name.label.terraform
  block_comments:
    - match: /\*
      comment: Block comments
      captures:
        0: punctuation.definition.comment.terraform
      push:
        - meta_scope: comment.block.terraform
        - match: \*/
          captures:
            0: punctuation.definition.comment.terraform
          pop: true
  brackets:
    - match: '\['
      comment: Tuples & subscript notation
      captures:
        0: punctuation.section.brackets.begin.terraform
      push:
        - match: '(\*)?\]'
          captures:
            0: punctuation.section.brackets.end.terraform
            1: keyword.operator.splat.terraform
          pop: true
        - include: comma
        - include: comments
        - include: expressions
        - include: tuple_for_expression
  comma:
    - match: \,
      comment: Commas - used in certain expressions
      scope: punctuation.separator.terraform
  comments:
    - include: inline_comments
    - include: block_comments
  expressions:
    - include: literal_values
    - include: operators
    - include: brackets
    - include: objects
    - include: attribute_access
    - include: functions
    - include: parens
  functions:
    - match: '((abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)|\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b))(\()'
      comment: Functions calls- Terraform builtins and unknown
      captures:
        2: support.function.builtin.terraform
        3: variable.function.terraform
        4: punctuation.section.parens.begin.terraform
      push:
        - meta_scope: meta.function-call.terraform
        - match: \)
          captures:
            0: punctuation.section.parens.end.terraform
          pop: true
        - include: comments
        - include: expressions
        - include: comma
  heredoc:
    - match: '(\<\<\-?)\s*(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)\s*$'
      comment: Heredocs
      captures:
        1: keyword.operator.heredoc.terraform
        2: keyword.control.heredoc.terraform
      push:
        - meta_scope: string.unquoted.heredoc.terraform
        - match: ^\s*\2\s*$
          captures:
            0: keyword.control.heredoc.terraform
          pop: true
        - include: string_interpolation
  imports:
    - match: \s*(terraform)\s*(import)\s*
      comment: Terraform imports
      captures:
        1: support.constant.terraform
        2: keyword.control.import.terraform
      push:
        - match: $\n?
          pop: true
        - include: string_literals
        - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
          comment: Identifier label
          scope: entity.name.label.terraform
        - include: numeric_literals
        - include: attribute_access
  inline_comments:
    - match: "#|//"
      comment: Inline comments
      captures:
        0: punctuation.definition.comment.terraform
      push:
        - meta_scope: comment.line.terraform
        - match: |-
            $
            ?
          pop: true
  language_constants:
    - match: \b(true|false|null)\b
      comment: Language Constants
      scope: constant.language.terraform
  literal_values:
    - include: numeric_literals
    - include: language_constants
    - include: string_literals
    - include: heredoc
    - include: type_keywords
    - include: named_value_references
  named_value_references:
    - match: \b(var|local|module|data|path|terraform)\b
      comment: Terraform built-in variables
      scope: support.constant.terraform
  numeric_literals:
    - match: '\b\d+(([Ee][+-]?))\d+\b'
      comment: Integer, no fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.exponent.terraform
    - match: '\b\d+(\.)\d+(?:(([Ee][+-]?))\d+)?\b'
      comment: Integer, fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.decimal.terraform
        2: punctuation.separator.exponent.terraform
    - match: \b\d+\b
      comment: Integers
      scope: constant.numeric.integer.terraform
  object_for_expression:
    - match: \bfor\b
      comment: Object for-expression
      captures:
        0: keyword.control.terraform
      push:
        - match: '(?=\})'
          pop: true
        - match: \=\>
          scope: storage.type.function.terraform
        - match: \bin\b
          scope: keyword.operator.word.terraform
        - match: \bif\b
          scope: keyword.control.conditional.terraform
        - match: '\:'
          scope: keyword.operator.terraform
        - include: expressions
        - include: comments
        - include: comma
        - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
          comment: Local Identifiers
          scope: variable.other.readwrite.terraform
  object_key_values:
    - include: comments
    - include: expressions
  objects:
    - match: '\{'
      comment: Map collection values
      captures:
        0: punctuation.section.braces.begin.terraform
      push:
        - meta_scope: meta.braces.terraform
        - match: '\}'
          captures:
            0: punctuation.section.braces.end.terraform
          pop: true
        - include: object_for_expression
        - include: comments
        - match: '\s*(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)\s*(\=)\s*'
          comment: Literal, named object key
          captures:
            1: meta.mapping.key.terraform string.unquoted.terraform
            2: keyword.operator.terraform
          push:
            - match: '((\,)|($\n?)|(?=\}))'
              captures:
                1: punctuation.separator.terraform
                3: punctuation.section.braces.end.terraform
              pop: true
            - include: object_key_values
        - match: ((\").*(\"))\s*(\=)\s*
          comment: String object key
          captures:
            1: meta.mapping.key.terraform string.quoted.double.terraform
            2: punctuation.definition.string.begin.terraform
            3: punctuation.definition.string.end.terraform
            4: keyword.operator.terraform
          push:
            - match: '((\,)|($\n?)|(?=\}))'
              captures:
                1: punctuation.separator.terraform
                3: punctuation.section.braces.end.terraform
              pop: true
            - include: object_key_values
        - match: \(
          comment: Begin computed object key
          captures:
            0: punctuation.section.parens.begin.terraform
          push:
            - meta_scope: meta.mapping.key.terraform
            - match: (\))\s*(\=)\s*
              captures:
                1: punctuation.section.parens.end.terraform
                2: keyword.operator.terraform
              pop: true
            - include: expressions
  operators:
    - match: \>\=
      scope: keyword.operator.terraform
    - match: \<\=
      scope: keyword.operator.terraform
    - match: \=\=
      scope: keyword.operator.terraform
    - match: \!\=
      scope: keyword.operator.terraform
    - match: \+
      scope: keyword.operator.arithmetic.terraform
    - match: \-
      scope: keyword.operator.arithmetic.terraform
    - match: \*
      scope: keyword.operator.arithmetic.terraform
    - match: \/
      scope: keyword.operator.arithmetic.terraform
    - match: \%
      scope: keyword.operator.arithmetic.terraform
    - match: \&\&
      scope: keyword.operator.logical.terraform
    - match: \|\|
      scope: keyword.operator.logical.terraform
    - match: \!
      scope: keyword.operator.logical.terraform
    - match: \>
      scope: keyword.operator.terraform
    - match: \<
      scope: keyword.operator.terraform
    - match: \?
      scope: keyword.operator.terraform
    - match: \.\.\.
      scope: keyword.operator.terraform
    - match: '\:'
      scope: keyword.operator.terraform
  parens:
    - match: \(
      comment: Parens - matched *after* function syntax
      captures:
        0: punctuation.section.parens.begin.terraform
      push:
        - match: \)
          captures:
            0: punctuation.section.parens.end.terraform
          pop: true
        - include: expressions
        - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
          comment: Local Identifiers
          scope: variable.other.readwrite.terraform
  string_interpolation:
    - match: '(\$|\%)\{'
      comment: String interpolation
      captures:
        0: keyword.other.interpolation.begin.terraform
      push:
        - meta_scope: meta.interpolation.terraform
        - match: '\}'
          captures:
            0: keyword.other.interpolation.end.terraform
          pop: true
        - match: \~\s
          comment: Trim left whitespace
          scope: keyword.operator.template.left.trim.terraform
        - match: \s\~
          comment: Trim right whitespace
          scope: keyword.operator.template.right.trim.terraform
        - match: \b(if|else|endif|for|in|endfor)\b
          comment: if/else/endif and for/in/endfor directives
          scope: keyword.control.terraform
        - include: expressions
  string_literals:
    - match: '"'
      comment: Strings
      captures:
        0: punctuation.definition.string.begin.terraform
      push:
        - meta_scope: string.quoted.double.terraform
        - match: '"'
          captures:
            0: punctuation.definition.string.end.terraform
          pop: true
        - include: string_interpolation
        - match: '\\[nrt"\\]|\\u(\h{8}|\h{4})'
          comment: Character Escapes
          scope: constant.character.escape.terraform
  top_level_attribute_definition:
    - match: '(\()?(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)(\))?\s*(\=[^\=|\>])\s*'
      comment: Attribute Definition - Identifier "=" Expression Newline
      scope: variable.declaration.terraform
      captures:
        1: punctuation.section.parens.begin.terraform
        2: variable.other.readwrite.terraform
        3: punctuation.section.parens.end.terraform
        4: keyword.operator.assignment.terraform
  tuple_for_expression:
    - match: \bfor\b
      comment: Tuple for-expression
      captures:
        0: keyword.control.terraform
      push:
        - match: '(?=\])'
          pop: true
        - match: \bin\b
          scope: keyword.operator.word.terraform
        - match: \bif\b
          scope: keyword.control.conditional.terraform
        - match: '\:'
          scope: keyword.operator.terraform
        - include: expressions
        - include: comments
        - include: comma
        - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
          comment: Local Identifiers
          scope: variable.other.readwrite.terraform
  type_keywords:
    - match: \b(any|string|number|bool)\b
      comment: Type keywords known to Terraform.
      scope: storage.type.terraform
