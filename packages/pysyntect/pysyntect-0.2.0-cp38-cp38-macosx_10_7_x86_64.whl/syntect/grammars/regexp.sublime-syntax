%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Regular Expression
file_extensions:
  - regexp
  - regex
scope: source.regexp
contexts:
  main:
    - include: comment
    - include: variable
    - include: anchor
    - include: escape
    - include: wildcard
    - include: alternation
    - include: quantifier
    - include: assertion
    - include: conditional
    - include: group
    - include: class
  comment:
    - match: '\(\?#'
      push:
        - meta_scope: comment.block.regexp
        - match: \)
          pop: true
        - match: \\.
          scope: constant.character.escape.backslash.regexp
  alternation:
    - match: \|
      scope: keyword.operator.logical.or.regexp
  anchor:
    - match: \^
      scope: keyword.control.anchor.line-start.regexp
    - match: \$
      scope: keyword.control.anchor.line-end.regexp
    - match: \\A
      scope: keyword.control.anchor.string-start.regexp
    - match: \\Z
      scope: keyword.control.anchor.string-end-line.regexp
    - match: \\z
      scope: keyword.control.anchor.string-end.regexp
    - match: \\G
      scope: keyword.control.anchor.search-start.regexp
    - match: '(?:(\\b)|(\\B))(\{)(\w+)(})'
      scope: meta.unicode-boundary.regexp
      captures:
        1: keyword.control.anchor.word-boundary.regexp
        2: keyword.control.anchor.non-word-boundary.regexp
        3: punctuation.definition.unicode-boundary.bracket.curly.begin.regexp
        4: entity.property.name.regexp
        5: punctuation.definition.unicode-boundary.bracket.curly.end.regexp
    - match: \\b
      scope: keyword.control.anchor.word-boundary.regexp
    - match: \\B
      scope: keyword.control.anchor.non-word-boundary.regexp
  assertion:
    - match: \(\?=
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.positive.look-ahead.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
    - match: \(\?!
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.negative.look-ahead.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
    - match: \(\?<!
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.negative.look-behind.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
    - match: \(\?<=
      captures:
        0: punctuation.definition.assertion.begin.regexp
      push:
        - meta_scope: meta.assertion.positive.look-behind.regexp
        - match: \)
          captures:
            0: punctuation.definition.assertion.end.regexp
          pop: true
        - include: main
  calloutBrackets:
    - match: "{"
      captures:
        0: punctuation.definition.bracket.curly.begin.regexp
      push:
        - match: "}"
          captures:
            0: punctuation.definition.bracket.curly.end.regexp
          pop: true
        - include: calloutBrackets
        - include: main
  class:
    - match: '\['
      captures:
        0: punctuation.definition.character-class.set.begin.regexp
      push:
        - meta_scope: meta.character-class.set.regexp
        - match: '\]'
          captures:
            0: punctuation.definition.character-class.set.end.regexp
          pop: true
        - include: classInnards
  classInnards:
    - match: \G\^
      scope: keyword.operator.logical.not.regexp
    - match: \\b
      scope: constant.character.escape.backspace.regexp
    - match: '(&&)(\[)'
      captures:
        1: keyword.operator.logical.intersect.regexp
        2: punctuation.definition.character-class.set.begin.regexp
      push:
        - match: '\]'
          captures:
            0: punctuation.definition.character-class.set.end.regexp
          pop: true
        - include: classInnards
    - match: "&&"
      scope: keyword.operator.logical.intersect.regexp
    - match: '(?<!\G|\\[dwshDWSHN])-(?!\])'
      scope: punctuation.separator.range.dash.regexp
    - match: '(\[:)(\^?)(\w+)(:\])'
      scope: constant.language.posix.$2-char.character-class.regexp
      captures:
        1: punctuation.definition.character-class.set.begin.regexp
        2: keyword.operator.logical.not.regexp
        3: support.constant.posix-class.regexp
        4: punctuation.definition.character-class.set.end.regexp
    - match: '\\\[|\\\]'
      scope: constant.character.escape.backslash.regexp
    - match: '\^|\$|\(|\)|\['
    - include: escape
    - include: main
    - match: '[^\]]'
      scope: constant.single.character.character-class.regexp
  conditional:
    - match: (\()(\?)(?=\()
      captures:
        1: punctuation.section.condition.begin.regexp
        2: keyword.control.flow.regexp
      push:
        - meta_scope: meta.conditional.regexp
        - match: \)
          captures:
            0: punctuation.section.condition.end.regexp
          pop: true
        - match: \|
          scope: punctuation.separator.condition.if-else.regexp
        - include: assertion
        - match: \G\(
          captures:
            0: punctuation.section.condition.begin.regexp
          push:
            - meta_scope: meta.condition.function-call.regexp
            - match: \)
              captures:
                0: punctuation.section.condition.end.regexp
              pop: true
            - match: \GDEFINE
              scope: storage.type.function.subpattern.regexp
            - match: \Gassert
              scope: keyword.other.assertion.regexp
            - match: '\G(?:(<)([^>]+)(>)|('')([^>]+)(''))'
              captures:
                1: punctuation.definition.group-reference.bracket.angle.begin.regexp
                2: entity.group.name.regexp
                3: punctuation.definition.group-reference.bracket.angle.end.regexp
                4: punctuation.definition.group-reference.quote.single.begin.regexp
                5: entity.group.name.regexp
                6: punctuation.definition.group-reference.quote.single.end.regexp
            - match: \G(R(&))(\w+)
              captures:
                1: keyword.other.recursion.specific.regexp
                2: punctuation.definition.reference.regexp
                3: entity.group.name.regexp
            - match: \GR\d+
              scope: keyword.other.recursion.specific-group.regexp
            - match: \GR
              scope: keyword.other.recursion.overall.regexp
            - match: \G\d+
              scope: keyword.other.reference.absolute.regexp
            - match: '\G[-+]\d+'
              scope: keyword.other.reference.relative.regexp
            - match: \G\w+
              scope: entity.group.name.regexp
        - include: main
  escape:
    - match: \\d
      scope: constant.character.escape.decimal.regexp
    - match: \\s
      scope: constant.character.escape.whitespace.regexp
    - match: \\w
      scope: constant.character.escape.word-char.regexp
    - match: \\n
      scope: constant.character.escape.newline.regexp
    - match: \\t
      scope: constant.character.escape.tab.regexp
    - match: \\r
      scope: constant.character.escape.return.regexp
    - match: \\D
      scope: constant.character.escape.non-decimal.regexp
    - match: \\S
      scope: constant.character.escape.non-whitespace.regexp
    - match: \\W
      scope: constant.character.escape.non-word-char.regexp
    - match: \\a
      scope: constant.character.escape.alarm.regexp
    - match: \\e
      scope: constant.character.escape.escape-char.regexp
    - match: \\f
      scope: constant.character.escape.form-feed.regexp
    - match: \\v
      scope: constant.character.escape.vertical-tab.regexp
    - match: '\\x[0-9A-Fa-f]{2}'
      scope: constant.character.escape.numeric.regexp
    - match: '(\\x)(\{)([0-9A-Fa-f]{2,})(\})'
      scope: meta.character-escape.hex.regexp
      captures:
        1: keyword.operator.unicode-escape.hex.regexp
        2: punctuation.definition.unicode-escape.bracket.curly.begin.regexp
        3: constant.numeric.codepoint.hex.regexp
        4: punctuation.definition.unicode-escape.bracket.curly.end.regexp
    - match: '(\\o)(\{)(\d{2,})(\})'
      scope: meta.character-escape.octal.regexp
      captures:
        1: keyword.operator.unicode-escape.octal.regexp
        2: punctuation.definition.unicode-escape.bracket.curly.begin.regexp
        3: constant.numeric.codepoint.octal.regexp
        4: punctuation.definition.unicode-escape.bracket.curly.end.regexp
    - match: '(\\[Pp])(\{)(\^?)([^{}]+)(\})'
      scope: meta.unicode-property.regexp
      captures:
        1: keyword.operator.unicode-property.regexp
        2: punctuation.definition.unicode-escape.bracket.curly.begin.regexp
        3: keyword.operator.logical.not.regexp
        4: entity.property.name.regexp
        5: punctuation.definition.unicode-escape.bracket.curly.end.regexp
    - match: '(\\[Pp])(\w)'
      scope: meta.unicode-property.single-letter.regexp
      captures:
        1: keyword.operator.unicode-property.regexp
        2: entity.property.name.regexp
    - match: '(\\[kg])(<)'
      captures:
        1: keyword.operator.group-reference.regexp
        2: punctuation.definition.group-reference.bracket.angle.begin.regexp
      push:
        - meta_scope: meta.group-reference.regexp
        - meta_content_scope: entity.group.name.regexp
        - match: ">"
          captures:
            0: punctuation.definition.group-reference.bracket.angle.end.regexp
          pop: true
        - include: groupRefInnards
    - match: '(\\[kg])('')'
      captures:
        1: keyword.operator.group-reference.regexp
        2: punctuation.definition.group-reference.quote.single.begin.regexp
      push:
        - meta_scope: meta.group-reference.regexp
        - meta_content_scope: entity.group.name.regexp
        - match: "'"
          captures:
            0: punctuation.definition.group-reference.quote.single.end.regexp
          pop: true
        - include: groupRefInnards
    - match: '(\\[kg])({)'
      captures:
        1: keyword.operator.group-reference.regexp
        2: punctuation.definition.group-reference.bracket.curly.begin.regexp
      push:
        - meta_scope: meta.group-reference.regexp
        - meta_content_scope: entity.group.name.regexp
        - match: "}"
          captures:
            0: punctuation.definition.group-reference.bracket.curly.end.regexp
          pop: true
    - match: (\\g)(\d)
      scope: meta.group-reference.single-letter.regexp
      captures:
        1: keyword.operator.group-reference.regexp
        2: entity.group.name.regexp
    - match: '(\\N)(\{)([^{}]+)(\})'
      scope: meta.named-char.regexp
      captures:
        1: keyword.operator.named-char.regexp
        2: punctuation.definition.unicode-escape.bracket.curly.begin.regexp
        3: entity.character.name.regexp
        4: punctuation.definition.unicode-escape.bracket.curly.end.regexp
    - match: '\\(?:\d{3}|0\d)'
      scope: constant.character.escape.octal.numeric.regexp
    - match: \\0
      scope: constant.character.escape.null-byte.numeric.regexp
    - match: '\\(\d{1,2})'
      scope: keyword.other.back-reference.$1.regexp
    - match: '\\(?:c|C-)[?-_]'
      scope: constant.character.escape.control-char.regexp
    - match: \\h
      scope: constant.character.escape.hex-digit.regexp
    - match: \\H
      scope: constant.character.escape.non-hex-digit.regexp
    - match: \\E
      scope: keyword.control.end-mode.regexp
    - match: \\Q
      scope: keyword.control.quote-mode.regexp
    - match: \\F
      scope: keyword.control.foldcase-mode.regexp
    - match: \\L
      scope: keyword.control.lowercase-mode.regexp
    - match: \\U
      scope: keyword.control.titlecase-mode.regexp
    - match: \\K
      scope: keyword.control.keep-out.regexp
    - match: \\l
      scope: constant.character.escape.lowercase-next.regexp
    - match: \\u
      scope: constant.character.escape.titlecase-next.regexp
    - match: \\N
      scope: constant.character.escape.non-newline.regexp
    - match: \\X
      scope: constant.character.escape.extended-grapheme.regexp
    - match: \\R
      scope: constant.character.escape.linebreak-grapheme.regexp
    - match: \\V
      scope: constant.character.escape.non-vertical-whitespace.regexp
    - match: '\\M-\\C-[?-_]'
      scope: constant.character.escape.meta-control.regexp
    - match: \\M-.
      scope: constant.character.escape.meta-char.regexp
    - match: \\O
      scope: constant.character.escape.any-char.regexp
    - match: '\\[yY]'
      scope: keyword.control.anchor.text-boundary.regexp
    - match: \\.
      scope: constant.character.escape.misc.regexp
  fixedGroups:
    - match: '(\()(\?[R0])(\))'
      scope: meta.group-reference.reset.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.other.back-reference.regexp
        3: punctuation.definition.group.end.regexp
    - match: '(\(\?)((?:y{[\w]+}|[-A-Za-z^])*)(\))'
      scope: meta.group.scoped-modifiers.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        3: punctuation.definition.group.end.regexp
    - match: '(\(\*)(\w*)(?:([:=])([^\s()]*))?(\))'
      scope: meta.control-verb.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.verb.regexp
        3: punctuation.separator.key-value.regexp
        4: variable.parameter.control-verb.regexp
        5: punctuation.definition.group.begin.regexp
    - match: '(\()(\?(?:&|P[>=]))(\w+)(\))'
      scope: meta.group-reference.named.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.other.back-reference.regexp
        3: entity.group.name.regexp
        4: punctuation.definition.group.begin.regexp
    - match: '(\()(\?[-+]\d+)(\))'
      scope: meta.group-reference.relative.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.other.back-reference.regexp
        3: punctuation.definition.group.end.regexp
    - match: (\()(\?C\d*)(\))
      scope: meta.callout.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.callout.regexp
        3: punctuation.definition.group.end.regexp
    - match: |-
        (?x)
        (\(\*)
        ([_A-Za-z][_A-Za-z0-9]*)              # Name
        ((\[)([_A-Za-z][_A-Za-z0-9]*)(\]))  # [tag]
        (\))
      scope: meta.callout.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: entity.name.callout.regexp
        3: entity.name.tag.callout-tag.regexp
        4: punctuation.definition.callout-tag.begin.regexp
        5: callout-tag.constant.other.regexp
        6: punctuation.definition.callout-tag.end.regexp
        7: punctuation.definition.group.end.regexp
    - match: (\()(\?~)(\|)(\))
      scope: meta.absent-function.clear-range.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.flow.regexp
        3: punctuation.separator.delimiter.pipe.regexp
        4: punctuation.definition.group.end.regexp
    - match: '(\()(\?~)(\|)([^|\)]*)(\))'
      scope: meta.absent-stopper.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.flow.regexp
        3: punctuation.separator.delimiter.pipe.regexp
        4: variable.parameter.absent-function.regexp
        5: punctuation.definition.group.end.regexp
    - match: |-
        (?x)
        (\()
        (\?~)
        (\|) ([^|\)]*)
        (\|) ([^|\)]*)
        (\))
      scope: meta.absent-expression.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.flow.regexp
        3: punctuation.separator.delimiter.pipe.regexp
        4: variable.parameter.absent-function.regexp
        5: punctuation.separator.delimiter.pipe.regexp
        6: variable.parameter.absent-function.regexp
        7: punctuation.definition.group.end.regexp
    - match: '(\()(\?~)([^|\)]*)(\))'
      scope: meta.absent-repeater.regexp
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.flow.regexp
        3: variable.parameter.absent-function.regexp
        4: punctuation.definition.group.end.regexp
  group:
    - include: fixedGroups
    - match: '\(\?(?=P?[<''])'
      captures:
        0: punctuation.definition.group.begin.regexp
      push:
        - meta_scope: meta.group.named.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - match: \G(P?)(<)
          captures:
            1: storage.type.function.named-group.regexp
            2: punctuation.definition.named-group.bracket.angle.begin.regexp
          push:
            - meta_content_scope: entity.group.name.regexp
            - match: ">"
              captures:
                0: punctuation.definition.named-group.bracket.angle.end.regexp
              pop: true
        - match: \G'
          captures:
            0: punctuation.definition.named-group.quote.single.begin.regexp
          push:
            - meta_content_scope: entity.group.name.regexp
            - match: "'"
              captures:
                0: punctuation.definition.named-group.quote.single.end.regexp
              pop: true
        - include: main
    - match: '(\(\?)((?:y{[\w]+}|[-A-Za-z^])*)(:)'
      captures:
        1: punctuation.definition.group.begin.regexp
        3: punctuation.separator.colon.regexp
      push:
        - meta_scope: meta.group.non-capturing.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
    - match: \(\?>
      captures:
        0: punctuation.definition.group.begin.regexp
      push:
        - meta_scope: meta.group.atomic.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
    - match: (\(\*)((?:atomic_)?script_run|a?sr)(:)
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.verb.regexp
        3: punctuation.separator.colon.regexp
      push:
        - meta_scope: meta.group.script-run.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
    - match: '(\(\?{1,2})({)'
      captures:
        1: punctuation.definition.group.begin.regexp
        2: punctuation.definition.bracket.curly.begin.regexp
      push:
        - meta_scope: meta.group.callout.contents.regexp
        - match: |-
            (?x)
            (})                                    # Last closing bracket
            ((\[)([_A-Za-z][_A-Za-z0-9]*)(\]))?  # [tag]
            (X|<|>)?                               # Callout direction
            (?:[^\)]*)                            # Silently skip unexpected characters
            (\))                                  # Closing bracket
          captures:
            1: punctuation.definition.bracket.curly.end.regexp
            2: entity.name.tag.callout-tag.regexp
            3: punctuation.definition.callout-tag.begin.regexp
            4: callout-tag.constant.other.regexp
            5: punctuation.definition.callout-tag.end.regexp
            6: constant.language.callout-direction.regexp
            7: punctuation.definition.group.end.regexp
          pop: true
        - include: calloutBrackets
        - include: main
    - match: |-
        (?x)
        (\(\*)
        ([_A-Za-z][_A-Za-z0-9]*)               # Name
        ((\[)([_A-Za-z][_A-Za-z0-9]*)(\]))?  # [tag]
        ({)
      captures:
        1: punctuation.definition.group.begin.regexp
        2: entity.name.callout.regexp
        3: entity.name.tag.callout-tag.regexp
        4: punctuation.definition.callout-tag.begin.regexp
        5: callout-tag.constant.other.regexp
        6: punctuation.definition.callout-tag.end.regexp
        7: punctuation.definition.arguments.begin.regexp
      push:
        - meta_scope: meta.group.callout.regexp
        - match: |-
            (?x)
            (})
            (?:[^\)]*)
            (?:(\))|(?=$))
          captures:
            1: punctuation.definition.arguments.end.regexp
            2: punctuation.definition.group.end.regexp
          pop: true
        - include: main
        - match: '[-\w]+'
          scope: variable.parameter.argument.regexp
    - match: (\()(\?~)(\|)
      captures:
        1: punctuation.definition.group.begin.regexp
        2: keyword.control.flow.regexp
        3: punctuation.separator.delimiter.pipe.regexp
      push:
        - meta_scope: meta.absent-function.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - match: \|
          scope: punctuation.separator.delimiter.pipe.regexp
        - match: '[-\w]+'
          scope: variable.parameter.argument.regexp
        - include: main
    - match: \(
      captures:
        0: punctuation.definition.group.begin.regexp
      push:
        - meta_scope: meta.group.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.regexp
          pop: true
        - include: main
  groupRefInnards:
    - match: \-(?=\d)
      scope: keyword.operator.arithmetic.minus.regexp
    - match: \+(?=\d)
      scope: keyword.operator.arithmetic.plus.regexp
  propInnards:
    - match: "="
      scope: keyword.operator.comparison.regexp
    - match: True|False
      scope: "constant.language.boolean.${0:/downcase}.regexp"
  quantifier:
    - match: "[*+?]"
      scope: keyword.operator.quantifier.regexp
    - match: '(\{)(?:(\d+)(,?)(\d*)|(,)(\d+))(\})'
      scope: keyword.operator.quantifier.specific.regexp
      captures:
        1: punctuation.definition.quantifier.bracket.curly.begin.regexp
        2: keyword.operator.quantifier.min.regexp
        3: punctuation.delimiter.comma.regexp
        4: keyword.operator.quantifier.max.regexp
        5: punctuation.delimiter.comma.regexp
        6: keyword.operator.quantifier.max.regexp
        7: punctuation.definition.quantifier.bracket.curly.end.regexp
  scopedModifiers:
    - match: '(y)({)(\w+)(})'
      scope: meta.text-segment-mode.regexp
      captures:
        1: storage.modifier.flag.y.regexp
        2: punctuation.definition.option.bracket.curly.begin.regexp
        3: variable.parameter.option-mode.regexp
        4: punctuation.definition.option.bracket.curly.end.regexp
    - match: (?:(?<=\?)|\G|^)\^
      scope: keyword.operator.modifier.reset.regexp
    - match: "-"
      scope: keyword.operator.modifier.negate.regexp
    - match: "[A-Za-z]"
      scope: storage.modifier.flag.$0.regexp
  variable:
    - match: '(?<![^\\]\\|^\\)\$(?!\d|-)[-\w]+'
      scope: variable.other.regexp
      captures:
        1: punctuation.definition.variable.regexp
    - match: '(?<![^\\]\\|^\\)(\$\{)\s*(?!\d|-)[-\w]+\s*(\})'
      scope: variable.other.bracket.regexp
      captures:
        1: punctuation.definition.variable.begin.regexp
        2: punctuation.definition.variable.end.regexp
  wildcard:
    - match: \.
      scope: constant.character.wildcard.dot.match.any.regexp
