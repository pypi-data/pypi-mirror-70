%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Opal
file_extensions:
  - impl
  - sign
scope: source.opal
contexts:
  main:
    - match: '(--)([^\s])?.*$'
      scope: comment.line.double-dash.opal
      captures:
        1: punctuation.definition.comment.opal
        2: invalid.illegal.comment.missing-whitespace.opal
    - match: (/\*)
      captures:
        1: punctuation.definition.comment.block.opal
      push:
        - meta_scope: comment.block.opal
        - match: (\*/)
          captures:
            1: punctuation.definition.comment.block.opal
          pop: true
    - match: '^\s*(SIGNATURE|IMPLEMENTATION)\s+([^A-Z])?(\w+)\s*$'
      scope: meta.signature-implementation.opal
      captures:
        1: keyword.meta.signature-implementation.opal
        2: invalid.illegal.signature-implementation.first-letter-not-uppercase.opal
        3: entity.name.section.module.opal
    - match: '^\s*(SIGNATURE|IMPLEMENTATION)\s+([^A-Z])?(\w+)\s*(\[)'
      captures:
        1: keyword.meta.signature-implementation.opal
        2: invalid.illegal.signature-implementation.first-letter-not-uppercase.opal
        3: entity.name.section.module.opal
        4: punctuation.definition.inheritance.begin.opal
      push:
        - meta_scope: meta.signature-implementation.opal
        - match: '(\])'
          captures:
            1: punctuation.definition.inheritance.end.opal
          pop: true
        - match: \,
          scope: punctuation.separator.inheritance.opal
        - match: '(?:[^\,\]]+)'
          scope: entity.other.inherited-class.opal
    - match: (^\s*IMPORT|\b(ONLY|COMPLETELY))\b
      scope: keyword.control.import.opal
    - match: '^\s*(FUN)\s+([^\"():]+)\s*(\:)'
      captures:
        1: storage.type.function.opal
        2: entity.name.function.opal
        3: punctuation.definition.parameters.begin.opal
      push:
        - meta_scope: meta.function.opal
        - meta_content_scope: meta.function.parameters.opal
        - match: ($)|(?=\-\-)|(?=/\*)
          pop: true
        - match: \*\*|\->
          scope: punctuation.seperator.parameters.opal
        - match: \b(\w+)\b
          scope: storage.type.opal
    - match: '^\s*(DEF)\s+([^\s():]+)\s+([^\s():]+)\s+([^\s():]+)\s*(==)'
      scope: meta.function.opal
      captures:
        1: storage.type.function.opal
        2: variable.parameter.opal
        3: entity.name.function.opal
        4: variable.parameter.opal
        5: punctuation.section.function.begin.opal
    - match: '^\s*(DEF)\s+([^\s():]+)\s*(?:(\())?'
      captures:
        1: storage.type.function.opal
        2: entity.name.function.opal
        3: punctuation.definition.parameters.begin.opal
      push:
        - meta_scope: meta.function.opal
        - match: (?:(\)))?\s*(==)
          captures:
            1: punctuation.definition.parameters.end.opal
            2: punctuation.section.function.begin.opal
          pop: true
        - match: \,
          scope: punctuation.seperator.parameters.opal
        - match: \w*
          scope: variable.parameter.opal
    - match: ^\s*(SORT)
      captures:
        1: storage.type.sort.opal
      push:
        - meta_scope: meta.type.sort.opal
        - match: $
          pop: true
        - match: '\b[^\s():]+\b'
          scope: entity.name.function.type.sort.opal
    - match: '^\s*(DATA|TYPE)\s+([^\s():]+)'
      captures:
        1: storage.type.data.opal
        2: entity.name.function.type.data.opal
      push:
        - meta_scope: meta.type.data.opal
        - match: (==)
          captures:
            1: punctuation.section.type.begin.opal
          pop: true
    - match: (\w+)\s*\(\s*(\w+)\s*(:)\s*(\w+)
      captures:
        1: entity.name.function.constructor.opal
        2: variable.parameter.opal
        3: punctuation.seperator.type.opal
        4: storage.type.opal
      push:
        - meta_scope: meta.type.constructors.opal
        - match: \)
          pop: true
        - match: \,
          scope: punctuation.seperator.parameters.opal
        - match: '\[(\w*)\]'
          captures:
            1: storage.type.opal
        - match: (\w+)\s*(:)\s*(\w+)
          captures:
            1: variable.parameter.opal
            2: punctuation.seperator.type.opal
            3: storage.type.opal
    - include: evaluable
    - match: \b(AcceleratorC|AcceleratorF|AEntry|AEntryNE|AnonPair|AnonQuadruple|AnonTriple|Array|ArrayConv|ArrayFilter|ArrayFold|ArrayMap|ArrayReduce|Arrays|Bag|BagConv|BagFilter|BagFold|BagMap|BagReduce|Bags|BasicIO|Basics|BinFile|BinStream|Bitset|BitsetConv|BitsetFilter|BitsetFold|BitsetMap|BitsetReduce|Bool|BoolConv|BSTree|BSTreeCompare|BSTreeConv|BSTreeFilter|BSTreeIndex|BSTreeMap|BSTreeMapEnv|BSTreeReduce|BSTreeZip|BTUnion|BTUnionConv|Char|CharConv|Com|ComAction|ComAgent|ComAgentConv|ComCheck|ComCheckWin|ComCheckWinData|ComChoice|ComCompose|ComConv|Commands|ComMap|ComPairCompose|Compose|ComposePair|ComposePar|ComposeQuadruple|ComposeTriple|ComSemaphor|ComSeqAction|ComSeqMap|ComSeqReduce|ComService|ComServiceConv|ComState|ComStateWith|ComTimeout|ComTripleCompose|Constant|ConstantPair|Control|Curry|DArray|DArrayConv|DArrayFilter|DArrayFold|DArrayMap|DArrayReduce|Denotation|Distributor|Dotfix|Dyn|DynConv|Env|File|FileConv|FileName|FileSystem|FileSystemConv|FileSystemFun|Flip|Fmt|FmtArray|FmtBasicTypes|FmtDebug|FmtMap|FmtOption|FmtPair|FmtSeq|FmtSet|Funct|FunctConv|Greek|Heap|HeapCompare|HeapConv|HeapFilter|HeapIndex|HeapMap|HeapMapEnv|HeapReduce|HeapZip|Identity|IndexingOfTrees|InducedRel|Int|IntConv|ISeq|ISeqConv|ISeqFilter|ISeqIndex|ISeqMap|ISeqMapEnv|ISeqSort|ISeqUnreduce|ISeqZip|Latin1|LineFormat|Map|MapByBST|MapByBSTCompose|MapByBSTConv|MapByBSTFilter|MapByBSTInvert|MapByBSTMap|MapByBSTReduce|MapByOS|MapByOSCompose|MapByOSConv|MapByOSFilter|MapByOSInvert|MapByOSMap|MapByOSReduce|MapCompose|MapConv|MapEntry|MapEntryNE|MapFilter|MapInvert|MapMap|MapNotForUserPurpose|MapReduce|Maps|MaxStrongComp|Nat|NatConv|NatMap|NatMapConv|NatMapFilter|NatMapMap|NatMapNotForUserPurpose|NatMapReduce|NatMaps|NatSets|Option|OptionCompare|OptionConv|OptionMap|OrderingByInjection|OrderingByLess|Pair|PairCompare|PairConv|PairMap|ParserL|ParserLBasic|ParserLCombinator|ParserLCompose|ParserLMap|Predicate|PrintableChar|Process|ProcessArgs|ProcessComInterrupt|ProcessConnect|ProcessConv|ProcessCtrl|ProcessCtrlConv|ProcessCtrlFun|ProcessInterrupt|ProcessMonitor|Quadruple|QuadrupleConv|QuadrupleMap|Random|ReadLine|Real|RealConv|Rel|RelCmp|RelCmpConv|RelCompose|RelConv|RelFilter|RelHomog|RelInvert|RelMap|RelNotForUserPurpose|RelReduce|Seq|SeqCompare|SeqConv|SeqEntry|SeqEntryNE|SeqFilter|SeqFold|SeqIndex|SeqMap|SeqMapEnv|SeqOfSeq|SeqReduce|Seqs|SeqSort|SeqZip|Set|SetByBST|SetByBSTConstr|SetByBSTConv|SetByBSTFilter|SetByBSTFold|SetByBSTMap|SetByBSTMapEnv|SetByBSTOfSetByBST|SetByBSTReduce|SetByPred|SetByPredConstr|SetByPredConv|SetByPredFilter|SetConstr|SetConv|SetEntry|SetEntryNE|SetFilter|SetFold|SetMap|SetMapEnv|SetOfSet|SetReduce|Sets|SetTopSort|Signal|SignalConv|SmallReal|Stream|String|StringConv|StringFilter|StringFold|StringFormat|StringIndex|StringMap|StringMapSeq|StringReduce|Strings|StringScan|Subrel|SubrelConv|Tcl|Time|TimeConv|Tk|Tree|TreeCompare|TreeConv|TreeFilter|TreeIndex|TreeMap|TreeMapEnv|TreeReduce|TreeZip|Triple|TripleConv|TripleMap|Union2|Union2Conv|Union3|Union3Conv|Union4|Union4Conv|UnixFailures|UserAndGroup|UserAndGroupConv|UserAndGroupFun|Void|VoidConv|Wait|WaitConv|WinAppl|WinButton|WinCanvas|WinCanvasEditor|WinConfig|Windows|WinEmitter|WinEvent|WinFontMetrics|WinImage|WinInternal|WinMenu|WinRegulator|WinScrollbar|WinScroller|WinSelector|WinTag|WinTclTk|WinText|WinTextEditor|WinView|WinWindow)\b
      scope: support.type.opal
  evaluable:
    - match: (\\\\)
      captures:
        1: storage.type.function.opal
      push:
        - meta_scope: meta.function.anonymous.opal
        - meta_content_scope: meta.definition.parameters.opal
        - match: (\.)
          captures:
            1: punctuation.section.function.begin.opal
          pop: true
        - match: \s*\,\s*
          scope: punctuation.seperator.parameters.opal
        - match: (\w+)\s*(:)\s*(\w+)
          scope: meta.definition.parameter.opal
          captures:
            1: variable.parameter.opal
            2: punctuation.seperator.type.opal
            3: storage.type.opal
        - match: \w+
          scope: variable.parameter.opal
    - match: (\b(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|64|128|256|512|1024|100|1000|10000|100000|1000000)\b)|\"\d+\"!
      scope: constant.numeric.integer.opal
    - match: \b\d+\b
      scope: invalid.illegal.wrong-number.opal
    - match: '\"[+-]?\d*(\.\d*)?(e[+-]?\d+)?\"!'
      scope: constant.numeric.real.opal
    - match: '\"0x[0-9A-Fa-f]+\"!'
      scope: constant.numeric.hexadecimal.opal
    - match: (\")
      captures:
        1: punctuation.definition.string.begin.opal
      push:
        - meta_scope: string.quoted.double.opal
        - match: (\n)|(\")
          captures:
            1: invalid.illegal.unclosed-string.opal
            2: punctuation.definition.string.end.opal
          pop: true
        - match: \\\\
          scope: constant.character.escape.backslash.opal
        - match: \\"
          scope: constant.character.escape.double-quote.opal
        - match: \\a
          scope: constant.character.escape.alarm.opal
        - match: \\b
          scope: constant.character.escape.backspace.opal
        - match: \\f
          scope: constant.character.escape.formfeed.opal
        - match: \\n
          scope: constant.character.escape.newline.opal
        - match: \\r
          scope: constant.character.escape.carriage-return.opal
        - match: \\t
          scope: constant.character.escape.tabulator.opal
        - match: \\v
          scope: constant.character.escape.vertical-tab.opal
        - match: \\\?
          scope: constant.character.escape.questionmark.opal
        - match: \\.
          scope: invalid.illegal.unknown-escape.opal
    - match: \b(map|filter|zip|reduce|sqrt)\b
      scope: support.function.builtin.opal
    - match: <>\?|<>(?!\?)
      scope: support.function.builtin.opal
    - match: \b(IF|THEN|ELSE|OTHERWISE|FI)\b
      scope: keyword.control.opal
    - match: \b(LET|IN|WHERE)\b
      scope: keyword.other.opal
    - match: (<=|>=|<|>|\|=|(?<!=)=(?!=))
      scope: keyword.operator.comparison.opal
    - match: (\+|\-|\*|/|\bdiv\b|\^|\bpow\b|%|\bmod\b)
      scope: keyword.operator.arithmetic.opal
    - match: (\b(and|or|not|)\b)|~
      scope: keyword.operator.logical.opal
    - match: (::)(?!\?)
      scope: keyword.operator.sequence.opal
