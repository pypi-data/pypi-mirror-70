%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Processing
comment: This grammar is based on the Java grammar (https://github.com/textmate/java.tmbundle)
file_extensions:
  - pde
scope: source.processing
contexts:
  main:
    - match: '^\s*(package)\b(?:\s*([^ ;$]+)\s*(;)?)?'
      scope: meta.package.processing
      captures:
        1: keyword.other.package.processing
        2: storage.modifier.package.processing
        3: punctuation.terminator.processing
    - match: '^\s*(import static)\b(?:\s*([^ ;$]+)\s*(;)?)?'
      scope: meta.import.static.processing
      captures:
        1: keyword.other.import.static.processing
        2: storage.modifier.import.processing
        3: punctuation.terminator.processing
    - match: '^\s*(import)\b(?:\s*([^ ;$]+)\s*(;)?)?'
      scope: meta.import.processing
      captures:
        1: keyword.other.import.processing
        2: storage.modifier.import.processing
        3: punctuation.terminator.processing
    - include: class-body
  all-types:
    - include: primitive-arrays
    - include: primitive-types
    - include: object-types
  annotations:
    - match: '(@[^ (]+)(\()'
      captures:
        1: storage.type.annotation.processing
        2: punctuation.definition.annotation-arguments.begin.processing
      push:
        - meta_scope: meta.declaration.annotation.processing
        - match: (\))
          captures:
            1: punctuation.definition.annotation-arguments.end.processing
          pop: true
        - match: (\w*)\s*(=)
          captures:
            1: constant.other.key.processing
            2: keyword.operator.assignment.processing
        - include: code
        - match: ","
          scope: punctuation.seperator.property.processing
    - match: '@\w*'
      scope: storage.type.annotation.processing
  anonymous-classes-and-new:
    - match: \bnew\b
      captures:
        0: keyword.control.new.processing
      push:
        - match: '(?<=\)|\])(?!\s*{)|(?<=})|(?=;)'
          pop: true
        - match: '(\w+)\s*(?=\[)'
          captures:
            1: storage.type.processing
          push:
            - match: '}|(?=\s*(?:;|\)))'
              pop: true
            - match: '\['
              push:
                - match: '\]'
                  pop: true
                - include: code
            - match: "{"
              push:
                - match: "(?=})"
                  pop: true
                - include: code
        - match: (?=\w.*\()
          push:
            - match: (?<=\))
              pop: true
            - include: object-types
            - match: \(
              captures:
                1: storage.type.processing
              push:
                - match: \)
                  pop: true
                - include: code
        - match: "{"
          push:
            - meta_scope: meta.inner-class.processing
            - match: "}"
              pop: true
            - include: class-body
  assertions:
    - match: \b(assert)\s
      captures:
        1: keyword.control.assert.processing
      push:
        - meta_scope: meta.declaration.assertion.processing
        - match: $
          pop: true
        - match: ":"
          scope: keyword.operator.assert.expression-seperator.processing
        - include: code
  class:
    - match: '(?=\w?[\w\s]*(?:class|(?:@)?interface|enum)\s+\w+)'
      push:
        - meta_scope: meta.class.processing
        - match: "}"
          captures:
            0: punctuation.section.class.end.processing
          pop: true
        - include: storage-modifiers
        - include: comments
        - match: (class|(?:@)?interface|enum)\s+(\w+)
          scope: meta.class.identifier.processing
          captures:
            1: storage.modifier.processing
            2: entity.name.type.class.processing
        - match: extends
          captures:
            0: storage.modifier.extends.processing
          push:
            - meta_scope: meta.definition.class.inherited.classes.processing
            - match: "(?={|implements)"
              pop: true
            - include: object-types-inherited
            - include: comments
        - match: (implements)\s
          captures:
            1: storage.modifier.implements.processing
          push:
            - meta_scope: meta.definition.class.implemented.interfaces.processing
            - match: '(?=\s*extends|\{)'
              pop: true
            - include: object-types-inherited
            - include: comments
        - match: "{"
          push:
            - meta_scope: meta.class.body.processing
            - match: "(?=})"
              pop: true
            - include: class-body
  class-body:
    - include: comments
    - include: class
    - include: enums
    - include: methods
    - include: annotations
    - include: storage-modifiers
    - include: code
  code:
    - include: comments
    - include: class
    - match: "{"
      push:
        - match: "}"
          pop: true
        - include: code
    - include: assertions
    - include: parens
    - include: constants-and-special-vars
    - include: anonymous-classes-and-new
    - include: keywords
    - include: storage-modifiers
    - include: strings
    - include: all-types
    - include: processing-methods
    - include: processing-classes
  comments:
    - match: /\*\*/
      scope: comment.block.empty.processing
      captures:
        0: punctuation.definition.comment.processing
    - include: comments-javadoc
    - include: comments-inline
  comments-inline:
    - match: /\*(?!\*)
      captures:
        0: punctuation.definition.comment.processing
      push:
        - meta_scope: comment.block.processing
        - match: \*/
          captures:
            0: punctuation.definition.comment.processing
          pop: true
    - match: '(^[ \t]+)?(?=//)'
      captures:
        1: punctuation.whitespace.comment.leading.processing
      push:
        - match: (?!\G)
          pop: true
        - match: //
          captures:
            0: punctuation.definition.comment.processing
          push:
            - meta_scope: comment.line.double-slash.processing
            - match: \n
              pop: true
  comments-javadoc:
    - match: /\*\*
      captures:
        0: punctuation.definition.comment.processing
      push:
        - meta_scope: comment.block.documentation.processing
        - match: \*/
          captures:
            0: punctuation.definition.comment.processing
          pop: true
        - match: '\{\s*(@link)\s*([a-zA-Z_][a-zA-Z0-9_]+)\s*\}'
          captures:
            0: keyword.other.documentation.inlinetag.processing
            1: keyword.other.documentation.tag.processing
            2: keyword.other.documentation.value.processing
        - include: comments-javadoc-tags
  comments-javadoc-tags:
    - match: '(@param)\s+([a-zA-Z_][a-zA-Z0-9_]+)\b'
      captures:
        1: keyword.other.documentation.params.processing
        2: keyword.other.documentation.value.processing
    - match: '@[a-zA-Z]+\b'
      scope: keyword.other.documentation.tag.processing
  constants-and-special-vars:
    - include: processing-variables-and-constants
    - match: \b(true|false|null)\b
      scope: constant.language.processing
    - match: \b(this|super)\b
      scope: variable.language.processing
    - match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b'
      scope: constant.numeric.processing
    - match: '(\.)?\b([A-Z][A-Z0-9_]+)(?!<|\.class|\s*\w+\s*=)\b'
      scope: constant.other.processing
      captures:
        1: keyword.operator.dereference.processing
  enums:
    - match: '^(?=\s*[A-Z0-9_]+\s*({|\(|,))'
      push:
        - match: "(?=;|})"
          pop: true
        - match: \w+
          captures:
            0: constant.other.enum.processing
          push:
            - meta_scope: meta.enum.processing
            - match: "(?=,|;|})"
              pop: true
            - include: parens
            - match: "{"
              push:
                - match: "}"
                  pop: true
                - include: class-body
  keywords:
    - match: ((&|\^|\||<<|>>>?)=)
      scope: keyword.operator.assignment.bitwise.processing
    - match: (<<|>>>?|~|\^)
      scope: keyword.operator.bitwise.processing
    - match: \b(try|catch|finally|throw)\b
      scope: keyword.control.catch-exception.processing
    - match: '\?|:'
      scope: keyword.control.ternary.processing
    - match: \b(return|break|case|continue|default|do|while|for|switch|if|else)\b
      scope: keyword.control.processing
    - match: \b(instanceof)\b
      scope: keyword.operator.instanceof.processing
    - match: (===?|!=|<=|>=|<>|<|>)
      scope: keyword.operator.comparison.processing
    - match: "([+*/%-]=)"
      scope: keyword.operator.assignment.arithmetic.processing
    - match: (=)
      scope: keyword.operator.assignment.processing
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.processing
    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.processing
    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.processing
    - match: (\||&)
      scope: keyword.operator.bitwise.processing
    - match: (?<=\S)\.(?=\S)
      scope: keyword.operator.dereference.processing
    - match: ;
      scope: punctuation.terminator.processing
  methods:
    - match: '(?!new)(?=\w.*\s+)(?=[^=]+\()(?=.+{)'
      comment: Method defs have to look-ahead for the opening bracket to be distinguished from a method call
      push:
        - meta_scope: meta.method.processing
        - match: "}|(?=;)"
          pop: true
        - include: storage-modifiers
        - match: (\w+)\s*\(
          captures:
            1: entity.name.function.processing
          push:
            - meta_scope: meta.method.identifier.processing
            - match: \)
              pop: true
            - include: parameters
        - match: (?=\w.*\s+\w+\s*\()
          push:
            - meta_scope: meta.method.return-type.processing
            - match: (?=\w+\s*\()
              pop: true
            - include: all-types
        - include: throws
        - match: "{"
          push:
            - meta_scope: meta.method.body.processing
            - match: "(?=})"
              pop: true
            - include: code
  object-types:
    - include: processing-classes
    - match: '\b((?:[a-z]\w*\.)*[A-Z]+\w*)<'
      push:
        - meta_scope: storage.type.generic.processing
        - match: '>|[^\w\s,\?<\[\]]'
          pop: true
        - include: object-types
        - match: <
          comment: This is just to support <>'s with no actual type prefix
          push:
            - meta_scope: storage.type.generic.processing
            - match: '>|[^\w\s,\[\]<]'
              pop: true
    - match: '\b((?:[a-z]\w*\.)*[A-Z]+\w*)(?=\[)'
      push:
        - meta_scope: storage.type.object.array.processing
        - match: '(?=[^\]\s])'
          pop: true
        - match: '\['
          push:
            - match: '\]'
              pop: true
            - include: code
    - match: '\b(?:[a-z]\w*(\.))*[A-Z]+\w*\b'
      scope: storage.type.processing
      captures:
        1: keyword.operator.dereference.processing
  object-types-inherited:
    - match: '\b((?:[a-z]\w*\.)*[A-Z]+\w*)<'
      push:
        - meta_scope: entity.other.inherited-class.processing
        - match: '>|[^\w\s,<]'
          pop: true
        - include: object-types
        - match: <
          comment: This is just to support <>'s with no actual type prefix
          push:
            - meta_scope: storage.type.generic.processing
            - match: '>|[^\w\s,<]'
              pop: true
    - match: '\b(?:[a-z]\w*(\.))*[A-Z]+\w*'
      scope: entity.other.inherited-class.processing
      captures:
        1: keyword.operator.dereference.processing
  parameters:
    - match: final
      scope: storage.modifier.processing
    - include: primitive-arrays
    - include: primitive-types
    - include: object-types
    - match: \w+
      scope: variable.parameter.processing
  parens:
    - match: \(
      push:
        - match: \)
          pop: true
        - include: code
  primitive-arrays:
    - match: '\b(?:void|boolean|byte|char|color|short|int|float|long|double)(?=(\[\s*\])+)\b'
      scope: storage.type.primitive.array.processing
  primitive-types:
    - match: \b(?:void|boolean|byte|char|color|short|int|float|long|double)(?!\s*\()\b
      comment: Most of, if not all, types have a casting method of the same name in Processing. Hence the negative lookahead to check for that
      scope: storage.type.primitive.processing
  processing-classes:
    - match: \b(P(Applet|Constants|Font|Graphics|Graphics2D|Graphics3D|GraphicsJava2D|Image|Line|Matrix|Matrix2D|Matrix3D|Polygon|Shape|ShapeSVG|SmoothTriangle|Style|Triangle|Vector)|StdXML(Builder|Parser|Reader)|XML(Element|EntityResolver|Exception|ParseException|ValidationException|Validator|Writer))\b
      comment: Includes only Processing-supplied classes - not the standard Java classes (Array, String, etc.), though they're mentioned in the Processing reference
      scope: support.type.object.processing
  processing-methods:
    - match: \b(?<!\.)(abs|acos|alpha|ambient|ambientLight|append|applyMatrix|arc|arrayCopy|asin|atan|atan2|background|beginCamera|beginRaw|beginRecord|beginShape|bezier|bezierDetail|bezierPoint|bezierTangent|bezierVertex|binary|blend|blendColor|blue|boolean|box|brightness|byte|cache|camera|ceil|char|charAt|color|colorMode|concat|constrain|contract|copy|cos|createFont|createGraphics|createImage|createInput|createOutput|createReader|createWriter|cursor|curve|curveDetail|curvePoint|curveSegments|curveTangent|curveTightness|curveVertex|day|degrees|delay|directionalLight|dist|draw|duration|ellipse|ellipseMode|emissive|endCamera|endRaw|endRecord|endShape|equals|exit|exp|expand|fill|filter|float|floor|frameRate|frustum|get|green|hex|hint|hour|hue|image|imageMode|indexOf|int|join|keyPressed|keyReleased|keyTyped|length|lerp|lerpColor|lightFalloff|lights|lightSpecular|line|link|list|loadBytes|loadFont|loadImage|loadPixels|loadShape|loadSound|loadStrings|log|lookat|loop|mag|map|mask|match|matchAll|max|millis|min|minute|modelX|modelY|modelZ|month|mouseClicked|mouseDragged|mouseMoved|mousePressed|mouseReleased|nf|nfc|nfp|nfs|noCursor|noFill|noise|noiseDetail|noiseSeed|noLights|noLoop|norm|normal|noSmooth|noStroke|noTint|open|openStream|ortho|param|pause|perspective|play|point|pointLight|popMatrix|popStyle|pow|print|printCamera|println|printMatrix|printProjection|pushMatrix|pushStyle|quad|radians|random|randomSeed|rect|rectMode|red|redraw|requestImage|resetMatrix|reverse|rotate|rotateX|rotateY|rotateZ|round|saturation|save|saveBytes|saveFrame|saveStream|saveStrings|scale|screenX|screenY|screenZ|second|selectFolder|selectInput|selectOutput|set|setup|shape|shapeMode|shininess|shorten|sin|size|skewX|skewY|smooth|sort|specular|sphere|sphereDetail|splice|split|splitTokens|spotLight|sq|sqrt|status|stop|str|stroke|strokeCap|strokeJoin|strokeWeight|subset|substring|tan|text|textAlign|textAscent|textDescent|textFont|textLeading|textMode|textSize|texture|textureMode|textWidth|time|tint|toLowerCase|toUpperCase|translate|triangle|trim|unbinary|unhex|unHint|updatePixels|vertex|volume|year)(?=\s*\()
      comment: Note the neg. look-behind at the beginning and the look-ahead at the end. This distinguishes methods like array.size() from size(), and frameRate() from the frameRate variable, respectively
      scope: support.function.processing
  processing-variables-and-constants:
    - match: \b(focused|frameCount|frameRate|height|height|key|keyCode|keyPressed|mouseButton|mousePressed|mouseX|mouseY|online|pixels|pmouseX|pmouseY|screen|width)(?!\s*\()\b
      scope: variable.other.processing
    - match: \b(ADD|ALIGN_CENTER|ALIGN_LEFT|ALIGN_RIGHT|ALPHA|ALPHA_MASK|ALT|AMBIENT|ARGB|ARROW|BACKSPACE|BEVEL|BLEND|BLEND|BLUE_MASK|BLUR|CENTER|CENTER_RADIUS|CHATTER|CODED|COMPLAINT|COMPONENT|COMPOSITE|CONCAVE_POLYGON|CONTROL|CONVEX_POLYGON|CORNER|CORNERS|CROSS|CUSTOM|DARKEST|DEGREES|DEG_TO_RAD|DELETE|DIFFERENCE|DIFFUSE|DISABLED|DISABLE_TEXT_SMOOTH|DOWN|ENTER|EPSILON|ESC|GIF|GREEN_MASK|GREY|HALF|HALF_PI|HALF_PI|HAND|HARD_LIGHT|HSB|IMAGE|INVERT|JAVA2D|JPEG|LEFT|LIGHTEST|LINES|LINE_LOOP|LINE_STRIP|MAX_FLOAT|MITER|MODEL|MOVE|MULTIPLY|NORMALIZED|NO_DEPTH_TEST|NTSC|ONE|OPAQUE|OPENGL|ORTHOGRAPHIC|OVERLAY|P2D|P3D|PAL|PERSPECTIVE|PI|PI|PIXEL_CENTER|POINTS|POLYGON|POSTERIZE|PROBLEM|PROJECT|QUADS|QUAD_STRIP|QUARTER_PI|RADIANS|RAD_TO_DEG|RED_MASK|REPLACE|RETURN|RGB|RIGHT|ROUND|SCREEN|SECAM|SHIFT|SOFT_LIGHT|SPECULAR|SQUARE|SUBTRACT|SVIDEO|TAB|TARGA|TEXT|TFF|THIRD_PI|THRESHOLD|TIFF|TRIANGLES|TRIANGLE_FAN|TRIANGLE_STRIP|TUNER|TWO|TWO_PI|TWO_PI|UP|WAIT|WHITESPACE)\b
      scope: support.constant.processing
  storage-modifiers:
    - match: \b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient)\b
      captures:
        1: storage.modifier.processing
  strings:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.processing
      push:
        - meta_scope: string.quoted.double.processing
        - match: '"'
          captures:
            0: punctuation.definition.string.end.processing
          pop: true
        - match: \\.
          scope: constant.character.escape.processing
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.processing
      push:
        - meta_scope: string.quoted.single.processing
        - match: "'"
          captures:
            0: punctuation.definition.string.end.processing
          pop: true
        - match: '\\([0-7]{3}|u[A-Fa-f0-9]{4})'
          scope: constant.character.escape.literal.processing
        - match: \\.
          scope: constant.character.escape.processing
  throws:
    - match: throws
      captures:
        0: storage.modifier.processing
      push:
        - meta_scope: meta.throwables.processing
        - match: "(?={|;)"
          pop: true
        - include: object-types
  values:
    - include: strings
    - include: object-types
    - include: constants-and-special-vars
