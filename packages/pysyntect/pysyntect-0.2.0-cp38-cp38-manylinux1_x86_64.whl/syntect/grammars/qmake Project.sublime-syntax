%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: qmake Project file
file_extensions:
  - pro
  - pri
scope: source.qmake
contexts:
  main:
    - match: (TEMPLATE)\s*(=)
      captures:
        1: variable.language.qmake
        2: punctuation.separator.key-value.qmake
      push:
        - meta_scope: markup.other.template.qmake
        - match: $\n?
          captures:
            1: variable.language.qmake
            2: punctuation.separator.key-value.qmake
          pop: true
        - match: \b(app|lib|subdirs|vcapp|vclib)\b
          scope: keyword.other.qmake
    - match: (CONFIG)\s*(\+|\-)?(=)
      captures:
        1: variable.language.qmake
        3: punctuation.separator.key-value.qmake
      push:
        - meta_scope: markup.other.config.qmake
        - match: $\n?
          captures:
            1: variable.language.qmake
            3: punctuation.separator.key-value.qmake
          pop: true
        - match: \b(release|debug|warn_(on|off)|qt|opengl|thread|x11|windows|console|dll|staticlib|plugin|designer|uic3|no_lflags_merge|exceptions|rtti|stl|flat|app_bundle|no_batch|qtestlib|ppc|x86)\b
          scope: keyword.other.qmake
    - match: (QT)\s*(\+|\-)?(=)
      captures:
        1: variable.language.qmake
        3: punctuation.separator.key-value.qmake
      push:
        - meta_scope: markup.other.qt.qmake
        - match: $\n?
          captures:
            1: variable.language.qmake
            3: punctuation.separator.key-value.qmake
          pop: true
        - match: \b(core|gui|network|opengl|sql|svg|xml|qt3support)\b
          scope: keyword.other.qmake
    - match: \b(R(C(C_DIR|_FILE)|E(S_FILE|QUIRES))|M(OC_DIR|AKE(_MAKEFILE|FILE(_GENERATOR)?))|S(RCMOC|OURCES|UBDIRS)|HEADERS|YACC(SOURCES|IMPLS|OBJECTS)|CONFIG|T(RANSLATIONS|ARGET(_(EXT|\d+(\.\d+\.\d+)?))?)|INCLUDEPATH|OBJ(MOC|ECTS(_DIR)?)|D(SP_TEMPLATE|ISTFILES|E(STDIR(_TARGET)?|PENDPATH|F(_FILE|INES))|LLDESTDIR)|UI(C(IMPLS|OBJECTS)|_(SOURCES_DIR|HEADERS_DIR|DIR))|P(RE(COMPILED_HEADER|_TARGETDEPS)|OST_TARGETDEPS)|V(PATH|ER(SION|_(M(IN|AJ)|PAT)))|Q(MAKE(SPEC|_(RUN_C(XX(_IMP)?|C(_IMP)?)|MOC_SRC|C(XXFLAGS_(RELEASE|MT(_D(BG|LL(DBG)?))?|SHLIB|THREAD|DEBUG|WARN_O(N|FF))|FLAGS_(RELEASE|MT(_D(BG|LL(DBG)?))?|SHLIB|THREAD|DEBUG|WARN_O(N|FF))|LEAN)|TARGET|IN(CDIR(_(X|THREAD|OPENGL|QT))?|FO_PLIST)|UIC|P(RE_LINK|OST_LINK)|EXT(_(MOC|H|CPP|YACC|OBJ|UI|PRL|LEX)|ENSION_SHLIB)|Q(MAKE|T_DLL)|F(ILETAGS|AILED_REQUIREMENTS)|L(N_SHLIB|I(B(S(_(RT(MT)?|X|CONSOLE|THREAD|OPENGL(_QT)?|QT(_(OPENGL|DLL))?|WINDOWS))?|_FLAG|DIR(_(X|OPENGL|QT|FLAGS))?)|NK_SHLIB_CMD)|FLAGS(_(RELEASE|S(H(LIB|APP)|ONAME)|CONSOLE(_DLL)?|THREAD|DEBUG|PLUGIN|QT_DLL|WINDOWS(_DLL)?))?)|A(R_CMD|PP_(OR_DLL|FLAG))))?|T_THREAD)|FORMS|L(IBS|EX(SOURCES|IMPLS|OBJECTS)))\b
      scope: variable.language.qmake
    - match: '(\b([\w\d_]+\.[\w\d_]+|[A-Z_]+))?\s*(\+|\-)?(=)'
      captures:
        1: variable.other.qmake
        4: punctuation.separator.key-value.qmake
      push:
        - meta_scope: markup.other.assignment.qmake
        - match: $\n?
          captures:
            1: variable.other.qmake
            4: punctuation.separator.key-value.qmake
          pop: true
        - match: '(\$\$)([A-Z_]+|[\w\d_]+\.[\w\d_]+)|\$\([\w\d_]+\)'
          scope: variable.other.qmake
          captures:
            1: punctuation.definition.variable.qmake
        - match: '[\w\d\/_\-\.\:]+'
          scope: constant.other.filename.qmake
        - match: '"'
          captures:
            0: punctuation.definition.string.begin.qmake
          push:
            - meta_scope: string.quoted.double.qmake
            - match: '"'
              captures:
                0: punctuation.definition.string.end.qmake
              pop: true
        - match: "`"
          captures:
            0: punctuation.definition.string.begin.qmake
          push:
            - meta_scope: string.interpolated.qmake
            - match: "`"
              captures:
                0: punctuation.definition.string.end.qmake
              pop: true
        - match: (\\)
          captures:
            1: string.regexp.qmake
          push:
            - meta_scope: markup.other.assignment.continuation.qmake
            - match: "^[^#]"
              captures:
                1: string.regexp.qmake
              pop: true
            - match: (#).*$\n?
              scope: comment.line.number-sign.qmake
              captures:
                1: punctuation.definition.comment.qmake
        - match: '(^[ \t]+)?(?=#)'
          captures:
            1: punctuation.whitespace.comment.leading.qmake
          push:
            - match: (?!\G)
              pop: true
            - match: "#"
              captures:
                0: punctuation.definition.comment.qmake
              push:
                - meta_scope: comment.line.number-sign.qmake
                - match: \n
                  pop: true
    - match: \b(basename|CONFIG|contains|count|dirname|error|exists|find|for|include|infile|isEmpty|join|member|message|prompt|quote|sprintf|system|unique|warning)\s*(\()
      comment: entity.name.function.qmake
      captures:
        1: entity.name.function.qmake
        2: punctuation.definition.parameters.qmake
      push:
        - meta_content_scope: variable.parameter.qmake
        - match: (\))
          captures:
            1: punctuation.definition.parameters.qmake
          pop: true
    - match: \b(unix|win32|mac|debug|release)\b
      scope: keyword.other.scope.qmake
    - match: '(^[ \t]+)?(?=#)'
      captures:
        1: punctuation.whitespace.comment.leading.qmake
      push:
        - match: (?!\G)
          pop: true
        - match: "#"
          captures:
            0: punctuation.definition.comment.qmake
          push:
            - meta_scope: comment.line.number-sign.qmake
            - match: \n
              pop: true
