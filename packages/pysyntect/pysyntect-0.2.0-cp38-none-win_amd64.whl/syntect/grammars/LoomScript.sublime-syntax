%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: LoomScript
file_extensions:
  - ls
scope: source.loomscript
contexts:
  main:
    - include: comments
    - include: keywords
    - include: strings
    - match: import
      captures:
        0: keyword.other.import.loomscript
      push:
        - meta_scope: meta.declaration.loomscript
        - match: ;
          captures:
            0: punctuation.terminator.loomscript
          pop: true
    - match: (package)\s+
      captures:
        1: storage.modifier.loomscript
      push:
        - meta_scope: meta.package.loomscript
        - match: '([\w\.]+)?'
          captures:
            1: entity.name.type.package.loomscript
          pop: true
  comments:
    - match: (//).*$\n?
      scope: comment.line.double-slash.loomscript
      captures:
        1: punctuation.definition.comment.loomscript
    - match: /\*
      captures:
        0: punctuation.definition.comment.loomscript
      push:
        - meta_scope: comment.block.loomscript
        - match: \*/
          captures:
            0: punctuation.definition.comment.loomscript
          pop: true
  keywords:
    - match: \b(true|false|null)\b
      scope: constant.language.loomscript
    - match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?\b'
      scope: constant.numeric.loomscript
    - match: \bas\b
      scope: keyword.cast.loomscript
    - match: \b(if|else|while|do|for|each|in|case|switch|do|default|with|return)\b
      scope: keyword.control.loomscript
    - match: \b(exit|return|break|continue)\b
      scope: keyword.control.end.loomscript
    - match: \b(new)\b
      scope: keyword.control.new.loomscript
    - match: '\?|:'
      scope: keyword.control.ternary.loomscript
    - match: \b(\.\.\.|class|const|extends|function|get|implements|interface|package|set|namespace|var)\b
      scope: keyword.declaration.loomscript
    - match: \b(delete|is|typeof)\b
      scope: keyword.operator.loomscript
    - match: (\-|\+|\*|\/|\~\/|%)
      scope: keyword.operator.arithmetic.loomscript
    - match: (=)
      scope: keyword.operator.assignment.loomscript
    - match: '(([+*/%-]|\~)=)'
      scope: keyword.operator.assignment.arithmetic.loomscript
    - match: (<<|>>>?|~|\^|\||&)
      scope: keyword.operator.bitwise.loomscript
    - match: (===?|!==?|<=?|>=?)
      scope: keyword.operator.comparison.loomscript
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.loomscript
    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.loomscript
    - match: ((&|\^|\||<<|>>>?)=)
      scope: keyword.operator.assignment.bitwise.loomscript
    - match: \b(\*|Null)\b
      scope: keyword.special-type.loomscript
    - match: ;
      scope: punctuation.terminator.loomscript
    - match: \b(dynamic|final|internal|native|override|private|protected|public|static)\b
      scope: storage.modifier.loomscript
    - match: \b(?:void|bool|int)\b
      scope: storage.type.primitive.loomscript
    - match: \b(this|super)\b
      scope: variable.language.loomscript
  strings:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.loomscript
      push:
        - meta_scope: string.quoted.double.loomscript
        - match: '"'
          captures:
            0: punctuation.definition.string.end.loomscript
          pop: true
        - match: \\.
          scope: constant.character.escape.loomscript
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.loomscript
      push:
        - meta_scope: string.quoted.single.loomscript
        - match: "'"
          captures:
            0: punctuation.definition.string.end.loomscript
          pop: true
        - match: \\.
          scope: constant.character.escape.loomscript
