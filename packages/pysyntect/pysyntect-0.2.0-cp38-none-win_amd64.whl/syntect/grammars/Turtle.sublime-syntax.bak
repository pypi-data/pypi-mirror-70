%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Turtle
file_extensions:
  - ttl
  - turtle
scope: source.turtle
contexts:
  main:
    - include: turtleDoc
  ANON:
    - match: '\[[\u20\u9\uD\uA]*\]'
      scope: meta.spec.ANON.turtle
  BLANK_NODE_LABEL:
    - match: |-
        (?x)
        (?<PN_CHARS_U>[\p{L}\p{M}_]){0}
        (?<PN_CHARS>[\p{L}\p{M}_\-0-9\u00B7\u0300-\u036F\u203F-\u2040]){0}
        	(?<=\b|^)(_:) ((?:\g<PN_CHARS_U>|[0-9]) (?: (?:\g<PN_CHARS>|\.)* \g<PN_CHARS> )?)
      scope: meta.spec.BLANK_NODE_LABEL.turtle
      captures:
        1: keyword.other.BLANK_NODE_LABEL.turtle
        2: variable.other.BLANK_NODE_LABEL.turtle
  BlankNode:
    - include: BLANK_NODE_LABEL
    - include: ANON
  IRIREF:
    - match: '(?x) (\<) (?:[^\x00-\x20\<\>\\\"\{\}\|\^`] | (?:\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8}))* (\>)'
      scope: entity.name.type.IRIREF.turtle
      captures:
        1: punctuation.definition.entity.begin.turtle
        2: punctuation.definition.entity.end.turtle
  PNAME_LN:
    - match: |-
        (?x)
        	(?<PNAME_NS> (?: (?: [\p{L}\p{M}] (?:(?:[\p{L}\p{M}_.\-0-9\u00B7\u0300-\u036F\u203F-\u2040])* [\p{L}\p{M}_\-0-9\u00B7\u0300-\u036F\u203F-\u2040] )? )? | _) \: )
        	(?<PN_LOCAL>
        		(?# Should I include \p{M}?)
        		(?:
        			(?: [\p{L}_] | [:0-9] | %[0-9A-Fa-f]{2} | \\[_~\-!$&'\(\)*+=/?#@%.,;] )
        			(?:
        				(?: [\p{L}_\-0-9\u00B7\u0300-\u036F\u203F-\u2040] | [:.] | \%[0-9A-Fa-f]{2} | \\ [_~\-!$&'\(\)*+=/?#@%.,;] )*
        				(?: [\p{L}_\-0-9\u00B7\u0300-\u036F\u203F-\u2040] | : | \%[0-9A-Fa-f]{2} | \\ [_~\-!$&'\(\)*+=/?#@%.,;] )
        			)
        		)?
        	)
      scope: meta.spec.PNAME_LN.turtle
      captures:
        PNAME_NS: variable.other.PNAME_NS.turtle
        PN_LOCAL: support.variable.PN_LOCAL.turtle
  PNAME_NS:
    - match: '(?x)((?<=\s|^|_)(?:[\p{L}\p{M}] (?:(?:[\p{L}\p{M}_.\-0-9\u00B7\u0300-\u036F\u203F-\u2040])* [\p{L}\p{M}_\-0-9\u00B7\u0300-\u036F\u203F-\u2040] )? )? : )'
      scope: variable.other.PNAME_NS.turtle
  PN_LOCAL:
    - match: |-
        (?x)(
        	(?: [\p{L}\p{M}] | [:0-9] | %[0-9A-Fa-f]{2} | \\[_~\-!$&'\(\)*+=/?#@%.,;] )
        	(?:
        		(?:[\p{L}\p{M}_\-0-9\u00B7\u0300-\u036F\u203F-\u2040] | [:.] | %[0-9A-Fa-f]{2} | \\[_~\-!$&'\(\)*+=/?#@%.,;] )*
        		(?:[\p{L}\p{M}_\-0-9\u00B7\u0300-\u036F\u203F-\u2040] | : | %[0-9A-Fa-f]{2} | \\[_~\-!$&'\(\)*+=/?#@%.,;] )
        	)
        )?
      scope: support.variable.PN_LOCAL.turtle
  PrefixedName:
    - include: PNAME_LN
    - include: PNAME_NS
  blankNodePropertyList:
    - match: '\b(\[)\b'
      captures:
        1: punctuation.terminator.blankNodePropertyList.turtle
      push:
        - meta_scope: meta.spec.blankNodePropertyList.turtle
        - match: '\b(\])(?=\b|\s|[.;,])'
          captures:
            1: punctuation.terminator.blankNodePropertyList.turtle
          pop: true
        - match: '((?<=\s)[.;,](?=\b))'
          scope: punctuation.terminator.stmt.turtle
        - include: literal
        - include: blankNodePropertyList
        - include: iri
        - include: BlankNode
        - include: collection
        - match: "(?<=[ ])(a)(?=[ ])"
          scope: keyword.other.typeOf.turtle
  collection:
    - match: (\b\(\b)
      comment: "TODO: Make match patterns more stable"
      captures:
        1: punctuation.terminator.collection.turtle
      push:
        - meta_scope: meta.spec.collection.turtle
        - match: (\b\)\b)
          captures:
            1: punctuation.terminator.collection.turtle
          pop: true
        - include: literal
        - include: iri
        - include: BlankNode
        - include: collection
        - match: "(?<=[ ])(a)(?=[ ])"
          scope: keyword.other.typeOf.turtle
        - include: blankNodePropertyList
  directive:
    - match: (?i)(^(?=@prefix|@base|PREFIX|BASE))
      push:
        - meta_scope: meta.spec.directive.turtle
        - match: ($)
          pop: true
        - match: ^(@prefix)(?=\s)
          captures:
            1: keyword.other.directive.prefix.turtle
          push:
            - meta_scope: meta.spec.prefixID.turtle
            - match: (\.?)$
              captures:
                1: punctuation.terminator.directive.turtle
              pop: true
            - include: IRIREF
            - include: PNAME_NS
        - match: ^(@base)
          captures:
            1: keyword.other.directive.base.turtle
          push:
            - meta_scope: meta.spec.base.turtle
            - match: (\.?)$
              captures:
                1: punctuation.terminator.directive.turtle
              pop: true
            - include: IRIREF
        - match: ^(?i)(PREFIX)(?=\b)
          captures:
            1: keyword.other.directive.sparqlPrefix.turtle
          push:
            - meta_scope: meta.spec.sparqlPrefix.turtle
            - match: $
              pop: true
            - include: IRIREF
            - include: PNAME_NS
        - match: ^(?i)(BASE)(?=\b)
          captures:
            1: keyword.other.directive.sparqlBase.turtle
          push:
            - meta_scope: meta.spec.sparqlBase.turtle
            - match: $
              pop: true
            - include: IRIREF
  iri:
    - include: IRIREF
    - include: PrefixedName
  literal:
    - match: |-
        (?x)
        	(?<=\s)[+-]?
        	( (?: \d+?\.?\d*[eE][+-]?\d+) | \d*\.\d+ | \d+)
        	(?=[ ]*[,.;]?)
      scope: constant.numeric.turtle
    - match: '(?<=\s)(true|false)(?=[ ]*[,.;]?)'
      scope: constant.language.boolean.turtle
  literal_double:
    - match: |-
        (?x)
        	(")[^"\\]*(?:\\.[^"\\]*)*(")
        	(?<lang>@(?:[a-z]{2}(?:-[a-z0-9]{2})*)?)?
        	(?<dt>\^\^\w*:\w*|\<[^\>]+\>)?
      scope: string.quoted.double.turtle
      captures:
        1: punctuation.definition.string.begin.turtle
        2: punctuation.definition.string.end.turtle
        dt: storage.type.datatype.turtle
        lang: constant.language.language_tag.turtle
  literal_single:
    - match: |-
        (?x)
        	(')[^'\\]*(?:\.[^'\\]*)*(')
        	(?<lang>@(?:[a-z]{2}(?:-[a-z0-9]{2})*)?)?
        	(?<dt>\^\^\w*:\w*|\<[^\>]+\>)?
      scope: string.quoted.single.turtle
      captures:
        1: punctuation.definition.string.begin.turtle
        2: punctuation.definition.string.end.turtle
        dt: storage.type.datatype.turtle
        lang: constant.language.language_tag.turtle
  literal_triple:
    - match: '([''"]{3})'
      captures:
        1: punctuation.definition.string.begin.turtle
      push:
        - meta_scope: string.quoted.triple.turtle
        - match: |-
            (?x)
            	(\1)
            	(?<lang>@(?:[a-z]{2}(?:-[a-z0-9]{2})*)?)?
            	(?<dt>\^\^\w*:\w*|\<[^\>]+\>)?
            	(?=[ ]*[.;,]?)
          captures:
            1: punctuation.definition.string.end.turtle
            dt: storage.type.datatype.turtle
            lang: constant.language.language_tag.turtle
          pop: true
  sparqlClausedKeywords:
    - match: |-
        (?x)(
        	(?# Special case because FILTER can have clauses what makes the lexer dizzy)
        	FILTER
        )\s*(\((?=\s*))
      captures:
        1: keyword.control.sparql.turtle
        2: punctuation.terminator.sparqlKeyword.turtle
      push:
        - match: \s*(\))
          captures:
            1: punctuation.terminator.sparqlKeyword.turtle
          pop: true
        - include: sparqlVars
        - include: sparqlFilterFns
        - include: sparqlLangConsts
  sparqlFilterFns:
    - match: |-
        (?x)(
        	(?# Special case because FILTER can have clauses what makes the lexer dizzy)
        	FILTER|
        	(?# Builtin callables )
        	STR|LANG|LANGMATCHES|DATATYPE|BOUND|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|sameTerm|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC|COUNT|SUM|MIN|MAX|AVG|SAMPLE|GROUP_CONCAT|
        	BOUND|COALESCE|NOT EXISTS|EXISTS|REGEX|SUBSTR|REPLACE
        )\s*(\((?=\s*))
      captures:
        1: support.function.sparql.turtle
        2: punctuation.terminator.sparqlFunc.turtle
      push:
        - match: \s*(\))
          captures:
            1: punctuation.terminator.sparqlFunc.turtle
          pop: true
        - include: sparqlVars
        - include: sparqlFilterFns
        - include: sparqlLangConsts
  sparqlKeywords:
    - match: |-
        (?x)(
        	(?# SPARQL )
        	SELECT|ASK|CONSTRUCT|DESCRIBE|FROM|NAMED|WHERE|GRAPH|AS|
        	UNION|FILTER|HAVING|VALUES|
        	OPTIONAL|SERVICE|
        	(?# SPARUL )
        	SILENT|DATA|
        	ADD|MOVE|COPY|
        	INSERT|DELETE|
        	LOAD|INTO|
        	GRAPH|ALL|DEFAULT|
        	CLEAR|CREATE|DROP|
        	WITH|USING|
        	(?# Solution sequence modifiers )
        	DISTINCT|REDUCED|
        	ORDER|ASC|DESC|OFFSET|LIMITED|REDUCED|
        	GROUP|BY|LIMIT
        )
      scope: keyword.control.sparql.turtle
  sparqlLangConsts:
    - match: (true|false)
      scope: constant.language.sparql.turtle
  sparqlVars:
    - match: (\?\w+|\*)
      comment: Argh!
      scope: constant.variable.sparql.turtle
  triples:
    - match: (?i)^(?!@|\#|PREFIX|BASE)
      captures:
        1: meta.spec.triples.turtle
      push:
        - meta_scope: meta.spec.triples.turtle
        - match: "([.;,]?)$"
          captures:
            1: punctuation.terminator.triple.turtle
          pop: true
        - match: (#.+$)
          comment: Allow inline comments
          scope: comment.line.number-sign.turtle
          captures:
            1: punctuation.definition.comment.turtle
        - match: '[.;,](?=\s|\b)'
          comment: Trying to eat up terminators before anything else (seems to work)
          scope: punctuation.terminator.stmt.turtle
        - include: literal
        - include: sparqlVars
        - include: sparqlClausedKeywords
        - include: sparqlKeywords
        - include: sparqlFilterFns
        - include: sparqlLangConsts
        - include: blankNodePropertyList
        - include: iri
        - include: BlankNode
        - include: collection
        - match: '\b(a)(?=[ ])'
          scope: keyword.other.typeOf.turtle
  turtleDoc:
    - match: ^
      push:
        - meta_scope: meta.spec.turtleDoc.turtle
        - match: \z
          pop: true
        - match: ^(#).+$
          comment: Allow comment lines
          scope: comment.line.number-sign.turtle
          captures:
            1: punctuation.definition.comment.turtle
        - include: directive
        - include: sparqlClausedKeywords
        - include: sparqlKeywords
        - include: sparqlFilterFns
        - include: sparqlLangConsts
        - include: sparqlVars
        - include: triples
