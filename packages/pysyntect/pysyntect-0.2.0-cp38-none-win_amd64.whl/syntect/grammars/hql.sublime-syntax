%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: HQL
file_extensions:
  - hql
scope: source.hql
contexts:
  main:
    - include: comments
    - match: (?i:^\s*(create(?:\s+or\s+replace)?(?:\s+external)?)\s+(aggregate|intersect|IF\sNOT\sEXISTS|except|USE|conversion|database|domain|function|group|partition|cluster|(unique\s+)?index|language|operator\s+class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)
      scope: meta.create.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.hql
        5: entity.name.function.hql
    - match: (?i:^\s*(drop)\s+(aggregate|conversion|IF\sEXISTS|database|domain|function|group|cluster|partition|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))
      scope: meta.drop.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.hql
    - match: (?i:^\s*(create)\s+(aggregate|conversion|database|domain|IF\sNOT\sEXISTS|function|group|cluster|partition|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))
      scope: meta.create.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.hql
    - match: (?i:\s*(drop)\s+(table)\s+(\w+)(\s+cascade)?\b)
      scope: meta.drop.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.table.hql
        3: entity.name.function.hql
        4: keyword.other.cascade.hql
    - match: (?i:^\s*(alter)\s+(aggregate|conversion|database|domain|intersect|except|USE|function|group|partition|cluster|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)
      scope: meta.alter.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.table.hql
    - match: (?i:^\s*(truncate)\s+(aggregate|conversion|database|domain|intersect|except|USE|function|group|partition|cluster|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)
      scope: meta.truncate.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.table.hql
    - match: (?i:^\s*(show)\s+(DATABASES|SCHEMAS|TABLES|TBLPROPERTIES|PARTITIONS|FUNCTIONS|INDEX(ES)?\sCOLUMNS|CREATE\sTABLE)\s+)
      scope: meta.show.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.table.hql
    - match: (?i:^\s*(desc(ribe)?)\s+(DATABASE|SCHEMA)\s+)
      scope: meta.describe.hql
      captures:
        1: keyword.other.create.hql
        2: keyword.other.table.hql
    - match: |-
        (?xi)

        				# normal stuff, capture 1
        				 \b(bigint|bigserial|bit|boolean|box|bytea|cidr|circle|tablesample|explain|date|double\sprecision|inet|int|integer|line|lseg|macaddr|money|oid|path|point|polygon|real|serial|smallint|sysdate|text)\b

        				# numeric suffix, capture 2 + 3i
        				|\b(bit\svarying|character\s(?:varying)?|tinyint|var\schar|float|interval)\((\d+)\)

        				# optional numeric suffix, capture 4 + 5i
        				|\b(char|number|varchar\d?)\b(?:\((\d+)\))?

        				# special case, capture 6 + 7i + 8i
        				|\b(numeric|decimal)\b(?:\((\d+),(\d+)\))?

        				# special case, captures 9, 10i, 11
        				|\b(times)(?:\((\d+)\))(\swithoutstimeszone\b)?

        				# special case, captures 12, 13, 14i, 15
        				|\b(timestamp)(?:(s)\((\d+)\)(\swithoutstimeszone\b)?)?


      captures:
        1: storage.type.hql
        10: constant.numeric.hql
        11: storage.type.hql
        12: storage.type.hql
        13: storage.type.hql
        14: constant.numeric.hql
        15: storage.type.hql
        2: storage.type.hql
        3: constant.numeric.hql
        4: storage.type.hql
        5: constant.numeric.hql
        6: storage.type.hql
        7: constant.numeric.hql
        8: constant.numeric.hql
        9: storage.type.hql
    - match: (?i:\b((?:primary|foreign)\s+key|references|on\sdelete(\s+cascade)?|check|constraint)\b)
      scope: storage.modifier.hql
    - match: \b\d+\b
      scope: constant.numeric.hql
    - match: (?i:\b(select(\s+distinct)?|insert\s+(ignore\s+)?into|update|MAPJOIN|ROLLUP|CUBE|cast|intersect|except|between|to_date|from_unixtime|unix_timestamp|year|hour|month|day|dayofmonth|minute|second|weekofyear|datediff|from_utc_timestamp|to_utc_timestamp|if(\s+not)?\s+exists|if|USE|explode|inline|json_tuple|parse_url_tuple|posexplode|add_days|add_months|append_array|array_freq_count|array_index|assert_equals|assert_less_than|assert_true|bloom|bloom_and|bloom_contains|bloom_not|bloom_or|booking_week|cast_array|cast_map|ceiling|collect|collect_freq_count|collect_max|collect_merge_max|combine|combine_hyperloglog|combine_previous_sketch|combine_sketch|combine_unique|compute_stats|conditional_emit|convert_to_sketch|current_database|date_range|date_to_start_quarter|date_to_start_week|distributed_bloom|distributed_map|div|elt|estimated_reach|event_parser|ewah_bitmap|ewah_bitmap_and|ewah_bitmap_empty|ewah_bitmap_or|experiments|field|first_index|flatten_array|from_camel_case|from_json|geturl|greatest|group_concat|group_count|grouped_rank|hash_md5|hbase_balanced_key|hbase_batch_get|hbase_batch_put|hbase_cached_get|hbase_get|hbase_put|hll_est_cardinality|hyperloglog|index|inet_aton|inet_ntoa|initcap|intersect_array|ip2country|ip2latlon|ip2timezone|ipcountry|isnotnull|isnull|join_array|json_map|json_split|label|last_day|last_index|lcase|least|length|map_filter_keys|map_index|map_key_values|map_mode|matchpath|md5|moving_avg|multiday_count|negative|next_day|noop|noopstreaming|noopwithmap|noopwithmapstreaming|not|now|numeric_range|nvl|percentile|percentile_approx|pi|pmod|positive|pow|power|quarter|ranked_long_diff|ranked_long_sum|row_sequence|running_count|running_sum|salted_bigint|salted_bigint_key|set_difference|set_similarity|sha1|sha2|sign|sin|sketch_hashes|sketch_set|std|stddev|stddev_pop|stddev_samp|sum_array|throw_error|to_camel_case|to_json|to_unix_timestamp|truncate_array|ucase|unhex|union_hyperloglog|union_map|union_max|union_sketch|union_vector_sum|vector_add|vector_cross_product|vector_dot_product|vector_magnitude|vector_scalar_mult|windowingtablefunction|write_to_graphite|write_to_tsdb|xpath_boolean|xpath_double|xpath_float|xpath_int|xpath_long|xpath_number|xpath_short|xpath_string|date_add|date_sub|stack|java_method|rename|reflect|hash|xpath|get_json_object|size|map_keys|map_values|array_contains|sort_array|delete|from|set|where|group\sby|partition\sby|cluster\sby|clustered\sby|distribute\sby|or|like|and|union(\s+all)?|having|order\sby|limit|offset|(inner|cross)\s+join|join|straight_join|(left|right)(\s+outer)?\s+join|natural(\s+(left|right)(\s+outer)?)?\s+join)\b)
      scope: keyword.other.DML.hql
    - match: (?i:\b(rename\s+)?to\b)
      scope: keyword.other.DML.hql
    - match: (?i:\b(on|((is\s+)not\s+)?null)\b)
      scope: keyword.other.DDL.create.II.hql
    - match: (?i:\bvalues\b)
      scope: keyword.other.DML.II.hql
    - match: (?i:\b(begin(\s+work)?|start\s+transaction|commit(\s+work)?|rollback(\s+work)?)\b)
      scope: keyword.other.LUW.hql
    - match: (?i:\b(grant(\swith\sgrant\soption)?|revoke)\b)
      scope: keyword.other.authorization.hql
    - match: (?i:(\bnot\s+)?\bin\b)
      scope: keyword.other.data-integrity.hql
    - match: (?i:^\s*(comment\s+on\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is)\s+)
      scope: keyword.other.object-comments.hql
    - match: (?i)\bAS\b
      scope: keyword.other.alias.hql
    - match: (?i)\b(DESC|ASC)\b
      scope: keyword.other.order.hql
    - match: (?i)\b(case|when|then|else|end)\b
      scope: keyword.other.case.hql
    - match: \*
      scope: keyword.operator.star.hql
    - match: "[!<>]?=|<>|<|>"
      scope: keyword.operator.comparison.hql
    - match: (?i)\b(COMMENT|STORED|LOAD|rlike|regexp|map|struct|named_struct|array|create_union|OVERWRITE|LOCATION|STREAMTABLE|ROW FORMAT|WINDOW|LEAD|LAG|FIRST_VALUE|LAST_VALUE|OVER|ROWS|UNBOUNDED|PRECEDING|FOLLOWING|RANK|ROW_NUMBER|DENSE_RANK|CUME_DIST|PERCENT_RANK|NTILE|COALESCE|CLUSTERED|PARTITIONED|BUCKETED)\b
      scope: storage.type.II.hql
    - match: '-|\+|/'
      scope: keyword.operator.math.hql
    - match: \|\|
      scope: keyword.operator.concatenator.hql
    - match: (?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b
      scope: support.function.scalar.hql
    - match: (?i)\b(AVG|COUNT|MIN|MAX|SUM|DISTINCT|VARIANCE|var_pop|var_samp|stddev_pop|stddev_samp|covar_pop|covar_samp|corr|percentile|percentile_approx|histogram_numeric|collect_set|collect_list|ntile|round|floor|ceil|rand|exp|ln|log10|log2|log|pow|power|sqrt|bin|hex|unhex|conv|from_base|abs|pmod|sin|asin|cos|acos|tan|atan|degrees|radians|positive|negative|sign|e|pi)(?=\s*\()
      scope: entity.function.name.hql
    - match: (?i)\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER|ascii|base64|concat|context_ngrams|histogram_numeric|concat_ws|decode|encode|find_in_set|format_number|get_json_object|in_file|instr|lenght|locate|lower|lpad|ltrim|ngrams|parse_url|printf|regexp_extract|regexp_replace|repeat|reverse|rpad|rtrim|sentences|space|split|str_to_map|substr|translate|trim|unbase64|upper)\b
      scope: support.function.string.hql
    - match: (\w+?)\.(\w+)
      captures:
        1: constant.other.database-name.hql
        2: constant.other.table-name.hql
    - include: strings
    - include: regexps
  comments:
    - match: '(^[ \t]+)?(?=--)'
      captures:
        1: punctuation.whitespace.comment.leading.hql
      push:
        - match: (?!\G)
          pop: true
        - match: "--"
          captures:
            0: punctuation.definition.comment.hql
          push:
            - meta_scope: comment.line.double-dash.hql
            - match: \n
              pop: true
  regexps:
    - match: /(?=\S.*/)
      captures:
        0: punctuation.definition.string.begin.hql
      push:
        - meta_scope: string.regexp.hql
        - match: /
          captures:
            0: punctuation.definition.string.end.hql
          pop: true
        - include: string_interpolation
        - match: \\/
          scope: constant.character.escape.slash.hql
    - match: '%r\{'
      comment: We should probably handle nested bracket pairs!?! -- Allan
      captures:
        0: punctuation.definition.string.begin.hql
      push:
        - meta_scope: string.regexp.modr.hql
        - match: '\}'
          captures:
            0: punctuation.definition.string.end.hql
          pop: true
        - include: string_interpolation
  string_escape:
    - match: \\.
      scope: constant.character.escape.hql
  string_interpolation:
    - match: '(#\{)([^\}]*)(\})'
      scope: string.interpolated.hql
      captures:
        1: punctuation.definition.string.end.hql
  strings:
    - match: '('')[^''\\]*('')'
      comment: this is faster than the next begin/end rule since sub-pattern will match till end-of-line and HQL files tend to have very long lines.
      scope: string.quoted.single.hql
      captures:
        1: punctuation.definition.string.begin.hql
        3: punctuation.definition.string.end.hql
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.hql
      push:
        - meta_scope: string.quoted.single.hql
        - match: "'"
          captures:
            0: punctuation.definition.string.end.hql
          pop: true
        - include: string_escape
    - match: '(`)[^`\\]*(`)'
      comment: this is faster than the next begin/end rule since sub-pattern will match till end-of-line and HQL files tend to have very long lines.
      scope: string.quoted.other.backtick.hql
      captures:
        1: punctuation.definition.string.begin.hql
        3: punctuation.definition.string.end.hql
    - match: "`"
      captures:
        0: punctuation.definition.string.begin.hql
      push:
        - meta_scope: string.quoted.other.backtick.hql
        - match: "`"
          captures:
            0: punctuation.definition.string.end.hql
          pop: true
        - include: string_escape
    - match: '(")[^"#]*(")'
      comment: this is faster than the next begin/end rule since sub-pattern will match till end-of-line and HQL files tend to have very long lines.
      scope: string.quoted.double.hql
      captures:
        1: punctuation.definition.string.begin.hql
        3: punctuation.definition.string.end.hql
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.hql
      push:
        - meta_scope: string.quoted.double.hql
        - match: '"'
          captures:
            0: punctuation.definition.string.end.hql
          pop: true
        - include: string_interpolation
    - match: '%\{'
      captures:
        0: punctuation.definition.string.begin.hql
      push:
        - meta_scope: string.other.quoted.brackets.hql
        - match: '\}'
          captures:
            0: punctuation.definition.string.end.hql
          pop: true
        - include: string_interpolation
