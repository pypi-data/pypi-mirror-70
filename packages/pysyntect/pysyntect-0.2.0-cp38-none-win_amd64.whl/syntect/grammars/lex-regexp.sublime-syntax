%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
scope: source.lex.regexp
contexts:
  main:
    - include: wildcard
    - include: alternation
    - include: lookahead
    - include: anchors
    - include: start-condition
    - include: quantifier
    - include: string
    - include: expansion
    - include: quantifier-range
    - include: class
    - include: subpattern
    - include: escapes
  alternation:
    - match: \|
      scope: keyword.operator.logical.or.lex
  anchors:
    - match: \^
      scope: keyword.control.anchor.line-start.lex
    - match: \$
      scope: keyword.control.anchor.line-end.lex
    - match: (<<)EOF(>>)
      scope: keyword.control.anchor.eof.lex
      captures:
        1: punctuation.definition.angle.bracket.begin.lex
        2: punctuation.definition.angle.bracket.end.lex
  class:
    - match: '(\[)(\^)?(-)?'
      captures:
        1: punctuation.definition.character-class.set.begin.lex
        2: keyword.operator.logical.not.lex
        3: constant.single.character.character-class.lex
      push:
        - meta_scope: meta.character-class.set.lex
        - match: '\]'
          captures:
            0: punctuation.definition.character-class.set.end.lex
          pop: true
        - include: escapes
        - include: expressions
        - match: '-(?!\])'
          scope: punctuation.separator.range.dash.lex
        - match: .
          scope: constant.single.character.character-class.lex
  escapes:
    - match: '\\[0-7]{3}'
      scope: constant.character.escape.codepoint.octal.lex
    - match: '\\[xX][A-Fa-f0-9]{2}'
      scope: constant.character.escape.codepoint.hexadecimal.hex.lex
    - match: \\.
      scope: constant.character.escape.lex
  expansion:
    - match: '(\{)([^{}\s]+)(\})'
      scope: meta.expansion.lex
      captures:
        1: punctuation.definition.expansion.bracket.curly.begin.lex
        2: variable.parameter.reference.lex
        3: punctuation.definition.expansion.bracket.curly.end.lex
  expressions:
    - match: |-
        (?x)
        (\[:)
        (alnum|alpha|blank|cntrl|digit|graph
        |lower|print|punct|space|upper|xdigit)
        (:\])
      scope: constant.language.posix.$2-char.character-class.lex
      captures:
        1: punctuation.definition.character-class.set.begin.lex
        2: support.constant.posix-class.lex
        3: punctuation.definition.character-class.set.end.lex
  lookahead:
    - match: /
      scope: keyword.operator.logical.and.lookahead.lex
  quantifier:
    - match: "[*+?]"
      scope: keyword.operator.quantifier.lex
  quantifier-range:
    - match: "({)(?:([0-9]+)(?:(,)([0-9]*))?|(,)([0-9]+))(})"
      scope: keyword.operator.quantifier.specific.lex
      captures:
        1: punctuation.definition.quantifier.bracket.curly.begin.lex
        2: keyword.operator.quantifier.min.lex
        3: punctuation.delimiter.comma.lex
        4: keyword.operator.quantifier.max.lex
        5: punctuation.delimiter.comma.lex
        6: keyword.operator.quantifier.max.lex
        7: punctuation.definition.quantifier.bracket.curly.end.lex
  start-condition:
    - match: <
      captures:
        0: punctuation.definition.angle.bracket.begin.lex
      push:
        - meta_scope: meta.start-condition.lex
        - match: ">|(?=$)"
          captures:
            0: punctuation.definition.angle.bracket.end.lex
          pop: true
        - match: \*
          scope: keyword.operator.wildcard.condition.lex
        - match: ","
          scope: punctuation.delimiter.separator.comma.lex
        - match: '[^<>*,\s]+'
          scope: constant.language.condition.name.lex
  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.lex
      push:
        - meta_scope: string.quoted.double.lex
        - match: '"'
          captures:
            0: punctuation.definition.string.end.lex
          pop: true
        - include: escapes
  subpattern:
    - match: \(
      captures:
        0: punctuation.definition.group.begin.lex
      push:
        - meta_scope: meta.group.regexp
        - match: \)
          captures:
            0: punctuation.definition.group.end.lex
          pop: true
        - include: main
  wildcard:
    - match: \.
      scope: constant.character.wildcard.dot.match.any.lex
