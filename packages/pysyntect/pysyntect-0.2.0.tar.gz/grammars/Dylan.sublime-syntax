%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Dylan
file_extensions:
  - dylan
scope: source.dylan
contexts:
  main:
    - match: (?<=^|\s|\()/\*
      push:
        - meta_scope: comment.block.dylan
        - match: \*/
          pop: true
        - include: comment-block
    - match: '(^[ \t]+)?(?=//)'
      captures:
        1: punctuation.whitespace.comment.leading.dylan
      push:
        - match: (?!\G)
          pop: true
        - match: //
          captures:
            0: punctuation.definition.comment.dylan
          push:
            - meta_scope: comment.line.double-slash.dylan
            - match: \n
              pop: true
    - match: "^(module|synopsis|author|copyright|version|files|executable|library):"
      push:
        - meta_scope: keyword.control.preprocessor.dylan
        - meta_content_scope: meta.preprocessor.dylan
        - match: ^\s*$
          pop: true
        - match: "^(module|synopsis|author|copyright|version|files|executable|library):"
          scope: keyword.control.preprocessor.dylan
    - match: '^(define)\s+((?:(?:sealed|open|inline[-a-z]*)\s+)+)?(?:(domain)|(method|function|generic)\s+)([\\_A-Za-z0-9/!?*%$\-\<\>=]*)'
      scope: meta.function.dylan
      captures:
        1: keyword.other.dylan
        2: storage.modifier.dylan
        3: storage.modifier.dylan
        4: storage.type.function.dylan
        5: entity.name.function.dylan
    - match: '^(define)\s+((?:(?:sealed|open|abstract|concrete|primary|free)\s+)+)?(class)\s+([_A-Za-z0-9/!?*%$\-\<\>]*)'
      scope: meta.class.dylan
      captures:
        1: keyword.other.dylan
        2: storage.modifier.dylan
        3: storage.type.class.dylan
        4: entity.name.type.dylan
    - match: '^(define)\s+((library|module)\s+[_A-Za-z0-9/!?*%$\-\<\>]+)'
      scope: meta.namespace.dylan
      captures:
        1: keyword.other.dylan
        2: entity.name.other.dylan
        3: storage.type.namespace.dylan
    - match: '^(define)\s+(constant|variable)\s+([_A-Za-z0-9/!?*%$\-\<\>]+)'
      scope: meta.variable.dylan
      captures:
        1: keyword.other.dylan
        2: storage.type.dylan
        3: entity.name.other.dylan
    - match: '^(define)\s+(macro)\s+([_A-Za-z0-9/!?*%$\-\<\>]+)'
      scope: meta.macro.dylan
      captures:
        1: keyword.other.dylan
        2: storage.type.dylan
        3: entity.name.other.dylan
    - match: '^(define)\s+([_A-Za-z0-9/!?*%$\-\<\>\s]+)'
      scope: meta.definition.dylan
      captures:
        1: keyword.other.dylan
        2: entity.name.other.dylan
    - match: (#t|#f|#next|#rest|#key|#all-keys|#include)
      scope: constant.language.dylan
    - match: '\b((#x[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b'
      scope: constant.numeric.dylan
    - match: '''(\\<[0-9a-fA-F]*>|\\.|.)'''
      scope: constant.character.dylan
    - match: '"'
      push:
        - meta_scope: string.quoted.double.dylan
        - match: '"'
          pop: true
        - include: escape
    - match: (#)"
      captures:
        1: keyword.operator.dylan
      push:
        - meta_scope: string.quoted.other.dylan
        - match: '"'
          pop: true
        - include: escape
    - match: '(?<=^|[,.()\s])(above|afterwards|begin|below|block|by|case|cleanup|else|elseif|exception|finally|for|from|keyed-by|if|in|otherwise|select|then|to|unless|until:?|using|when|while:?)(?=$|[;,()\s])'
      scope: keyword.control.dylan
    - match: '(?<=^|[,;\s])end(?=$|[;,)\s])'
      scope: keyword.control.dylan
    - match: '(?<=^|[,.(\s])(class|constant|create|default:|define|each-subclass|exclude:|export|export:|function|generic|import:|inherited|init-function:|init-keyword:|init-value:|instance|keyword|let(\s+handler)?|library|local|macro|method|module|prefix:|rename:|required|required-init-keyword:|sealed|setter:|slot|type:|use|variable|virtual)(?=$|[;,.()\s])'
      scope: keyword.other.dylan
    - match: <(abort|array|boolean|byte-string|character|class|collection|complex|condition|deque|double-float|empty-list|error|explicit-key-collection|extended-float|float|function|generic-function|integer|list|method|mutable-collection|mutable-explicit-key-collection|mutable-sequence|number|object-table|object|pair|range|rational|real|restart|sealed-object-error|sequence|serious-condition|simple-error|simple-object-vector|simple-restart|simple-vector|simple-warning|single-float|singleton|stretchy-collection|stretchy-vector|string|symbol|table|type-error|type|unicode-string|vector|warning)>
      scope: support.class.dylan
    - match: '(?<=^|[~,.(\[\s])(abort|abs|add|add!|add-method|add-new|add-new!|all-superclasses|always|any\?|applicable-method\?|apply|aref|aref-setter|as|as-lowercase|as-lowercase!|as-uppercase|as-uppercase!|ash|backward-iteration-protocol|break|ceiling|ceiling/|cerror|check-type|choose|choose-by|complement|compose|concatenate|concatenate-as|condition-format-arguments|condition-format-string|conjoin|copy-sequence|curry|default-handler|dimension|dimensions|direct-subclasses|direct-superclasses|disjoin|do|do-handlers|element|element-setter|empty\?|error|even\?|every\?|false-or|fill!|find-key|find-method|first|first-setter|floor|floor/|forward-iteration-protocol|function-arguments|function-return-values|function-specializers|gcd|generic-function-mandatory-keywords|generic-function-methods|head|head-setter|identity|initialize|instance\?|integral\?|intersection|key-sequence|key-test|last|last-setter|lcm|limited|list|logand|logbit\?|logior|lognot|logxor|make|map|map-as|map-into|max|member\?|merge-hash-codes|min|modulo|negative|negative\?|next-method|object-class|object-hash|odd\?|one-of|pair|pop|pop-last|positive\?|push|push-last|range|rank|rcurry|reduce|reduce1|remainder|remove|remove!|remove-duplicates|remove-duplicates!|remove-key!|remove-method|replace-elements!|replace-subsequence!|restart-query|return-allowed\?|return-description|return-query|reverse|reverse!|round|round/|row-major-index|second|second-setter|shallow-copy|signal|singleton|size|size-setter|slot-initialized\?|sort|sort!|sorted-applicable-methods|subsequence-position|subtype\?|table-protocol|tail|tail-setter|third|third-setter|truncate|truncate/|type-error-expected-type|type-error-value|type-for-copy|type-union|union|values|vector|zero\?)(?=$|[;,.()\s\]])'
      scope: support.function.dylan
  comment-block:
    - match: (?<=^|\s|\()/\*
      push:
        - match: \*/
          pop: true
  escape:
    - match: '\\(<[0-9a-fA-F]*>|.)'
      scope: constant.character.escape.dylan
