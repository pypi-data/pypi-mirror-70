%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Nu
comment: This is a bundle for the Nu programming language (www.programming.nu)
file_extensions:
  - nu
  - Nukefile
first_line_match: ^#!/.*\bnush\b
scope: source.nu
contexts:
  main:
    - match: \b(t|nil|self|super|YES|NO|margs)\b
      scope: constant.language.nu
    - match: '\b((0(x|X)[0-9a-fA-F]*)|-?(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b'
      scope: constant.numeric.nu
    - match: '('')(.|\\[nrfbaes]|\\[0-7]{3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4})('')'
      scope: constant.character.nu
      captures:
        1: punctuation.definition.constant.nu
        4: punctuation.definition.constant.nu
    - match: '(@)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.instance.nu
      captures:
        1: punctuation.definition.variable.nu
    - match: '(\$)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.global.nu
      captures:
        1: punctuation.definition.variable.nu
    - match: '\b[A-Z]\w*\b'
      scope: support.class.nu
    - match: (;.*|#.*)(@(abstract|copyright|discussion|file|header|info).*)
      scope: comment.nudoc.nu
      captures:
        1: punctuation.definition.comment.nudoc.nu
        2: support.comment.nudoc.nu
    - match: (;).*$\n?
      scope: comment.line.semicolon.nu
      captures:
        1: punctuation.definition.comment.nu
    - match: (#).*$\n?
      scope: comment.line.hash.nu
      captures:
        1: punctuation.definition.comment.nu
    - match: '-"'
      captures:
        0: punctuation.definition.string.begin.nu
      push:
        - meta_scope: string.quoted.double.unescaped.nu
        - match: '"'
          captures:
            0: punctuation.definition.string.end.nu
          pop: true
        - include: interpolated_nu
    - match: \+?"
      captures:
        0: punctuation.definition.string.begin.nu
      push:
        - meta_scope: string.quoted.double.escaped.nu
        - match: '"'
          captures:
            0: punctuation.definition.string.end.nu
          pop: true
        - include: escaped_char
        - include: interpolated_nu
    - match: "<<[+](.*)"
      captures:
        0: punctuation.definition.string.begin.nu
      push:
        - meta_scope: string.unquoted.heredoc.escaped.nu
        - match: \1
          captures:
            0: punctuation.definition.string.end.nu
          pop: true
        - include: escaped_char
        - include: interpolated_nu
    - match: "<<[-](.*)"
      captures:
        0: punctuation.definition.string.begin.nu
      push:
        - meta_scope: string.unquoted.heredoc.unescaped.nu
        - match: \1
          captures:
            0: punctuation.definition.string.end.nu
          pop: true
        - include: interpolated_nu
    - match: "(/)(?=[^ ])"
      captures:
        1: punctuation.definition.regex.begin.nu
      push:
        - meta_scope: string.regexp.nu
        - match: "/[isxlm]*"
          captures:
            0: punctuation.definition.regex.end.nu
          pop: true
        - match: \\/
          scope: constant.character.escape.nu
    - match: \b(class)\s+((\w|\-|\!|\?)*)(\s+(is)\s+((\w|\-|\!|\?)*))?
      scope: meta.class.nu
      captures:
        1: keyword.control.class.nu
        2: entity.name.function.nu
        5: keyword.control.is.nu
        6: entity.name.function.nu
    - match: \b(protocol)\s+((\w)*)
      scope: meta.protocol.nu
      captures:
        1: keyword.control.protocol.nu
        2: entity.name.function.nu
    - match: \((import)\s+(\w*)
      scope: meta.import.nu
      captures:
        1: keyword.control.import.nu
        2: entity.name.type.class.nu
    - match: '\((global)\s+([\w\-]*)'
      scope: meta.global.nu
      captures:
        1: keyword.control.global.nu
        2: variable.other.readwrite.global.nu
    - match: '\(([+-]|[ic]method)\s+\((\w+)\)\s+(\w+)\s+(is)'
      scope: meta.method.nu.zero-args
      captures:
        1: keyword.control.method.nu
        2: storage.type.class.nu
        3: entity.name.function.nu
        4: keyword.control.is.nu
    - match: '\(([+-]|[ic]method)\s+\((\w+)\)\s+(\w+\:)\s*\((\w+)\)\s+(\w+)\s+(is)'
      scope: meta.method.nu.one-arg
      captures:
        1: keyword.control.method.nu
        2: storage.type.class.nu
        3: entity.name.function.nu
        4: storage.type.class.nu
        5: variable.parameter.function.nu
        6: keyword.control.is.nu
    - match: '\(([+-]|[ic]method)\s+\((\w+)\)\s+(\w+\:)\s*\((\w+)\)\s+(\w+)\s+(\w+\:)\s*\((\w+)\)\s+(\w+)\s+(is)'
      scope: meta.method.nu.two-args
      captures:
        1: keyword.control.method.nu
        2: storage.type.class.nu
        3: entity.name.function.nu
        4: storage.type.class.nu
        5: variable.parameter.function.nu
        6: entity.name.function.nu
        7: storage.type.class.nu
        8: variable.parameter.function.nu
        9: keyword.control.is.nu
    - match: '\(([+-]|[ic]method)\s+\((\w+)\)\s+(\w+\:)\s*\((\w+)\)\s+(\w+)\s+(\w+\:)\s*\((\w+)\)\s+(\w+)\s+(\w+\:)\s*\((\w+)\)\s+(\w+)\s+(is)'
      scope: meta.method.nu.three-args
      captures:
        1: keyword.control.method.nu
        10: storage.type.class.nu
        11: variable.parameter.function.nu
        12: keyword.control.is.nu
        2: storage.type.class.nu
        3: entity.name.function.nu
        4: storage.type.class.nu
        5: variable.parameter.function.nu
        6: entity.name.function.nu
        7: storage.type.class.nu
        8: variable.parameter.function.nu
        9: entity.name.function.nu
    - match: \b((ivar)\s+((\w|\-|\!|\?)*)(\s+(is)\s+((\w|\-|\!|\?)*))?|ivars|ivar-accessors)
      scope: meta.ivars.nu
      captures:
        1: keyword.control.class.nu
        2: entity.name.function.nu
        5: keyword.control.class.nu
        6: entity.name.function.nu
    - match: \b(function|macro|macro-0|macro-1)\s+((\w|\-|\!|\?)*)
      scope: meta.function.nu
      captures:
        1: keyword.control.function-type.nu
        2: entity.name.function.nu
    - match: '(task)\s+(\"\w+")\s?(:?)\s?(\"[\w\s]+\")?\s+(is)'
      scope: meta.nukefile.task.nu
      captures:
        1: keyword.control.task.nu
        2: entity.name.task.nu
        3: keyword.control.colon.nu
        4: storage.description.task.nu
        5: keyword.control.is.nu
    - match: '(task)\s+(\"\w+\")\s?(:)?\s?(\"[\w\s]+\")?\s?(=>?)\s?(\"[\"\w\s]+\")?\s+(is)'
      scope: meta.nukefile.task.with-dependencies.nu
      captures:
        1: keyword.control.task.nu
        2: entity.name.task.nu
        3: keyword.control.colon.nu
        4: storage.description.task.nu
        5: keyword.control.arrow.nu
        6: support.dependency.task.nu
        7: keyword.control.is.nu
    - match: (task)\s+(\"default\")\s+(=>)\s+(\"\w+\")
      scope: meta.nukefile.default.task.nu
      captures:
        1: keyword.control.task.nu
        2: entity.name.task.nu
        3: keyword.control.arrow.nu
        4: support.name.task.nu
        5: keyword.control.is.nu
    - match: \b(let|set|cond|case|do|loop|until|while|for|break|continue|if|else|elseif|then|unless|try|throw|catch|array|dict|list|return)\b
      scope: keyword.control.nu
    - match: \b(eq|neq|and|or|synchronized|not)\b
      scope: keyword.operator.nu
    - match: "[/*+-/&|><=!`@]"
      scope: keyword.operator.symbolic.nu
    - match: \b(append|atom|cons|car|cdr|context|eval|head|quote|parse|progn|send|tail|load|system|puts|help|version|beep|first|rest|macrox|print)\b
      scope: support.function.nu
    - match: \b(assert_equal|assert_not_equal|assert_throws|assert_in_delta|assert_true|assert_false|assert_less_than|assert_greater_than)\b
      scope: support.function.testing.nu
    - match: \b(task|application-tasks|bundle-tasks|compilation-tasks|dylib-tasks|framework-tasks|library-tasks)\b
      scope: keyword.nukefile.nu
  escaped_char:
    - match: '\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|.)'
      scope: constant.character.escape.nu
  interpolated_nu:
    - match: '#\{(\})'
      scope: source.nu.embedded.source
      captures:
        0: punctuation.section.embedded.nu
        1: source.nu.embedded.source.empty
    - match: '#\{'
      captures:
        0: punctuation.section.embedded.nu
      push:
        - meta_scope: source.nu.embedded.source
        - match: '\}'
          captures:
            0: punctuation.section.embedded.nu
          pop: true
        - include: main
