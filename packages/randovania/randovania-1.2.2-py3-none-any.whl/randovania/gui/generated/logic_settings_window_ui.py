# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/travis/build/randovania/randovania/randovania/gui/ui_files/logic_settings_window.ui',
# licensing of '/home/travis/build/randovania/randovania/randovania/gui/ui_files/logic_settings_window.ui' applies.
#
# Created: Sat Jun  6 15:32:39 2020
#      by: pyside2-uic  running on PySide2 5.12.0
#
# WARNING! All changes made in this file will be lost!

from PySide2 import QtCore, QtGui, QtWidgets

class Ui_LogicSettingsWindow(object):
    def setupUi(self, LogicSettingsWindow):
        LogicSettingsWindow.setObjectName("LogicSettingsWindow")
        LogicSettingsWindow.resize(765, 702)
        self.verticalLayout = QtWidgets.QVBoxLayout(LogicSettingsWindow)
        self.verticalLayout.setContentsMargins(0, 4, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.menuBar = QtWidgets.QMenuBar(LogicSettingsWindow)
        self.menuBar.setObjectName("menuBar")
        self.verticalLayout.addWidget(self.menuBar)
        self.name_layout = QtWidgets.QHBoxLayout()
        self.name_layout.setObjectName("name_layout")
        self.name_label = QtWidgets.QLabel(LogicSettingsWindow)
        self.name_label.setObjectName("name_label")
        self.name_layout.addWidget(self.name_label)
        self.name_edit = QtWidgets.QLineEdit(LogicSettingsWindow)
        self.name_edit.setObjectName("name_edit")
        self.name_layout.addWidget(self.name_edit)
        self.verticalLayout.addLayout(self.name_layout)
        self.main_tab_widget = QtWidgets.QTabWidget(LogicSettingsWindow)
        self.main_tab_widget.setObjectName("main_tab_widget")
        self.logic_tab = QtWidgets.QWidget()
        self.logic_tab.setObjectName("logic_tab")
        self.logic_tab_layout = QtWidgets.QVBoxLayout(self.logic_tab)
        self.logic_tab_layout.setContentsMargins(0, 0, 0, 0)
        self.logic_tab_layout.setObjectName("logic_tab_layout")
        self.logic_tab_widget = QtWidgets.QTabWidget(self.logic_tab)
        self.logic_tab_widget.setObjectName("logic_tab_widget")
        self.trick_level_tab = QtWidgets.QWidget()
        self.trick_level_tab.setObjectName("trick_level_tab")
        self.trick_level_top_layout = QtWidgets.QVBoxLayout(self.trick_level_tab)
        self.trick_level_top_layout.setContentsMargins(0, 0, 0, 0)
        self.trick_level_top_layout.setObjectName("trick_level_top_layout")
        self.trick_level_scroll = QtWidgets.QScrollArea(self.trick_level_tab)
        self.trick_level_scroll.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.trick_level_scroll.setFrameShadow(QtWidgets.QFrame.Plain)
        self.trick_level_scroll.setWidgetResizable(True)
        self.trick_level_scroll.setObjectName("trick_level_scroll")
        self.trick_level_scroll_contents = QtWidgets.QWidget()
        self.trick_level_scroll_contents.setGeometry(QtCore.QRect(0, 0, 741, 533))
        self.trick_level_scroll_contents.setObjectName("trick_level_scroll_contents")
        self.trick_level_layout = QtWidgets.QVBoxLayout(self.trick_level_scroll_contents)
        self.trick_level_layout.setContentsMargins(4, 8, 4, 0)
        self.trick_level_layout.setObjectName("trick_level_layout")
        self.logic_description_label = QtWidgets.QLabel(self.trick_level_scroll_contents)
        self.logic_description_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_description_label.setWordWrap(True)
        self.logic_description_label.setObjectName("logic_description_label")
        self.trick_level_layout.addWidget(self.logic_description_label)
        self.logic_combo_box = QtWidgets.QComboBox(self.trick_level_scroll_contents)
        self.logic_combo_box.setObjectName("logic_combo_box")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.logic_combo_box.addItem("")
        self.trick_level_layout.addWidget(self.logic_combo_box)
        self.logic_level_label = QtWidgets.QLabel(self.trick_level_scroll_contents)
        self.logic_level_label.setMinimumSize(QtCore.QSize(0, 50))
        self.logic_level_label.setMaximumSize(QtCore.QSize(16777215, 50))
        self.logic_level_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.logic_level_label.setWordWrap(True)
        self.logic_level_label.setObjectName("logic_level_label")
        self.trick_level_layout.addWidget(self.logic_level_label)
        self.trick_level_line = QtWidgets.QFrame(self.trick_level_scroll_contents)
        self.trick_level_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.trick_level_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.trick_level_line.setObjectName("trick_level_line")
        self.trick_level_layout.addWidget(self.trick_level_line)
        self.trick_level_help_label = QtWidgets.QLabel(self.trick_level_scroll_contents)
        self.trick_level_help_label.setWordWrap(True)
        self.trick_level_help_label.setObjectName("trick_level_help_label")
        self.trick_level_layout.addWidget(self.trick_level_help_label)
        self.trick_level_scroll.setWidget(self.trick_level_scroll_contents)
        self.trick_level_top_layout.addWidget(self.trick_level_scroll)
        self.logic_tab_widget.addTab(self.trick_level_tab, "")
        self.logic_damage_tab = QtWidgets.QWidget()
        self.logic_damage_tab.setObjectName("logic_damage_tab")
        self.logic_damage_layout = QtWidgets.QVBoxLayout(self.logic_damage_tab)
        self.logic_damage_layout.setContentsMargins(0, 0, 0, 0)
        self.logic_damage_layout.setObjectName("logic_damage_layout")
        self.damage_strictness_group = QtWidgets.QGroupBox(self.logic_damage_tab)
        self.damage_strictness_group.setObjectName("damage_strictness_group")
        self.damage_strictness_layout = QtWidgets.QVBoxLayout(self.damage_strictness_group)
        self.damage_strictness_layout.setObjectName("damage_strictness_layout")
        self.damage_strictness_label = QtWidgets.QLabel(self.damage_strictness_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.damage_strictness_label.sizePolicy().hasHeightForWidth())
        self.damage_strictness_label.setSizePolicy(sizePolicy)
        self.damage_strictness_label.setWordWrap(True)
        self.damage_strictness_label.setObjectName("damage_strictness_label")
        self.damage_strictness_layout.addWidget(self.damage_strictness_label)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.damage_strictness_layout.addItem(spacerItem)
        self.damage_strictness_combo = QtWidgets.QComboBox(self.damage_strictness_group)
        self.damage_strictness_combo.setObjectName("damage_strictness_combo")
        self.damage_strictness_combo.addItem("")
        self.damage_strictness_combo.addItem("")
        self.damage_strictness_combo.addItem("")
        self.damage_strictness_layout.addWidget(self.damage_strictness_combo)
        self.logic_damage_layout.addWidget(self.damage_strictness_group)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.logic_damage_layout.addItem(spacerItem1)
        self.logic_tab_widget.addTab(self.logic_damage_tab, "")
        self.goal_tab = QtWidgets.QWidget()
        self.goal_tab.setObjectName("goal_tab")
        self.goal_layout = QtWidgets.QVBoxLayout(self.goal_tab)
        self.goal_layout.setContentsMargins(4, 8, 4, 0)
        self.goal_layout.setObjectName("goal_layout")
        self.skytemple_description = QtWidgets.QLabel(self.goal_tab)
        self.skytemple_description.setWordWrap(True)
        self.skytemple_description.setObjectName("skytemple_description")
        self.goal_layout.addWidget(self.skytemple_description)
        self.skytemple_combo = QtWidgets.QComboBox(self.goal_tab)
        self.skytemple_combo.setObjectName("skytemple_combo")
        self.skytemple_combo.addItem("")
        self.skytemple_combo.addItem("")
        self.skytemple_combo.addItem("")
        self.goal_layout.addWidget(self.skytemple_combo)
        self.skytemple_slider_layout = QtWidgets.QHBoxLayout()
        self.skytemple_slider_layout.setObjectName("skytemple_slider_layout")
        self.skytemple_slider = QtWidgets.QSlider(self.goal_tab)
        self.skytemple_slider.setMaximum(9)
        self.skytemple_slider.setPageStep(2)
        self.skytemple_slider.setOrientation(QtCore.Qt.Horizontal)
        self.skytemple_slider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.skytemple_slider.setObjectName("skytemple_slider")
        self.skytemple_slider_layout.addWidget(self.skytemple_slider)
        self.skytemple_slider_label = QtWidgets.QLabel(self.goal_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.skytemple_slider_label.sizePolicy().hasHeightForWidth())
        self.skytemple_slider_label.setSizePolicy(sizePolicy)
        self.skytemple_slider_label.setMinimumSize(QtCore.QSize(20, 0))
        self.skytemple_slider_label.setAlignment(QtCore.Qt.AlignCenter)
        self.skytemple_slider_label.setObjectName("skytemple_slider_label")
        self.skytemple_slider_layout.addWidget(self.skytemple_slider_label)
        self.goal_layout.addLayout(self.skytemple_slider_layout)
        self.logic_tab_widget.addTab(self.goal_tab, "")
        self.location_pool_tab = QtWidgets.QWidget()
        self.location_pool_tab.setObjectName("location_pool_tab")
        self.location_pool_layout = QtWidgets.QVBoxLayout(self.location_pool_tab)
        self.location_pool_layout.setContentsMargins(0, 0, 0, 0)
        self.location_pool_layout.setObjectName("location_pool_layout")
        self.randomization_mode_group = QtWidgets.QGroupBox(self.location_pool_tab)
        self.randomization_mode_group.setObjectName("randomization_mode_group")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.randomization_mode_group)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.randomization_mode_label = QtWidgets.QLabel(self.randomization_mode_group)
        self.randomization_mode_label.setWordWrap(True)
        self.randomization_mode_label.setObjectName("randomization_mode_label")
        self.verticalLayout_2.addWidget(self.randomization_mode_label)
        self.randomization_mode_combo = QtWidgets.QComboBox(self.randomization_mode_group)
        self.randomization_mode_combo.setObjectName("randomization_mode_combo")
        self.randomization_mode_combo.addItem("")
        self.randomization_mode_combo.addItem("")
        self.verticalLayout_2.addWidget(self.randomization_mode_combo)
        self.location_pool_layout.addWidget(self.randomization_mode_group)
        self.excluded_locations_group = QtWidgets.QGroupBox(self.location_pool_tab)
        self.excluded_locations_group.setObjectName("excluded_locations_group")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.excluded_locations_group)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.excluded_locations_label = QtWidgets.QLabel(self.excluded_locations_group)
        self.excluded_locations_label.setObjectName("excluded_locations_label")
        self.verticalLayout_5.addWidget(self.excluded_locations_label)
        self.excluded_locations_area = QtWidgets.QScrollArea(self.excluded_locations_group)
        self.excluded_locations_area.setWidgetResizable(True)
        self.excluded_locations_area.setObjectName("excluded_locations_area")
        self.excluded_locations_area_contents = QtWidgets.QWidget()
        self.excluded_locations_area_contents.setGeometry(QtCore.QRect(0, 0, 709, 271))
        self.excluded_locations_area_contents.setObjectName("excluded_locations_area_contents")
        self.excluded_locations_area_layout = QtWidgets.QVBoxLayout(self.excluded_locations_area_contents)
        self.excluded_locations_area_layout.setContentsMargins(0, 0, 0, 0)
        self.excluded_locations_area_layout.setObjectName("excluded_locations_area_layout")
        self.excluded_locations_area.setWidget(self.excluded_locations_area_contents)
        self.verticalLayout_5.addWidget(self.excluded_locations_area)
        self.location_pool_layout.addWidget(self.excluded_locations_group)
        self.logic_tab_widget.addTab(self.location_pool_tab, "")
        self.hint_tab = QtWidgets.QWidget()
        self.hint_tab.setObjectName("hint_tab")
        self.hint_layout = QtWidgets.QVBoxLayout(self.hint_tab)
        self.hint_layout.setContentsMargins(4, 8, 4, 0)
        self.hint_layout.setObjectName("hint_layout")
        self.hint_sky_temple_key_label = QtWidgets.QLabel(self.hint_tab)
        self.hint_sky_temple_key_label.setWordWrap(True)
        self.hint_sky_temple_key_label.setObjectName("hint_sky_temple_key_label")
        self.hint_layout.addWidget(self.hint_sky_temple_key_label)
        self.hint_sky_temple_key_combo = QtWidgets.QComboBox(self.hint_tab)
        self.hint_sky_temple_key_combo.setObjectName("hint_sky_temple_key_combo")
        self.hint_sky_temple_key_combo.addItem("")
        self.hint_sky_temple_key_combo.addItem("")
        self.hint_sky_temple_key_combo.addItem("")
        self.hint_layout.addWidget(self.hint_sky_temple_key_combo)
        self.logic_tab_widget.addTab(self.hint_tab, "")
        self.logic_tab_layout.addWidget(self.logic_tab_widget)
        self.main_tab_widget.addTab(self.logic_tab, "")
        self.patches_tab = QtWidgets.QWidget()
        self.patches_tab.setObjectName("patches_tab")
        self.patches_tab_layout = QtWidgets.QVBoxLayout(self.patches_tab)
        self.patches_tab_layout.setContentsMargins(0, 0, 0, 0)
        self.patches_tab_layout.setObjectName("patches_tab_layout")
        self.patches_tab_widget = QtWidgets.QTabWidget(self.patches_tab)
        self.patches_tab_widget.setObjectName("patches_tab_widget")
        self.patches_damage_tab = QtWidgets.QWidget()
        self.patches_damage_tab.setObjectName("patches_damage_tab")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.patches_damage_tab)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.energy_tank_box = QtWidgets.QGroupBox(self.patches_damage_tab)
        self.energy_tank_box.setObjectName("energy_tank_box")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.energy_tank_box)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.energy_tank_capacity_spin_box = QtWidgets.QSpinBox(self.energy_tank_box)
        self.energy_tank_capacity_spin_box.setMinimum(2)
        self.energy_tank_capacity_spin_box.setMaximum(1000)
        self.energy_tank_capacity_spin_box.setObjectName("energy_tank_capacity_spin_box")
        self.gridLayout_2.addWidget(self.energy_tank_capacity_spin_box, 2, 2, 1, 1)
        self.energy_tank_capacity_description = QtWidgets.QLabel(self.energy_tank_box)
        self.energy_tank_capacity_description.setWordWrap(True)
        self.energy_tank_capacity_description.setObjectName("energy_tank_capacity_description")
        self.gridLayout_2.addWidget(self.energy_tank_capacity_description, 0, 0, 1, 3)
        self.energy_tank_capacity_label = QtWidgets.QLabel(self.energy_tank_box)
        self.energy_tank_capacity_label.setObjectName("energy_tank_capacity_label")
        self.gridLayout_2.addWidget(self.energy_tank_capacity_label, 2, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem2, 1, 1, 1, 1)
        self.verticalLayout_7.addWidget(self.energy_tank_box)
        self.dark_aether_box = QtWidgets.QGroupBox(self.patches_damage_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dark_aether_box.sizePolicy().hasHeightForWidth())
        self.dark_aether_box.setSizePolicy(sizePolicy)
        self.dark_aether_box.setObjectName("dark_aether_box")
        self.dark_aether_layout_2 = QtWidgets.QGridLayout(self.dark_aether_box)
        self.dark_aether_layout_2.setObjectName("dark_aether_layout_2")
        self.varia_suit_spin_box = QtWidgets.QDoubleSpinBox(self.dark_aether_box)
        self.varia_suit_spin_box.setMaximum(60.0)
        self.varia_suit_spin_box.setStepType(QtWidgets.QAbstractSpinBox.AdaptiveDecimalStepType)
        self.varia_suit_spin_box.setProperty("value", 6.0)
        self.varia_suit_spin_box.setObjectName("varia_suit_spin_box")
        self.dark_aether_layout_2.addWidget(self.varia_suit_spin_box, 2, 1, 1, 1)
        self.varia_suit_label = QtWidgets.QLabel(self.dark_aether_box)
        self.varia_suit_label.setObjectName("varia_suit_label")
        self.dark_aether_layout_2.addWidget(self.varia_suit_label, 2, 0, 1, 1)
        self.dark_suit_label = QtWidgets.QLabel(self.dark_aether_box)
        self.dark_suit_label.setObjectName("dark_suit_label")
        self.dark_aether_layout_2.addWidget(self.dark_suit_label, 3, 0, 1, 1)
        self.dark_suit_spin_box = QtWidgets.QDoubleSpinBox(self.dark_aether_box)
        self.dark_suit_spin_box.setMaximum(60.0)
        self.dark_suit_spin_box.setStepType(QtWidgets.QAbstractSpinBox.AdaptiveDecimalStepType)
        self.dark_suit_spin_box.setProperty("value", 1.2)
        self.dark_suit_spin_box.setObjectName("dark_suit_spin_box")
        self.dark_aether_layout_2.addWidget(self.dark_suit_spin_box, 3, 1, 1, 1)
        self.dark_aether_label = QtWidgets.QLabel(self.dark_aether_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dark_aether_label.sizePolicy().hasHeightForWidth())
        self.dark_aether_label.setSizePolicy(sizePolicy)
        self.dark_aether_label.setWordWrap(False)
        self.dark_aether_label.setObjectName("dark_aether_label")
        self.dark_aether_layout_2.addWidget(self.dark_aether_label, 0, 0, 1, 2)
        spacerItem3 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.dark_aether_layout_2.addItem(spacerItem3, 1, 0, 1, 2)
        self.verticalLayout_7.addWidget(self.dark_aether_box)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem4)
        self.patches_tab_widget.addTab(self.patches_damage_tab, "")
        self.elevator_tab = QtWidgets.QWidget()
        self.elevator_tab.setObjectName("elevator_tab")
        self.elevator_layout = QtWidgets.QVBoxLayout(self.elevator_tab)
        self.elevator_layout.setContentsMargins(4, 8, 4, 0)
        self.elevator_layout.setObjectName("elevator_layout")
        self.elevators_description_label = QtWidgets.QLabel(self.elevator_tab)
        self.elevators_description_label.setWordWrap(True)
        self.elevators_description_label.setObjectName("elevators_description_label")
        self.elevator_layout.addWidget(self.elevators_description_label)
        self.elevators_combo = QtWidgets.QComboBox(self.elevator_tab)
        self.elevators_combo.setObjectName("elevators_combo")
        self.elevators_combo.addItem("")
        self.elevators_combo.addItem("")
        self.elevators_combo.addItem("")
        self.elevators_combo.addItem("")
        self.elevators_combo.addItem("")
        self.elevator_layout.addWidget(self.elevators_combo)
        self.patches_tab_widget.addTab(self.elevator_tab, "")
        self.starting_area_tab = QtWidgets.QWidget()
        self.starting_area_tab.setObjectName("starting_area_tab")
        self.starting_area_layout = QtWidgets.QVBoxLayout(self.starting_area_tab)
        self.starting_area_layout.setContentsMargins(4, 8, 4, 0)
        self.starting_area_layout.setObjectName("starting_area_layout")
        self.startingarea_description = QtWidgets.QLabel(self.starting_area_tab)
        self.startingarea_description.setWordWrap(True)
        self.startingarea_description.setObjectName("startingarea_description")
        self.starting_area_layout.addWidget(self.startingarea_description)
        self.starting_area_quick_fill_layout = QtWidgets.QHBoxLayout()
        self.starting_area_quick_fill_layout.setObjectName("starting_area_quick_fill_layout")
        self.starting_area_quick_fill_label = QtWidgets.QLabel(self.starting_area_tab)
        self.starting_area_quick_fill_label.setObjectName("starting_area_quick_fill_label")
        self.starting_area_quick_fill_layout.addWidget(self.starting_area_quick_fill_label)
        self.starting_area_quick_fill_ship = QtWidgets.QPushButton(self.starting_area_tab)
        self.starting_area_quick_fill_ship.setObjectName("starting_area_quick_fill_ship")
        self.starting_area_quick_fill_layout.addWidget(self.starting_area_quick_fill_ship)
        self.starting_area_quick_fill_save_station = QtWidgets.QPushButton(self.starting_area_tab)
        self.starting_area_quick_fill_save_station.setObjectName("starting_area_quick_fill_save_station")
        self.starting_area_quick_fill_layout.addWidget(self.starting_area_quick_fill_save_station)
        self.starting_area_layout.addLayout(self.starting_area_quick_fill_layout)
        self.starting_locations_area = QtWidgets.QScrollArea(self.starting_area_tab)
        self.starting_locations_area.setWidgetResizable(True)
        self.starting_locations_area.setObjectName("starting_locations_area")
        self.starting_locations_contents = QtWidgets.QWidget()
        self.starting_locations_contents.setGeometry(QtCore.QRect(0, 0, 731, 353))
        self.starting_locations_contents.setObjectName("starting_locations_contents")
        self.starting_locations_layout = QtWidgets.QGridLayout(self.starting_locations_contents)
        self.starting_locations_layout.setContentsMargins(4, 4, 4, 4)
        self.starting_locations_layout.setObjectName("starting_locations_layout")
        self.starting_locations_area.setWidget(self.starting_locations_contents)
        self.starting_area_layout.addWidget(self.starting_locations_area)
        self.patches_tab_widget.addTab(self.starting_area_tab, "")
        self.translators_tab = QtWidgets.QWidget()
        self.translators_tab.setObjectName("translators_tab")
        self.translators_top_layout = QtWidgets.QGridLayout(self.translators_tab)
        self.translators_top_layout.setContentsMargins(0, 8, 0, 0)
        self.translators_top_layout.setObjectName("translators_top_layout")
        self.translators_scroll = QtWidgets.QScrollArea(self.translators_tab)
        self.translators_scroll.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.translators_scroll.setFrameShadow(QtWidgets.QFrame.Plain)
        self.translators_scroll.setLineWidth(0)
        self.translators_scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.translators_scroll.setWidgetResizable(True)
        self.translators_scroll.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.translators_scroll.setObjectName("translators_scroll")
        self.translators_scroll_contents = QtWidgets.QWidget()
        self.translators_scroll_contents.setGeometry(QtCore.QRect(0, 0, 741, 525))
        self.translators_scroll_contents.setObjectName("translators_scroll_contents")
        self.translators_layout = QtWidgets.QGridLayout(self.translators_scroll_contents)
        self.translators_layout.setContentsMargins(0, 0, 0, 0)
        self.translators_layout.setObjectName("translators_layout")
        self.translator_randomize_all_button = QtWidgets.QPushButton(self.translators_scroll_contents)
        self.translator_randomize_all_button.setObjectName("translator_randomize_all_button")
        self.translators_layout.addWidget(self.translator_randomize_all_button, 1, 0, 1, 1)
        self.translator_vanilla_colors_button = QtWidgets.QPushButton(self.translators_scroll_contents)
        self.translator_vanilla_colors_button.setObjectName("translator_vanilla_colors_button")
        self.translators_layout.addWidget(self.translator_vanilla_colors_button, 1, 2, 1, 1)
        self.translator_vanilla_actual_button = QtWidgets.QPushButton(self.translators_scroll_contents)
        self.translator_vanilla_actual_button.setObjectName("translator_vanilla_actual_button")
        self.translators_layout.addWidget(self.translator_vanilla_actual_button, 1, 1, 1, 1)
        self.translators_description = QtWidgets.QLabel(self.translators_scroll_contents)
        self.translators_description.setWordWrap(True)
        self.translators_description.setObjectName("translators_description")
        self.translators_layout.addWidget(self.translators_description, 0, 0, 1, 3)
        self.translators_scroll.setWidget(self.translators_scroll_contents)
        self.translators_top_layout.addWidget(self.translators_scroll, 0, 1, 1, 1)
        self.patches_tab_widget.addTab(self.translators_tab, "")
        self.beam_configuration_tab = QtWidgets.QWidget()
        self.beam_configuration_tab.setObjectName("beam_configuration_tab")
        self.beam_configuration_tab_layout = QtWidgets.QVBoxLayout(self.beam_configuration_tab)
        self.beam_configuration_tab_layout.setContentsMargins(4, 8, 4, 0)
        self.beam_configuration_tab_layout.setObjectName("beam_configuration_tab_layout")
        self.beam_configuration_label = QtWidgets.QLabel(self.beam_configuration_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.beam_configuration_label.sizePolicy().hasHeightForWidth())
        self.beam_configuration_label.setSizePolicy(sizePolicy)
        self.beam_configuration_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.beam_configuration_label.setWordWrap(True)
        self.beam_configuration_label.setObjectName("beam_configuration_label")
        self.beam_configuration_tab_layout.addWidget(self.beam_configuration_label)
        self.beam_configuration_group = QtWidgets.QGroupBox(self.beam_configuration_tab)
        self.beam_configuration_group.setTitle("")
        self.beam_configuration_group.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.beam_configuration_group.setFlat(True)
        self.beam_configuration_group.setObjectName("beam_configuration_group")
        self.beam_configuration_layout = QtWidgets.QGridLayout(self.beam_configuration_group)
        self.beam_configuration_layout.setContentsMargins(0, 0, 0, 0)
        self.beam_configuration_layout.setObjectName("beam_configuration_layout")
        self.beam_configuration_tab_layout.addWidget(self.beam_configuration_group)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.beam_configuration_tab_layout.addItem(spacerItem5)
        self.patches_tab_widget.addTab(self.beam_configuration_tab, "")
        self.patches_tab_layout.addWidget(self.patches_tab_widget)
        self.main_tab_widget.addTab(self.patches_tab, "")
        self.verticalLayout.addWidget(self.main_tab_widget)
        self.button_box = QtWidgets.QDialogButtonBox(LogicSettingsWindow)
        self.button_box.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Save)
        self.button_box.setObjectName("button_box")
        self.verticalLayout.addWidget(self.button_box)

        self.retranslateUi(LogicSettingsWindow)
        self.main_tab_widget.setCurrentIndex(0)
        self.logic_tab_widget.setCurrentIndex(0)
        self.patches_tab_widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(LogicSettingsWindow)

    def retranslateUi(self, LogicSettingsWindow):
        LogicSettingsWindow.setWindowTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Customize Preset", None, -1))
        self.name_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Name:", None, -1))
        self.logic_description_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p align=\"justify\">There are logic rules in place which prevent you from being locked out of progression and guaranteeing that you’ll be able to finish the game every time regardless of the distribution of items. More advanced trick levels assumes more knowledge of how the game works and ability to abuse game mechanics.</p><p align=\"justify\">No matter the level, it is always possible to softlock when you enter a room or area that you\'re unable to leave. For example, vanilla beam rooms without the necessary beam to escape, Dark World without Light Beam/Anihhilator Beam, Torvus Bog without Super Missile.</p><p align=\"justify\">However, it may be <span style=\" font-style:italic;\">necessary</span> to enter Dark World without a way to escape if that item is located in the Dark World.</p></body></html>", None, -1))
        self.logic_combo_box.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "No Tricks", None, -1))
        self.logic_combo_box.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Trivial", None, -1))
        self.logic_combo_box.setItemText(2, QtWidgets.QApplication.translate("LogicSettingsWindow", "Easy", None, -1))
        self.logic_combo_box.setItemText(3, QtWidgets.QApplication.translate("LogicSettingsWindow", "Normal", None, -1))
        self.logic_combo_box.setItemText(4, QtWidgets.QApplication.translate("LogicSettingsWindow", "Hard", None, -1))
        self.logic_combo_box.setItemText(5, QtWidgets.QApplication.translate("LogicSettingsWindow", "Hypermode", None, -1))
        self.logic_combo_box.setItemText(6, QtWidgets.QApplication.translate("LogicSettingsWindow", "Minimal Checking", None, -1))
        self.logic_level_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p align=\"justify\">This mode requires no knowledge about the game, nor does it require any abuse of game mechanics, making it ideal for casual and first time players.</p></body></html>", None, -1))
        self.trick_level_help_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>If you want to control the expected level of a specific trick, select the trick below and then move the slider to the level you want.</p><p>Configuring a trick\'s difficulty to above to global difficulty above <span style=\" font-weight:600;\">has no effect</span>.</p><p>Press the ? button to see which rooms use that trick on the selected level.</p></body></html>", None, -1))
        self.logic_tab_widget.setTabText(self.logic_tab_widget.indexOf(self.trick_level_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Trick Level", None, -1))
        self.damage_strictness_group.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Logic damage strictness", None, -1))
        self.damage_strictness_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Certain locations, such as rooms without safe zones in Dark Aether or bosses, requires a certain number of energy tanks (or suits).</p><p>This setting controls how much energy the logic will expect you to have to reach these locations.</p></body></html>", None, -1))
        self.damage_strictness_combo.setCurrentText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Strict (1×)", None, -1))
        self.damage_strictness_combo.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "Strict (1×)", None, -1))
        self.damage_strictness_combo.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Medium (1.5×)", None, -1))
        self.damage_strictness_combo.setItemText(2, QtWidgets.QApplication.translate("LogicSettingsWindow", "Lenient (2×)", None, -1))
        self.logic_tab_widget.setTabText(self.logic_tab_widget.indexOf(self.logic_damage_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Damage", None, -1))
        self.skytemple_description.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Controls where the Sky Temple Keys will be located.</p><p>All Guardians and Sub-Guardians: One key will be placed in each of the guardians and sub-guardians.<br/>Guardians: One key will be placed as the reward of each of the guardians.<br/>Collect Sky Temple Keys: A configurable quantity will be shuffled over the game world.</p><p>The Guardians are: Amorbis, Chykka and Quadraxis.<br/>The Sub-Guardians are: Bomb Guardian, Jump Guardian, Boost Guardian, Grapple Guardian, Spider Guardian and Power Bomb Guardian.</p><p>You can always check Sky Temple Gateway for hints where the keys were placed.</p></body></html>", None, -1))
        self.skytemple_combo.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "Guardians and Sub-Guardians", None, -1))
        self.skytemple_combo.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Guardians", None, -1))
        self.skytemple_combo.setItemText(2, QtWidgets.QApplication.translate("LogicSettingsWindow", "Collect Sky Temple Keys", None, -1))
        self.skytemple_slider_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "0", None, -1))
        self.logic_tab_widget.setTabText(self.logic_tab_widget.indexOf(self.goal_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Goal", None, -1))
        self.randomization_mode_group.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Randomization Mode", None, -1))
        self.randomization_mode_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>This setting controls how Randovania will shuffle items.</p><p><span style=\" font-weight:600;\">Full:</span> All items can be placed in any location.</p><p><span style=\" font-weight:600;\">Major/minor split:</span> Major items (i.e., major upgrades, Energy Tanks, Dark Temple Keys, and Energy Transfer Modules) and minor items (i.e, expansions) will be shuffled separately. Major items in excess of the number of major locations will be placed in minor locations, and vice versa.</p></body></html>", None, -1))
        self.randomization_mode_combo.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "Full", None, -1))
        self.randomization_mode_combo.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Major/minor split", None, -1))
        self.excluded_locations_group.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Available Locations", None, -1))
        self.excluded_locations_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Choose which locations are considered for placing items.</p></body></html>", None, -1))
        self.logic_tab_widget.setTabText(self.logic_tab_widget.indexOf(self.location_pool_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Location Pool", None, -1))
        self.hint_sky_temple_key_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>This controls how precise the hints for Sky Temple Keys in Sky Temple Gateway are.</p><p><span style=\" font-weight:600;\">No hints</span>: The scans provide no useful information.</p><p><span style=\" font-weight:600;\">Show only the area name</span>: Each scan says the corresponding key is in &quot;Temple Grounds&quot;, &quot;Agon Wastes&quot;, etc.<br/>Aether and Dark Aether are distinguished; for example, &quot;Agon Wastes&quot; refers only to the light world.</p><p><span style=\" font-weight:600;\">Show area and room name</span>: Each scan says the corresponding key is in &quot;Great Temple - Transport A Access&quot;, &quot;Ing Hive - Hive Entrance&quot;, etc. For rooms with more than one item location, there\'s no way to distinguish which one of them that key is in.</p></body></html>", None, -1))
        self.hint_sky_temple_key_combo.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "No hints", None, -1))
        self.hint_sky_temple_key_combo.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Show only the area name", None, -1))
        self.hint_sky_temple_key_combo.setItemText(2, QtWidgets.QApplication.translate("LogicSettingsWindow", "Show area and room name", None, -1))
        self.logic_tab_widget.setTabText(self.logic_tab_widget.indexOf(self.hint_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Hints", None, -1))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.logic_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Randomizer Logic", None, -1))
        self.energy_tank_box.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Energy tank capacity", None, -1))
        self.energy_tank_capacity_spin_box.setSuffix(QtWidgets.QApplication.translate("LogicSettingsWindow", " energy", None, -1))
        self.energy_tank_capacity_description.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Configure how much energy each Energy Tank you collect will provide. Your base energy is always this quantity, minus 1.</p><p>While logic will respect this value, only the original value (100) has been tested.</p></body></html>", None, -1))
        self.energy_tank_capacity_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Energy per tank", None, -1))
        self.dark_aether_box.setTitle(QtWidgets.QApplication.translate("LogicSettingsWindow", "Dark Aether damage", None, -1))
        self.varia_suit_spin_box.setSuffix(QtWidgets.QApplication.translate("LogicSettingsWindow", " energy/s", None, -1))
        self.varia_suit_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Varia Suit", None, -1))
        self.dark_suit_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Dark Suit", None, -1))
        self.dark_suit_spin_box.setSuffix(QtWidgets.QApplication.translate("LogicSettingsWindow", " energy/s", None, -1))
        self.dark_aether_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Configure how much damage per second you take in Dark Aether, per suit.<br/>Light Suit is always imune.</p><p>Logic always use the default value for checking, so higher values may cause impossible games.</p></body></html>", None, -1))
        self.patches_tab_widget.setTabText(self.patches_tab_widget.indexOf(self.patches_damage_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Damage", None, -1))
        self.elevators_description_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Controls what each elevator connects to.</p><p><span style=\" font-weight:600;\">Original Connections</span>: all elevators are connected to what they do in the original game.</p><p><span style=\" font-weight:600;\">Two-way, between areas</span>: after taking an elevator, the elevator in the room you\'re left brings you to where you where. An elevator will never connect to another in the same area.</p><p><span style=\" font-weight:600;\">Two-way, unchecked</span>: after taking an elevator, the elevator in the room you\'re left brings you to where you where. <span style=\" font-style:italic;\">Experimental, can cause incompletable matches.</span></p><p><span style=\" font-weight:600;\">One-way, elevator room</span>: all elevators brings you to another elevator room, but going backwards can go somewhere else. <span style=\" font-style:italic;\">Experimental, can cause incompletable matches.</span></p><p><span style=\" font-weight:600;\">One-way, anywhere</span>: elevators are connected to any room from the game. <span style=\" font-style:italic;\">Experimental, can cause incompletable matches.</span><br/><span style=\" font-style:italic;\">Warning:</span> there\'s an audio bug whenever you take an elevator. This bug lasts until you restart the game.</p></body></html>", None, -1))
        self.elevators_combo.setItemText(0, QtWidgets.QApplication.translate("LogicSettingsWindow", "Original Connections", None, -1))
        self.elevators_combo.setItemText(1, QtWidgets.QApplication.translate("LogicSettingsWindow", "Random: Two-way, between areas", None, -1))
        self.elevators_combo.setItemText(2, QtWidgets.QApplication.translate("LogicSettingsWindow", "Random: Two-way, unchecked", None, -1))
        self.elevators_combo.setItemText(3, QtWidgets.QApplication.translate("LogicSettingsWindow", "Random: One-way, elevator room", None, -1))
        self.elevators_combo.setItemText(4, QtWidgets.QApplication.translate("LogicSettingsWindow", "Random: One-way, anywhere", None, -1))
        self.patches_tab_widget.setTabText(self.patches_tab_widget.indexOf(self.elevator_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Elevators", None, -1))
        self.startingarea_description.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>The area where the game starts at can be customized, being selected randomly from a list.</p><p>For ease of use, you can select some pre-defined list of locations. They are:<br/>Ship: Just Temple Grounds - Landing Site, the vanilla location.<br/>Save Stations: All areas with Save Stations.</p><p><span style=\" font-weight:600;\">WARNING</span>: depending on the starting items that are configured, it may be impossible to start at the chosen place. In that case, the generation will fail.</p></body></html>", None, -1))
        self.starting_area_quick_fill_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Quick Fill with:", None, -1))
        self.starting_area_quick_fill_ship.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Ship (Default)", None, -1))
        self.starting_area_quick_fill_save_station.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Save Station", None, -1))
        self.patches_tab_widget.setTabText(self.patches_tab_widget.indexOf(self.starting_area_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Starting Area", None, -1))
        self.translator_randomize_all_button.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Randomize All", None, -1))
        self.translator_vanilla_colors_button.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Vanilla (Colors)", None, -1))
        self.translator_vanilla_actual_button.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "Vanilla (Actual)", None, -1))
        self.translators_description.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Change which translator is required for all the gates in the game. Their colors are changed to match the necessary translator.</p><p>There are two vanilla options: using the actual translator requirements in the game, and using the vanilla gate colors.<br/>This is because in the original game, some translator gates are colored one way, but the translator requirement is something else.</p><p>The Emerald gate in Great Temple - Temple Sanctuary has a special case, when elevators aren\'t vanilla: if you enter Great Temple via Transport A, it will be permanently down.</p></body></html>", None, -1))
        self.patches_tab_widget.setTabText(self.patches_tab_widget.indexOf(self.translators_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Translator Gates", None, -1))
        self.beam_configuration_label.setText(QtWidgets.QApplication.translate("LogicSettingsWindow", "<html><head/><body><p>Configure what each beam uses as ammo and how much ammo is consumed when shooting it uncharged, charged or with a charge combo.</p><p>Logic always uses the default values.</p><p><span style=\" font-weight:600;\">Known Issue: </span>If you\'re out of the ammo a beam normally uses, you\'ll be unable to shoot that beam regardless of what it actually uses to shoot.</p></body></html>", None, -1))
        self.patches_tab_widget.setTabText(self.patches_tab_widget.indexOf(self.beam_configuration_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Beam Configuration", None, -1))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.patches_tab), QtWidgets.QApplication.translate("LogicSettingsWindow", "Game Modifications", None, -1))

