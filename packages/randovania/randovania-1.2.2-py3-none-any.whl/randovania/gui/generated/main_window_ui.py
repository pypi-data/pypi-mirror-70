# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/travis/build/randovania/randovania/randovania/gui/ui_files/main_window.ui',
# licensing of '/home/travis/build/randovania/randovania/randovania/gui/ui_files/main_window.ui' applies.
#
# Created: Sat Jun  6 15:32:39 2020
#      by: pyside2-uic  running on PySide2 5.12.0
#
# WARNING! All changes made in this file will be lost!

from PySide2 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(714, 596)
        MainWindow.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.centralWidget.setObjectName("centralWidget")
        self.main_layout = QtWidgets.QVBoxLayout(self.centralWidget)
        self.main_layout.setContentsMargins(0, 8, 0, 4)
        self.main_layout.setObjectName("main_layout")
        self.main_tab_widget = QtWidgets.QTabWidget(self.centralWidget)
        self.main_tab_widget.setObjectName("main_tab_widget")
        self.welcome_tab = QtWidgets.QWidget()
        self.welcome_tab.setObjectName("welcome_tab")
        self.welcome_layout = QtWidgets.QGridLayout(self.welcome_tab)
        self.welcome_layout.setContentsMargins(0, 4, 0, 0)
        self.welcome_layout.setObjectName("welcome_layout")
        self.welcome_tab_widget = QtWidgets.QTabWidget(self.welcome_tab)
        self.welcome_tab_widget.setObjectName("welcome_tab_widget")
        self.tab_intro = QtWidgets.QWidget()
        self.tab_intro.setObjectName("tab_intro")
        self.intro_layout = QtWidgets.QGridLayout(self.tab_intro)
        self.intro_layout.setContentsMargins(8, 4, 8, 0)
        self.intro_layout.setObjectName("intro_layout")
        self.intro_label = QtWidgets.QLabel(self.tab_intro)
        self.intro_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.intro_label.setWordWrap(True)
        self.intro_label.setObjectName("intro_label")
        self.intro_layout.addWidget(self.intro_label, 0, 0, 1, 3)
        self.open_faq_button = QtWidgets.QPushButton(self.tab_intro)
        self.open_faq_button.setObjectName("open_faq_button")
        self.intro_layout.addWidget(self.open_faq_button, 5, 0, 1, 1)
        self.open_database_viewer_button = QtWidgets.QPushButton(self.tab_intro)
        self.open_database_viewer_button.setObjectName("open_database_viewer_button")
        self.intro_layout.addWidget(self.open_database_viewer_button, 5, 2, 1, 1)
        self.intro_play_now_button = QtWidgets.QPushButton(self.tab_intro)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setWeight(75)
        font.setBold(True)
        self.intro_play_now_button.setFont(font)
        self.intro_play_now_button.setObjectName("intro_play_now_button")
        self.intro_layout.addWidget(self.intro_play_now_button, 2, 1, 1, 1)
        self.help_offer_label = QtWidgets.QLabel(self.tab_intro)
        self.help_offer_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.help_offer_label.setWordWrap(True)
        self.help_offer_label.setObjectName("help_offer_label")
        self.intro_layout.addWidget(self.help_offer_label, 4, 0, 1, 3)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.intro_layout.addItem(spacerItem, 3, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.intro_layout.addItem(spacerItem1, 1, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.intro_layout.addItem(spacerItem2, 6, 1, 1, 1)
        self.welcome_tab_widget.addTab(self.tab_intro, "")
        self.tab_play = QtWidgets.QWidget()
        self.tab_play.setObjectName("tab_play")
        self.play_layout = QtWidgets.QVBoxLayout(self.tab_play)
        self.play_layout.setContentsMargins(8, 0, 0, 0)
        self.play_layout.setObjectName("play_layout")
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.play_layout.addItem(spacerItem3)
        self.play_existing_permalink_group = QtWidgets.QGroupBox(self.tab_play)
        self.play_existing_permalink_group.setObjectName("play_existing_permalink_group")
        self.play_existing_permalink_layout = QtWidgets.QGridLayout(self.play_existing_permalink_group)
        self.play_existing_permalink_layout.setObjectName("play_existing_permalink_layout")
        self.import_permalink_button = QtWidgets.QPushButton(self.play_existing_permalink_group)
        self.import_permalink_button.setObjectName("import_permalink_button")
        self.play_existing_permalink_layout.addWidget(self.import_permalink_button, 1, 0, 1, 1)
        self.import_game_file_label = QtWidgets.QLabel(self.play_existing_permalink_group)
        self.import_game_file_label.setObjectName("import_game_file_label")
        self.play_existing_permalink_layout.addWidget(self.import_game_file_label, 2, 0, 1, 1)
        self.import_permalink_label = QtWidgets.QLabel(self.play_existing_permalink_group)
        self.import_permalink_label.setObjectName("import_permalink_label")
        self.play_existing_permalink_layout.addWidget(self.import_permalink_label, 0, 0, 1, 1)
        self.import_game_file_button = QtWidgets.QPushButton(self.play_existing_permalink_group)
        self.import_game_file_button.setObjectName("import_game_file_button")
        self.play_existing_permalink_layout.addWidget(self.import_game_file_button, 3, 0, 1, 1)
        self.play_layout.addWidget(self.play_existing_permalink_group)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.play_layout.addItem(spacerItem4)
        self.play_new_permalink_group = QtWidgets.QGroupBox(self.tab_play)
        self.play_new_permalink_group.setObjectName("play_new_permalink_group")
        self.play_new_permalink_layout = QtWidgets.QGridLayout(self.play_new_permalink_group)
        self.play_new_permalink_layout.setObjectName("play_new_permalink_layout")
        self.create_new_seed_label = QtWidgets.QLabel(self.play_new_permalink_group)
        self.create_new_seed_label.setObjectName("create_new_seed_label")
        self.play_new_permalink_layout.addWidget(self.create_new_seed_label, 0, 0, 1, 1)
        self.create_new_seed_button = QtWidgets.QPushButton(self.play_new_permalink_group)
        self.create_new_seed_button.setObjectName("create_new_seed_button")
        self.play_new_permalink_layout.addWidget(self.create_new_seed_button, 1, 0, 1, 1)
        self.play_layout.addWidget(self.play_new_permalink_group)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.play_layout.addItem(spacerItem5)
        self.welcome_tab_widget.addTab(self.tab_play, "")
        self.tab_create_seed = QtWidgets.QWidget()
        self.tab_create_seed.setObjectName("tab_create_seed")
        self.create_layout = QtWidgets.QGridLayout(self.tab_create_seed)
        self.create_layout.setContentsMargins(8, 4, 8, 0)
        self.create_layout.setObjectName("create_layout")
        spacerItem6 = QtWidgets.QSpacerItem(20, 15, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.create_layout.addItem(spacerItem6, 3, 0, 1, 4)
        self.create_seed_first_row_layout = QtWidgets.QHBoxLayout()
        self.create_seed_first_row_layout.setObjectName("create_seed_first_row_layout")
        self.create_choose_preset_label = QtWidgets.QLabel(self.tab_create_seed)
        self.create_choose_preset_label.setMaximumSize(QtCore.QSize(150, 16777215))
        self.create_choose_preset_label.setObjectName("create_choose_preset_label")
        self.create_seed_first_row_layout.addWidget(self.create_choose_preset_label)
        self.create_preset_combo = QtWidgets.QComboBox(self.tab_create_seed)
        self.create_preset_combo.setObjectName("create_preset_combo")
        self.create_seed_first_row_layout.addWidget(self.create_preset_combo)
        self.create_customize_button = QtWidgets.QPushButton(self.tab_create_seed)
        self.create_customize_button.setMaximumSize(QtCore.QSize(100, 16777215))
        self.create_customize_button.setObjectName("create_customize_button")
        self.create_seed_first_row_layout.addWidget(self.create_customize_button)
        self.preset_tool_button = QtWidgets.QToolButton(self.tab_create_seed)
        self.preset_tool_button.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        self.preset_tool_button.setObjectName("preset_tool_button")
        self.create_seed_first_row_layout.addWidget(self.preset_tool_button)
        self.create_layout.addLayout(self.create_seed_first_row_layout, 1, 0, 1, 4)
        self.create_generate_race_button = QtWidgets.QPushButton(self.tab_create_seed)
        self.create_generate_race_button.setObjectName("create_generate_race_button")
        self.create_layout.addWidget(self.create_generate_race_button, 7, 2, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.create_layout.addItem(spacerItem7, 6, 0, 1, 4)
        self.create_preset_description = QtWidgets.QLabel(self.tab_create_seed)
        self.create_preset_description.setMinimumSize(QtCore.QSize(0, 40))
        self.create_preset_description.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.create_preset_description.setWordWrap(True)
        self.create_preset_description.setObjectName("create_preset_description")
        self.create_layout.addWidget(self.create_preset_description, 2, 0, 1, 4)
        self.create_generate_button = QtWidgets.QPushButton(self.tab_create_seed)
        self.create_generate_button.setObjectName("create_generate_button")
        self.create_layout.addWidget(self.create_generate_button, 7, 1, 1, 1)
        self.create_describe_right_label = QtWidgets.QLabel(self.tab_create_seed)
        self.create_describe_right_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.create_describe_right_label.setWordWrap(True)
        self.create_describe_right_label.setObjectName("create_describe_right_label")
        self.create_layout.addWidget(self.create_describe_right_label, 4, 2, 1, 2)
        self.create_describe_left_label = QtWidgets.QLabel(self.tab_create_seed)
        self.create_describe_left_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.create_describe_left_label.setWordWrap(True)
        self.create_describe_left_label.setObjectName("create_describe_left_label")
        self.create_layout.addWidget(self.create_describe_left_label, 4, 0, 1, 2)
        self.num_players_spin_box = QtWidgets.QSpinBox(self.tab_create_seed)
        self.num_players_spin_box.setCursor(QtCore.Qt.ArrowCursor)
        self.num_players_spin_box.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.num_players_spin_box.setMinimum(1)
        self.num_players_spin_box.setObjectName("num_players_spin_box")
        self.create_layout.addWidget(self.num_players_spin_box, 7, 3, 1, 1)
        self.welcome_tab_widget.addTab(self.tab_create_seed, "")
        self.welcome_layout.addWidget(self.welcome_tab_widget, 0, 0, 1, 1)
        self.main_tab_widget.addTab(self.welcome_tab, "")
        self.help_tab = QtWidgets.QWidget()
        self.help_tab.setObjectName("help_tab")
        self.help_layout = QtWidgets.QVBoxLayout(self.help_tab)
        self.help_layout.setContentsMargins(0, 4, 0, 0)
        self.help_layout.setObjectName("help_layout")
        self.help_tab_widget = QtWidgets.QTabWidget(self.help_tab)
        self.help_tab_widget.setObjectName("help_tab_widget")
        self.tab_faq = QtWidgets.QWidget()
        self.tab_faq.setObjectName("tab_faq")
        self.faq_layout = QtWidgets.QGridLayout(self.tab_faq)
        self.faq_layout.setContentsMargins(0, 0, 0, 0)
        self.faq_layout.setObjectName("faq_layout")
        self.faq_scroll_area = QtWidgets.QScrollArea(self.tab_faq)
        self.faq_scroll_area.setWidgetResizable(True)
        self.faq_scroll_area.setObjectName("faq_scroll_area")
        self.faq_scroll_area_contents = QtWidgets.QWidget()
        self.faq_scroll_area_contents.setGeometry(QtCore.QRect(0, 0, 685, 692))
        self.faq_scroll_area_contents.setObjectName("faq_scroll_area_contents")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.faq_scroll_area_contents)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.faq_label = QtWidgets.QLabel(self.faq_scroll_area_contents)
        self.faq_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.faq_label.setWordWrap(True)
        self.faq_label.setObjectName("faq_label")
        self.gridLayout_7.addWidget(self.faq_label, 0, 0, 1, 1)
        self.faq_scroll_area.setWidget(self.faq_scroll_area_contents)
        self.faq_layout.addWidget(self.faq_scroll_area, 0, 0, 1, 1)
        self.help_tab_widget.addTab(self.tab_faq, "")
        self.differences_tab = QtWidgets.QWidget()
        self.differences_tab.setObjectName("differences_tab")
        self.differences_tab_layout = QtWidgets.QVBoxLayout(self.differences_tab)
        self.differences_tab_layout.setContentsMargins(0, 0, 0, 0)
        self.differences_tab_layout.setObjectName("differences_tab_layout")
        self.differences_scroll_area = QtWidgets.QScrollArea(self.differences_tab)
        self.differences_scroll_area.setWidgetResizable(True)
        self.differences_scroll_area.setObjectName("differences_scroll_area")
        self.differences_scroll_contents = QtWidgets.QWidget()
        self.differences_scroll_contents.setGeometry(QtCore.QRect(0, 0, 685, 796))
        self.differences_scroll_contents.setObjectName("differences_scroll_contents")
        self.differences_scroll_layout_2 = QtWidgets.QVBoxLayout(self.differences_scroll_contents)
        self.differences_scroll_layout_2.setObjectName("differences_scroll_layout_2")
        self.differences_label = QtWidgets.QLabel(self.differences_scroll_contents)
        self.differences_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.differences_label.setWordWrap(True)
        self.differences_label.setObjectName("differences_label")
        self.differences_scroll_layout_2.addWidget(self.differences_label)
        self.differences_scroll_area.setWidget(self.differences_scroll_contents)
        self.differences_tab_layout.addWidget(self.differences_scroll_area)
        self.help_tab_widget.addTab(self.differences_tab, "")
        self.hint_tab = QtWidgets.QWidget()
        self.hint_tab.setObjectName("hint_tab")
        self.hint_tab_layout = QtWidgets.QVBoxLayout(self.hint_tab)
        self.hint_tab_layout.setContentsMargins(0, 0, 0, 0)
        self.hint_tab_layout.setObjectName("hint_tab_layout")
        self.hint_scroll_area = QtWidgets.QScrollArea(self.hint_tab)
        self.hint_scroll_area.setWidgetResizable(True)
        self.hint_scroll_area.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.hint_scroll_area.setObjectName("hint_scroll_area")
        self.hint_scroll_contents = QtWidgets.QWidget()
        self.hint_scroll_contents.setGeometry(QtCore.QRect(0, 0, 700, 447))
        self.hint_scroll_contents.setObjectName("hint_scroll_contents")
        self.hint_scroll_layout = QtWidgets.QVBoxLayout(self.hint_scroll_contents)
        self.hint_scroll_layout.setObjectName("hint_scroll_layout")
        self.hint_label = QtWidgets.QLabel(self.hint_scroll_contents)
        self.hint_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.hint_label.setWordWrap(True)
        self.hint_label.setObjectName("hint_label")
        self.hint_scroll_layout.addWidget(self.hint_label)
        self.hint_tree_widget = QtWidgets.QTreeWidget(self.hint_scroll_contents)
        self.hint_tree_widget.setObjectName("hint_tree_widget")
        self.hint_scroll_layout.addWidget(self.hint_tree_widget)
        self.hint_scroll_area.setWidget(self.hint_scroll_contents)
        self.hint_tab_layout.addWidget(self.hint_scroll_area)
        self.help_tab_widget.addTab(self.hint_tab, "")
        self.tab_tracker = QtWidgets.QWidget()
        self.tab_tracker.setObjectName("tab_tracker")
        self.tracker_tab_layout = QtWidgets.QVBoxLayout(self.tab_tracker)
        self.tracker_tab_layout.setContentsMargins(0, 0, 0, 0)
        self.tracker_tab_layout.setObjectName("tracker_tab_layout")
        self.tracker_scroll_area = QtWidgets.QScrollArea(self.tab_tracker)
        self.tracker_scroll_area.setWidgetResizable(True)
        self.tracker_scroll_area.setObjectName("tracker_scroll_area")
        self.tracker_scroll_area_contents = QtWidgets.QWidget()
        self.tracker_scroll_area_contents.setGeometry(QtCore.QRect(0, 0, 700, 447))
        self.tracker_scroll_area_contents.setObjectName("tracker_scroll_area_contents")
        self.tracker_scroll_area_layout = QtWidgets.QVBoxLayout(self.tracker_scroll_area_contents)
        self.tracker_scroll_area_layout.setObjectName("tracker_scroll_area_layout")
        self.tracker_label = QtWidgets.QLabel(self.tracker_scroll_area_contents)
        self.tracker_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.tracker_label.setWordWrap(True)
        self.tracker_label.setObjectName("tracker_label")
        self.tracker_scroll_area_layout.addWidget(self.tracker_label)
        self.tracker_scroll_area.setWidget(self.tracker_scroll_area_contents)
        self.tracker_tab_layout.addWidget(self.tracker_scroll_area)
        self.help_tab_widget.addTab(self.tab_tracker, "")
        self.help_layout.addWidget(self.help_tab_widget)
        self.main_tab_widget.addTab(self.help_tab, "")
        self.about_tab = QtWidgets.QWidget()
        self.about_tab.setObjectName("about_tab")
        self.about_layout = QtWidgets.QGridLayout(self.about_tab)
        self.about_layout.setContentsMargins(8, 4, 8, 8)
        self.about_layout.setObjectName("about_layout")
        self.about_label = QtWidgets.QLabel(self.about_tab)
        self.about_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.about_label.setWordWrap(True)
        self.about_label.setOpenExternalLinks(True)
        self.about_label.setObjectName("about_label")
        self.about_layout.addWidget(self.about_label, 0, 0, 1, 1)
        self.main_tab_widget.addTab(self.about_tab, "")
        self.main_layout.addWidget(self.main_tab_widget)
        self.progress_box = QtWidgets.QGroupBox(self.centralWidget)
        self.progress_box.setObjectName("progress_box")
        self.progress_box_layout = QtWidgets.QGridLayout(self.progress_box)
        self.progress_box_layout.setContentsMargins(8, 8, 8, 8)
        self.progress_box_layout.setObjectName("progress_box_layout")
        self.stop_background_process_button = QtWidgets.QPushButton(self.progress_box)
        self.stop_background_process_button.setEnabled(False)
        self.stop_background_process_button.setMinimumSize(QtCore.QSize(100, 0))
        self.stop_background_process_button.setMaximumSize(QtCore.QSize(100, 16777215))
        self.stop_background_process_button.setCheckable(False)
        self.stop_background_process_button.setFlat(False)
        self.stop_background_process_button.setObjectName("stop_background_process_button")
        self.progress_box_layout.addWidget(self.stop_background_process_button, 0, 3, 1, 1)
        self.progress_label = QtWidgets.QLabel(self.progress_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.progress_label.sizePolicy().hasHeightForWidth())
        self.progress_label.setSizePolicy(sizePolicy)
        self.progress_label.setText("")
        self.progress_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.progress_label.setWordWrap(True)
        self.progress_label.setObjectName("progress_label")
        self.progress_box_layout.addWidget(self.progress_label, 0, 2, 1, 1)
        self.progress_bar = QtWidgets.QProgressBar(self.progress_box)
        self.progress_bar.setMinimumSize(QtCore.QSize(200, 0))
        self.progress_bar.setMaximumSize(QtCore.QSize(250, 16777215))
        self.progress_bar.setProperty("value", 0)
        self.progress_bar.setInvertedAppearance(False)
        self.progress_bar.setObjectName("progress_bar")
        self.progress_box_layout.addWidget(self.progress_bar, 0, 0, 1, 2)
        self.main_layout.addWidget(self.progress_box)
        MainWindow.setCentralWidget(self.centralWidget)
        self.menu_bar = QtWidgets.QMenuBar(MainWindow)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 714, 22))
        self.menu_bar.setObjectName("menu_bar")
        self.menu_open = QtWidgets.QMenu(self.menu_bar)
        self.menu_open.setObjectName("menu_open")
        self.menu_map_tracker = QtWidgets.QMenu(self.menu_open)
        self.menu_map_tracker.setObjectName("menu_map_tracker")
        self.menu_trick_details = QtWidgets.QMenu(self.menu_open)
        self.menu_trick_details.setObjectName("menu_trick_details")
        self.menu_difficulties = QtWidgets.QMenu(self.menu_trick_details)
        self.menu_difficulties.setObjectName("menu_difficulties")
        self.menu_edit = QtWidgets.QMenu(self.menu_bar)
        self.menu_edit.setObjectName("menu_edit")
        self.menu_database = QtWidgets.QMenu(self.menu_edit)
        self.menu_database.setObjectName("menu_database")
        self.menu_advanced = QtWidgets.QMenu(self.menu_bar)
        self.menu_advanced.setObjectName("menu_advanced")
        MainWindow.setMenuBar(self.menu_bar)
        self.menu_action_data_visualizer = QtWidgets.QAction(MainWindow)
        self.menu_action_data_visualizer.setObjectName("menu_action_data_visualizer")
        self.menu_action_existing_seed_details = QtWidgets.QAction(MainWindow)
        self.menu_action_existing_seed_details.setObjectName("menu_action_existing_seed_details")
        self.menu_action_edit_new_database = QtWidgets.QAction(MainWindow)
        self.menu_action_edit_new_database.setObjectName("menu_action_edit_new_database")
        self.menu_action_edit_existing_database = QtWidgets.QAction(MainWindow)
        self.menu_action_edit_existing_database.setObjectName("menu_action_edit_existing_database")
        self.menu_action_load_iso = QtWidgets.QAction(MainWindow)
        self.menu_action_load_iso.setObjectName("menu_action_load_iso")
        self.menu_action_validate_seed_after = QtWidgets.QAction(MainWindow)
        self.menu_action_validate_seed_after.setCheckable(True)
        self.menu_action_validate_seed_after.setChecked(True)
        self.menu_action_validate_seed_after.setObjectName("menu_action_validate_seed_after")
        self.menu_action_timeout_generation_after_a_time_limit = QtWidgets.QAction(MainWindow)
        self.menu_action_timeout_generation_after_a_time_limit.setCheckable(True)
        self.menu_action_timeout_generation_after_a_time_limit.setChecked(True)
        self.menu_action_timeout_generation_after_a_time_limit.setObjectName("menu_action_timeout_generation_after_a_time_limit")
        self.menu_action_delete_loaded_game = QtWidgets.QAction(MainWindow)
        self.menu_action_delete_loaded_game.setObjectName("menu_action_delete_loaded_game")
        self.menu_action_item_tracker = QtWidgets.QAction(MainWindow)
        self.menu_action_item_tracker.setObjectName("menu_action_item_tracker")
        self.menu_trick_details.addAction(self.menu_difficulties.menuAction())
        self.menu_open.addAction(self.menu_action_data_visualizer)
        self.menu_open.addAction(self.menu_trick_details.menuAction())
        self.menu_open.addAction(self.menu_map_tracker.menuAction())
        self.menu_open.addAction(self.menu_action_item_tracker)
        self.menu_database.addAction(self.menu_action_edit_new_database)
        self.menu_database.addAction(self.menu_action_edit_existing_database)
        self.menu_edit.addAction(self.menu_database.menuAction())
        self.menu_advanced.addAction(self.menu_action_validate_seed_after)
        self.menu_advanced.addAction(self.menu_action_timeout_generation_after_a_time_limit)
        self.menu_bar.addAction(self.menu_open.menuAction())
        self.menu_bar.addAction(self.menu_edit.menuAction())
        self.menu_bar.addAction(self.menu_advanced.menuAction())

        self.retranslateUi(MainWindow)
        self.main_tab_widget.setCurrentIndex(0)
        self.welcome_tab_widget.setCurrentIndex(0)
        self.help_tab_widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "Randovania", None, -1))
        self.intro_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>Welcome to Randovania {version}.</p><p>Here you will be able to randomize many aspects of Metroid Prime 2: Echoes, while still being ensured it\'s possible to finish without any trick or glitch! What can be randomized?</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">All 100 pickups (including the 4 translators), 9 temple keys, 9 Sky Temple keys and the Energy Transfer Module, for a total of 119 pickups.</li><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The destination of all elevators.</li><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The translator necessary for opening the Translator Gates.</li></ul><p>So have fun and start randomizing.</p></body></html>", None, -1))
        self.open_faq_button.setText(QtWidgets.QApplication.translate("MainWindow", "Open FAQ", None, -1))
        self.open_database_viewer_button.setText(QtWidgets.QApplication.translate("MainWindow", "Open Database Viewer", None, -1))
        self.intro_play_now_button.setText(QtWidgets.QApplication.translate("MainWindow", "Play Now", None, -1))
        self.help_offer_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><hr/><p>Want to learn more about the randomizer?</p><p>Check out the <span style=\" font-weight:600;\">FAQ </span>for surprising behaviour of the game.<br/>Check the Database to check what\'s required to progress in each room.</p></body></html>", None, -1))
        self.welcome_tab_widget.setTabText(self.welcome_tab_widget.indexOf(self.tab_intro), QtWidgets.QApplication.translate("MainWindow", "Intro", None, -1))
        self.play_existing_permalink_group.setTitle(QtWidgets.QApplication.translate("MainWindow", "Existing Permalinks", None, -1))
        self.import_permalink_button.setText(QtWidgets.QApplication.translate("MainWindow", "Import permalink", None, -1))
        self.import_game_file_label.setText(QtWidgets.QApplication.translate("MainWindow", "If they\'ve shared a spoiler file instead, you can import it directly. This skips the generation step.", None, -1))
        self.import_permalink_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>Are you playing with others?</p><p>Ask them for a permalink and import it here. You\'ll create the same game as them.</p></body></html>", None, -1))
        self.import_game_file_button.setText(QtWidgets.QApplication.translate("MainWindow", "Import game file", None, -1))
        self.play_new_permalink_group.setTitle(QtWidgets.QApplication.translate("MainWindow", "Creating a new Game", None, -1))
        self.create_new_seed_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>Playing alone? Hosting a race?</p><p>Create a new game here and then share the permalink!</p></body></html>", None, -1))
        self.create_new_seed_button.setText(QtWidgets.QApplication.translate("MainWindow", "Create new game", None, -1))
        self.welcome_tab_widget.setTabText(self.welcome_tab_widget.indexOf(self.tab_play), QtWidgets.QApplication.translate("MainWindow", "Play", None, -1))
        self.create_choose_preset_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Choose a Preset:</span></p></body></html>", None, -1))
        self.create_customize_button.setText(QtWidgets.QApplication.translate("MainWindow", "Customize", None, -1))
        self.preset_tool_button.setText(QtWidgets.QApplication.translate("MainWindow", "...", None, -1))
        self.create_generate_race_button.setText(QtWidgets.QApplication.translate("MainWindow", "Generate for Race", None, -1))
        self.create_preset_description.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>This content should have been replaced by code.</p></body></html>", None, -1))
        self.create_generate_button.setText(QtWidgets.QApplication.translate("MainWindow", "Generate", None, -1))
        self.create_describe_right_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>This content should have been replaced by code.</p></body></html>", None, -1))
        self.create_describe_left_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>This content should have been replaced by code.</p></body></html>", None, -1))
        self.num_players_spin_box.setSuffix(QtWidgets.QApplication.translate("MainWindow", " players", None, -1))
        self.welcome_tab_widget.setTabText(self.welcome_tab_widget.indexOf(self.tab_create_seed), QtWidgets.QApplication.translate("MainWindow", "Generate Game", None, -1))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.welcome_tab), QtWidgets.QApplication.translate("MainWindow", "Welcome", None, -1))
        self.faq_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">I can\'t use this spider track, even though I have Spider Ball!</span></p><p>The following rooms have surprising vanilla behaviour about their spider tracks:</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Main Reactor (Agon Wastes)</li><p>The spider tracks only works after you beat Dark Samus 1 <span style=\" font-style:italic;\">and reload the room</span>. When playing with no tricks, this means you need Dark Beam to escape the room.</p><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Dynamo Works (Sanctuary Fortress)</li><p>The spider tracks only works after you beat Spider Guardian. When playing with no tricks, you can\'t leave this way until you do that.</p><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Spider Guardian fight (Sanctuary Fortress)</li></ul><p>During the fight, the spider tracks only works in the first and last phases. After the fight, they all work normally.<br/>This means you need Boost Ball to fight Spider Guardian.</p><p><span style=\" font-weight:600;\">Where is the Flying Ing Cache inside Dark Oasis?</span></p><p>The Flying Ing Cache in this room appears only after you collect the item that appears after defeating Power Bomb Guardian.</p><p><span style=\" font-weight:600;\">When causes the Dark Missile Trooper to spawn?</span></p><p>Defeating the Bomb Guardian.</p><p><span style=\" font-weight:600;\">What causes the Missile Expansion on top of the GFMC Compound to spawn?</span></p><p>Collecting the item that appears after defeating the Jump Guardian.</p><p><span style=\" font-weight:600;\">Why isn\'t the elevator in Torvus Temple working?</span></p><p>In order to open the elevator, you also need to pick the item in Torvus Energy Controller.</p><p><span style=\" font-weight:600;\">Why can\'t I see the echo locks in Mining Plaza even when using the Echo Visor?</span></p><p>You need to beat Amorbis and then return the Agon Energy in order for these echo locks to appear.</p><p><span style=\" font-weight:600;\">Why can\'t I cross the door between Underground Transport and Torvus Temple?</span></p><p>The energy gate that disappears after the pirate fight in Torvus Temple blocks this door.</p><p><span style=\" font-weight:600;\">While scanning a hint, weird categories show up in the UI. Is something wrong?</span></p><p>This is a known issue with the randomizer. The correct categories show up in the logbook.</p></body></html>", None, -1))
        self.help_tab_widget.setTabText(self.help_tab_widget.indexOf(self.tab_faq), QtWidgets.QApplication.translate("MainWindow", "FAQ", None, -1))
        self.differences_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>Randovania makes some changes to the original game in order to improve the game experience or to simply fix bugs in the original game.</p><p>Many of these changes are optional and can be disabled in the many options Randovania provides, but the following are <span style=\" font-weight:600;\">always</span> there:</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The item loss cutscene in Hive Chamber B is disabled.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Instead of acquiring the translators by scanning the hologram, there is now an item pickup in the Energy Controllers. This item is thus randomized.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">All cutscenes are skippable by default.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Hard Mode and the Image gallery are unlocked by default.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Starting the Dark Samus 1 fight disables adjacent rooms from loading automatically (fixes a potential crash).</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Beating Dark Samus 1 will now turn off the first pass pirates layer in Biostorage Station (fixes a potential crash).</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Agon Temple\'s first door no longer stays locked after Bomb Guardian until you get the Agon Energy Controller item.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Leaving during the Grapple Guardian fight no longer causes Grapple Guardian to not drop an item if you come back and fight it again.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Luminoth barriers that appear on certain doors after collecting or returning a world\'s energy have been removed.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Removed some instances in Main Research, to decrease the chance of a crash coming from Central Area Transport West. Also fixed leaving the room midway through destroying the echo locks making it impossible to complete.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Power Bombs no longer instantly kill either Alpha Splinter\'s first phase or Spider Guardian (doing so would not actually end the fight, leaving you stuck).</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Getting the Torvus Energy Controller item will no longer block you from getting the Torvus Temple item.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Fixed the door lock in Bioenergy Production, so that it doesn\'t stay locked if you beat the Aerotroopers before triggering the lock.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Altered a few rooms (Transport A Access, Venomous Pond) so that the PAL version matches NTSC requirements.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Fixed the message when collecting the item in Mining Station B while in the wrong layer.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Added a warning when going on top of the ship in GFMC Compound before beating Jump Guardian.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The in-game Hint System has been removed. The option for it remains, but does nothing.</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The logbook entries that contains hints are now named after the room they\'re in, with the categories being about which kind of hint they are.</li></ul></body></html>", None, -1))
        self.help_tab_widget.setTabText(self.help_tab_widget.indexOf(self.differences_tab), QtWidgets.QApplication.translate("MainWindow", "Differences", None, -1))
        self.hint_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>Hints are placed in the game by replacing Logbook scans. The following are the scans that may have a hint added to them:</p></body></html>", None, -1))
        self.hint_tree_widget.headerItem().setText(0, QtWidgets.QApplication.translate("MainWindow", "Location", None, -1))
        self.help_tab_widget.setTabText(self.help_tab_widget.indexOf(self.hint_tab), QtWidgets.QApplication.translate("MainWindow", "Hints Locations", None, -1))
        self.tracker_label.setText(QtWidgets.QApplication.translate("MainWindow", "<html><head/><body><p>Randovania includes a simple &quot;map&quot; tracker for Echoes, accessible via the <span style=\" font-family:\'Courier New\'; font-weight:600;\">Open</span> menu. </p><p><img src=\"data/gui_assets/tracker-open.png\"/></p><p>This tracker uses the logic and item loss configuration from the current permalink.</p><p>With it, you must act on each thing that trigger an event or has a pickup, as where you can go depends on where you are in the game, as well as which items you\'ve picked and event yo\'ve triggered.</p><p>Currently, elevator randomizer is not supported for the tracker.</p></body></html>", None, -1))
        self.help_tab_widget.setTabText(self.help_tab_widget.indexOf(self.tab_tracker), QtWidgets.QApplication.translate("MainWindow", "Tracker", None, -1))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.help_tab), QtWidgets.QApplication.translate("MainWindow", "Help", None, -1))
        self.about_label.setText(QtWidgets.QApplication.translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:14pt;\">Randovania</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a href=\"https://github.com/henriquegemignani/randovania\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">https://github.com/randovania/randovania<br /></span></a><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">This software is covered by the </span><a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">GNU General Public License v3 (GPL v3)</span></a><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">.</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:10pt;\"><br /></span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:14pt;\">Community</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">Make sure to visit the Metroid Prime Randomizer Discord server!<br /></span><a href=\"https://discordapp.com/invite/gymstUz\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">https://discordapp.com/invite/gymstUz</span></a><a href=\"https://discordapp.com/invite/gymstUz\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:10pt; text-decoration: underline; color:#0000ff;\"><br /></span></a></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:14pt;\">Credits</span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt;\"><br /></span><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">Game patching was written by </span><a href=\"https://twitter.com/ClarisRobyn\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">Claris</span></a><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">.<br />GUI and logic written by </span><a href=\"https://github.com/henriquegemignani/\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">Henrique Gemignani</span></a><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">, with contributions by </span><a href=\"https://www.twitch.tv/spaghettitoastbook\"><span style=\" font-family:\'Sans Serif\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">SpaghettiToastBook</span></a><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\"> and </span><a href=\"https://github.com/gollop\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">gollop</span></a><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">Room data collected by Claris.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">BashPrime, Pwootage, and April Wade made </span><a href=\"https://randomizer.metroidprime.run/\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; text-decoration: underline; color:#0000ff;\">https://randomizer.metroidprime.run/</span></a><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt;\">, from which the GUI was based.</span></p></body></html>", None, -1))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.about_tab), QtWidgets.QApplication.translate("MainWindow", "About", None, -1))
        self.progress_box.setTitle(QtWidgets.QApplication.translate("MainWindow", "Progress", None, -1))
        self.stop_background_process_button.setText(QtWidgets.QApplication.translate("MainWindow", "Stop", None, -1))
        self.menu_open.setTitle(QtWidgets.QApplication.translate("MainWindow", "Open", None, -1))
        self.menu_map_tracker.setTitle(QtWidgets.QApplication.translate("MainWindow", "Map Tracker", None, -1))
        self.menu_trick_details.setTitle(QtWidgets.QApplication.translate("MainWindow", "Trick Details", None, -1))
        self.menu_difficulties.setTitle(QtWidgets.QApplication.translate("MainWindow", "Difficulties", None, -1))
        self.menu_edit.setTitle(QtWidgets.QApplication.translate("MainWindow", "Edit", None, -1))
        self.menu_database.setTitle(QtWidgets.QApplication.translate("MainWindow", "Database", None, -1))
        self.menu_advanced.setTitle(QtWidgets.QApplication.translate("MainWindow", "Advanced", None, -1))
        self.menu_action_data_visualizer.setText(QtWidgets.QApplication.translate("MainWindow", "Data Visualizer", None, -1))
        self.menu_action_existing_seed_details.setText(QtWidgets.QApplication.translate("MainWindow", "Existing Seed Details", None, -1))
        self.menu_action_edit_new_database.setText(QtWidgets.QApplication.translate("MainWindow", "Internal copy", None, -1))
        self.menu_action_edit_existing_database.setText(QtWidgets.QApplication.translate("MainWindow", "Import new copy", None, -1))
        self.menu_action_load_iso.setText(QtWidgets.QApplication.translate("MainWindow", "Load vanilla game ISO", None, -1))
        self.menu_action_validate_seed_after.setText(QtWidgets.QApplication.translate("MainWindow", "Validate if seed is possible after generation", None, -1))
        self.menu_action_timeout_generation_after_a_time_limit.setText(QtWidgets.QApplication.translate("MainWindow", "Timeout generation after a time limit", None, -1))
        self.menu_action_delete_loaded_game.setText(QtWidgets.QApplication.translate("MainWindow", "Delete loaded game", None, -1))
        self.menu_action_item_tracker.setText(QtWidgets.QApplication.translate("MainWindow", "STB\'s Item Tracker", None, -1))

