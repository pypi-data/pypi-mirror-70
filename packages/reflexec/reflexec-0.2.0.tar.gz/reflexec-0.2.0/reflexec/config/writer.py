"""Reflexec config writer module.
"""

import logging
import shlex
import sys
import textwrap

from . import DEFAULT_CONFIG
from .. import DEFAULT_CONFIG_FILENAME

log = logging.getLogger("reflexec")

#: Config parameter descriptions for main section
CONFIG_VALUE_DESCRIPTION = {
    "command": "Command to execute. {changed_file} will replaced with filename or "
    "empty string if no file change detected (e.g. on first execution).",
    "delay": "Delay after command execution (float).",
    "max_execs": "Maximum count of command execution (integer). "
    "Reflexec will automatically stop when this count is reached.",
    "name": "Configuration name.",
    "output": "Comma separated list of output plugins.",
    "start": "The first action to do after reflexec start. "
    '"watch" to watch files or "exec" to execute command.',
    "type": "Watch pattern type.",
    "watch": "Watch patterns. One pattern per line.",
    "watcher": "Watcher plugin name.",
}
#: Header text for config file
CONFIG_FILE_HEADER_TEXT = """# Reflexec configuration file

# This file is generated by reflexec with the following CLI options: {}

"""


def write_config_file(args, config_values):
    """Write parameters to config file.

    :raises OSError: on writing failure
    """
    # create logger
    logging.basicConfig(
        format="{levelname}: {message}",
        style="{",
        level="DEBUG" if args.get("debug") else "INFO",
    )

    # create filename
    if not args.get("config_file"):
        log.info(
            "Config file name is not specified, using default name %s",
            DEFAULT_CONFIG_FILENAME,
        )
    config_filename = args.get("config_file", DEFAULT_CONFIG_FILENAME)

    # modify default config raw values for config file
    default_config = dict(DEFAULT_CONFIG)
    default_config.update({"watch": "*"})

    # write file
    try:
        with open(config_filename, "x") as cfg_file:
            args = " ".join([shlex.quote(arg) for arg in sys.argv[1:]])
            cfg_file.write(CONFIG_FILE_HEADER_TEXT.format(args))
            cfg_file.write("[reflexec]\n")
            for key, default_value in DEFAULT_CONFIG:
                default_value = default_config[key]
                cfg_file.write(
                    "# {}\n".format(
                        "\n# ".join(textwrap.wrap(CONFIG_VALUE_DESCRIPTION[key]))
                    )
                )
                try:
                    val = str(config_values[key])
                except KeyError:
                    cfg_file.write("#")
                    if isinstance(default_value, list):
                        val = ", ".join(default_value)
                    elif default_value is None:
                        val = ""
                    else:
                        val = str(default_value)
                val = val.replace("\n", "\n  ")
                cfg_file.write("{} = {}\n\n".format(key, val))
                if key == "command":
                    assert val != "reflexec", sys.argv
    except FileExistsError:
        raise OSError(
            "Error while creating config file {}: file already exists".format(
                config_filename
            )
        )
    except OSError as err:
        raise OSError(
            "Error while writing config file {}: {}".format(
                config_filename, err.strerror
            )
        )

    log.info("Config file is successfully created")
