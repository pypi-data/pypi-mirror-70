# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_siqadconn')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_siqadconn')
    _siqadconn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_siqadconn', [dirname(__file__)])
        except ImportError:
            import _siqadconn
            return _siqadconn
        try:
            _mod = imp.load_module('_siqadconn', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _siqadconn = swig_import_helper()
    del swig_import_helper
else:
    import _siqadconn
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _siqadconn.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _siqadconn.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _siqadconn.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _siqadconn.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _siqadconn.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _siqadconn.SwigPyIterator_equal(self, x)

    def copy(self):
        return _siqadconn.SwigPyIterator_copy(self)

    def next(self):
        return _siqadconn.SwigPyIterator_next(self)

    def __next__(self):
        return _siqadconn.SwigPyIterator___next__(self)

    def previous(self):
        return _siqadconn.SwigPyIterator_previous(self)

    def advance(self, n):
        return _siqadconn.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _siqadconn.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _siqadconn.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _siqadconn.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _siqadconn.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _siqadconn.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _siqadconn.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _siqadconn.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SiQADConnector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiQADConnector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SiQADConnector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _siqadconn.new_SiQADConnector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siqadconn.delete_SiQADConnector
    __del__ = lambda self: None

    def writeResultsXml(self):
        return _siqadconn.SiQADConnector_writeResultsXml(self)

    def setExport(self, *args):
        return _siqadconn.SiQADConnector_setExport(self, *args)

    def addSQCommand(self, arg2):
        return _siqadconn.SiQADConnector_addSQCommand(self, arg2)

    def parameterExists(self, key):
        return _siqadconn.SiQADConnector_parameterExists(self, key)

    def getParameter(self, key):
        return _siqadconn.SiQADConnector_getParameter(self, key)

    def getLayers(self):
        return _siqadconn.SiQADConnector_getLayers(self)

    def getAllParameters(self):
        return _siqadconn.SiQADConnector_getAllParameters(self)

    def dbCollection(self):
        return _siqadconn.SiQADConnector_dbCollection(self)

    def electrodeCollection(self):
        return _siqadconn.SiQADConnector_electrodeCollection(self)

    def electrodePolyCollection(self):
        return _siqadconn.SiQADConnector_electrodePolyCollection(self)

    def inputPath(self):
        return _siqadconn.SiQADConnector_inputPath(self)

    def setOutputPath(self, path):
        return _siqadconn.SiQADConnector_setOutputPath(self, path)

    def outputPath(self):
        return _siqadconn.SiQADConnector_outputPath(self)

    def export(self, *args, **kwargs):
      for key in kwargs:
        if key in ['db_loc', 'misc']:
            self.setExport(key, StringPairVector(self.tuplify(kwargs[key])))
        else:
            self.setExport(key, StringVector2D(self.tuplify(kwargs[key])))


    def addCommand(self, *args, **kwargs):
      command_action = args[0]  # e.g. add, remove
      command_item = args[1]    # e.g. DBDot, Aggregate
      if command_action == 'add' and command_item == 'Aggregate':
        self.addSQCommand(AggregateCommand(FloatPairVector(kwargs['dbagg'])))


    def tuplify(self, data):
      if hasattr(data,'__iter__') and not hasattr(data, "strip"):
        return tuple(self.tuplify(i) for i in data)
      else:
        return str(data)

SiQADConnector_swigregister = _siqadconn.SiQADConnector_swigregister
SiQADConnector_swigregister(SiQADConnector)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _siqadconn.new_Layer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["name"] = _siqadconn.Layer_name_set
    __swig_getmethods__["name"] = _siqadconn.Layer_name_get
    if _newclass:
        name = _swig_property(_siqadconn.Layer_name_get, _siqadconn.Layer_name_set)
    __swig_setmethods__["type"] = _siqadconn.Layer_type_set
    __swig_getmethods__["type"] = _siqadconn.Layer_type_get
    if _newclass:
        type = _swig_property(_siqadconn.Layer_type_get, _siqadconn.Layer_type_set)
    __swig_setmethods__["role"] = _siqadconn.Layer_role_set
    __swig_getmethods__["role"] = _siqadconn.Layer_role_get
    if _newclass:
        role = _swig_property(_siqadconn.Layer_role_get, _siqadconn.Layer_role_set)
    __swig_setmethods__["zoffset"] = _siqadconn.Layer_zoffset_set
    __swig_getmethods__["zoffset"] = _siqadconn.Layer_zoffset_get
    if _newclass:
        zoffset = _swig_property(_siqadconn.Layer_zoffset_get, _siqadconn.Layer_zoffset_set)
    __swig_setmethods__["zheight"] = _siqadconn.Layer_zheight_set
    __swig_getmethods__["zheight"] = _siqadconn.Layer_zheight_get
    if _newclass:
        zheight = _swig_property(_siqadconn.Layer_zheight_get, _siqadconn.Layer_zheight_set)
    __swig_destroy__ = _siqadconn.delete_Layer
    __del__ = lambda self: None
Layer_swigregister = _siqadconn.Layer_swigregister
Layer_swigregister(Layer)

class DBDot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBDot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBDot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _siqadconn.DBDot_x_set
    __swig_getmethods__["x"] = _siqadconn.DBDot_x_get
    if _newclass:
        x = _swig_property(_siqadconn.DBDot_x_get, _siqadconn.DBDot_x_set)
    __swig_setmethods__["y"] = _siqadconn.DBDot_y_set
    __swig_getmethods__["y"] = _siqadconn.DBDot_y_get
    if _newclass:
        y = _swig_property(_siqadconn.DBDot_y_get, _siqadconn.DBDot_y_set)
    __swig_setmethods__["n"] = _siqadconn.DBDot_n_set
    __swig_getmethods__["n"] = _siqadconn.DBDot_n_get
    if _newclass:
        n = _swig_property(_siqadconn.DBDot_n_get, _siqadconn.DBDot_n_set)
    __swig_setmethods__["m"] = _siqadconn.DBDot_m_set
    __swig_getmethods__["m"] = _siqadconn.DBDot_m_get
    if _newclass:
        m = _swig_property(_siqadconn.DBDot_m_get, _siqadconn.DBDot_m_set)
    __swig_setmethods__["l"] = _siqadconn.DBDot_l_set
    __swig_getmethods__["l"] = _siqadconn.DBDot_l_get
    if _newclass:
        l = _swig_property(_siqadconn.DBDot_l_get, _siqadconn.DBDot_l_set)

    def __init__(self, in_x, in_y, n, m, l):
        this = _siqadconn.new_DBDot(in_x, in_y, n, m, l)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siqadconn.delete_DBDot
    __del__ = lambda self: None
DBDot_swigregister = _siqadconn.DBDot_swigregister
DBDot_swigregister(DBDot)

class DBIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBIterator, name)
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        this = _siqadconn.new_DBIterator(root, begin)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _siqadconn.DBIterator___eq__(self, other)

    def __ne__(self, other):
        return _siqadconn.DBIterator___ne__(self, other)

    def __ref__(self):
        return _siqadconn.DBIterator___ref__(self)

    def setCollection(self, coll):
        return _siqadconn.DBIterator_setCollection(self, coll)
    __swig_setmethods__["collection"] = _siqadconn.DBIterator_collection_set
    __swig_getmethods__["collection"] = _siqadconn.DBIterator_collection_get
    if _newclass:
        collection = _swig_property(_siqadconn.DBIterator_collection_get, _siqadconn.DBIterator_collection_set)

    def __iter__(self):
        return _siqadconn.DBIterator___iter__(self)

    def __next__(self):
      db = _siqadconn.DBIterator___next__(self)
      if db == None:
        raise StopIteration
      else:
        return db


    __swig_destroy__ = _siqadconn.delete_DBIterator
    __del__ = lambda self: None
DBIterator_swigregister = _siqadconn.DBIterator_swigregister
DBIterator_swigregister(DBIterator)

class DBCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBCollection, name)
    __repr__ = _swig_repr

    def __init__(self, db_tree_in):
        this = _siqadconn.new_DBCollection(db_tree_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _siqadconn.DBCollection_begin(self)

    def end(self):
        return _siqadconn.DBCollection_end(self)
    __swig_setmethods__["db_tree_inner"] = _siqadconn.DBCollection_db_tree_inner_set
    __swig_getmethods__["db_tree_inner"] = _siqadconn.DBCollection_db_tree_inner_get
    if _newclass:
        db_tree_inner = _swig_property(_siqadconn.DBCollection_db_tree_inner_get, _siqadconn.DBCollection_db_tree_inner_set)

    def __iter__(self):
        return _siqadconn.DBCollection___iter__(self)
    __swig_destroy__ = _siqadconn.delete_DBCollection
    __del__ = lambda self: None
DBCollection_swigregister = _siqadconn.DBCollection_swigregister
DBCollection_swigregister(DBCollection)

class ElectrodePoly(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectrodePoly, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectrodePoly, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer_id"] = _siqadconn.ElectrodePoly_layer_id_set
    __swig_getmethods__["layer_id"] = _siqadconn.ElectrodePoly_layer_id_get
    if _newclass:
        layer_id = _swig_property(_siqadconn.ElectrodePoly_layer_id_get, _siqadconn.ElectrodePoly_layer_id_set)
    __swig_setmethods__["vertices"] = _siqadconn.ElectrodePoly_vertices_set
    __swig_getmethods__["vertices"] = _siqadconn.ElectrodePoly_vertices_get
    if _newclass:
        vertices = _swig_property(_siqadconn.ElectrodePoly_vertices_get, _siqadconn.ElectrodePoly_vertices_set)
    __swig_setmethods__["potential"] = _siqadconn.ElectrodePoly_potential_set
    __swig_getmethods__["potential"] = _siqadconn.ElectrodePoly_potential_get
    if _newclass:
        potential = _swig_property(_siqadconn.ElectrodePoly_potential_get, _siqadconn.ElectrodePoly_potential_set)
    __swig_setmethods__["phase"] = _siqadconn.ElectrodePoly_phase_set
    __swig_getmethods__["phase"] = _siqadconn.ElectrodePoly_phase_get
    if _newclass:
        phase = _swig_property(_siqadconn.ElectrodePoly_phase_get, _siqadconn.ElectrodePoly_phase_set)
    __swig_setmethods__["electrode_type"] = _siqadconn.ElectrodePoly_electrode_type_set
    __swig_getmethods__["electrode_type"] = _siqadconn.ElectrodePoly_electrode_type_get
    if _newclass:
        electrode_type = _swig_property(_siqadconn.ElectrodePoly_electrode_type_get, _siqadconn.ElectrodePoly_electrode_type_set)
    __swig_setmethods__["net"] = _siqadconn.ElectrodePoly_net_set
    __swig_getmethods__["net"] = _siqadconn.ElectrodePoly_net_get
    if _newclass:
        net = _swig_property(_siqadconn.ElectrodePoly_net_get, _siqadconn.ElectrodePoly_net_set)
    __swig_setmethods__["pixel_per_angstrom"] = _siqadconn.ElectrodePoly_pixel_per_angstrom_set
    __swig_getmethods__["pixel_per_angstrom"] = _siqadconn.ElectrodePoly_pixel_per_angstrom_get
    if _newclass:
        pixel_per_angstrom = _swig_property(_siqadconn.ElectrodePoly_pixel_per_angstrom_get, _siqadconn.ElectrodePoly_pixel_per_angstrom_set)

    def __init__(self, in_layer_id, in_vertices, in_potential, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net):
        this = _siqadconn.new_ElectrodePoly(in_layer_id, in_vertices, in_potential, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siqadconn.delete_ElectrodePoly
    __del__ = lambda self: None
ElectrodePoly_swigregister = _siqadconn.ElectrodePoly_swigregister
ElectrodePoly_swigregister(ElectrodePoly)

class ElecPolyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElecPolyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElecPolyIterator, name)
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        this = _siqadconn.new_ElecPolyIterator(root, begin)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _siqadconn.ElecPolyIterator___eq__(self, other)

    def __ne__(self, other):
        return _siqadconn.ElecPolyIterator___ne__(self, other)

    def __ref__(self):
        return _siqadconn.ElecPolyIterator___ref__(self)

    def setCollection(self, coll):
        return _siqadconn.ElecPolyIterator_setCollection(self, coll)
    __swig_setmethods__["collection"] = _siqadconn.ElecPolyIterator_collection_set
    __swig_getmethods__["collection"] = _siqadconn.ElecPolyIterator_collection_get
    if _newclass:
        collection = _swig_property(_siqadconn.ElecPolyIterator_collection_get, _siqadconn.ElecPolyIterator_collection_set)

    def __iter__(self):
        return _siqadconn.ElecPolyIterator___iter__(self)

    def __next__(self):
      elec_poly = _siqadconn.ElecPolyIterator___next__(self)
      if elec_poly == None:
        raise StopIteration
      else:
        return elec_poly


    __swig_destroy__ = _siqadconn.delete_ElecPolyIterator
    __del__ = lambda self: None
ElecPolyIterator_swigregister = _siqadconn.ElecPolyIterator_swigregister
ElecPolyIterator_swigregister(ElecPolyIterator)

class ElectrodePolyCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectrodePolyCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectrodePolyCollection, name)
    __repr__ = _swig_repr

    def __init__(self, elec_poly_tree_in):
        this = _siqadconn.new_ElectrodePolyCollection(elec_poly_tree_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _siqadconn.ElectrodePolyCollection_begin(self)

    def end(self):
        return _siqadconn.ElectrodePolyCollection_end(self)
    __swig_setmethods__["elec_poly_tree_inner"] = _siqadconn.ElectrodePolyCollection_elec_poly_tree_inner_set
    __swig_getmethods__["elec_poly_tree_inner"] = _siqadconn.ElectrodePolyCollection_elec_poly_tree_inner_get
    if _newclass:
        elec_poly_tree_inner = _swig_property(_siqadconn.ElectrodePolyCollection_elec_poly_tree_inner_get, _siqadconn.ElectrodePolyCollection_elec_poly_tree_inner_set)

    def __iter__(self):
        return _siqadconn.ElectrodePolyCollection___iter__(self)
    __swig_destroy__ = _siqadconn.delete_ElectrodePolyCollection
    __del__ = lambda self: None
ElectrodePolyCollection_swigregister = _siqadconn.ElectrodePolyCollection_swigregister
ElectrodePolyCollection_swigregister(ElectrodePolyCollection)

class Electrode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Electrode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Electrode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer_id"] = _siqadconn.Electrode_layer_id_set
    __swig_getmethods__["layer_id"] = _siqadconn.Electrode_layer_id_get
    if _newclass:
        layer_id = _swig_property(_siqadconn.Electrode_layer_id_get, _siqadconn.Electrode_layer_id_set)
    __swig_setmethods__["x1"] = _siqadconn.Electrode_x1_set
    __swig_getmethods__["x1"] = _siqadconn.Electrode_x1_get
    if _newclass:
        x1 = _swig_property(_siqadconn.Electrode_x1_get, _siqadconn.Electrode_x1_set)
    __swig_setmethods__["x2"] = _siqadconn.Electrode_x2_set
    __swig_getmethods__["x2"] = _siqadconn.Electrode_x2_get
    if _newclass:
        x2 = _swig_property(_siqadconn.Electrode_x2_get, _siqadconn.Electrode_x2_set)
    __swig_setmethods__["y1"] = _siqadconn.Electrode_y1_set
    __swig_getmethods__["y1"] = _siqadconn.Electrode_y1_get
    if _newclass:
        y1 = _swig_property(_siqadconn.Electrode_y1_get, _siqadconn.Electrode_y1_set)
    __swig_setmethods__["y2"] = _siqadconn.Electrode_y2_set
    __swig_getmethods__["y2"] = _siqadconn.Electrode_y2_get
    if _newclass:
        y2 = _swig_property(_siqadconn.Electrode_y2_get, _siqadconn.Electrode_y2_set)
    __swig_setmethods__["potential"] = _siqadconn.Electrode_potential_set
    __swig_getmethods__["potential"] = _siqadconn.Electrode_potential_get
    if _newclass:
        potential = _swig_property(_siqadconn.Electrode_potential_get, _siqadconn.Electrode_potential_set)
    __swig_setmethods__["pot_offset"] = _siqadconn.Electrode_pot_offset_set
    __swig_getmethods__["pot_offset"] = _siqadconn.Electrode_pot_offset_get
    if _newclass:
        pot_offset = _swig_property(_siqadconn.Electrode_pot_offset_get, _siqadconn.Electrode_pot_offset_set)
    __swig_setmethods__["phase"] = _siqadconn.Electrode_phase_set
    __swig_getmethods__["phase"] = _siqadconn.Electrode_phase_get
    if _newclass:
        phase = _swig_property(_siqadconn.Electrode_phase_get, _siqadconn.Electrode_phase_set)
    __swig_setmethods__["electrode_type"] = _siqadconn.Electrode_electrode_type_set
    __swig_getmethods__["electrode_type"] = _siqadconn.Electrode_electrode_type_get
    if _newclass:
        electrode_type = _swig_property(_siqadconn.Electrode_electrode_type_get, _siqadconn.Electrode_electrode_type_set)
    __swig_setmethods__["net"] = _siqadconn.Electrode_net_set
    __swig_getmethods__["net"] = _siqadconn.Electrode_net_get
    if _newclass:
        net = _swig_property(_siqadconn.Electrode_net_get, _siqadconn.Electrode_net_set)
    __swig_setmethods__["angle"] = _siqadconn.Electrode_angle_set
    __swig_getmethods__["angle"] = _siqadconn.Electrode_angle_get
    if _newclass:
        angle = _swig_property(_siqadconn.Electrode_angle_get, _siqadconn.Electrode_angle_set)
    __swig_setmethods__["pixel_per_angstrom"] = _siqadconn.Electrode_pixel_per_angstrom_set
    __swig_getmethods__["pixel_per_angstrom"] = _siqadconn.Electrode_pixel_per_angstrom_get
    if _newclass:
        pixel_per_angstrom = _swig_property(_siqadconn.Electrode_pixel_per_angstrom_get, _siqadconn.Electrode_pixel_per_angstrom_set)

    def __init__(self, in_layer_id, in_x1, in_x2, in_y1, in_y2, in_potential, in_pot_offset, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net, in_angle):
        this = _siqadconn.new_Electrode(in_layer_id, in_x1, in_x2, in_y1, in_y2, in_potential, in_pot_offset, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net, in_angle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siqadconn.delete_Electrode
    __del__ = lambda self: None
Electrode_swigregister = _siqadconn.Electrode_swigregister
Electrode_swigregister(Electrode)

class ElecIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElecIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElecIterator, name)
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        this = _siqadconn.new_ElecIterator(root, begin)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _siqadconn.ElecIterator___eq__(self, other)

    def __ne__(self, other):
        return _siqadconn.ElecIterator___ne__(self, other)

    def __ref__(self):
        return _siqadconn.ElecIterator___ref__(self)

    def setCollection(self, coll):
        return _siqadconn.ElecIterator_setCollection(self, coll)
    __swig_setmethods__["collection"] = _siqadconn.ElecIterator_collection_set
    __swig_getmethods__["collection"] = _siqadconn.ElecIterator_collection_get
    if _newclass:
        collection = _swig_property(_siqadconn.ElecIterator_collection_get, _siqadconn.ElecIterator_collection_set)

    def __iter__(self):
        return _siqadconn.ElecIterator___iter__(self)

    def __next__(self):
      elec = _siqadconn.ElecIterator___next__(self)
      if elec == None:
        raise StopIteration
      else:
        return elec


    __swig_destroy__ = _siqadconn.delete_ElecIterator
    __del__ = lambda self: None
ElecIterator_swigregister = _siqadconn.ElecIterator_swigregister
ElecIterator_swigregister(ElecIterator)

class ElectrodeCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElectrodeCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElectrodeCollection, name)
    __repr__ = _swig_repr

    def __init__(self, elec_tree_in):
        this = _siqadconn.new_ElectrodeCollection(elec_tree_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self):
        return _siqadconn.ElectrodeCollection_begin(self)

    def end(self):
        return _siqadconn.ElectrodeCollection_end(self)
    __swig_setmethods__["elec_tree_inner"] = _siqadconn.ElectrodeCollection_elec_tree_inner_set
    __swig_getmethods__["elec_tree_inner"] = _siqadconn.ElectrodeCollection_elec_tree_inner_get
    if _newclass:
        elec_tree_inner = _swig_property(_siqadconn.ElectrodeCollection_elec_tree_inner_get, _siqadconn.ElectrodeCollection_elec_tree_inner_set)

    def __iter__(self):
        return _siqadconn.ElectrodeCollection___iter__(self)
    __swig_destroy__ = _siqadconn.delete_ElectrodeCollection
    __del__ = lambda self: None
ElectrodeCollection_swigregister = _siqadconn.ElectrodeCollection_swigregister
ElectrodeCollection_swigregister(ElectrodeCollection)

class Aggregate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aggregate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Aggregate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["aggs"] = _siqadconn.Aggregate_aggs_set
    __swig_getmethods__["aggs"] = _siqadconn.Aggregate_aggs_get
    if _newclass:
        aggs = _swig_property(_siqadconn.Aggregate_aggs_get, _siqadconn.Aggregate_aggs_set)
    __swig_setmethods__["dbs"] = _siqadconn.Aggregate_dbs_set
    __swig_getmethods__["dbs"] = _siqadconn.Aggregate_dbs_get
    if _newclass:
        dbs = _swig_property(_siqadconn.Aggregate_dbs_get, _siqadconn.Aggregate_dbs_set)
    __swig_setmethods__["elecs"] = _siqadconn.Aggregate_elecs_set
    __swig_getmethods__["elecs"] = _siqadconn.Aggregate_elecs_get
    if _newclass:
        elecs = _swig_property(_siqadconn.Aggregate_elecs_get, _siqadconn.Aggregate_elecs_set)
    __swig_setmethods__["elec_polys"] = _siqadconn.Aggregate_elec_polys_set
    __swig_getmethods__["elec_polys"] = _siqadconn.Aggregate_elec_polys_get
    if _newclass:
        elec_polys = _swig_property(_siqadconn.Aggregate_elec_polys_get, _siqadconn.Aggregate_elec_polys_set)

    def size(self):
        return _siqadconn.Aggregate_size(self)

    def __init__(self):
        this = _siqadconn.new_Aggregate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siqadconn.delete_Aggregate
    __del__ = lambda self: None
Aggregate_swigregister = _siqadconn.Aggregate_swigregister
Aggregate_swigregister(Aggregate)

class SQCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SQCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SQCommand, name)
    __repr__ = _swig_repr
    NoItem = _siqadconn.SQCommand_NoItem
    DBDot = _siqadconn.SQCommand_DBDot
    Electrode = _siqadconn.SQCommand_Electrode
    Aggregate = _siqadconn.SQCommand_Aggregate
    Add = _siqadconn.SQCommand_Add
    Remove = _siqadconn.SQCommand_Remove
    Echo = _siqadconn.SQCommand_Echo
    Run = _siqadconn.SQCommand_Run
    Move = _siqadconn.SQCommand_Move

    def __init__(self, *args):
        this = _siqadconn.new_SQCommand(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _siqadconn.delete_SQCommand
    __del__ = lambda self: None
    if _newclass:
        commandItemString = staticmethod(_siqadconn.SQCommand_commandItemString)
    else:
        commandItemString = _siqadconn.SQCommand_commandItemString
    if _newclass:
        commandActionString = staticmethod(_siqadconn.SQCommand_commandActionString)
    else:
        commandActionString = _siqadconn.SQCommand_commandActionString
    if _newclass:
        commandItemEnum = staticmethod(_siqadconn.SQCommand_commandItemEnum)
    else:
        commandItemEnum = _siqadconn.SQCommand_commandItemEnum
    if _newclass:
        commandActionEnum = staticmethod(_siqadconn.SQCommand_commandActionEnum)
    else:
        commandActionEnum = _siqadconn.SQCommand_commandActionEnum

    def commandItem(self):
        return _siqadconn.SQCommand_commandItem(self)

    def commandAction(self):
        return _siqadconn.SQCommand_commandAction(self)

    def finalCommand(self):
        return _siqadconn.SQCommand_finalCommand(self)

    def addActionCommand(self):
        return _siqadconn.SQCommand_addActionCommand(self)

    def addActionArguments(self):
        return _siqadconn.SQCommand_addActionArguments(self)
SQCommand_swigregister = _siqadconn.SQCommand_swigregister
SQCommand_swigregister(SQCommand)

def SQCommand_commandItemString(arg2):
    return _siqadconn.SQCommand_commandItemString(arg2)
SQCommand_commandItemString = _siqadconn.SQCommand_commandItemString

def SQCommand_commandActionString(arg2):
    return _siqadconn.SQCommand_commandActionString(arg2)
SQCommand_commandActionString = _siqadconn.SQCommand_commandActionString

def SQCommand_commandItemEnum(arg2):
    return _siqadconn.SQCommand_commandItemEnum(arg2)
SQCommand_commandItemEnum = _siqadconn.SQCommand_commandItemEnum

def SQCommand_commandActionEnum(arg2):
    return _siqadconn.SQCommand_commandActionEnum(arg2)
SQCommand_commandActionEnum = _siqadconn.SQCommand_commandActionEnum

class AggregateCommand(SQCommand):
    __swig_setmethods__ = {}
    for _s in [SQCommand]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregateCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [SQCommand]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AggregateCommand, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _siqadconn.new_AggregateCommand(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setLayer(self, t_layer):
        return _siqadconn.AggregateCommand_setLayer(self, t_layer)

    def getLayer(self):
        return _siqadconn.AggregateCommand_getLayer(self)

    def addActionArguments(self):
        return _siqadconn.AggregateCommand_addActionArguments(self)

    def addDBsToAggregateFormation(self, t_db_locs):
        return _siqadconn.AggregateCommand_addDBsToAggregateFormation(self, t_db_locs)

    def dbLocations(self):
        return _siqadconn.AggregateCommand_dbLocations(self)
    __swig_destroy__ = _siqadconn.delete_AggregateCommand
    __del__ = lambda self: None
AggregateCommand_swigregister = _siqadconn.AggregateCommand_swigregister
AggregateCommand_swigregister(AggregateCommand)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _siqadconn.new_DoublePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _siqadconn.DoublePair_first_set
    __swig_getmethods__["first"] = _siqadconn.DoublePair_first_get
    if _newclass:
        first = _swig_property(_siqadconn.DoublePair_first_get, _siqadconn.DoublePair_first_set)
    __swig_setmethods__["second"] = _siqadconn.DoublePair_second_set
    __swig_getmethods__["second"] = _siqadconn.DoublePair_second_get
    if _newclass:
        second = _swig_property(_siqadconn.DoublePair_second_get, _siqadconn.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _siqadconn.delete_DoublePair
    __del__ = lambda self: None
DoublePair_swigregister = _siqadconn.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class DoublePairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.DoublePairVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.DoublePairVector___bool__(self)

    def __len__(self):
        return _siqadconn.DoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.DoublePairVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.DoublePairVector_pop(self)

    def append(self, x):
        return _siqadconn.DoublePairVector_append(self, x)

    def empty(self):
        return _siqadconn.DoublePairVector_empty(self)

    def size(self):
        return _siqadconn.DoublePairVector_size(self)

    def swap(self, v):
        return _siqadconn.DoublePairVector_swap(self, v)

    def begin(self):
        return _siqadconn.DoublePairVector_begin(self)

    def end(self):
        return _siqadconn.DoublePairVector_end(self)

    def rbegin(self):
        return _siqadconn.DoublePairVector_rbegin(self)

    def rend(self):
        return _siqadconn.DoublePairVector_rend(self)

    def clear(self):
        return _siqadconn.DoublePairVector_clear(self)

    def get_allocator(self):
        return _siqadconn.DoublePairVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.DoublePairVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        this = _siqadconn.new_DoublePairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _siqadconn.DoublePairVector_push_back(self, x)

    def front(self):
        return _siqadconn.DoublePairVector_front(self)

    def back(self):
        return _siqadconn.DoublePairVector_back(self)

    def assign(self, n, x):
        return _siqadconn.DoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.DoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.DoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.DoublePairVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.DoublePairVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_DoublePairVector
    __del__ = lambda self: None
DoublePairVector_swigregister = _siqadconn.DoublePairVector_swigregister
DoublePairVector_swigregister(DoublePairVector)

class FloatPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _siqadconn.new_FloatPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _siqadconn.FloatPair_first_set
    __swig_getmethods__["first"] = _siqadconn.FloatPair_first_get
    if _newclass:
        first = _swig_property(_siqadconn.FloatPair_first_get, _siqadconn.FloatPair_first_set)
    __swig_setmethods__["second"] = _siqadconn.FloatPair_second_set
    __swig_getmethods__["second"] = _siqadconn.FloatPair_second_get
    if _newclass:
        second = _swig_property(_siqadconn.FloatPair_second_get, _siqadconn.FloatPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _siqadconn.delete_FloatPair
    __del__ = lambda self: None
FloatPair_swigregister = _siqadconn.FloatPair_swigregister
FloatPair_swigregister(FloatPair)

class FloatPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.FloatPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.FloatPairVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.FloatPairVector___bool__(self)

    def __len__(self):
        return _siqadconn.FloatPairVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.FloatPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.FloatPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.FloatPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.FloatPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.FloatPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.FloatPairVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.FloatPairVector_pop(self)

    def append(self, x):
        return _siqadconn.FloatPairVector_append(self, x)

    def empty(self):
        return _siqadconn.FloatPairVector_empty(self)

    def size(self):
        return _siqadconn.FloatPairVector_size(self)

    def swap(self, v):
        return _siqadconn.FloatPairVector_swap(self, v)

    def begin(self):
        return _siqadconn.FloatPairVector_begin(self)

    def end(self):
        return _siqadconn.FloatPairVector_end(self)

    def rbegin(self):
        return _siqadconn.FloatPairVector_rbegin(self)

    def rend(self):
        return _siqadconn.FloatPairVector_rend(self)

    def clear(self):
        return _siqadconn.FloatPairVector_clear(self)

    def get_allocator(self):
        return _siqadconn.FloatPairVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.FloatPairVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.FloatPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _siqadconn.new_FloatPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _siqadconn.FloatPairVector_push_back(self, x)

    def front(self):
        return _siqadconn.FloatPairVector_front(self)

    def back(self):
        return _siqadconn.FloatPairVector_back(self)

    def assign(self, n, x):
        return _siqadconn.FloatPairVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.FloatPairVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.FloatPairVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.FloatPairVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.FloatPairVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_FloatPairVector
    __del__ = lambda self: None
FloatPairVector_swigregister = _siqadconn.FloatPairVector_swigregister
FloatPairVector_swigregister(FloatPairVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.IntVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.IntVector___bool__(self)

    def __len__(self):
        return _siqadconn.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.IntVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.IntVector_pop(self)

    def append(self, x):
        return _siqadconn.IntVector_append(self, x)

    def empty(self):
        return _siqadconn.IntVector_empty(self)

    def size(self):
        return _siqadconn.IntVector_size(self)

    def swap(self, v):
        return _siqadconn.IntVector_swap(self, v)

    def begin(self):
        return _siqadconn.IntVector_begin(self)

    def end(self):
        return _siqadconn.IntVector_end(self)

    def rbegin(self):
        return _siqadconn.IntVector_rbegin(self)

    def rend(self):
        return _siqadconn.IntVector_rend(self)

    def clear(self):
        return _siqadconn.IntVector_clear(self)

    def get_allocator(self):
        return _siqadconn.IntVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.IntVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _siqadconn.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _siqadconn.IntVector_push_back(self, x)

    def front(self):
        return _siqadconn.IntVector_front(self)

    def back(self):
        return _siqadconn.IntVector_back(self)

    def assign(self, n, x):
        return _siqadconn.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.IntVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.IntVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.IntVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.IntVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _siqadconn.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _siqadconn.new_StringPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _siqadconn.StringPair_first_set
    __swig_getmethods__["first"] = _siqadconn.StringPair_first_get
    if _newclass:
        first = _swig_property(_siqadconn.StringPair_first_get, _siqadconn.StringPair_first_set)
    __swig_setmethods__["second"] = _siqadconn.StringPair_second_set
    __swig_getmethods__["second"] = _siqadconn.StringPair_second_get
    if _newclass:
        second = _swig_property(_siqadconn.StringPair_second_get, _siqadconn.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _siqadconn.delete_StringPair
    __del__ = lambda self: None
StringPair_swigregister = _siqadconn.StringPair_swigregister
StringPair_swigregister(StringPair)

class StringPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringPairVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringPairVector___bool__(self)

    def __len__(self):
        return _siqadconn.StringPairVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.StringPairVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.StringPairVector_pop(self)

    def append(self, x):
        return _siqadconn.StringPairVector_append(self, x)

    def empty(self):
        return _siqadconn.StringPairVector_empty(self)

    def size(self):
        return _siqadconn.StringPairVector_size(self)

    def swap(self, v):
        return _siqadconn.StringPairVector_swap(self, v)

    def begin(self):
        return _siqadconn.StringPairVector_begin(self)

    def end(self):
        return _siqadconn.StringPairVector_end(self)

    def rbegin(self):
        return _siqadconn.StringPairVector_rbegin(self)

    def rend(self):
        return _siqadconn.StringPairVector_rend(self)

    def clear(self):
        return _siqadconn.StringPairVector_clear(self)

    def get_allocator(self):
        return _siqadconn.StringPairVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.StringPairVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _siqadconn.new_StringPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _siqadconn.StringPairVector_push_back(self, x)

    def front(self):
        return _siqadconn.StringPairVector_front(self)

    def back(self):
        return _siqadconn.StringPairVector_back(self)

    def assign(self, n, x):
        return _siqadconn.StringPairVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.StringPairVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.StringPairVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.StringPairVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.StringPairVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_StringPairVector
    __del__ = lambda self: None
StringPairVector_swigregister = _siqadconn.StringPairVector_swigregister
StringPairVector_swigregister(StringPairVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringVector___bool__(self)

    def __len__(self):
        return _siqadconn.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.StringVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.StringVector_pop(self)

    def append(self, x):
        return _siqadconn.StringVector_append(self, x)

    def empty(self):
        return _siqadconn.StringVector_empty(self)

    def size(self):
        return _siqadconn.StringVector_size(self)

    def swap(self, v):
        return _siqadconn.StringVector_swap(self, v)

    def begin(self):
        return _siqadconn.StringVector_begin(self)

    def end(self):
        return _siqadconn.StringVector_end(self)

    def rbegin(self):
        return _siqadconn.StringVector_rbegin(self)

    def rend(self):
        return _siqadconn.StringVector_rend(self)

    def clear(self):
        return _siqadconn.StringVector_clear(self)

    def get_allocator(self):
        return _siqadconn.StringVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.StringVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _siqadconn.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _siqadconn.StringVector_push_back(self, x)

    def front(self):
        return _siqadconn.StringVector_front(self)

    def back(self):
        return _siqadconn.StringVector_back(self)

    def assign(self, n, x):
        return _siqadconn.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.StringVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.StringVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.StringVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.StringVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _siqadconn.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringVector2D___bool__(self)

    def __len__(self):
        return _siqadconn.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _siqadconn.StringVector2D_pop(self)

    def append(self, x):
        return _siqadconn.StringVector2D_append(self, x)

    def empty(self):
        return _siqadconn.StringVector2D_empty(self)

    def size(self):
        return _siqadconn.StringVector2D_size(self)

    def swap(self, v):
        return _siqadconn.StringVector2D_swap(self, v)

    def begin(self):
        return _siqadconn.StringVector2D_begin(self)

    def end(self):
        return _siqadconn.StringVector2D_end(self)

    def rbegin(self):
        return _siqadconn.StringVector2D_rbegin(self)

    def rend(self):
        return _siqadconn.StringVector2D_rend(self)

    def clear(self):
        return _siqadconn.StringVector2D_clear(self)

    def get_allocator(self):
        return _siqadconn.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _siqadconn.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _siqadconn.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _siqadconn.new_StringVector2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _siqadconn.StringVector2D_push_back(self, x)

    def front(self):
        return _siqadconn.StringVector2D_front(self)

    def back(self):
        return _siqadconn.StringVector2D_back(self)

    def assign(self, n, x):
        return _siqadconn.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.StringVector2D_reserve(self, n)

    def capacity(self):
        return _siqadconn.StringVector2D_capacity(self)
    __swig_destroy__ = _siqadconn.delete_StringVector2D
    __del__ = lambda self: None
StringVector2D_swigregister = _siqadconn.StringVector2D_swigregister
StringVector2D_swigregister(StringVector2D)

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringMap___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringMap___bool__(self)

    def __len__(self):
        return _siqadconn.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _siqadconn.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _siqadconn.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _siqadconn.StringMap_has_key(self, key)

    def keys(self):
        return _siqadconn.StringMap_keys(self)

    def values(self):
        return _siqadconn.StringMap_values(self)

    def items(self):
        return _siqadconn.StringMap_items(self)

    def __contains__(self, key):
        return _siqadconn.StringMap___contains__(self, key)

    def key_iterator(self):
        return _siqadconn.StringMap_key_iterator(self)

    def value_iterator(self):
        return _siqadconn.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _siqadconn.StringMap___setitem__(self, *args)

    def asdict(self):
        return _siqadconn.StringMap_asdict(self)

    def __init__(self, *args):
        this = _siqadconn.new_StringMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _siqadconn.StringMap_empty(self)

    def size(self):
        return _siqadconn.StringMap_size(self)

    def swap(self, v):
        return _siqadconn.StringMap_swap(self, v)

    def begin(self):
        return _siqadconn.StringMap_begin(self)

    def end(self):
        return _siqadconn.StringMap_end(self)

    def rbegin(self):
        return _siqadconn.StringMap_rbegin(self)

    def rend(self):
        return _siqadconn.StringMap_rend(self)

    def clear(self):
        return _siqadconn.StringMap_clear(self)

    def get_allocator(self):
        return _siqadconn.StringMap_get_allocator(self)

    def count(self, x):
        return _siqadconn.StringMap_count(self, x)

    def erase(self, *args):
        return _siqadconn.StringMap_erase(self, *args)

    def find(self, x):
        return _siqadconn.StringMap_find(self, x)

    def lower_bound(self, x):
        return _siqadconn.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _siqadconn.StringMap_upper_bound(self, x)
    __swig_destroy__ = _siqadconn.delete_StringMap
    __del__ = lambda self: None
StringMap_swigregister = _siqadconn.StringMap_swigregister
StringMap_swigregister(StringMap)

class LayerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.LayerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.LayerVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.LayerVector___bool__(self)

    def __len__(self):
        return _siqadconn.LayerVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.LayerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.LayerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.LayerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.LayerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.LayerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.LayerVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.LayerVector_pop(self)

    def append(self, x):
        return _siqadconn.LayerVector_append(self, x)

    def empty(self):
        return _siqadconn.LayerVector_empty(self)

    def size(self):
        return _siqadconn.LayerVector_size(self)

    def swap(self, v):
        return _siqadconn.LayerVector_swap(self, v)

    def begin(self):
        return _siqadconn.LayerVector_begin(self)

    def end(self):
        return _siqadconn.LayerVector_end(self)

    def rbegin(self):
        return _siqadconn.LayerVector_rbegin(self)

    def rend(self):
        return _siqadconn.LayerVector_rend(self)

    def clear(self):
        return _siqadconn.LayerVector_clear(self)

    def get_allocator(self):
        return _siqadconn.LayerVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.LayerVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.LayerVector_erase(self, *args)

    def __init__(self, *args):
        this = _siqadconn.new_LayerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _siqadconn.LayerVector_push_back(self, x)

    def front(self):
        return _siqadconn.LayerVector_front(self)

    def back(self):
        return _siqadconn.LayerVector_back(self)

    def assign(self, n, x):
        return _siqadconn.LayerVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.LayerVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.LayerVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.LayerVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.LayerVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_LayerVector
    __del__ = lambda self: None
LayerVector_swigregister = _siqadconn.LayerVector_swigregister
LayerVector_swigregister(LayerVector)

# This file is compatible with both classic and new-style classes.


