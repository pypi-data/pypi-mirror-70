# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _siqadconn
else:
    import _siqadconn

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _siqadconn.delete_SwigPyIterator

    def value(self):
        return _siqadconn.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _siqadconn.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _siqadconn.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _siqadconn.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _siqadconn.SwigPyIterator_equal(self, x)

    def copy(self):
        return _siqadconn.SwigPyIterator_copy(self)

    def next(self):
        return _siqadconn.SwigPyIterator_next(self)

    def __next__(self):
        return _siqadconn.SwigPyIterator___next__(self)

    def previous(self):
        return _siqadconn.SwigPyIterator_previous(self)

    def advance(self, n):
        return _siqadconn.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _siqadconn.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _siqadconn.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _siqadconn.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _siqadconn.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _siqadconn.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _siqadconn.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _siqadconn:
_siqadconn.SwigPyIterator_swigregister(SwigPyIterator)

class SiQADConnector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _siqadconn.SiQADConnector_swiginit(self, _siqadconn.new_SiQADConnector(*args))
    __swig_destroy__ = _siqadconn.delete_SiQADConnector

    def writeResultsXml(self):
        return _siqadconn.SiQADConnector_writeResultsXml(self)

    def setExport(self, *args):
        return _siqadconn.SiQADConnector_setExport(self, *args)

    def addSQCommand(self, arg2):
        return _siqadconn.SiQADConnector_addSQCommand(self, arg2)

    def parameterExists(self, key):
        return _siqadconn.SiQADConnector_parameterExists(self, key)

    def getParameter(self, key):
        return _siqadconn.SiQADConnector_getParameter(self, key)

    def getLayers(self):
        return _siqadconn.SiQADConnector_getLayers(self)

    def getAllParameters(self):
        return _siqadconn.SiQADConnector_getAllParameters(self)

    def dbCollection(self):
        return _siqadconn.SiQADConnector_dbCollection(self)

    def electrodeCollection(self):
        return _siqadconn.SiQADConnector_electrodeCollection(self)

    def electrodePolyCollection(self):
        return _siqadconn.SiQADConnector_electrodePolyCollection(self)

    def inputPath(self):
        return _siqadconn.SiQADConnector_inputPath(self)

    def setOutputPath(self, path):
        return _siqadconn.SiQADConnector_setOutputPath(self, path)

    def outputPath(self):
        return _siqadconn.SiQADConnector_outputPath(self)

    def export(self, *args, **kwargs):
      for key in kwargs:
        if key in ['db_loc', 'misc']:
            self.setExport(key, StringPairVector(self.tuplify(kwargs[key])))
        else:
            self.setExport(key, StringVector2D(self.tuplify(kwargs[key])))


    def addCommand(self, *args, **kwargs):
      command_action = args[0]  # e.g. add, remove
      command_item = args[1]    # e.g. DBDot, Aggregate
      if command_action == 'add' and command_item == 'Aggregate':
        self.addSQCommand(AggregateCommand(FloatPairVector(kwargs['dbagg'])))


    def tuplify(self, data):
      if hasattr(data,'__iter__') and not hasattr(data, "strip"):
        return tuple(self.tuplify(i) for i in data)
      else:
        return str(data)


# Register SiQADConnector in _siqadconn:
_siqadconn.SiQADConnector_swigregister(SiQADConnector)

class Layer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _siqadconn.Layer_swiginit(self, _siqadconn.new_Layer(*args))
    name = property(_siqadconn.Layer_name_get, _siqadconn.Layer_name_set)
    type = property(_siqadconn.Layer_type_get, _siqadconn.Layer_type_set)
    role = property(_siqadconn.Layer_role_get, _siqadconn.Layer_role_set)
    zoffset = property(_siqadconn.Layer_zoffset_get, _siqadconn.Layer_zoffset_set)
    zheight = property(_siqadconn.Layer_zheight_get, _siqadconn.Layer_zheight_set)
    __swig_destroy__ = _siqadconn.delete_Layer

# Register Layer in _siqadconn:
_siqadconn.Layer_swigregister(Layer)

class DBDot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_siqadconn.DBDot_x_get, _siqadconn.DBDot_x_set)
    y = property(_siqadconn.DBDot_y_get, _siqadconn.DBDot_y_set)
    n = property(_siqadconn.DBDot_n_get, _siqadconn.DBDot_n_set)
    m = property(_siqadconn.DBDot_m_get, _siqadconn.DBDot_m_set)
    l = property(_siqadconn.DBDot_l_get, _siqadconn.DBDot_l_set)

    def __init__(self, in_x, in_y, n, m, l):
        _siqadconn.DBDot_swiginit(self, _siqadconn.new_DBDot(in_x, in_y, n, m, l))
    __swig_destroy__ = _siqadconn.delete_DBDot

# Register DBDot in _siqadconn:
_siqadconn.DBDot_swigregister(DBDot)

class DBIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        _siqadconn.DBIterator_swiginit(self, _siqadconn.new_DBIterator(root, begin))

    def __eq__(self, other):
        return _siqadconn.DBIterator___eq__(self, other)

    def __ne__(self, other):
        return _siqadconn.DBIterator___ne__(self, other)

    def __ref__(self):
        return _siqadconn.DBIterator___ref__(self)

    def setCollection(self, coll):
        return _siqadconn.DBIterator_setCollection(self, coll)
    collection = property(_siqadconn.DBIterator_collection_get, _siqadconn.DBIterator_collection_set)

    def __iter__(self):
        return _siqadconn.DBIterator___iter__(self)

    def __next__(self):
      db = _siqadconn.DBIterator___next__(self)
      if db == None:
        raise StopIteration
      else:
        return db


    __swig_destroy__ = _siqadconn.delete_DBIterator

# Register DBIterator in _siqadconn:
_siqadconn.DBIterator_swigregister(DBIterator)

class DBCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, db_tree_in):
        _siqadconn.DBCollection_swiginit(self, _siqadconn.new_DBCollection(db_tree_in))

    def begin(self):
        return _siqadconn.DBCollection_begin(self)

    def end(self):
        return _siqadconn.DBCollection_end(self)
    db_tree_inner = property(_siqadconn.DBCollection_db_tree_inner_get, _siqadconn.DBCollection_db_tree_inner_set)

    def __iter__(self):
        return _siqadconn.DBCollection___iter__(self)
    __swig_destroy__ = _siqadconn.delete_DBCollection

# Register DBCollection in _siqadconn:
_siqadconn.DBCollection_swigregister(DBCollection)

class ElectrodePoly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    layer_id = property(_siqadconn.ElectrodePoly_layer_id_get, _siqadconn.ElectrodePoly_layer_id_set)
    vertices = property(_siqadconn.ElectrodePoly_vertices_get, _siqadconn.ElectrodePoly_vertices_set)
    potential = property(_siqadconn.ElectrodePoly_potential_get, _siqadconn.ElectrodePoly_potential_set)
    phase = property(_siqadconn.ElectrodePoly_phase_get, _siqadconn.ElectrodePoly_phase_set)
    electrode_type = property(_siqadconn.ElectrodePoly_electrode_type_get, _siqadconn.ElectrodePoly_electrode_type_set)
    net = property(_siqadconn.ElectrodePoly_net_get, _siqadconn.ElectrodePoly_net_set)
    pixel_per_angstrom = property(_siqadconn.ElectrodePoly_pixel_per_angstrom_get, _siqadconn.ElectrodePoly_pixel_per_angstrom_set)

    def __init__(self, in_layer_id, in_vertices, in_potential, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net):
        _siqadconn.ElectrodePoly_swiginit(self, _siqadconn.new_ElectrodePoly(in_layer_id, in_vertices, in_potential, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net))
    __swig_destroy__ = _siqadconn.delete_ElectrodePoly

# Register ElectrodePoly in _siqadconn:
_siqadconn.ElectrodePoly_swigregister(ElectrodePoly)

class ElecPolyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        _siqadconn.ElecPolyIterator_swiginit(self, _siqadconn.new_ElecPolyIterator(root, begin))

    def __eq__(self, other):
        return _siqadconn.ElecPolyIterator___eq__(self, other)

    def __ne__(self, other):
        return _siqadconn.ElecPolyIterator___ne__(self, other)

    def __ref__(self):
        return _siqadconn.ElecPolyIterator___ref__(self)

    def setCollection(self, coll):
        return _siqadconn.ElecPolyIterator_setCollection(self, coll)
    collection = property(_siqadconn.ElecPolyIterator_collection_get, _siqadconn.ElecPolyIterator_collection_set)

    def __iter__(self):
        return _siqadconn.ElecPolyIterator___iter__(self)

    def __next__(self):
      elec_poly = _siqadconn.ElecPolyIterator___next__(self)
      if elec_poly == None:
        raise StopIteration
      else:
        return elec_poly


    __swig_destroy__ = _siqadconn.delete_ElecPolyIterator

# Register ElecPolyIterator in _siqadconn:
_siqadconn.ElecPolyIterator_swigregister(ElecPolyIterator)

class ElectrodePolyCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, elec_poly_tree_in):
        _siqadconn.ElectrodePolyCollection_swiginit(self, _siqadconn.new_ElectrodePolyCollection(elec_poly_tree_in))

    def begin(self):
        return _siqadconn.ElectrodePolyCollection_begin(self)

    def end(self):
        return _siqadconn.ElectrodePolyCollection_end(self)
    elec_poly_tree_inner = property(_siqadconn.ElectrodePolyCollection_elec_poly_tree_inner_get, _siqadconn.ElectrodePolyCollection_elec_poly_tree_inner_set)

    def __iter__(self):
        return _siqadconn.ElectrodePolyCollection___iter__(self)
    __swig_destroy__ = _siqadconn.delete_ElectrodePolyCollection

# Register ElectrodePolyCollection in _siqadconn:
_siqadconn.ElectrodePolyCollection_swigregister(ElectrodePolyCollection)

class Electrode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    layer_id = property(_siqadconn.Electrode_layer_id_get, _siqadconn.Electrode_layer_id_set)
    x1 = property(_siqadconn.Electrode_x1_get, _siqadconn.Electrode_x1_set)
    x2 = property(_siqadconn.Electrode_x2_get, _siqadconn.Electrode_x2_set)
    y1 = property(_siqadconn.Electrode_y1_get, _siqadconn.Electrode_y1_set)
    y2 = property(_siqadconn.Electrode_y2_get, _siqadconn.Electrode_y2_set)
    potential = property(_siqadconn.Electrode_potential_get, _siqadconn.Electrode_potential_set)
    pot_offset = property(_siqadconn.Electrode_pot_offset_get, _siqadconn.Electrode_pot_offset_set)
    phase = property(_siqadconn.Electrode_phase_get, _siqadconn.Electrode_phase_set)
    electrode_type = property(_siqadconn.Electrode_electrode_type_get, _siqadconn.Electrode_electrode_type_set)
    net = property(_siqadconn.Electrode_net_get, _siqadconn.Electrode_net_set)
    angle = property(_siqadconn.Electrode_angle_get, _siqadconn.Electrode_angle_set)
    pixel_per_angstrom = property(_siqadconn.Electrode_pixel_per_angstrom_get, _siqadconn.Electrode_pixel_per_angstrom_set)

    def __init__(self, in_layer_id, in_x1, in_x2, in_y1, in_y2, in_potential, in_pot_offset, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net, in_angle):
        _siqadconn.Electrode_swiginit(self, _siqadconn.new_Electrode(in_layer_id, in_x1, in_x2, in_y1, in_y2, in_potential, in_pot_offset, in_phase, in_electrode_type, in_pixel_per_angstrom, in_net, in_angle))
    __swig_destroy__ = _siqadconn.delete_Electrode

# Register Electrode in _siqadconn:
_siqadconn.Electrode_swigregister(Electrode)

class ElecIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, root, begin=True):
        _siqadconn.ElecIterator_swiginit(self, _siqadconn.new_ElecIterator(root, begin))

    def __eq__(self, other):
        return _siqadconn.ElecIterator___eq__(self, other)

    def __ne__(self, other):
        return _siqadconn.ElecIterator___ne__(self, other)

    def __ref__(self):
        return _siqadconn.ElecIterator___ref__(self)

    def setCollection(self, coll):
        return _siqadconn.ElecIterator_setCollection(self, coll)
    collection = property(_siqadconn.ElecIterator_collection_get, _siqadconn.ElecIterator_collection_set)

    def __iter__(self):
        return _siqadconn.ElecIterator___iter__(self)

    def __next__(self):
      elec = _siqadconn.ElecIterator___next__(self)
      if elec == None:
        raise StopIteration
      else:
        return elec


    __swig_destroy__ = _siqadconn.delete_ElecIterator

# Register ElecIterator in _siqadconn:
_siqadconn.ElecIterator_swigregister(ElecIterator)

class ElectrodeCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, elec_tree_in):
        _siqadconn.ElectrodeCollection_swiginit(self, _siqadconn.new_ElectrodeCollection(elec_tree_in))

    def begin(self):
        return _siqadconn.ElectrodeCollection_begin(self)

    def end(self):
        return _siqadconn.ElectrodeCollection_end(self)
    elec_tree_inner = property(_siqadconn.ElectrodeCollection_elec_tree_inner_get, _siqadconn.ElectrodeCollection_elec_tree_inner_set)

    def __iter__(self):
        return _siqadconn.ElectrodeCollection___iter__(self)
    __swig_destroy__ = _siqadconn.delete_ElectrodeCollection

# Register ElectrodeCollection in _siqadconn:
_siqadconn.ElectrodeCollection_swigregister(ElectrodeCollection)

class Aggregate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    aggs = property(_siqadconn.Aggregate_aggs_get, _siqadconn.Aggregate_aggs_set)
    dbs = property(_siqadconn.Aggregate_dbs_get, _siqadconn.Aggregate_dbs_set)
    elecs = property(_siqadconn.Aggregate_elecs_get, _siqadconn.Aggregate_elecs_set)
    elec_polys = property(_siqadconn.Aggregate_elec_polys_get, _siqadconn.Aggregate_elec_polys_set)

    def size(self):
        return _siqadconn.Aggregate_size(self)

    def __init__(self):
        _siqadconn.Aggregate_swiginit(self, _siqadconn.new_Aggregate())
    __swig_destroy__ = _siqadconn.delete_Aggregate

# Register Aggregate in _siqadconn:
_siqadconn.Aggregate_swigregister(Aggregate)

class SQCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoItem = _siqadconn.SQCommand_NoItem
    DBDot = _siqadconn.SQCommand_DBDot
    Electrode = _siqadconn.SQCommand_Electrode
    Aggregate = _siqadconn.SQCommand_Aggregate
    Add = _siqadconn.SQCommand_Add
    Remove = _siqadconn.SQCommand_Remove
    Echo = _siqadconn.SQCommand_Echo
    Run = _siqadconn.SQCommand_Run
    Move = _siqadconn.SQCommand_Move

    def __init__(self, *args):
        _siqadconn.SQCommand_swiginit(self, _siqadconn.new_SQCommand(*args))
    __swig_destroy__ = _siqadconn.delete_SQCommand

    @staticmethod
    def commandItemString(arg1):
        return _siqadconn.SQCommand_commandItemString(arg1)

    @staticmethod
    def commandActionString(arg1):
        return _siqadconn.SQCommand_commandActionString(arg1)

    @staticmethod
    def commandItemEnum(arg1):
        return _siqadconn.SQCommand_commandItemEnum(arg1)

    @staticmethod
    def commandActionEnum(arg1):
        return _siqadconn.SQCommand_commandActionEnum(arg1)

    def commandItem(self):
        return _siqadconn.SQCommand_commandItem(self)

    def commandAction(self):
        return _siqadconn.SQCommand_commandAction(self)

    def finalCommand(self):
        return _siqadconn.SQCommand_finalCommand(self)

    def addActionCommand(self):
        return _siqadconn.SQCommand_addActionCommand(self)

    def addActionArguments(self):
        return _siqadconn.SQCommand_addActionArguments(self)

# Register SQCommand in _siqadconn:
_siqadconn.SQCommand_swigregister(SQCommand)

def SQCommand_commandItemString(arg1):
    return _siqadconn.SQCommand_commandItemString(arg1)

def SQCommand_commandActionString(arg1):
    return _siqadconn.SQCommand_commandActionString(arg1)

def SQCommand_commandItemEnum(arg1):
    return _siqadconn.SQCommand_commandItemEnum(arg1)

def SQCommand_commandActionEnum(arg1):
    return _siqadconn.SQCommand_commandActionEnum(arg1)

class AggregateCommand(SQCommand):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _siqadconn.AggregateCommand_swiginit(self, _siqadconn.new_AggregateCommand(*args))

    def setLayer(self, t_layer):
        return _siqadconn.AggregateCommand_setLayer(self, t_layer)

    def getLayer(self):
        return _siqadconn.AggregateCommand_getLayer(self)

    def addActionArguments(self):
        return _siqadconn.AggregateCommand_addActionArguments(self)

    def addDBsToAggregateFormation(self, t_db_locs):
        return _siqadconn.AggregateCommand_addDBsToAggregateFormation(self, t_db_locs)

    def dbLocations(self):
        return _siqadconn.AggregateCommand_dbLocations(self)
    __swig_destroy__ = _siqadconn.delete_AggregateCommand

# Register AggregateCommand in _siqadconn:
_siqadconn.AggregateCommand_swigregister(AggregateCommand)

class DoublePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _siqadconn.DoublePair_swiginit(self, _siqadconn.new_DoublePair(*args))
    first = property(_siqadconn.DoublePair_first_get, _siqadconn.DoublePair_first_set)
    second = property(_siqadconn.DoublePair_second_get, _siqadconn.DoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _siqadconn.delete_DoublePair

# Register DoublePair in _siqadconn:
_siqadconn.DoublePair_swigregister(DoublePair)

class DoublePairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.DoublePairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.DoublePairVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.DoublePairVector___bool__(self)

    def __len__(self):
        return _siqadconn.DoublePairVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.DoublePairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.DoublePairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.DoublePairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.DoublePairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.DoublePairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.DoublePairVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.DoublePairVector_pop(self)

    def append(self, x):
        return _siqadconn.DoublePairVector_append(self, x)

    def empty(self):
        return _siqadconn.DoublePairVector_empty(self)

    def size(self):
        return _siqadconn.DoublePairVector_size(self)

    def swap(self, v):
        return _siqadconn.DoublePairVector_swap(self, v)

    def begin(self):
        return _siqadconn.DoublePairVector_begin(self)

    def end(self):
        return _siqadconn.DoublePairVector_end(self)

    def rbegin(self):
        return _siqadconn.DoublePairVector_rbegin(self)

    def rend(self):
        return _siqadconn.DoublePairVector_rend(self)

    def clear(self):
        return _siqadconn.DoublePairVector_clear(self)

    def get_allocator(self):
        return _siqadconn.DoublePairVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.DoublePairVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.DoublePairVector_erase(self, *args)

    def __init__(self, *args):
        _siqadconn.DoublePairVector_swiginit(self, _siqadconn.new_DoublePairVector(*args))

    def push_back(self, x):
        return _siqadconn.DoublePairVector_push_back(self, x)

    def front(self):
        return _siqadconn.DoublePairVector_front(self)

    def back(self):
        return _siqadconn.DoublePairVector_back(self)

    def assign(self, n, x):
        return _siqadconn.DoublePairVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.DoublePairVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.DoublePairVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.DoublePairVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.DoublePairVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_DoublePairVector

# Register DoublePairVector in _siqadconn:
_siqadconn.DoublePairVector_swigregister(DoublePairVector)

class FloatPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _siqadconn.FloatPair_swiginit(self, _siqadconn.new_FloatPair(*args))
    first = property(_siqadconn.FloatPair_first_get, _siqadconn.FloatPair_first_set)
    second = property(_siqadconn.FloatPair_second_get, _siqadconn.FloatPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _siqadconn.delete_FloatPair

# Register FloatPair in _siqadconn:
_siqadconn.FloatPair_swigregister(FloatPair)

class FloatPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.FloatPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.FloatPairVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.FloatPairVector___bool__(self)

    def __len__(self):
        return _siqadconn.FloatPairVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.FloatPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.FloatPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.FloatPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.FloatPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.FloatPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.FloatPairVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.FloatPairVector_pop(self)

    def append(self, x):
        return _siqadconn.FloatPairVector_append(self, x)

    def empty(self):
        return _siqadconn.FloatPairVector_empty(self)

    def size(self):
        return _siqadconn.FloatPairVector_size(self)

    def swap(self, v):
        return _siqadconn.FloatPairVector_swap(self, v)

    def begin(self):
        return _siqadconn.FloatPairVector_begin(self)

    def end(self):
        return _siqadconn.FloatPairVector_end(self)

    def rbegin(self):
        return _siqadconn.FloatPairVector_rbegin(self)

    def rend(self):
        return _siqadconn.FloatPairVector_rend(self)

    def clear(self):
        return _siqadconn.FloatPairVector_clear(self)

    def get_allocator(self):
        return _siqadconn.FloatPairVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.FloatPairVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.FloatPairVector_erase(self, *args)

    def __init__(self, *args):
        _siqadconn.FloatPairVector_swiginit(self, _siqadconn.new_FloatPairVector(*args))

    def push_back(self, x):
        return _siqadconn.FloatPairVector_push_back(self, x)

    def front(self):
        return _siqadconn.FloatPairVector_front(self)

    def back(self):
        return _siqadconn.FloatPairVector_back(self)

    def assign(self, n, x):
        return _siqadconn.FloatPairVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.FloatPairVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.FloatPairVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.FloatPairVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.FloatPairVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_FloatPairVector

# Register FloatPairVector in _siqadconn:
_siqadconn.FloatPairVector_swigregister(FloatPairVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.IntVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.IntVector___bool__(self)

    def __len__(self):
        return _siqadconn.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.IntVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.IntVector_pop(self)

    def append(self, x):
        return _siqadconn.IntVector_append(self, x)

    def empty(self):
        return _siqadconn.IntVector_empty(self)

    def size(self):
        return _siqadconn.IntVector_size(self)

    def swap(self, v):
        return _siqadconn.IntVector_swap(self, v)

    def begin(self):
        return _siqadconn.IntVector_begin(self)

    def end(self):
        return _siqadconn.IntVector_end(self)

    def rbegin(self):
        return _siqadconn.IntVector_rbegin(self)

    def rend(self):
        return _siqadconn.IntVector_rend(self)

    def clear(self):
        return _siqadconn.IntVector_clear(self)

    def get_allocator(self):
        return _siqadconn.IntVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.IntVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.IntVector_erase(self, *args)

    def __init__(self, *args):
        _siqadconn.IntVector_swiginit(self, _siqadconn.new_IntVector(*args))

    def push_back(self, x):
        return _siqadconn.IntVector_push_back(self, x)

    def front(self):
        return _siqadconn.IntVector_front(self)

    def back(self):
        return _siqadconn.IntVector_back(self)

    def assign(self, n, x):
        return _siqadconn.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.IntVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.IntVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.IntVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.IntVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_IntVector

# Register IntVector in _siqadconn:
_siqadconn.IntVector_swigregister(IntVector)

class StringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _siqadconn.StringPair_swiginit(self, _siqadconn.new_StringPair(*args))
    first = property(_siqadconn.StringPair_first_get, _siqadconn.StringPair_first_set)
    second = property(_siqadconn.StringPair_second_get, _siqadconn.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _siqadconn.delete_StringPair

# Register StringPair in _siqadconn:
_siqadconn.StringPair_swigregister(StringPair)

class StringPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringPairVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringPairVector___bool__(self)

    def __len__(self):
        return _siqadconn.StringPairVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.StringPairVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.StringPairVector_pop(self)

    def append(self, x):
        return _siqadconn.StringPairVector_append(self, x)

    def empty(self):
        return _siqadconn.StringPairVector_empty(self)

    def size(self):
        return _siqadconn.StringPairVector_size(self)

    def swap(self, v):
        return _siqadconn.StringPairVector_swap(self, v)

    def begin(self):
        return _siqadconn.StringPairVector_begin(self)

    def end(self):
        return _siqadconn.StringPairVector_end(self)

    def rbegin(self):
        return _siqadconn.StringPairVector_rbegin(self)

    def rend(self):
        return _siqadconn.StringPairVector_rend(self)

    def clear(self):
        return _siqadconn.StringPairVector_clear(self)

    def get_allocator(self):
        return _siqadconn.StringPairVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.StringPairVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        _siqadconn.StringPairVector_swiginit(self, _siqadconn.new_StringPairVector(*args))

    def push_back(self, x):
        return _siqadconn.StringPairVector_push_back(self, x)

    def front(self):
        return _siqadconn.StringPairVector_front(self)

    def back(self):
        return _siqadconn.StringPairVector_back(self)

    def assign(self, n, x):
        return _siqadconn.StringPairVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.StringPairVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.StringPairVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.StringPairVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.StringPairVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_StringPairVector

# Register StringPairVector in _siqadconn:
_siqadconn.StringPairVector_swigregister(StringPairVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringVector___bool__(self)

    def __len__(self):
        return _siqadconn.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.StringVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.StringVector_pop(self)

    def append(self, x):
        return _siqadconn.StringVector_append(self, x)

    def empty(self):
        return _siqadconn.StringVector_empty(self)

    def size(self):
        return _siqadconn.StringVector_size(self)

    def swap(self, v):
        return _siqadconn.StringVector_swap(self, v)

    def begin(self):
        return _siqadconn.StringVector_begin(self)

    def end(self):
        return _siqadconn.StringVector_end(self)

    def rbegin(self):
        return _siqadconn.StringVector_rbegin(self)

    def rend(self):
        return _siqadconn.StringVector_rend(self)

    def clear(self):
        return _siqadconn.StringVector_clear(self)

    def get_allocator(self):
        return _siqadconn.StringVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.StringVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.StringVector_erase(self, *args)

    def __init__(self, *args):
        _siqadconn.StringVector_swiginit(self, _siqadconn.new_StringVector(*args))

    def push_back(self, x):
        return _siqadconn.StringVector_push_back(self, x)

    def front(self):
        return _siqadconn.StringVector_front(self)

    def back(self):
        return _siqadconn.StringVector_back(self)

    def assign(self, n, x):
        return _siqadconn.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.StringVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.StringVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.StringVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.StringVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_StringVector

# Register StringVector in _siqadconn:
_siqadconn.StringVector_swigregister(StringVector)

class StringVector2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringVector2D___bool__(self)

    def __len__(self):
        return _siqadconn.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _siqadconn.StringVector2D_pop(self)

    def append(self, x):
        return _siqadconn.StringVector2D_append(self, x)

    def empty(self):
        return _siqadconn.StringVector2D_empty(self)

    def size(self):
        return _siqadconn.StringVector2D_size(self)

    def swap(self, v):
        return _siqadconn.StringVector2D_swap(self, v)

    def begin(self):
        return _siqadconn.StringVector2D_begin(self)

    def end(self):
        return _siqadconn.StringVector2D_end(self)

    def rbegin(self):
        return _siqadconn.StringVector2D_rbegin(self)

    def rend(self):
        return _siqadconn.StringVector2D_rend(self)

    def clear(self):
        return _siqadconn.StringVector2D_clear(self)

    def get_allocator(self):
        return _siqadconn.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _siqadconn.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _siqadconn.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        _siqadconn.StringVector2D_swiginit(self, _siqadconn.new_StringVector2D(*args))

    def push_back(self, x):
        return _siqadconn.StringVector2D_push_back(self, x)

    def front(self):
        return _siqadconn.StringVector2D_front(self)

    def back(self):
        return _siqadconn.StringVector2D_back(self)

    def assign(self, n, x):
        return _siqadconn.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.StringVector2D_reserve(self, n)

    def capacity(self):
        return _siqadconn.StringVector2D_capacity(self)
    __swig_destroy__ = _siqadconn.delete_StringVector2D

# Register StringVector2D in _siqadconn:
_siqadconn.StringVector2D_swigregister(StringVector2D)

class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.StringMap___nonzero__(self)

    def __bool__(self):
        return _siqadconn.StringMap___bool__(self)

    def __len__(self):
        return _siqadconn.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _siqadconn.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _siqadconn.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _siqadconn.StringMap_has_key(self, key)

    def keys(self):
        return _siqadconn.StringMap_keys(self)

    def values(self):
        return _siqadconn.StringMap_values(self)

    def items(self):
        return _siqadconn.StringMap_items(self)

    def __contains__(self, key):
        return _siqadconn.StringMap___contains__(self, key)

    def key_iterator(self):
        return _siqadconn.StringMap_key_iterator(self)

    def value_iterator(self):
        return _siqadconn.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _siqadconn.StringMap___setitem__(self, *args)

    def asdict(self):
        return _siqadconn.StringMap_asdict(self)

    def __init__(self, *args):
        _siqadconn.StringMap_swiginit(self, _siqadconn.new_StringMap(*args))

    def empty(self):
        return _siqadconn.StringMap_empty(self)

    def size(self):
        return _siqadconn.StringMap_size(self)

    def swap(self, v):
        return _siqadconn.StringMap_swap(self, v)

    def begin(self):
        return _siqadconn.StringMap_begin(self)

    def end(self):
        return _siqadconn.StringMap_end(self)

    def rbegin(self):
        return _siqadconn.StringMap_rbegin(self)

    def rend(self):
        return _siqadconn.StringMap_rend(self)

    def clear(self):
        return _siqadconn.StringMap_clear(self)

    def get_allocator(self):
        return _siqadconn.StringMap_get_allocator(self)

    def count(self, x):
        return _siqadconn.StringMap_count(self, x)

    def erase(self, *args):
        return _siqadconn.StringMap_erase(self, *args)

    def find(self, x):
        return _siqadconn.StringMap_find(self, x)

    def lower_bound(self, x):
        return _siqadconn.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _siqadconn.StringMap_upper_bound(self, x)
    __swig_destroy__ = _siqadconn.delete_StringMap

# Register StringMap in _siqadconn:
_siqadconn.StringMap_swigregister(StringMap)

class LayerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _siqadconn.LayerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _siqadconn.LayerVector___nonzero__(self)

    def __bool__(self):
        return _siqadconn.LayerVector___bool__(self)

    def __len__(self):
        return _siqadconn.LayerVector___len__(self)

    def __getslice__(self, i, j):
        return _siqadconn.LayerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _siqadconn.LayerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _siqadconn.LayerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _siqadconn.LayerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _siqadconn.LayerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _siqadconn.LayerVector___setitem__(self, *args)

    def pop(self):
        return _siqadconn.LayerVector_pop(self)

    def append(self, x):
        return _siqadconn.LayerVector_append(self, x)

    def empty(self):
        return _siqadconn.LayerVector_empty(self)

    def size(self):
        return _siqadconn.LayerVector_size(self)

    def swap(self, v):
        return _siqadconn.LayerVector_swap(self, v)

    def begin(self):
        return _siqadconn.LayerVector_begin(self)

    def end(self):
        return _siqadconn.LayerVector_end(self)

    def rbegin(self):
        return _siqadconn.LayerVector_rbegin(self)

    def rend(self):
        return _siqadconn.LayerVector_rend(self)

    def clear(self):
        return _siqadconn.LayerVector_clear(self)

    def get_allocator(self):
        return _siqadconn.LayerVector_get_allocator(self)

    def pop_back(self):
        return _siqadconn.LayerVector_pop_back(self)

    def erase(self, *args):
        return _siqadconn.LayerVector_erase(self, *args)

    def __init__(self, *args):
        _siqadconn.LayerVector_swiginit(self, _siqadconn.new_LayerVector(*args))

    def push_back(self, x):
        return _siqadconn.LayerVector_push_back(self, x)

    def front(self):
        return _siqadconn.LayerVector_front(self)

    def back(self):
        return _siqadconn.LayerVector_back(self)

    def assign(self, n, x):
        return _siqadconn.LayerVector_assign(self, n, x)

    def resize(self, *args):
        return _siqadconn.LayerVector_resize(self, *args)

    def insert(self, *args):
        return _siqadconn.LayerVector_insert(self, *args)

    def reserve(self, n):
        return _siqadconn.LayerVector_reserve(self, n)

    def capacity(self):
        return _siqadconn.LayerVector_capacity(self)
    __swig_destroy__ = _siqadconn.delete_LayerVector

# Register LayerVector in _siqadconn:
_siqadconn.LayerVector_swigregister(LayerVector)



