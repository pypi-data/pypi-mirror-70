# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VideoUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gid': 'str',
        'id': 'int',
        'media_files': 'list[str]',
        'uid': 'str'
    }

    attribute_map = {
        'gid': 'gid',
        'id': 'id',
        'media_files': 'media_files',
        'uid': 'uid'
    }

    def __init__(self, gid=None, id=None, media_files=None, uid=None):  # noqa: E501
        """VideoUpdate - a model defined in Swagger"""  # noqa: E501
        self._gid = None
        self._id = None
        self._media_files = None
        self._uid = None
        self.discriminator = None
        self.gid = gid
        self.id = id
        self.media_files = media_files
        self.uid = uid

    @property
    def gid(self):
        """Gets the gid of this VideoUpdate.  # noqa: E501

        UUID generated for the job group. This value is returned in the response of the `AlgorithmLaunch` and `Transcode` endpoints.  # noqa: E501

        :return: The gid of this VideoUpdate.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VideoUpdate.

        UUID generated for the job group. This value is returned in the response of the `AlgorithmLaunch` and `Transcode` endpoints.  # noqa: E501

        :param gid: The gid of this VideoUpdate.  # noqa: E501
        :type: str
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def id(self):
        """Gets the id of this VideoUpdate.  # noqa: E501

        Unique integer identifying a media.  # noqa: E501

        :return: The id of this VideoUpdate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoUpdate.

        Unique integer identifying a media.  # noqa: E501

        :param id: The id of this VideoUpdate.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def media_files(self):
        """Gets the media_files of this VideoUpdate.  # noqa: E501

        Object containing upload urls for the transcoded file and corresponding `VideoDefinition`.  # noqa: E501

        :return: The media_files of this VideoUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._media_files

    @media_files.setter
    def media_files(self, media_files):
        """Sets the media_files of this VideoUpdate.

        Object containing upload urls for the transcoded file and corresponding `VideoDefinition`.  # noqa: E501

        :param media_files: The media_files of this VideoUpdate.  # noqa: E501
        :type: list[str]
        """
        if media_files is None:
            raise ValueError("Invalid value for `media_files`, must not be `None`")  # noqa: E501

        self._media_files = media_files

    @property
    def uid(self):
        """Gets the uid of this VideoUpdate.  # noqa: E501

        UUID generated for the individual job. This value is returned in the response of the `AlgorithmLaunch` and `Transcode` endpoints.  # noqa: E501

        :return: The uid of this VideoUpdate.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VideoUpdate.

        UUID generated for the individual job. This value is returned in the response of the `AlgorithmLaunch` and `Transcode` endpoints.  # noqa: E501

        :param uid: The uid of this VideoUpdate.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
