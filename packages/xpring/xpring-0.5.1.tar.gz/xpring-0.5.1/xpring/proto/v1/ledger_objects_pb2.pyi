# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from .common_pb2 import (
    Account as org___xrpl___rpc___v1___common_pb2___Account,
    AccountTransactionID as org___xrpl___rpc___v1___common_pb2___AccountTransactionID,
    Amount as org___xrpl___rpc___v1___common_pb2___Amount,
    Authorize as org___xrpl___rpc___v1___common_pb2___Authorize,
    Balance as org___xrpl___rpc___v1___common_pb2___Balance,
    BaseFee as org___xrpl___rpc___v1___common_pb2___BaseFee,
    BookDirectory as org___xrpl___rpc___v1___common_pb2___BookDirectory,
    BookNode as org___xrpl___rpc___v1___common_pb2___BookNode,
    CancelAfter as org___xrpl___rpc___v1___common_pb2___CancelAfter,
    CloseTime as org___xrpl___rpc___v1___common_pb2___CloseTime,
    Condition as org___xrpl___rpc___v1___common_pb2___Condition,
    Destination as org___xrpl___rpc___v1___common_pb2___Destination,
    DestinationNode as org___xrpl___rpc___v1___common_pb2___DestinationNode,
    DestinationTag as org___xrpl___rpc___v1___common_pb2___DestinationTag,
    Domain as org___xrpl___rpc___v1___common_pb2___Domain,
    EmailHash as org___xrpl___rpc___v1___common_pb2___EmailHash,
    Expiration as org___xrpl___rpc___v1___common_pb2___Expiration,
    FinishAfter as org___xrpl___rpc___v1___common_pb2___FinishAfter,
    Flags as org___xrpl___rpc___v1___common_pb2___Flags,
    Hash as org___xrpl___rpc___v1___common_pb2___Hash,
    HighLimit as org___xrpl___rpc___v1___common_pb2___HighLimit,
    HighNode as org___xrpl___rpc___v1___common_pb2___HighNode,
    HighQualityIn as org___xrpl___rpc___v1___common_pb2___HighQualityIn,
    HighQualityOut as org___xrpl___rpc___v1___common_pb2___HighQualityOut,
    Index as org___xrpl___rpc___v1___common_pb2___Index,
    IndexNext as org___xrpl___rpc___v1___common_pb2___IndexNext,
    IndexPrevious as org___xrpl___rpc___v1___common_pb2___IndexPrevious,
    InvoiceID as org___xrpl___rpc___v1___common_pb2___InvoiceID,
    LastLedgerSequence as org___xrpl___rpc___v1___common_pb2___LastLedgerSequence,
    LowLimit as org___xrpl___rpc___v1___common_pb2___LowLimit,
    LowNode as org___xrpl___rpc___v1___common_pb2___LowNode,
    LowQualityIn as org___xrpl___rpc___v1___common_pb2___LowQualityIn,
    LowQualityOut as org___xrpl___rpc___v1___common_pb2___LowQualityOut,
    MessageKey as org___xrpl___rpc___v1___common_pb2___MessageKey,
    Owner as org___xrpl___rpc___v1___common_pb2___Owner,
    OwnerCount as org___xrpl___rpc___v1___common_pb2___OwnerCount,
    OwnerNode as org___xrpl___rpc___v1___common_pb2___OwnerNode,
    PreviousTransactionID as org___xrpl___rpc___v1___common_pb2___PreviousTransactionID,
    PreviousTransactionLedgerSequence as org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence,
    PublicKey as org___xrpl___rpc___v1___common_pb2___PublicKey,
    ReferenceFeeUnits as org___xrpl___rpc___v1___common_pb2___ReferenceFeeUnits,
    RegularKey as org___xrpl___rpc___v1___common_pb2___RegularKey,
    ReserveBase as org___xrpl___rpc___v1___common_pb2___ReserveBase,
    ReserveIncrement as org___xrpl___rpc___v1___common_pb2___ReserveIncrement,
    RootIndex as org___xrpl___rpc___v1___common_pb2___RootIndex,
    SendMax as org___xrpl___rpc___v1___common_pb2___SendMax,
    Sequence as org___xrpl___rpc___v1___common_pb2___Sequence,
    SettleDelay as org___xrpl___rpc___v1___common_pb2___SettleDelay,
    SignerEntry as org___xrpl___rpc___v1___common_pb2___SignerEntry,
    SignerListID as org___xrpl___rpc___v1___common_pb2___SignerListID,
    SignerQuorum as org___xrpl___rpc___v1___common_pb2___SignerQuorum,
    SourceTag as org___xrpl___rpc___v1___common_pb2___SourceTag,
    TakerGets as org___xrpl___rpc___v1___common_pb2___TakerGets,
    TakerGetsCurreny as org___xrpl___rpc___v1___common_pb2___TakerGetsCurreny,
    TakerGetsIssuer as org___xrpl___rpc___v1___common_pb2___TakerGetsIssuer,
    TakerPays as org___xrpl___rpc___v1___common_pb2___TakerPays,
    TakerPaysCurrency as org___xrpl___rpc___v1___common_pb2___TakerPaysCurrency,
    TakerPaysIssuer as org___xrpl___rpc___v1___common_pb2___TakerPaysIssuer,
    TickSize as org___xrpl___rpc___v1___common_pb2___TickSize,
    TransferRate as org___xrpl___rpc___v1___common_pb2___TransferRate,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Tuple as typing___Tuple,
    Union as typing___Union,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int
builtin___str = str
if sys.version_info < (3,):
    builtin___buffer = buffer
    builtin___unicode = unicode


DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

LedgerEntryTypeValue = typing___NewType('LedgerEntryTypeValue', builtin___int)
type___LedgerEntryTypeValue = LedgerEntryTypeValue
class LedgerEntryType(object):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    @classmethod
    def Name(cls, number: builtin___int) -> builtin___str: ...
    @classmethod
    def Value(cls, name: builtin___str) -> LedgerEntryTypeValue: ...
    @classmethod
    def keys(cls) -> typing___List[builtin___str]: ...
    @classmethod
    def values(cls) -> typing___List[LedgerEntryTypeValue]: ...
    @classmethod
    def items(cls) -> typing___List[typing___Tuple[builtin___str, LedgerEntryTypeValue]]: ...
    LEDGER_ENTRY_TYPE_UNSPECIFIED = typing___cast(LedgerEntryTypeValue, 0)
    LEDGER_ENTRY_TYPE_ACCOUNT_ROOT = typing___cast(LedgerEntryTypeValue, 1)
    LEDGER_ENTRY_TYPE_AMENDMENTS = typing___cast(LedgerEntryTypeValue, 2)
    LEDGER_ENTRY_TYPE_CHECK = typing___cast(LedgerEntryTypeValue, 3)
    LEDGER_ENTRY_TYPE_DEPOSIT_PREAUTH = typing___cast(LedgerEntryTypeValue, 4)
    LEDGER_ENTRY_TYPE_DIRECTORY_NODE = typing___cast(LedgerEntryTypeValue, 5)
    LEDGER_ENTRY_TYPE_ESCROW = typing___cast(LedgerEntryTypeValue, 6)
    LEDGER_ENTRY_TYPE_FEE_SETTINGS = typing___cast(LedgerEntryTypeValue, 7)
    LEDGER_ENTRY_TYPE_LEDGER_HASHES = typing___cast(LedgerEntryTypeValue, 8)
    LEDGER_ENTRY_TYPE_OFFER = typing___cast(LedgerEntryTypeValue, 9)
    LEDGER_ENTRY_TYPE_PAY_CHANNEL = typing___cast(LedgerEntryTypeValue, 10)
    LEDGER_ENTRY_TYPE_RIPPLE_STATE = typing___cast(LedgerEntryTypeValue, 11)
    LEDGER_ENTRY_TYPE_SIGNER_LIST = typing___cast(LedgerEntryTypeValue, 12)
LEDGER_ENTRY_TYPE_UNSPECIFIED = typing___cast(LedgerEntryTypeValue, 0)
LEDGER_ENTRY_TYPE_ACCOUNT_ROOT = typing___cast(LedgerEntryTypeValue, 1)
LEDGER_ENTRY_TYPE_AMENDMENTS = typing___cast(LedgerEntryTypeValue, 2)
LEDGER_ENTRY_TYPE_CHECK = typing___cast(LedgerEntryTypeValue, 3)
LEDGER_ENTRY_TYPE_DEPOSIT_PREAUTH = typing___cast(LedgerEntryTypeValue, 4)
LEDGER_ENTRY_TYPE_DIRECTORY_NODE = typing___cast(LedgerEntryTypeValue, 5)
LEDGER_ENTRY_TYPE_ESCROW = typing___cast(LedgerEntryTypeValue, 6)
LEDGER_ENTRY_TYPE_FEE_SETTINGS = typing___cast(LedgerEntryTypeValue, 7)
LEDGER_ENTRY_TYPE_LEDGER_HASHES = typing___cast(LedgerEntryTypeValue, 8)
LEDGER_ENTRY_TYPE_OFFER = typing___cast(LedgerEntryTypeValue, 9)
LEDGER_ENTRY_TYPE_PAY_CHANNEL = typing___cast(LedgerEntryTypeValue, 10)
LEDGER_ENTRY_TYPE_RIPPLE_STATE = typing___cast(LedgerEntryTypeValue, 11)
LEDGER_ENTRY_TYPE_SIGNER_LIST = typing___cast(LedgerEntryTypeValue, 12)
type___LedgerEntryType = LedgerEntryType

class LedgerObject(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def account_root(self) -> AccountRoot: ...

    @property
    def amendments(self) -> Amendments: ...

    @property
    def check(self) -> Check: ...

    @property
    def deposit_preauth(self) -> DepositPreauthObject: ...

    @property
    def directory_node(self) -> DirectoryNode: ...

    @property
    def escrow(self) -> Escrow: ...

    @property
    def fee_settings(self) -> FeeSettings: ...

    @property
    def ledger_hashes(self) -> LedgerHashes: ...

    @property
    def offer(self) -> Offer: ...

    @property
    def pay_channel(self) -> PayChannel: ...

    @property
    def ripple_state(self) -> RippleState: ...

    @property
    def signer_list(self) -> SignerList: ...

    def __init__(self,
        *,
        account_root : typing___Optional[AccountRoot] = None,
        amendments : typing___Optional[Amendments] = None,
        check : typing___Optional[Check] = None,
        deposit_preauth : typing___Optional[DepositPreauthObject] = None,
        directory_node : typing___Optional[DirectoryNode] = None,
        escrow : typing___Optional[Escrow] = None,
        fee_settings : typing___Optional[FeeSettings] = None,
        ledger_hashes : typing___Optional[LedgerHashes] = None,
        offer : typing___Optional[Offer] = None,
        pay_channel : typing___Optional[PayChannel] = None,
        ripple_state : typing___Optional[RippleState] = None,
        signer_list : typing___Optional[SignerList] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> LedgerObject: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> LedgerObject: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account_root",b"account_root",u"amendments",b"amendments",u"check",b"check",u"deposit_preauth",b"deposit_preauth",u"directory_node",b"directory_node",u"escrow",b"escrow",u"fee_settings",b"fee_settings",u"ledger_hashes",b"ledger_hashes",u"object",b"object",u"offer",b"offer",u"pay_channel",b"pay_channel",u"ripple_state",b"ripple_state",u"signer_list",b"signer_list"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account_root",b"account_root",u"amendments",b"amendments",u"check",b"check",u"deposit_preauth",b"deposit_preauth",u"directory_node",b"directory_node",u"escrow",b"escrow",u"fee_settings",b"fee_settings",u"ledger_hashes",b"ledger_hashes",u"object",b"object",u"offer",b"offer",u"pay_channel",b"pay_channel",u"ripple_state",b"ripple_state",u"signer_list",b"signer_list"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"object",b"object"]) -> typing_extensions___Literal["account_root","amendments","check","deposit_preauth","directory_node","escrow","fee_settings","ledger_hashes","offer","pay_channel","ripple_state","signer_list"]: ...
type___LedgerObject = LedgerObject

class AccountRoot(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def account(self) -> org___xrpl___rpc___v1___common_pb2___Account: ...

    @property
    def balance(self) -> org___xrpl___rpc___v1___common_pb2___Balance: ...

    @property
    def sequence(self) -> org___xrpl___rpc___v1___common_pb2___Sequence: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def owner_count(self) -> org___xrpl___rpc___v1___common_pb2___OwnerCount: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    @property
    def account_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___AccountTransactionID: ...

    @property
    def domain(self) -> org___xrpl___rpc___v1___common_pb2___Domain: ...

    @property
    def email_hash(self) -> org___xrpl___rpc___v1___common_pb2___EmailHash: ...

    @property
    def message_key(self) -> org___xrpl___rpc___v1___common_pb2___MessageKey: ...

    @property
    def regular_key(self) -> org___xrpl___rpc___v1___common_pb2___RegularKey: ...

    @property
    def tick_size(self) -> org___xrpl___rpc___v1___common_pb2___TickSize: ...

    @property
    def transfer_rate(self) -> org___xrpl___rpc___v1___common_pb2___TransferRate: ...

    def __init__(self,
        *,
        account : typing___Optional[org___xrpl___rpc___v1___common_pb2___Account] = None,
        balance : typing___Optional[org___xrpl___rpc___v1___common_pb2___Balance] = None,
        sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___Sequence] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        owner_count : typing___Optional[org___xrpl___rpc___v1___common_pb2___OwnerCount] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        account_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___AccountTransactionID] = None,
        domain : typing___Optional[org___xrpl___rpc___v1___common_pb2___Domain] = None,
        email_hash : typing___Optional[org___xrpl___rpc___v1___common_pb2___EmailHash] = None,
        message_key : typing___Optional[org___xrpl___rpc___v1___common_pb2___MessageKey] = None,
        regular_key : typing___Optional[org___xrpl___rpc___v1___common_pb2___RegularKey] = None,
        tick_size : typing___Optional[org___xrpl___rpc___v1___common_pb2___TickSize] = None,
        transfer_rate : typing___Optional[org___xrpl___rpc___v1___common_pb2___TransferRate] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> AccountRoot: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> AccountRoot: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account",b"account",u"account_transaction_id",b"account_transaction_id",u"balance",b"balance",u"domain",b"domain",u"email_hash",b"email_hash",u"flags",b"flags",u"message_key",b"message_key",u"owner_count",b"owner_count",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"regular_key",b"regular_key",u"sequence",b"sequence",u"tick_size",b"tick_size",u"transfer_rate",b"transfer_rate"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account",b"account",u"account_transaction_id",b"account_transaction_id",u"balance",b"balance",u"domain",b"domain",u"email_hash",b"email_hash",u"flags",b"flags",u"message_key",b"message_key",u"owner_count",b"owner_count",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"regular_key",b"regular_key",u"sequence",b"sequence",u"tick_size",b"tick_size",u"transfer_rate",b"transfer_rate"]) -> None: ...
type___AccountRoot = AccountRoot

class Amendments(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Amendment(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        value: builtin___bytes = ...

        def __init__(self,
            *,
            value : typing___Optional[builtin___bytes] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> Amendments.Amendment: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> Amendments.Amendment: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"value",b"value"]) -> None: ...
    type___Amendment = Amendment

    class Majority(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def amendment(self) -> Amendments.Amendment: ...

        @property
        def close_time(self) -> org___xrpl___rpc___v1___common_pb2___CloseTime: ...

        def __init__(self,
            *,
            amendment : typing___Optional[Amendments.Amendment] = None,
            close_time : typing___Optional[org___xrpl___rpc___v1___common_pb2___CloseTime] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> Amendments.Majority: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> Amendments.Majority: ...
        def HasField(self, field_name: typing_extensions___Literal[u"amendment",b"amendment",u"close_time",b"close_time"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"amendment",b"amendment",u"close_time",b"close_time"]) -> None: ...
    type___Majority = Majority


    @property
    def amendments(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[Amendments.Amendment]: ...

    @property
    def majorities(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[Amendments.Majority]: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    def __init__(self,
        *,
        amendments : typing___Optional[typing___Iterable[Amendments.Amendment]] = None,
        majorities : typing___Optional[typing___Iterable[Amendments.Majority]] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> Amendments: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> Amendments: ...
    def HasField(self, field_name: typing_extensions___Literal[u"flags",b"flags"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"amendments",b"amendments",u"flags",b"flags",u"majorities",b"majorities"]) -> None: ...
type___Amendments = Amendments

class Check(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def account(self) -> org___xrpl___rpc___v1___common_pb2___Account: ...

    @property
    def destination(self) -> org___xrpl___rpc___v1___common_pb2___Destination: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def owner_node(self) -> org___xrpl___rpc___v1___common_pb2___OwnerNode: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    @property
    def send_max(self) -> org___xrpl___rpc___v1___common_pb2___SendMax: ...

    @property
    def sequence(self) -> org___xrpl___rpc___v1___common_pb2___Sequence: ...

    @property
    def destination_node(self) -> org___xrpl___rpc___v1___common_pb2___DestinationNode: ...

    @property
    def destination_tag(self) -> org___xrpl___rpc___v1___common_pb2___DestinationTag: ...

    @property
    def expiration(self) -> org___xrpl___rpc___v1___common_pb2___Expiration: ...

    @property
    def invoice_id(self) -> org___xrpl___rpc___v1___common_pb2___InvoiceID: ...

    @property
    def source_tag(self) -> org___xrpl___rpc___v1___common_pb2___SourceTag: ...

    def __init__(self,
        *,
        account : typing___Optional[org___xrpl___rpc___v1___common_pb2___Account] = None,
        destination : typing___Optional[org___xrpl___rpc___v1___common_pb2___Destination] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        owner_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___OwnerNode] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        send_max : typing___Optional[org___xrpl___rpc___v1___common_pb2___SendMax] = None,
        sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___Sequence] = None,
        destination_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___DestinationNode] = None,
        destination_tag : typing___Optional[org___xrpl___rpc___v1___common_pb2___DestinationTag] = None,
        expiration : typing___Optional[org___xrpl___rpc___v1___common_pb2___Expiration] = None,
        invoice_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___InvoiceID] = None,
        source_tag : typing___Optional[org___xrpl___rpc___v1___common_pb2___SourceTag] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> Check: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> Check: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account",b"account",u"destination",b"destination",u"destination_node",b"destination_node",u"destination_tag",b"destination_tag",u"expiration",b"expiration",u"flags",b"flags",u"invoice_id",b"invoice_id",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"send_max",b"send_max",u"sequence",b"sequence",u"source_tag",b"source_tag"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account",b"account",u"destination",b"destination",u"destination_node",b"destination_node",u"destination_tag",b"destination_tag",u"expiration",b"expiration",u"flags",b"flags",u"invoice_id",b"invoice_id",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"send_max",b"send_max",u"sequence",b"sequence",u"source_tag",b"source_tag"]) -> None: ...
type___Check = Check

class DepositPreauthObject(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def account(self) -> org___xrpl___rpc___v1___common_pb2___Account: ...

    @property
    def authorize(self) -> org___xrpl___rpc___v1___common_pb2___Authorize: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def owner_node(self) -> org___xrpl___rpc___v1___common_pb2___OwnerNode: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    def __init__(self,
        *,
        account : typing___Optional[org___xrpl___rpc___v1___common_pb2___Account] = None,
        authorize : typing___Optional[org___xrpl___rpc___v1___common_pb2___Authorize] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        owner_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___OwnerNode] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> DepositPreauthObject: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> DepositPreauthObject: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account",b"account",u"authorize",b"authorize",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account",b"account",u"authorize",b"authorize",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence"]) -> None: ...
type___DepositPreauthObject = DepositPreauthObject

class DirectoryNode(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def root_index(self) -> org___xrpl___rpc___v1___common_pb2___RootIndex: ...

    @property
    def indexes(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[org___xrpl___rpc___v1___common_pb2___Index]: ...

    @property
    def index_next(self) -> org___xrpl___rpc___v1___common_pb2___IndexNext: ...

    @property
    def index_previous(self) -> org___xrpl___rpc___v1___common_pb2___IndexPrevious: ...

    @property
    def owner(self) -> org___xrpl___rpc___v1___common_pb2___Owner: ...

    @property
    def taker_pays_currency(self) -> org___xrpl___rpc___v1___common_pb2___TakerPaysCurrency: ...

    @property
    def taker_pays_issuer(self) -> org___xrpl___rpc___v1___common_pb2___TakerPaysIssuer: ...

    @property
    def taker_gets_currency(self) -> org___xrpl___rpc___v1___common_pb2___TakerGetsCurreny: ...

    @property
    def taker_gets_issuer(self) -> org___xrpl___rpc___v1___common_pb2___TakerGetsIssuer: ...

    def __init__(self,
        *,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        root_index : typing___Optional[org___xrpl___rpc___v1___common_pb2___RootIndex] = None,
        indexes : typing___Optional[typing___Iterable[org___xrpl___rpc___v1___common_pb2___Index]] = None,
        index_next : typing___Optional[org___xrpl___rpc___v1___common_pb2___IndexNext] = None,
        index_previous : typing___Optional[org___xrpl___rpc___v1___common_pb2___IndexPrevious] = None,
        owner : typing___Optional[org___xrpl___rpc___v1___common_pb2___Owner] = None,
        taker_pays_currency : typing___Optional[org___xrpl___rpc___v1___common_pb2___TakerPaysCurrency] = None,
        taker_pays_issuer : typing___Optional[org___xrpl___rpc___v1___common_pb2___TakerPaysIssuer] = None,
        taker_gets_currency : typing___Optional[org___xrpl___rpc___v1___common_pb2___TakerGetsCurreny] = None,
        taker_gets_issuer : typing___Optional[org___xrpl___rpc___v1___common_pb2___TakerGetsIssuer] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> DirectoryNode: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> DirectoryNode: ...
    def HasField(self, field_name: typing_extensions___Literal[u"flags",b"flags",u"index_next",b"index_next",u"index_previous",b"index_previous",u"owner",b"owner",u"root_index",b"root_index",u"taker_gets_currency",b"taker_gets_currency",u"taker_gets_issuer",b"taker_gets_issuer",u"taker_pays_currency",b"taker_pays_currency",u"taker_pays_issuer",b"taker_pays_issuer"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"flags",b"flags",u"index_next",b"index_next",u"index_previous",b"index_previous",u"indexes",b"indexes",u"owner",b"owner",u"root_index",b"root_index",u"taker_gets_currency",b"taker_gets_currency",u"taker_gets_issuer",b"taker_gets_issuer",u"taker_pays_currency",b"taker_pays_currency",u"taker_pays_issuer",b"taker_pays_issuer"]) -> None: ...
type___DirectoryNode = DirectoryNode

class Escrow(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def account(self) -> org___xrpl___rpc___v1___common_pb2___Account: ...

    @property
    def destination(self) -> org___xrpl___rpc___v1___common_pb2___Destination: ...

    @property
    def amount(self) -> org___xrpl___rpc___v1___common_pb2___Amount: ...

    @property
    def condition(self) -> org___xrpl___rpc___v1___common_pb2___Condition: ...

    @property
    def cancel_after(self) -> org___xrpl___rpc___v1___common_pb2___CancelAfter: ...

    @property
    def finish_after(self) -> org___xrpl___rpc___v1___common_pb2___FinishAfter: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def source_tag(self) -> org___xrpl___rpc___v1___common_pb2___SourceTag: ...

    @property
    def destination_tag(self) -> org___xrpl___rpc___v1___common_pb2___DestinationTag: ...

    @property
    def owner_node(self) -> org___xrpl___rpc___v1___common_pb2___OwnerNode: ...

    @property
    def destination_node(self) -> org___xrpl___rpc___v1___common_pb2___DestinationNode: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    def __init__(self,
        *,
        account : typing___Optional[org___xrpl___rpc___v1___common_pb2___Account] = None,
        destination : typing___Optional[org___xrpl___rpc___v1___common_pb2___Destination] = None,
        amount : typing___Optional[org___xrpl___rpc___v1___common_pb2___Amount] = None,
        condition : typing___Optional[org___xrpl___rpc___v1___common_pb2___Condition] = None,
        cancel_after : typing___Optional[org___xrpl___rpc___v1___common_pb2___CancelAfter] = None,
        finish_after : typing___Optional[org___xrpl___rpc___v1___common_pb2___FinishAfter] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        source_tag : typing___Optional[org___xrpl___rpc___v1___common_pb2___SourceTag] = None,
        destination_tag : typing___Optional[org___xrpl___rpc___v1___common_pb2___DestinationTag] = None,
        owner_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___OwnerNode] = None,
        destination_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___DestinationNode] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> Escrow: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> Escrow: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account",b"account",u"amount",b"amount",u"cancel_after",b"cancel_after",u"condition",b"condition",u"destination",b"destination",u"destination_node",b"destination_node",u"destination_tag",b"destination_tag",u"finish_after",b"finish_after",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"source_tag",b"source_tag"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account",b"account",u"amount",b"amount",u"cancel_after",b"cancel_after",u"condition",b"condition",u"destination",b"destination",u"destination_node",b"destination_node",u"destination_tag",b"destination_tag",u"finish_after",b"finish_after",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"source_tag",b"source_tag"]) -> None: ...
type___Escrow = Escrow

class FeeSettings(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def base_fee(self) -> org___xrpl___rpc___v1___common_pb2___BaseFee: ...

    @property
    def reference_fee_units(self) -> org___xrpl___rpc___v1___common_pb2___ReferenceFeeUnits: ...

    @property
    def reserve_base(self) -> org___xrpl___rpc___v1___common_pb2___ReserveBase: ...

    @property
    def reserve_increment(self) -> org___xrpl___rpc___v1___common_pb2___ReserveIncrement: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    def __init__(self,
        *,
        base_fee : typing___Optional[org___xrpl___rpc___v1___common_pb2___BaseFee] = None,
        reference_fee_units : typing___Optional[org___xrpl___rpc___v1___common_pb2___ReferenceFeeUnits] = None,
        reserve_base : typing___Optional[org___xrpl___rpc___v1___common_pb2___ReserveBase] = None,
        reserve_increment : typing___Optional[org___xrpl___rpc___v1___common_pb2___ReserveIncrement] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> FeeSettings: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> FeeSettings: ...
    def HasField(self, field_name: typing_extensions___Literal[u"base_fee",b"base_fee",u"flags",b"flags",u"reference_fee_units",b"reference_fee_units",u"reserve_base",b"reserve_base",u"reserve_increment",b"reserve_increment"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"base_fee",b"base_fee",u"flags",b"flags",u"reference_fee_units",b"reference_fee_units",u"reserve_base",b"reserve_base",u"reserve_increment",b"reserve_increment"]) -> None: ...
type___FeeSettings = FeeSettings

class LedgerHashes(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def last_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___LastLedgerSequence: ...

    @property
    def hashes(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[org___xrpl___rpc___v1___common_pb2___Hash]: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    def __init__(self,
        *,
        last_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___LastLedgerSequence] = None,
        hashes : typing___Optional[typing___Iterable[org___xrpl___rpc___v1___common_pb2___Hash]] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> LedgerHashes: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> LedgerHashes: ...
    def HasField(self, field_name: typing_extensions___Literal[u"flags",b"flags",u"last_ledger_sequence",b"last_ledger_sequence"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"flags",b"flags",u"hashes",b"hashes",u"last_ledger_sequence",b"last_ledger_sequence"]) -> None: ...
type___LedgerHashes = LedgerHashes

class Offer(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def account(self) -> org___xrpl___rpc___v1___common_pb2___Account: ...

    @property
    def sequence(self) -> org___xrpl___rpc___v1___common_pb2___Sequence: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def taker_pays(self) -> org___xrpl___rpc___v1___common_pb2___TakerPays: ...

    @property
    def taker_gets(self) -> org___xrpl___rpc___v1___common_pb2___TakerGets: ...

    @property
    def book_directory(self) -> org___xrpl___rpc___v1___common_pb2___BookDirectory: ...

    @property
    def book_node(self) -> org___xrpl___rpc___v1___common_pb2___BookNode: ...

    @property
    def owner_node(self) -> org___xrpl___rpc___v1___common_pb2___OwnerNode: ...

    @property
    def expiration(self) -> org___xrpl___rpc___v1___common_pb2___Expiration: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    def __init__(self,
        *,
        account : typing___Optional[org___xrpl___rpc___v1___common_pb2___Account] = None,
        sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___Sequence] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        taker_pays : typing___Optional[org___xrpl___rpc___v1___common_pb2___TakerPays] = None,
        taker_gets : typing___Optional[org___xrpl___rpc___v1___common_pb2___TakerGets] = None,
        book_directory : typing___Optional[org___xrpl___rpc___v1___common_pb2___BookDirectory] = None,
        book_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___BookNode] = None,
        owner_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___OwnerNode] = None,
        expiration : typing___Optional[org___xrpl___rpc___v1___common_pb2___Expiration] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> Offer: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> Offer: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account",b"account",u"book_directory",b"book_directory",u"book_node",b"book_node",u"expiration",b"expiration",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"sequence",b"sequence",u"taker_gets",b"taker_gets",u"taker_pays",b"taker_pays"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account",b"account",u"book_directory",b"book_directory",u"book_node",b"book_node",u"expiration",b"expiration",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"sequence",b"sequence",u"taker_gets",b"taker_gets",u"taker_pays",b"taker_pays"]) -> None: ...
type___Offer = Offer

class PayChannel(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def account(self) -> org___xrpl___rpc___v1___common_pb2___Account: ...

    @property
    def destination(self) -> org___xrpl___rpc___v1___common_pb2___Destination: ...

    @property
    def amount(self) -> org___xrpl___rpc___v1___common_pb2___Amount: ...

    @property
    def balance(self) -> org___xrpl___rpc___v1___common_pb2___Balance: ...

    @property
    def public_key(self) -> org___xrpl___rpc___v1___common_pb2___PublicKey: ...

    @property
    def settle_delay(self) -> org___xrpl___rpc___v1___common_pb2___SettleDelay: ...

    @property
    def owner_node(self) -> org___xrpl___rpc___v1___common_pb2___OwnerNode: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def expiration(self) -> org___xrpl___rpc___v1___common_pb2___Expiration: ...

    @property
    def cancel_after(self) -> org___xrpl___rpc___v1___common_pb2___CancelAfter: ...

    @property
    def source_tag(self) -> org___xrpl___rpc___v1___common_pb2___SourceTag: ...

    @property
    def destination_tag(self) -> org___xrpl___rpc___v1___common_pb2___DestinationTag: ...

    def __init__(self,
        *,
        account : typing___Optional[org___xrpl___rpc___v1___common_pb2___Account] = None,
        destination : typing___Optional[org___xrpl___rpc___v1___common_pb2___Destination] = None,
        amount : typing___Optional[org___xrpl___rpc___v1___common_pb2___Amount] = None,
        balance : typing___Optional[org___xrpl___rpc___v1___common_pb2___Balance] = None,
        public_key : typing___Optional[org___xrpl___rpc___v1___common_pb2___PublicKey] = None,
        settle_delay : typing___Optional[org___xrpl___rpc___v1___common_pb2___SettleDelay] = None,
        owner_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___OwnerNode] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        expiration : typing___Optional[org___xrpl___rpc___v1___common_pb2___Expiration] = None,
        cancel_after : typing___Optional[org___xrpl___rpc___v1___common_pb2___CancelAfter] = None,
        source_tag : typing___Optional[org___xrpl___rpc___v1___common_pb2___SourceTag] = None,
        destination_tag : typing___Optional[org___xrpl___rpc___v1___common_pb2___DestinationTag] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> PayChannel: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> PayChannel: ...
    def HasField(self, field_name: typing_extensions___Literal[u"account",b"account",u"amount",b"amount",u"balance",b"balance",u"cancel_after",b"cancel_after",u"destination",b"destination",u"destination_tag",b"destination_tag",u"expiration",b"expiration",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"public_key",b"public_key",u"settle_delay",b"settle_delay",u"source_tag",b"source_tag"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"account",b"account",u"amount",b"amount",u"balance",b"balance",u"cancel_after",b"cancel_after",u"destination",b"destination",u"destination_tag",b"destination_tag",u"expiration",b"expiration",u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"public_key",b"public_key",u"settle_delay",b"settle_delay",u"source_tag",b"source_tag"]) -> None: ...
type___PayChannel = PayChannel

class RippleState(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def balance(self) -> org___xrpl___rpc___v1___common_pb2___Balance: ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def low_limit(self) -> org___xrpl___rpc___v1___common_pb2___LowLimit: ...

    @property
    def high_limit(self) -> org___xrpl___rpc___v1___common_pb2___HighLimit: ...

    @property
    def low_node(self) -> org___xrpl___rpc___v1___common_pb2___LowNode: ...

    @property
    def high_node(self) -> org___xrpl___rpc___v1___common_pb2___HighNode: ...

    @property
    def low_quality_in(self) -> org___xrpl___rpc___v1___common_pb2___LowQualityIn: ...

    @property
    def low_quality_out(self) -> org___xrpl___rpc___v1___common_pb2___LowQualityOut: ...

    @property
    def high_quality_in(self) -> org___xrpl___rpc___v1___common_pb2___HighQualityIn: ...

    @property
    def high_quality_out(self) -> org___xrpl___rpc___v1___common_pb2___HighQualityOut: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    def __init__(self,
        *,
        balance : typing___Optional[org___xrpl___rpc___v1___common_pb2___Balance] = None,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        low_limit : typing___Optional[org___xrpl___rpc___v1___common_pb2___LowLimit] = None,
        high_limit : typing___Optional[org___xrpl___rpc___v1___common_pb2___HighLimit] = None,
        low_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___LowNode] = None,
        high_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___HighNode] = None,
        low_quality_in : typing___Optional[org___xrpl___rpc___v1___common_pb2___LowQualityIn] = None,
        low_quality_out : typing___Optional[org___xrpl___rpc___v1___common_pb2___LowQualityOut] = None,
        high_quality_in : typing___Optional[org___xrpl___rpc___v1___common_pb2___HighQualityIn] = None,
        high_quality_out : typing___Optional[org___xrpl___rpc___v1___common_pb2___HighQualityOut] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> RippleState: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RippleState: ...
    def HasField(self, field_name: typing_extensions___Literal[u"balance",b"balance",u"flags",b"flags",u"high_limit",b"high_limit",u"high_node",b"high_node",u"high_quality_in",b"high_quality_in",u"high_quality_out",b"high_quality_out",u"low_limit",b"low_limit",u"low_node",b"low_node",u"low_quality_in",b"low_quality_in",u"low_quality_out",b"low_quality_out",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"balance",b"balance",u"flags",b"flags",u"high_limit",b"high_limit",u"high_node",b"high_node",u"high_quality_in",b"high_quality_in",u"high_quality_out",b"high_quality_out",u"low_limit",b"low_limit",u"low_node",b"low_node",u"low_quality_in",b"low_quality_in",u"low_quality_out",b"low_quality_out",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence"]) -> None: ...
type___RippleState = RippleState

class SignerList(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def flags(self) -> org___xrpl___rpc___v1___common_pb2___Flags: ...

    @property
    def previous_transaction_id(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionID: ...

    @property
    def previous_transaction_ledger_sequence(self) -> org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence: ...

    @property
    def owner_node(self) -> org___xrpl___rpc___v1___common_pb2___OwnerNode: ...

    @property
    def signer_entries(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[org___xrpl___rpc___v1___common_pb2___SignerEntry]: ...

    @property
    def signer_list_id(self) -> org___xrpl___rpc___v1___common_pb2___SignerListID: ...

    @property
    def signer_quorum(self) -> org___xrpl___rpc___v1___common_pb2___SignerQuorum: ...

    def __init__(self,
        *,
        flags : typing___Optional[org___xrpl___rpc___v1___common_pb2___Flags] = None,
        previous_transaction_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionID] = None,
        previous_transaction_ledger_sequence : typing___Optional[org___xrpl___rpc___v1___common_pb2___PreviousTransactionLedgerSequence] = None,
        owner_node : typing___Optional[org___xrpl___rpc___v1___common_pb2___OwnerNode] = None,
        signer_entries : typing___Optional[typing___Iterable[org___xrpl___rpc___v1___common_pb2___SignerEntry]] = None,
        signer_list_id : typing___Optional[org___xrpl___rpc___v1___common_pb2___SignerListID] = None,
        signer_quorum : typing___Optional[org___xrpl___rpc___v1___common_pb2___SignerQuorum] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> SignerList: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> SignerList: ...
    def HasField(self, field_name: typing_extensions___Literal[u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"signer_list_id",b"signer_list_id",u"signer_quorum",b"signer_quorum"]) -> builtin___bool: ...
    def ClearField(self, field_name: typing_extensions___Literal[u"flags",b"flags",u"owner_node",b"owner_node",u"previous_transaction_id",b"previous_transaction_id",u"previous_transaction_ledger_sequence",b"previous_transaction_ledger_sequence",u"signer_entries",b"signer_entries",u"signer_list_id",b"signer_list_id",u"signer_quorum",b"signer_quorum"]) -> None: ...
type___SignerList = SignerList
