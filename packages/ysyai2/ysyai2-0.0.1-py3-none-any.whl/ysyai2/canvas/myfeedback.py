# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/09_canvas.myfeedback.ipynb (unless otherwise specified).

__all__ = ['__all__', 'Token', 'tokenize_term', 'extract_fileyear_semester', 'proc_myfeedback_dump',
           'extract_myfeedback_collumns', 'add_fy_sem_col']

# Cell
from .grade import *
import time
import re
from collections import namedtuple

# Cell
__all__=['proc_myfeedback_dump','extract_myfeedback_collumns','Token',\
         'tokenize_term','extract_fileyear_semester','add_fy_sem_col']

# Cell
Token = namedtuple('Token', ['type','value'])

# Cell
def tokenize_term(term_name):
    "tokenize `term_name` to a list of `Token`"
    tokens=[r'(?P<FILEYEAR>\d{4})',\
           r'(?P<SEMESTER>1a|1A|\d{1})',\
           r'(?P<WS>\s+)',\
           r'(?P<WORD>\w+)']

    master_re = re.compile('|'.join(tokens))
    scan = master_re.scanner(term_name)
    return (Token(m.lastgroup, m.group())
            for m in iter(scan.match, None) if m.lastgroup != 'WS')

# Cell
def extract_fileyear_semester(term_token):
    "extract file year and file semester from a list of `Token`"
    res={token.type:token.value for token in term_token if token.type=='FILEYEAR' or token.type=='SEMESTER'}
    return res

# Cell
def proc_myfeedback_dump(df_submissions,df_assignments,df_assignmentgroups,\
    df_enrolments,df_terms,df_courses,term1a_str,table_name='canvas_myfeedback_dump_current'):
    "It creates the canvas myfeedback `DataFrame` and write it to MS Sql Server"
    #start_time=time.time()
    if table_name=='canvas_myfeedback_dump_current':
        df_submissions=filter_grade_submissions(df_submissions,df_assignments,term1a_str)
    else:
        df_submissions=filter_grade_submissions_pastyears(df_submissions,df_assignments,term1a_str)
    df_grade=merge_grade_assignments_and_groups(df_assignments,df_assignmentgroups)

    #df_grade=filter_grade_assignments(df_grade)
    df_grade=merge_grade_submissions(df_grade,df_submissions)

    df_grade=merge_grade_courses(df_grade,df_courses)
    df_grade=merge_grade_enrollments(df_grade,df_enrolments)


    df_grade=merge_grade_terms(df_grade,df_terms)
    df_grade=extract_myfeedback_collumns(df_grade)
    df_grade=add_fy_sem_col(df_grade)

    #end_time=time.time()

    #print(f'canvas myfeedback dump size: {len(df_grade)}')
    #print(f'canvas myfeedback dump time: {(end_time-start_time)/60} mins')
    return df_grade

# Cell
def extract_myfeedback_collumns(df_grade):
    "remove the unnecessary columns to reduce the final grade `DataFrame` size"
    df_grade_new=df_grade[df_grade['sis_user_id'].isnull()!=True][['sis_user_id',\
                                                 'assignment_id',\
                                                 'course_id',\
                                                 'user_id',\
                                                 'course_name',\
                                                 'group_weight',\
                                                 'assignmentgroups_id',\
                                                 'enrollments_id',\
                                                 'score',\
                                                 'points_possible',\
                                                 'assignment_type',\
                                                 'due2',\
                                                 'assessment',\
                                                 'term_name',\
                                                 'published']]
    return df_grade_new

# Cell
def add_fy_sem_col(df):
    df['file_year']=df['term_name'].apply(lambda x: \
                                          extract_fileyear_semester(tokenize_term(x)).get('FILEYEAR'))
    df['file_semester']=df['term_name'].apply(lambda x: \
                                          extract_fileyear_semester(tokenize_term(x)).get('SEMESTER'))
    return df