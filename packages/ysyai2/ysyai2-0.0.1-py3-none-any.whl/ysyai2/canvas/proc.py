# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_canvas.proc.ipynb (unless otherwise specified).

__all__ = ['__all__', 'get_recent_oneyear', 'get_recent_date', 'get_lastyear_term1a', 'get_this_term_startdate',
           'create_assignment_filterdate', 'add_assignments_filterdate', 'filter_assignments',
           'filter_assignments_pastyears', 'filter_submssions']

# Cell
import datetime
import pandas as pd

# Cell
__all__=['get_recent_oneyear','get_recent_date','get_lastyear_term1a','get_this_term_startdate',\
        'create_assignment_filterdate','add_assignments_filterdate','filter_assignments',\
        'filter_submssions','filter_assignments_pastyears']

# Cell
def get_recent_oneyear():
    "get today's date of last year"
    current_year =(datetime.datetime.now()).strftime('%Y')
    current_year_date = datetime.datetime.now().replace(year=int(current_year)-1)
    return current_year_date.strftime('%Y-%m-%d')

def get_recent_date(num_of_month):
    "get the date of `num_of_month` ago"
    now=datetime.datetime.now()
    recent_date=now-datetime.timedelta(num_of_month*30)
    return recent_date.strftime('%Y-%m-%d')

def get_lastyear_term1a(term1a_str):
    "get the term1a date from `term1a_str`"
    current_year =(datetime.datetime.now()).strftime('%Y')
    return f'{int(current_year)-1}-{term1a_str}'

def get_this_term_startdate(semester1_start_str,semester2_start_str):
    "get the term start date"
    current_year =(datetime.datetime.now()).strftime('%Y')
    current_month = (datetime.datetime.now()).strftime('%m')
    if int(current_month)<7:
        return f'{int(current_year)}-{semester1_start_str}'
    else:
        return f'{int(current_year)}-{semester2_start_str}'

def create_assignment_filterdate(x):
    "calculate a column for asssignmet `DataFrame` for filtering"
    if x.has_overrides == True:
        if x.overrides[0]['due_at']!=None and x.overrides[0]['due_at']!="":
            return x.overrides[0]['due_at']
        else:
            return x.due_at
    else:
        return x.due_at

def add_assignments_filterdate(df_assignments):
    "add the calculated column `filter_date` to assignment `DataFrame`"
    df_assignments['filter_date']=df_assignments.loc[:,:].apply(lambda x: create_assignment_filterdate(x),axis=1)
    return df_assignments

def filter_assignments(df_assignments,term1a_str):
    "filter assignments `DataFrame` based on `filter_date` column from last year `term1a_str`"
    lastyear_term1a=get_lastyear_term1a(term1a_str)
    conditions1=(df_assignments['filter_date']!=None) & (df_assignments['filter_date'].isnull()!=True)  & (df_assignments['filter_date']>lastyear_term1a)
    conditions2=((df_assignments['filter_date']==None) | (df_assignments['filter_date'].isnull()==True)) & (df_assignments['created_at']>lastyear_term1a)
    conditions=conditions1 | conditions2
    df_assignments=df_assignments.loc[conditions,:]
    return df_assignments

def filter_assignments_pastyears(df_assignments,term1a_str):
    "filter assignments `DataFrame` based on `filter_date` column prior to last year `term1a_str`"
    lastyear_term1a=get_lastyear_term1a(term1a_str)
    conditions1=(df_assignments['filter_date']!=None) & (df_assignments['filter_date'].isnull()!=True)  & (df_assignments['filter_date']<=lastyear_term1a)
    conditions2=((df_assignments['filter_date']==None) | (df_assignments['filter_date'].isnull()==True)) & (df_assignments['created_at']<=lastyear_term1a)
    conditions=conditions1 | conditions2
    df_assignments=df_assignments.loc[conditions,:]
    return df_assignments

def filter_submssions(df,df_assignments):
    "filter submissions `DataFrame` based on assignment `DataFrame`"
    df_merged=pd.merge(df_assignments, df, how="left",left_on=['id'],right_on=['assignment_id'])

    reduced_id_list=df_merged['id_y']
    mask=df['id'].isin(reduced_id_list)
    df_reduced=df.loc[mask]
    return df_reduced