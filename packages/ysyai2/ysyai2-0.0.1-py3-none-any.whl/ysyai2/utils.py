# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_utils.ipynb (unless otherwise specified).

__all__ = ['check_authcode', 'make_signature', 'StructMeta', 'Structure', 'check_authcode', 'make_signature',
           'StructMeta', 'Structure']

# Cell
import functools
import json
from pathlib import Path
from starlette.responses import JSONResponse
from inspect import Parameter, Signature

# Cell
def check_authcode(func):
    "This is the decorator to verify the authcode from request"
    @functools.wraps(func)
    def wrapper_check_authcode(*args,**kwargs):
        input_authcode=kwargs['input_authcode']
        real_authcode=kwargs['real_authcode']
        #print(input_authcode+'/'+real_authcode)
        return func(*args,**kwargs) if input_authcode==real_authcode else JSONResponse('Unauthorized api call')
    return wrapper_check_authcode

# Cell
def make_signature(names):
    "Create a Signature object from the list of `str` passed in"
    return Signature(
        Parameter(name, Parameter.POSITIONAL_OR_KEYWORD)
        for name in names)

# Cell
class StructMeta(type):
    "Meta class for Base Class Structure"
    def __new__(cls, clsname, bases, clsdict):
        clsobj = super().__new__(cls, clsname, bases, clsdict)
        sig = make_signature(clsobj._fields)
        setattr(clsobj, '__signature__', sig)
        return clsobj

# Cell
class Structure(metaclass=StructMeta):
    "Base class for all the classes want to skip the tedious attribute set up in `__init__` function"
    _fields = []
    def __init__(self, *args, **kwargs):
        bound = self.__signature__.bind(*args, **kwargs)
        for name, val in bound.arguments.items():
            setattr(self, name, val)