# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_canvas.grade.ipynb (unless otherwise specified).

__all__ = ['__all__', 'proc_grade_dump', 'filter_grade_submissions', 'filter_grade_submissions_score',
           'filter_grade_submissions_pastyears', 'merge_grade_assignments_and_groups', 'filter_grade_assignments',
           'merge_grade_submissions', 'merge_grade_courses', 'merge_grade_enrollments', 'extract_grade_collumns',
           'save_grade_to_db', 'merge_grade_terms']

# Cell
from sqlalchemy import create_engine
import urllib
import pandas as pd
from .proc import *
import time

# Cell
__all__=['proc_grade_dump','filter_grade_submissions','filter_grade_submissions_score',\
        'merge_grade_assignments_and_groups','filter_grade_assignments','merge_grade_submissions',\
        'merge_grade_courses','merge_grade_enrollments','extract_grade_collumns',\
        'save_grade_to_db','merge_grade_terms','filter_grade_submissions_pastyears']

# Cell
def proc_grade_dump(df_submissions,df_assignments,df_assignmentgroups,\
    df_enrolments,df_terms,df_courses,term1a_str,table_name='canvas_grade_dump_current'):
    "create the canvas grade `DataFrame` and write it to MS Sql Server"
    start_time=time.time()
    if table_name=='canvas_grade_dump_current':
        df_submissions=filter_grade_submissions(df_submissions,df_assignments,term1a_str)
    else:
        df_submissions=filter_grade_submissions_score(df_submissions)
    df_grade=merge_grade_assignments_and_groups(df_assignments,df_assignmentgroups)
    end_time=time.time()
    print(f'canvas grade dump size: {len(df_grade)}')
    print(f'canvas grade dupm time: {(end_time-start_time)/60} mins')
    df_grade=filter_grade_assignments(df_grade)
    df_grade=merge_grade_submissions(df_grade,df_submissions)
    end_time=time.time()
    print(f'canvas grade dump size: {len(df_grade)}')
    print(f'canvas grade dupm time: {(end_time-start_time)/60} mins')
    df_grade=merge_grade_courses(df_grade,df_courses)
    df_grade=merge_grade_enrollments(df_grade,df_enrolments)
    end_time=time.time()
    print(f'canvas grade dump size: {len(df_grade)}')
    print(f'canvas grade dupm time: {(end_time-start_time)/60} mins')
    df_grade=merge_grade_terms(df_grade,df_terms)

    df_grade=extract_grade_collumns(df_grade)
    return df_grade

def filter_grade_submissions(df_submissions,df_assignments,term1a_str):
    "return submissions `DataFrame` from last year term1a up till now and `score` column is not null"
    df_assignments=add_assignments_filterdate(df_assignments)
    df_assignments=filter_assignments(df_assignments,term1a_str)

    df_submissions=filter_submssions(df_submissions,df_assignments)

    condition_sub=df_submissions['score'].isnull()!=True
    df_submissions=df_submissions.loc[condition_sub,:]

    return df_submissions

def filter_grade_submissions_score(df_submissions):
    "return all submissions which `score` column is not null"
    condition_sub=df_submissions['score'].isnull()!=True
    df_submissions=df_submissions.loc[condition_sub,:]

    return df_submissions

def filter_grade_submissions_pastyears(df_submissions,df_assignments,term1a_str):
    "return all submissions which `score` column is not null and prior to last year `term1a_str`"
    df_assignments=add_assignments_filterdate(df_assignments)
    df_assignments=filter_assignments_pastyears(df_assignments,term1a_str)

    df_submissions=filter_submssions(df_submissions,df_assignments)

    condition_sub=df_submissions['score'].isnull()!=True
    df_submissions=df_submissions.loc[condition_sub,:]
    return df_submissions

def merge_grade_assignments_and_groups(df_assignments,df_assignmentgroups):
    "merge assignments and assignmentgroups"
    df_assignmentgroups['assignmentgroups_id']=df_assignmentgroups['id']
    df_assignments['assignment_name']=df_assignments['name']
    df_assignments['assessment']=df_assignments['name']
    df_assignments['is_pub']=df_assignments.loc[:,:].apply(lambda x: 'Pub' if x.published else '', axis=1)

    df_grade=pd.merge(df_assignments, df_assignmentgroups, how="left",\
                                         left_on=['assignment_group_id'],\
                                         right_on=['id'],suffixes=('_ASIGN','_ASIGRP'))
    df_grade['title_check_api']=df_grade['name_ASIGRP'].apply(lambda x: str(x)[0].upper() \
                                                if str(x)[0].upper() in {'A','E','L'} \
                                                else '')
    df_grade['assignment_type']=df_grade['title_check_api'].apply(lambda x: 'Assessed Coursework' \
                                                if str(x) == 'A' \
                                                else \
                                                  'Examination' if str(x)=='E'\
                                                    else \
                                                     'Learning Behaviour' if str(x)=='L'\
                                                        else 'Other')
    return df_grade

def filter_grade_assignments(df_grade):
    "filter assignment `DataFrame`"
    condition_assignment1=df_grade['title_check_api']!=''
    df_grade=df_grade.loc[condition_assignment1,:]

    condition_assignment21=(df_grade['group_weight']>0) & (df_grade['title_check_api']=='A')
    #condition_assignment22=(df_grade['group_weight']>0) & (df_grade['title_check_api']=='L')
    condition_assignment23=(df_grade['title_check_api']!='A') #& (df_grade['title_check_api']!='L')
    #condition_assignment2 = condition_assignment21 | condition_assignment22 | condition_assignment23
    condition_assignment2 = condition_assignment21 | condition_assignment23

    df_grade=df_grade.loc[condition_assignment2,:]

    condition_assignment3=df_grade['omit_from_final_grade']==False
    df_grade=df_grade.loc[condition_assignment3,:]

    condition_assignment4=(df_grade['points_possible']>0) & (df_grade['is_pub']=='Pub')
    df_grade=df_grade.loc[condition_assignment4,:]

    return df_grade

def merge_grade_submissions(df_grade,df_submissions):
    "add submissions `DataFrame` to grade `DataFrame`"
    df_grade=pd.merge(df_submissions, df_grade, how="left",\
                                         left_on=['assignment_id'],\
                                         right_on=['id_ASIGN'],suffixes=('_SUB','_GRADE'))
    df_grade['due2']=df_grade.loc[:,:].apply(lambda x: x.cached_due_date\
                                                     if x.due_at==None else x.due_at, axis=1)
    return df_grade

def merge_grade_courses(df_grade,df_courses):
    "add courses `DataFrame` to grade `DataFrame`"
    df_courses['course_name']=df_courses['name']

    df_grade=pd.merge(df_grade, df_courses, how="left",\
                                         left_on=['course_id'],\
                                         right_on=['id'],suffixes=('_GRADE','_COURS'))

    return df_grade

def merge_grade_enrollments(df_grade,df_enrolments):
    "add enrolments `DataFrame` to grade `DataFrame`"
    df_enrolments['enrollments_id']=df_enrolments['id']
    df_grade=pd.merge(df_grade, df_enrolments, how="left",\
                                         left_on=['course_id','user_id'],\
                                         right_on=['course_id','user_id'],suffixes=('_GRADE','_ENROL'))
    return df_grade

def extract_grade_collumns(df_grade):
    "remove the unnecessary columns to reduce the final grade `DataFrame` size"
    df_grade_new=df_grade[df_grade['sis_user_id'].isnull()!=True][['sis_user_id',\
                                                 'assignment_id',\
                                                 'course_id',\
                                                 'user_id',\
                                                 'course_name',\
                                                 'group_weight',\
                                                 'assignmentgroups_id',\
                                                 'enrollments_id',\
                                                 'score',\
                                                 'points_possible',\
                                                 'assignment_type',\
                                                 'due2',\
                                                 'assessment',\
                                                 'term_name']]
    return df_grade_new

def save_grade_to_db(df_grade, canvas_grade_conn_string, table_name='canvas_grade_dump_current',mode='replace'):
    "write the grade `DataFrame` to MS sql server"
    params = urllib.parse.quote_plus(canvas_grade_conn_string)
    engine = create_engine("mssql+pyodbc:///?odbc_connect=%s" % params, fast_executemany=True)
    df_grade.to_sql(table_name, con=engine, if_exists=mode)

def merge_grade_terms(df_grade, df_terms):
    "add terms `DataFrame` to grade `DataFrame`"
    df_terms['term_name']=df_terms['name']
    #print(f'len:{len(df_terms)}')
    df_grade=pd.merge(df_grade, df_terms, how="left",\
                                         left_on=['enrollment_term_id'],\
                                         right_on=['id'],suffixes=('_GRADE','_TERM'))
    return df_grade