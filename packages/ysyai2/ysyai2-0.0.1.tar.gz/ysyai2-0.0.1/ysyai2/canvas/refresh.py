# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_canvas.refresh.ipynb (unless otherwise specified).

__all__ = ['RefreshHandler', 'extract_payload', 'RefreshHandler']

# Cell
from ..utils import *

# Cell
def extract_payload(obj_val):
    if('payload' in obj_val):
        p=obj_val['payload'].split(":")
        p_dict={p[i]:p[i+1] for i in range(0,len(p),2)}
    else:
        p_dict=None
    return p_dict

# Cell
class RefreshHandler(Structure):
    _fields=['learn_data','cache','courseid_list']

    async def handle(self,api_type,api_string,obj_name,obj_val):
        methodname='do_'+api_type
        await getattr(self,methodname)(api_string,obj_name,obj_val)

    async def do_noids(self,api_string,obj_name,obj_val):
        r=await self.learn_data.parallel_query_data(api_url=api_string)
        self.cache.save(obj_name,r)

    async def do_ids(self,api_string,obj_name,obj_val):
        r=await self.learn_data.parallel_query_data(api_url=api_string,ids1=self.courseid_list,type='noraw')
        self.cache.save(obj_name,r)

    async def do_idspayload(self,api_string,obj_name,obj_val):
        #parse payload data which is separated by :
        p_dict=extract_payload(obj_val)

        r=await self.learn_data.parallel_query_data(api_url=api_string,ids1=self.courseid_list,payload=p_dict,type='noraw')
        self.cache.save(obj_name,r)


    async def do_idspayloadraw(self,api_string,obj_name,obj_val):
        #parse payload data which is separated by :
        p_dict=extract_payload(obj_val)
        r=await self.learn_data.parallel_query_data(api_url=api_string,ids1=self.courseid_list,payload=p_dict,type='raw')
        self.cache.save(obj_name,r)


    async def do_noidspayload(self,api_string,obj_name,obj_val):
        #parse payload data which is separated by :
        p_dict=extract_payload(obj_val)
        #r=await self.get_data_bigsize(api_string,ids1=courseid_list,payload=p_dict)
        r=await self.learn_data.parallel_query_data(api_url=api_string,ids1=[],payload=p_dict,type='noraw')
        #print(r)
        self.cache.save(obj_name,r)


    async def do_noidspayloadraw(self,api_string,obj_name,obj_val):
        #parse payload data which is separated by :
        p_dict=extract_payload(obj_val)
        #r=await self.get_data_bigsize(api_string,ids1=courseid_list,payload=p_dict)
        r=await self.learn_data.parallel_query_data(api_url=api_string,ids1=[],payload=p_dict,type='raw')
        self.cache.save(obj_name,r)